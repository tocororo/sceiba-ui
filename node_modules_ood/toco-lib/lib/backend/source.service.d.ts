import { HttpBackend, HttpClient, HttpParams } from "@angular/common/http";
import { OAuthStorage } from "angular-oauth2-oidc";
import { Observable } from "rxjs";
import { Environment } from "../core/env";
import { Response } from '../core/public-api';
import { Hit, SearchResponse, Source, SourceData, SourceVersion } from "../entities/public-api";
export declare class SourceService {
    private env;
    private http;
    private handler;
    private oauthStorage;
    private prefix;
    private httpOptions;
    private token;
    httpSearch: HttpClient;
    constructor(env: Environment, http: HttpClient, handler: HttpBackend, oauthStorage: OAuthStorage);
    getMySources(size?: number, page?: number, role?: string): Observable<Response<any>>;
    getMySourcesAllRoles(): Observable<Response<any>>;
    private adhocstringgify;
    private count_to_len;
    editSource(source: SourceVersion, uuid: any): Observable<Response<any>>;
    makeSourceAsApproved(source: SourceVersion, uuid: any): Observable<Response<any>>;
    makeSourceAsUnApproved(source: SourceVersion, uuid: any): Observable<Response<any>>;
    newSource(source: SourceVersion, uuid: any, role: any): Observable<Response<any>>;
    getIssnInfo(issn: any): Observable<Response<any>>;
    getSourcesByTermUUID(uuid: any): Observable<Response<any>>;
    getSourceVersions(uuid: any): Observable<Response<any>>;
    countSourcesByTerm(uuid: any, level?: number): Observable<Response<any>>;
    getSourceByUUID(uuid: any): Observable<Response<any>>;
    permissionGetSourceEditors(uuid: any): Observable<Response<any>>;
    permissionSetSourceEditor(uuid: any, user: any, allow?: boolean): Observable<Response<any>>;
    permissionGetSourceManagers(uuid: any): Observable<Response<any>>;
    permissionSetSourceManager(uuid: any, user: any, allow?: boolean): Observable<Response<any>>;
    permissionGetOrganizationManagers(uuid: any): Observable<Response<any>>;
    permissionSetOrganizationManager(uuid: any, user: any, allow?: boolean): Observable<Response<any>>;
    permissionGetTermManagers(uuid: any): Observable<Response<any>>;
    permissionSetTermManager(uuid: any, user: any, allow?: boolean): Observable<Response<any>>;
}
export declare class SourceServiceNoAuth {
    private env;
    private handler;
    http: HttpClient;
    constructor(env: Environment, handler: HttpBackend);
    getSourceByUUID(uuid: any): Observable<Hit<SourceData>>;
    getSourceByISSN(issn: any): Observable<Hit<SourceData>>;
    getSourceByPID(pid: any): Observable<Hit<SourceData>>;
    getSources(params: HttpParams): Observable<SearchResponse<Source>>;
    getSourcesStats(topOrgId: any): Observable<Response<any>>;
}
