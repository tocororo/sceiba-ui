import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, FormBuilder } from '@angular/forms';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Vocabulary } from '../../entities/public-api';
import { FormContainerComponent, PanelContent_Depr, FormContainerAction } from '../../forms/public-api';
import { TaxonomyService } from '../../backend/public-api';
import { OAuthStorage } from 'angular-oauth2-oidc';
export declare class VocabularyDialogComponent implements OnInit {
    private service;
    private _formBuilder;
    dialogRef: MatDialogRef<FormContainerComponent>;
    _snackBar: MatSnackBar;
    data: any;
    panels: PanelContent_Depr[];
    formGroup: FormGroup;
    action: FormContainerAction;
    actionLabel: string;
    hasService: boolean;
    vocab: Vocabulary;
    accept: any;
    constructor(service: TaxonomyService, _formBuilder: FormBuilder, dialogRef: MatDialogRef<FormContainerComponent>, _snackBar: MatSnackBar, data: any);
    ngOnInit(): void;
    onNoClick(): void;
    acceptAction(): void;
}
export declare class VocabulariesComponent implements OnInit, OnDestroy {
    private service;
    private oautheStorage;
    dialog: MatDialog;
    private _snackBar;
    private vocabulariesChangeObserver;
    vocabCtrl: FormControl;
    filteredVocabularies: Observable<Vocabulary[]>;
    selectedVocab: EventEmitter<Vocabulary>;
    currentVocab: Vocabulary;
    vocabularies: Vocabulary[];
    loading: boolean;
    emiterShowTerms: EventEmitter<Vocabulary>;
    constructor(service: TaxonomyService, oautheStorage: OAuthStorage, dialog: MatDialog, _snackBar: MatSnackBar);
    ngOnInit(): void;
    ngOnDestroy(): void;
    selectVocab(item: Vocabulary): void;
    loadVocabularies(): void;
    newVocab(): void;
    editVocab(vocab: any): void;
    private openVocabDialog;
    deleteVocab(vocab: Vocabulary): void;
    onSelectionChange(): void;
    getAuthenticatedUserPermissions(): void;
    hasPermission(permission: string, id?: string): boolean;
}
