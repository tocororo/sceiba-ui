import { OnInit, OnDestroy, OnChanges } from '@angular/core';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatDialog } from '@angular/material/dialog';
import { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Vocabulary, Term, TermNode } from '../../entities/public-api';
import { TaxonomyService } from '../../backend/public-api';
import { OAuthStorage } from 'angular-oauth2-oidc';
/**
 * Flattened tree node that has been created from a TermNode through the flattener. Flattened
 * nodes include level index and whether they can be expanded or not.
 */
export interface FlatTreeNode {
    name: string;
    level: number;
    expandable: boolean;
}
export declare class TermsComponent implements OnInit, OnChanges, OnDestroy {
    private service;
    private oautheStorage;
    dialog: MatDialog;
    private _snackBar;
    loading: Boolean;
    /** The TreeControl controls the expand/collapse state of tree nodes.  */
    treeControl: FlatTreeControl<FlatTreeNode>;
    /** The TreeFlattener is used to generate the flat list of items from hierarchical data. */
    treeFlattener: MatTreeFlattener<TermNode, FlatTreeNode>;
    /** The MatTreeFlatDataSource connects the control and flattener to provide data. */
    dataSource: MatTreeFlatDataSource<TermNode, FlatTreeNode>;
    private termsTreeObserver;
    private termChangeObserver;
    currentVocab: Vocabulary;
    constructor(service: TaxonomyService, oautheStorage: OAuthStorage, dialog: MatDialog, _snackBar: MatSnackBar);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    /** Transform the data to something the tree can read. */
    transformer(node: TermNode, level: number): {
        name: string;
        term: Term;
        level: number;
        expandable: boolean;
    };
    /** Get the level of the node */
    getLevel(node: FlatTreeNode): number;
    /** Get whether the node is expanded or not. */
    isExpandable(node: FlatTreeNode): boolean;
    /** Get whether the node has children or not. */
    hasChild(index: number, node: FlatTreeNode): boolean;
    /** Get the children for the node. */
    getChildren(node: TermNode): import("rxjs").Observable<TermNode[]>;
    addTerm(): void;
    editTerm(node: any): void;
    private openTermDialog;
    deleteTerm(node: TermNode): void;
    getAuthenticatedUserPermissions(): void;
    hasPermission(permission: string, id?: string): boolean;
}
