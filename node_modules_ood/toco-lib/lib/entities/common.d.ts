/*** La idea de esta clase es tener un deserializador. */
export declare class EntityBase extends Object {
    deepcopy(data: any, exclude?: string[]): void;
    private toBoolean;
}
/**
 * Created by Edel on 02/04/2018.
 */
export declare class Entity extends EntityBase {
    id: string;
    /** By default is FALSE. If TRUE, means that the entity does not have valid identifiers or has not been saved to the backend.  */
    isNew: boolean;
    identifiers: Array<Identifier>;
    getIdentifierValue(idtype: IdentifierSchemas): string;
    setIdentifierValue(idtype: IdentifierSchemas, value: string): void;
    constructor();
    /**
     * return JSON.stringify, using a function to exclude object fields id and uuid
     */
    entitystringify(): string;
}
/**
 * Entity for `Identifier` based on schema `organization-v1.0.0.json`.
 * Organization Identifier, different from GRID mapping.
 */
export declare class Identifier extends EntityBase {
    /**
     * Identifier type.
     */
    idtype: IdentifierSchemas;
    /**
     * Identifier value.
     */
    value: string;
}
export declare enum IdentifierSchemas {
    ark = "ark",
    arxiv = "arxiv",
    doi = "doi",
    bibcode = "bibcode",
    ean8 = "ean8",
    ean13 = "ean13",
    handle = "handle",
    isbn = "isbn",
    issn_p = "issn_p",
    issn_l = "issn_l",
    issn_e = "issn_e",
    issn_c = "issn_c",
    issn_o = "issn_o",
    istc = "istc",
    lsid = "lsid",
    pmid = "pmid",
    pmcid = "pmcid",
    purl = "purl",
    upc = "upc",
    url = "url",
    urn = "urn",
    orcid = "orcid",
    gnd = "gnd",
    ads = "ads",
    oai = "oai",
    prnps = "prnps",
    ernps = "ernps",
    oaiurl = "oaiurl",
    grid = "grid",
    wkdata = "wkdata",
    ror = "ror",
    isni = "isni",
    fudref = "fudref",
    orgref = "orgref",
    reup = "reup"
}
export declare class Links extends EntityBase {
    self: string;
    next: string;
    prev: string;
}
export declare class AggrBucket extends EntityBase {
    doc_count: number;
    key: string;
}
declare class AggrMeta extends EntityBase {
    order: number;
    title: string;
}
export declare class Aggr extends EntityBase {
    buckets: Array<AggrBucket>;
    meta?: AggrMeta;
    doc_count_error_upper_bound: number;
    sum_other_doc_count: number;
}
export declare class Hit<T> extends EntityBase {
    id: string;
    created: string;
    updated: string;
    links: Links;
    metadata: T;
    revision: number;
    revisions?: Array<Hit<T>>;
}
export declare class HitList<T> extends EntityBase {
    hits: Hit<T>[];
    total: 0;
}
export declare class SearchResponse<T> extends EntityBase {
    aggregations: {
        [id: string]: Aggr;
    };
    hits: HitList<T>;
    links: Links;
}
export {};
