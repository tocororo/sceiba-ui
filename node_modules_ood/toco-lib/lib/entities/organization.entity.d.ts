import { EntityBase, Entity, Identifier } from './common';
export declare const OrganizationRelationships: {
    PARENT: {
        label: string;
        value: string;
    };
    CHILD: {
        label: string;
        value: string;
    };
    RELATED: {
        label: string;
        value: string;
    };
};
/**
 * Entity for `LabelDiffLang` based on schema `organization-v1.0.0.json`.
 * Name of the institute in different language.
 */
export declare class LabelDiffLang extends EntityBase {
    /**
     * Institute name in a language variant.
     */
    label: string;
    /**
     * ISO-639-1 language code.
     */
    iso639: string;
}
/**
 * Entity for `Redirected` based on schema `organization-v1.0.0.json`.
 * Which organization redirects.
 */
export declare class Redirected extends EntityBase {
    /**
      * Institute name in a language variant.
    */
    idtype: string;
    /**
      * ISO-639-1 language code.
    */
    value: string;
}
/**
 * Entity for `Relationship` based on schema `organization-v1.0.0.json`.
 * A relationship the institute has to other.
 */
export declare class Relationship extends Entity {
    /**
     * Organization Identifiers, different from GRID mapping.
     */
    identifiers: Array<Identifier>;
    /**
     * Relationship type.
     */
    type: string;
    /**
     * Name of the related institute.
     */
    label: string;
}
/**
 * Entity for `GeoNamesAdmin` based on schema `organization-v1.0.0.json`.
 */
export declare class GeoNamesAdmin extends EntityBase {
    /**
     * ID in the region format.
     */
    id: string;
    /**
     * Name of the region.
     */
    name: string;
    /**
     * Preferred ASCII encoded name for the region.
     */
    ascii_name: string;
}
/**
 * Entity for `GeoNamesCity` based on schema `organization-v1.0.0.json`.
 * The linked GeoNames data.
 */
export declare class GeoNamesCity extends EntityBase {
    /**
     * GeoNames ID.
     */
    id: number;
    /**
     * Name of the city.
     */
    city: string;
    /**
     * geonames_admin1.
     */
    geonames_admin1: GeoNamesAdmin;
    /**
     * geonames_admin2.
     */
    geonames_admin2?: GeoNamesAdmin;
    /**
     * nuts_level1.
     */
    nuts_level1: GeoNamesAdmin;
    /**
     * nuts_level2.
     */
    nuts_level2?: GeoNamesAdmin;
    /**
     * nuts_level3.
     */
    nuts_level3?: GeoNamesAdmin;
}
/**
 * Entity for `Address` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export declare class Address extends EntityBase {
    /**
     * Name of the city.
     */
    city: string;
    /**
     * Name of the country.
     */
    country: string;
    /**
     * ISO 3166-1 alpha-2 code of the country.
     */
    country_code: string;
    /**
     * Latitute of the institute.
     */
    lat: number;
    /**
     * Longitude of the institute.
     */
    lng: number;
    /**
     * First line of the address.
     */
    line_1: string;
    /**
     * Second line of the address.
     */
    line_2?: string;
    /**
     * Third line of the address.
     */
    line_3?: string;
    /**
     * Postcode/zipcode.
     */
    postcode: string;
    /**
     * If there is more than one address, identifies the main location.
     * This address identifies the main location.
     */
    primary: boolean;
    /**
     * Name of the state/region.
     */
    state: string;
    /**
     * ISO 3166-2 region code.
     */
    state_code: string;
    /**
     * Name of the municipality.
     */
    municipality: string;
    /**
     * dpa municipality code.
     */
    municipality_dpa: string;
    /**
     * Linked GeoNames data.
     */
    geonames_city: GeoNamesCity;
}
/**
 * Entity for `RedirectPropertiesIdtype` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export declare class RedirectPropertiesIdtype extends EntityBase {
    /**
     * description for RedirectPropertiesIdtype.
     */
    description: string;
    /**
     * type of RedirectPropertiesIdtype.
     */
    type: string;
    /**
     * enum for RedirectPropertiesIdtype.
     */
    enum: Array<string>;
}
/**
 * Entity for `RedirectProperties` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export declare class RedirectProperties extends EntityBase {
    /**
     * Name of the city.
     */
    idtype: RedirectPropertiesIdtype;
    /**
     * Name of the country.
     */
    value: {
        type: string;
    };
}
/**
 * Entity for `Redirect` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export declare class Redirect extends EntityBase {
    /**
     * Type of redirect.
     */
    type: string;
    /**
     * Show additional properties for redirect if true.
     */
    additionalProperties: boolean;
    /**
     * Properties for redirect.
     */
    properties: RedirectProperties;
}
/**
 * Entity for `Organizations` based on schema `organization-v1.0.0.json`.
 */
export declare class Organization extends Entity {
    /**
     * Organization Identifiers, different from GRID mapping.
     */
    identifiers: Array<Identifier>;
    /**
     * The name typically used to refer to the institute.
     */
    name: string;
    /**
     * For an active institute, this is always set to active.
     */
    status: string;
    /**
     * The list of other names the institute is known as.
     */
    aliases: Array<string>;
    /**
     * The list of short acronyms the institute is known as (e.g. MRC for the Medical Research Council).
     */
    acronyms: Array<string>;
    /**
     * The list of types describing the institute.
     */
    types: Array<string>;
    /**
     * URL of the wikipedia page for the institute.
     */
    wikipedia_url: string;
    /**
     * Contact email address for the institute.
     */
    email_address: string;
    /**
     * The list of IP addresses known to belong to the institute.
     */
    ip_addresses: Array<string>;
    /**
     * Year the institute opened, CE.
     */
    established: number;
    /**
     * Year the institute registered on ONEI.
     */
    onei_registry: number;
    /**
     * If its able for exporting to international organizations systems.
     */
    exportable: boolean;
    /**
     * The list of URLs linking to things like the homepage for the institute.
     */
    links: Array<string>;
    /**
     * Name of the institute in different languages.
     */
    labels: Array<LabelDiffLang>;
    /**
     * Any relationships the institute has to others.
     */
    relationships: Array<Relationship>;
    /**
     * An array of addresses associated with the institute.
     */
    addresses: Array<Address>;
    /**
     * An array of addresses associated with the institute.
     */
    redirect: Redirect;
}
