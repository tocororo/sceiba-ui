import { HttpRequest, HttpResponse } from '@angular/common/http';
/**
 * Returns a constant that is used in the `HttpHeaders` to do request although the request exists in cache.
 */
export declare const REFRESH_X_CACHE: string;
/**
 * Represents the base abstract class for all services that implement the cachable URL request.
 * See `CachableUrl` service.
 */
export declare abstract class Cachable {
    /**
     * Returns a number greater than zero if the specified request is cachable;
     * that number represents the maximum cache age in milliseconds.
     * Return zero if the specified request is NOT cachable.
     * @param req The outgoing request object to handle.
     */
    abstract isCachable(req: HttpRequest<any>): number;
}
/**
 * Represents the base abstract class for all services that implement the request cache.
 * See `RequestCacheDifferentTimeWithMap` service.
 */
export declare abstract class RequestCache {
    abstract get(req: HttpRequest<any>): HttpResponse<any> | undefined;
    abstract set(req: HttpRequest<any>, maxAgeInCache: number, response: HttpResponse<any>): void;
}
