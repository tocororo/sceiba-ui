import { OnInit } from "@angular/core";
import { FlatTreeControl } from "@angular/cdk/tree";
import { MatTreeFlattener, MatTreeFlatDataSource } from "@angular/material";
import { SelectionModel } from "@angular/cdk/collections";
import { SelectOption } from '../../input/select/select-input.component';
import { InputControl } from '../../input/input.control';
export interface SelectOptionNode {
    element: SelectOption;
    parent?: SelectOptionNode;
    children?: SelectOptionNode[];
}
export interface FlatTreeNode {
    name: string;
    level: number;
    expandable: boolean;
    element: SelectOption;
}
export declare class SelectTreeComponent extends InputControl implements OnInit {
    data: SelectOptionNode[];
    treeControl: FlatTreeControl<FlatTreeNode>;
    treeFlattener: MatTreeFlattener<SelectOptionNode, FlatTreeNode>;
    dataSource: MatTreeFlatDataSource<SelectOptionNode, FlatTreeNode>;
    checklistSelection: SelectionModel<FlatTreeNode>;
    constructor();
    ngOnInit(): void;
    remove_component(): void;
    onChange(): void;
    emitSelection(): void;
    /** Transform the data to something the tree can read. */
    transformer(node: SelectOptionNode, level: number): {
        name: string;
        level: number;
        expandable: boolean;
        element: SelectOption;
    };
    /** Get the level of the node */
    getLevel(node: FlatTreeNode): number;
    /** Get whether the node is expanded or not. */
    isExpandable(node: FlatTreeNode): boolean;
    /** Get whether the node has children or not. */
    hasChild(index: number, node: FlatTreeNode): boolean;
    /** Get the children for the node. */
    getChildren(node: SelectOptionNode): import("rxjs").Observable<SelectOptionNode[]>;
    /** Whether all the descendants of the node are selected. */
    descendantsAllSelected(node: FlatTreeNode): boolean;
    /** Whether part of the descendants are selected */
    descendantsPartiallySelected(node: FlatTreeNode): boolean;
    /** Select/deselect all the descendants node */
    itemSelectionToggle(node: FlatTreeNode): void;
    /** Check all the parents to see if they changed */
    leafItemSelectionToggle(node: FlatTreeNode): void;
    checkAllParentsSelection(node: FlatTreeNode): void;
    /** Check root node checked state and change it accordingly */
    checkRootNodeSelection(node: FlatTreeNode): void;
    getParentNode(node: FlatTreeNode): FlatTreeNode | null;
}
