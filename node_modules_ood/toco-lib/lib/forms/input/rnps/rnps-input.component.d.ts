import { OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { InputControl } from '../input.control';
import { ValidatorArguments } from '../../form-field.control';
/**
 * Represents a control that allows the writing of an RNPS.
 * An RNPS (Registro Nacional de Publicaciones Seriadas) is an 4-digit code used to control
 * the serial publications authorized to be edited, printed and circulated in Cuba.
 * For more information follow the link: http://www.seriadas.cult.cu/.
 * It uses the `RnpsValue.rnps_Abbreviation` as a label if the `content.label` is not specified.
 * It uses the `RnpsValue.rnps_Placeholder` as a placeholder if the `content.placeholder` is not specified.
 */
export declare class InputRnpsComponent extends InputControl implements OnInit {
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputRnpsComponent`'s `content.formControl` value by default.
     * In this case, the `validatorArguments` argument is always `undefined`.
     */
    static getFormControlByDefault(validatorArguments?: ValidatorArguments): FormControl;
    /**
     * It is used by `handleSpecificInput` method.
     */
    private _codeOldValue;
    constructor();
    ngOnInit(): void;
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     */
    getErrorMessage(): string;
    /**
     * Handler method that is called by the internal logic when the control's value changes in the UI.
     * This method contains the specific handling of the input that the derived class wants to do.
     */
    handleSpecificInput(): void;
}
