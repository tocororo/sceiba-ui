import { OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { ValidatorArguments } from '../../form-field.control';
import { InputControl } from '../input.control';
/**
 * Represents a control that allows the writing of a number.
 */
export declare class InputNumberComponent extends InputControl implements OnInit {
    private _transServ;
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputNumberComponent`'s `content.formControl` value by default.
     * @param validatorArguments A collection of key/value elements, where the key is the validator name
     * and the value is the value that the validator needs to check.
     * In the `validatorArguments` argument, you can specify an object with the minimum and maximum possible
     * values for the number that holds the control.
     * For example: If the minimum possible value is 0 and maximum is 50, you can call the `getFormControlByDefault`
     * method in this way:
     * InputNumberComponent.getFormControlByDefault({ 'min': 0, 'max': 50 });
     */
    static getFormControlByDefault(validatorArguments?: ValidatorArguments): FormControl;
    protected static toco_ng_Error_Msg_Num_Inval: string;
    protected static toco_ng_Error_Msg_Num_Minimo: string;
    protected static toco_ng_Error_Msg_Num_Maximo: string;
    constructor(_transServ: TranslateService);
    ngOnInit(): void;
    /**
     * Sets the new language.
     * @param transServ The `TranslateService` instance injected.
     */
    protected setNewLanguage(transServ: TranslateService): void;
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     */
    getErrorMessage(): string;
}
