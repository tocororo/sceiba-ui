import { OnInit, OnChanges } from "@angular/core";
import { ContainerContent, ContainerControl } from "../container.control";
/**
 * This interface is deprecated.
 */
export interface FormContainerAction {
    doit(data: any): void;
}
/**
 * This interface is deprecated.
 * An interface that represents the content of an expansion control.
 */
export interface PanelContent_Depr extends ContainerContent {
    /**
     * Returns the panel's title.
     */
    title: string;
    /**
     * Returns the panel's description.
     */
    description: string;
    /**
     * Returns the panel's icon name.
     */
    iconName: string;
    /**
     * Returns the action and action labels for each panel.
     */
    action?: FormContainerAction;
    actionLabel?: string;
    /**
     * Returns true is the panel is open; otherwise, false.
     */
    open?: boolean;
}
/**
 * This component is deprecated.
 * Represents a control that contains a list of panels and sends that information to the server.
 */
export declare class FormContainerComponent extends ContainerControl implements OnInit, OnChanges {
    /**
     * Input field that contains the content of this class. The array of panels to show.
     */
    panelsContent: PanelContent_Depr[];
    useAccordion: boolean;
    useContainer: boolean;
    actionButtonIsStepperNext: boolean;
    action: FormContainerAction;
    /**
     * An string that represents the action label of the last panel.
     */
    actionLabel: string;
    deleteValuesAfterAction: boolean;
    /**
     * The current expanded panel position.
     */
    step: number;
    constructor();
    private setFormGroupToPanels;
    ngOnInit(): void;
    ngOnChanges(): void;
    /**
     * Sets the new expanded panel position.
     * @param newStep The new position.
     */
    setStep(newStep: number): void;
    /**
     * Sets the expanded panel position to the next position.
     */
    nextStep(): void;
    /**
     * Sets the expanded panel position to the previous position.
     */
    prevStep(): void;
    /**
     * Sends data to the server. Collects all added information from the component.
     * Creates a JSON object based on `form.name` and `form.value` fields.
     */
    doAction(): void;
}
