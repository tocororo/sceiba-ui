/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/catalog.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { HttpService } from '../core/public-api';
import { Environment } from '../core/public-api';
export class CatalogService extends HttpService {
    /**
     * @param {?} env
     * @param {?} http
     */
    constructor(env, http) {
        super(http);
        this.env = env;
        this.http = http;
    }
    /**
     * @param {?} count
     * @param {?} page
     * @param {?} parameters
     * @return {?}
     */
    getJournalsPage(count, page, parameters) {
        try {
            /** @type {?} */
            let params = new HttpParams();
            if (parameters) {
                for (let i = 0; i < parameters.length; i++) {
                    params = params.set(parameters[i].field, parameters[i].value);
                }
            }
            /** @type {?} */
            const options = {
                params: params.set('size', count.toString(10)).set('page', (page).toString(10))
            };
            return this.http.get(this.env.sceibaApi + 'source/journals', options);
        }
        catch (error) {
        }
    }
    /**
     * @return {?}
     */
    getJournalsCount() {
        try {
            return this.http.get(this.env.sceibaApi + 'source/count');
        }
        catch (error) {
        }
    }
    /**
     * @return {?}
     */
    getJournalsVocab() {
        return this.http.get(this.env.sceibaApi + 'taxonomy/vocabulary/list');
    }
    /**
     * @param {?} vocabId
     * @return {?}
     */
    getTerminosByVocab(vocabId) {
        try {
            return this.http.get(this.env.sceibaApi + 'taxonomy/term/list/' + vocabId);
        }
        catch (error) {
        }
    }
    //   getPeople():Observable<People_Response>{
    //     return this.http.get<People_Response>(this.dominio);
    //   }
    //   getPeopleById(id: number):Observable<Person_Response>{
    //         return this.http.get<Person_Response>(this.dominio+'/'+id);
    //     }
    //   getPeoplepaginator(inicio: number, cant: number):Observable<People_Response>{
    //       return this.http.get<People_Response>(this.dominio+'/'+inicio+'/'+cant);
    //   }
    //     addPeople(body):Observable<Response>{
    //       return this.http.post<Response>(this.dominio,body);
    //   }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getSourceByUUID(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + 'source/' + uuid;
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getSourcesOrgAggregation(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + 'source/aggs/org/' + uuid;
        return this.http.get(req);
    }
}
CatalogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CatalogService.ctorParameters = () => [
    { type: Environment },
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CatalogService.prototype.env;
    /**
     * @type {?}
     * @protected
     */
    CatalogService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0YWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvYmFja2VuZC9jYXRhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRzlELE9BQU8sRUFBRSxXQUFXLEVBQVksTUFBTSxvQkFBb0IsQ0FBQztBQUczRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHakQsTUFBTSxPQUFPLGNBQWUsU0FBUSxXQUFXOzs7OztJQUUzQyxZQUFvQixHQUFnQixFQUFZLElBQWdCO1FBQzVELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQURJLFFBQUcsR0FBSCxHQUFHLENBQWE7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFZO0lBRWhFLENBQUM7Ozs7Ozs7SUFFRCxlQUFlLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxVQUFnQztRQUN6RSxJQUFJOztnQkFDSSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDN0IsSUFBSSxVQUFVLEVBQUU7Z0JBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3hDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO2lCQUNoRTthQUNKOztrQkFDSyxPQUFPLEdBQUc7Z0JBQ1osTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2xGO1lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZ0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDeEY7UUFDRCxPQUFPLEtBQUssRUFBRTtTQUNiO0lBQ0wsQ0FBQzs7OztJQUVELGdCQUFnQjtRQUNaLElBQUk7WUFDQSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsQ0FBQztTQUM1RTtRQUFDLE9BQU8sS0FBSyxFQUFFO1NBRWY7SUFDTCxDQUFDOzs7O0lBRUQsZ0JBQWdCO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZ0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsMEJBQTBCLENBQUMsQ0FBQztJQUN6RixDQUFDOzs7OztJQUNELGtCQUFrQixDQUFDLE9BQWU7UUFDOUIsSUFBSTtZQUNBLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcscUJBQXFCLEdBQUcsT0FBTyxDQUFDLENBQUM7U0FDbkY7UUFBQyxPQUFPLEtBQUssRUFBRTtTQUVmO0lBQ0wsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFtQkQsZUFBZSxDQUFDLElBQUk7O2NBQ1YsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsR0FBRyxJQUFJO1FBQ2pELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWdCLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBQ0Qsd0JBQXdCLENBQUMsSUFBSTs7Y0FDckIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLGtCQUFrQixHQUFHLElBQUk7UUFDMUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZ0IsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7O1lBbkVKLFVBQVU7Ozs7WUFGRixXQUFXO1lBTlgsVUFBVTs7Ozs7OztJQVdILDZCQUF3Qjs7Ozs7SUFBRSw4QkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMjAgVW5pdmVyc2lkYWQgZGUgUGluYXIgZGVsIFLDrW8gXCJIZXJtYW5vcyBTYcOteiBNb250ZXMgZGUgT2NhXCJcbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEh0dHBTZXJ2aWNlLCBSZXNwb25zZSB9IGZyb20gJy4uL2NvcmUvcHVibGljLWFwaSc7XG5pbXBvcnQgeyBGaWx0ZXJIdHRwTWFwIH0gZnJvbSAnLi4vZmlsdGVycy9wdWJsaWMtYXBpJztcblxuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuLi9jb3JlL3B1YmxpYy1hcGknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2F0YWxvZ1NlcnZpY2UgZXh0ZW5kcyBIdHRwU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVudjogRW52aXJvbm1lbnQsIHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgICAgIHN1cGVyKGh0dHApO1xuICAgIH1cblxuICAgIGdldEpvdXJuYWxzUGFnZShjb3VudDogbnVtYmVyLCBwYWdlOiBudW1iZXIsIHBhcmFtZXRlcnM6IEFycmF5PEZpbHRlckh0dHBNYXA+KTogT2JzZXJ2YWJsZTxSZXNwb25zZTxhbnk+PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQocGFyYW1ldGVyc1tpXS5maWVsZCwgcGFyYW1ldGVyc1tpXS52YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLnNldCgnc2l6ZScsIGNvdW50LnRvU3RyaW5nKDEwKSkuc2V0KCdwYWdlJywgKHBhZ2UpLnRvU3RyaW5nKDEwKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxSZXNwb25zZTxhbnk+Pih0aGlzLmVudi5zY2VpYmFBcGkgKyAnc291cmNlL2pvdXJuYWxzJywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRKb3VybmFsc0NvdW50KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxSZXNwb25zZTxhbnk+Pih0aGlzLmVudi5zY2VpYmFBcGkgKyAnc291cmNlL2NvdW50Jyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEpvdXJuYWxzVm9jYWIoKTogT2JzZXJ2YWJsZTxSZXNwb25zZTxhbnk+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFJlc3BvbnNlPGFueT4+KHRoaXMuZW52LnNjZWliYUFwaSArICd0YXhvbm9teS92b2NhYnVsYXJ5L2xpc3QnKTtcbiAgICB9XG4gICAgZ2V0VGVybWlub3NCeVZvY2FiKHZvY2FiSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnk+KHRoaXMuZW52LnNjZWliYUFwaSArICd0YXhvbm9teS90ZXJtL2xpc3QvJyArIHZvY2FiSWQpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAgIGdldFBlb3BsZSgpOk9ic2VydmFibGU8UGVvcGxlX1Jlc3BvbnNlPntcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UGVvcGxlX1Jlc3BvbnNlPih0aGlzLmRvbWluaW8pO1xuXG4gICAgLy8gICB9XG4gICAgLy8gICBnZXRQZW9wbGVCeUlkKGlkOiBudW1iZXIpOk9ic2VydmFibGU8UGVyc29uX1Jlc3BvbnNlPntcbiAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBlcnNvbl9SZXNwb25zZT4odGhpcy5kb21pbmlvKycvJytpZCk7XG5cbiAgICAvLyAgICAgfVxuXG4gICAgLy8gICBnZXRQZW9wbGVwYWdpbmF0b3IoaW5pY2lvOiBudW1iZXIsIGNhbnQ6IG51bWJlcik6T2JzZXJ2YWJsZTxQZW9wbGVfUmVzcG9uc2U+e1xuICAgIC8vICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBlb3BsZV9SZXNwb25zZT4odGhpcy5kb21pbmlvKycvJytpbmljaW8rJy8nK2NhbnQpO1xuXG4gICAgLy8gICB9XG4gICAgLy8gICAgIGFkZFBlb3BsZShib2R5KTpPYnNlcnZhYmxlPFJlc3BvbnNlPntcbiAgICAvLyAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8UmVzcG9uc2U+KHRoaXMuZG9taW5pbyxib2R5KTtcbiAgICAvLyAgIH1cblxuICAgIGdldFNvdXJjZUJ5VVVJRCh1dWlkKTogT2JzZXJ2YWJsZTxSZXNwb25zZTxhbnk+PiB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuZW52LnNjZWliYUFwaSArICdzb3VyY2UvJyArIHV1aWQ7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFJlc3BvbnNlPGFueT4+KHJlcSk7XG4gICAgfVxuICAgIGdldFNvdXJjZXNPcmdBZ2dyZWdhdGlvbih1dWlkKTogT2JzZXJ2YWJsZTxSZXNwb25zZTxhbnk+PiB7XG4gICAgICBjb25zdCByZXEgPSB0aGlzLmVudi5zY2VpYmFBcGkgKyAnc291cmNlL2FnZ3Mvb3JnLycgKyB1dWlkO1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UmVzcG9uc2U8YW55Pj4ocmVxKTtcbiAgICB9XG59XG4iXX0=