/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/taxonomy.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { OAuthStorage } from 'angular-oauth2-oidc';
import { Environment } from '../core/public-api';
// TODO: Poner todos los tipos de datos de retorno de Response.
// No puede haber en ningun servicio del backend un Response<any>
export class TaxonomyService {
    /**
     * @param {?} env
     * @param {?} http
     * @param {?} oauthStorage
     */
    constructor(env, http, oauthStorage) {
        this.env = env;
        this.http = http;
        this.oauthStorage = oauthStorage;
        this.prefix = 'vocabularies';
        this.httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        this.token = '';
        this.token = this.oauthStorage.getItem('access_token');
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getVocabulary(id) {
        /** @type {?} */
        let req = this.env.sceibaApi + this.prefix + '/vocabulary/' + id;
        return this.http.get(req);
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getTermListByIDs(ids) {
        /** @type {?} */
        let p = '';
        ids.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => p = p + n.toString(10) + ','));
        p = p.substring(0, p.length - 1);
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const options = {
            params: params.set('ids', p)
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/term/inlist';
        return this.http.get(req, options);
    }
    /**
     * @param {?} termID
     * @param {?=} level
     * @return {?}
     */
    getTermByID(termID, level = 10) {
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const options = {
            params: params.set('level', level.toString(10))
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/term/id/' + termID;
        return this.http.get(req, options);
    }
    /**
     * @param {?} termUUID
     * @param {?=} level
     * @return {?}
     */
    getTermByUUID(termUUID, level = 10) {
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const options = {
            params: params.set('level', level.toString(10))
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/term/' + termUUID;
        return this.http.get(req, options);
    }
    /**
     * @param {?} vocabId
     * @param {?=} level
     * @return {?}
     */
    getTermsTreeByVocab(vocabId, level = 10) {
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const options = {
            params: params.set('level', level.toString(10))
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/term/tree/' + vocabId;
        return this.http.get(req, options);
    }
    /**
     * @param {?} vocab
     * @return {?}
     */
    newVocabulary(vocab) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/vocabulary/new', vocab.entitystringify(), this.httpOptions);
    }
    /**
     * @param {?} vocab
     * @return {?}
     */
    editVocabulary(vocab) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/vocabulary/edit/' + vocab.id, vocab.entitystringify(), this.httpOptions);
    }
    /**
     * @return {?}
     */
    getVocabularies() {
        return this.http.get(this.env.sceibaApi + this.prefix + '/vocabulary/list');
    }
    /**
     * @param {?} term
     * @return {?}
     */
    newTerm(term) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/term/new', term.entitystringify(), this.httpOptions);
    }
    /**
     * @param {?} term
     * @return {?}
     */
    editTerm(term) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/term/edit/' + term.uuid, term.entitystringify(), this.httpOptions);
    }
    /**
     * @return {?}
     */
    getCurrentUserPermissions() {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/user/permissions';
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.get(req, this.httpOptions);
    }
}
TaxonomyService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaxonomyService.ctorParameters = () => [
    { type: Environment },
    { type: HttpClient },
    { type: OAuthStorage }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.httpOptions;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.token;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.env;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.oauthStorage;
}
//# sourceMappingURL=data:application/json;base64,