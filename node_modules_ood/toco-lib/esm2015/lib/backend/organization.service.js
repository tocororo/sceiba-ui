/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/organization.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpBackend, HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { tap } from 'rxjs/operators';
import { Environment, MessageService } from '../core/public-api';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../core/services/message.service";
/**
 * The URL to the root api.
 * @type {?}
 */
export const ROOT_API = 'api';
/**
 * The object with the URLs to the endpoint apis.
 * @type {?}
 */
export const ENDPOINT_APIS = {
    organizations: ROOT_API + '/organizations',
};
/**
 * The backend service in order to communicate with a remote server over HTTP.
 */
export class OrganizationService {
    /**
     * @param {?} _http
     * @param {?} _messageService
     */
    constructor(_http, _messageService) {
        this._http = _http;
        this._messageService = _messageService;
        /**
         * The `httpOptions` object that contains the headers and will be passed to every `HttpClient` save method.
         */
        this._httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
                'Authorization': 'my-auth-token'
            })
        };
    }
    /**
     * Gets data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    get(url, optionalResult) {
        return this._http.get(url).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.log(`fetched data from '${url}'`))));
    }
    /**
     * Gets data from the server that meets the specified `query`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} query The query to search.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    search(url, query, optionalResult) {
        return this._http.get(`${url}/?${query}`).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.log(`searched '${query}' in '${url}'`))));
    }
    /**
     * Adds `data` to the server. Expects the server to generate an `id` for the new `data`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} data The data to add.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    add(url, data, optionalResult) {
        /* Expects the server to generate an `id` for the new `data`. */
        return this._http.post(url, data, this._httpOptions).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.log(`added ${data} to '${url}'`))));
    }
    /**
     * Updates `data` on the server. Returns an Observable of that `data` if the `data` is inserted (does
     * not exist) on the server; otherwise, returns an Observable of null (if the `data` is only updated).
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} data The data to update.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    update(url, data, optionalResult) {
        return this._http.put(url, data, this._httpOptions).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.log(`updated ${data} to '${url}'`))));
    }
    /**
     * Deletes data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} id The unique identifier that identifies the data to delete.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    delete(url, id, optionalResult) {
        return this._http.delete(`${url}/${id}`, this._httpOptions).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.log(`deleted data with id = ${id} from '${url}'`))));
    }
    /**
     * Logs an `OrganizationService` message with the `MessageService`.
     * @private
     * @param {?} message The message to log.
     * @return {?}
     */
    log(message) {
        this._messageService.add(`${OrganizationService.name}: ${message}.`);
    }
}
OrganizationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
OrganizationService.ctorParameters = () => [
    { type: HttpClient },
    { type: MessageService }
];
/** @nocollapse */ OrganizationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OrganizationService_Factory() { return new OrganizationService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService)); }, token: OrganizationService, providedIn: "root" });
if (false) {
    /**
     * The `httpOptions` object that contains the headers and will be passed to every `HttpClient` save method.
     * @type {?}
     * @private
     */
    OrganizationService.prototype._httpOptions;
    /**
     * @type {?}
     * @private
     */
    OrganizationService.prototype._http;
    /**
     * @type {?}
     * @private
     */
    OrganizationService.prototype._messageService;
}
export class OrganizationServiceNoAuth {
    /**
     * @param {?} env
     * @param {?} handler
     */
    constructor(env, handler) {
        this.env = env;
        this.handler = handler;
        this.path = 'organizations';
        this.http = new HttpClient(handler);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getOrganizationByUUID(uuid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        const req = this.env.sceibaApi + "/pid/organization/" + uuid;
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @param {?=} relType
     * @return {?}
     */
    getOrganizationRelationships(uuid, relType = null) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.path + '/' + uuid + '/relationships';
        if (relType != null) {
            /** @type {?} */
            let params = new HttpParams();
            params = params.set('type', relType);
            /** @type {?} */
            const options = {
                params: params,
            };
            return this.http.get(req, options);
        }
        else {
            return this.http.get(req);
        }
    }
    /**
     * @param {?} pid
     * @return {?}
     */
    getOrganizationByPID(pid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        let params = new HttpParams();
        params = params.set('value', pid);
        /** @type {?} */
        const options = {
            params: params,
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.path + '/pid';
        return this.http.get(req, options);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    getOrganizations(params) {
        /** @type {?} */
        const options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        const req = this.env.sceibaApi + 'search/' + this.path;
        console.log(req);
        return this.http.get(req, options);
    }
}
OrganizationServiceNoAuth.decorators = [
    { type: Injectable }
];
/** @nocollapse */
OrganizationServiceNoAuth.ctorParameters = () => [
    { type: Environment },
    { type: HttpBackend }
];
if (false) {
    /** @type {?} */
    OrganizationServiceNoAuth.prototype.http;
    /** @type {?} */
    OrganizationServiceNoAuth.prototype.path;
    /**
     * @type {?}
     * @private
     */
    OrganizationServiceNoAuth.prototype.env;
    /**
     * @type {?}
     * @private
     */
    OrganizationServiceNoAuth.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,