/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/source.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { HttpBackend, HttpClient, HttpHeaders, HttpParams } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { OAuthStorage } from "angular-oauth2-oidc";
import { Environment } from "../core/env";
export class SourceService {
    /**
     * @param {?} env
     * @param {?} http
     * @param {?} handler
     * @param {?} oauthStorage
     */
    constructor(env, http, handler, oauthStorage) {
        this.env = env;
        this.http = http;
        this.handler = handler;
        this.oauthStorage = oauthStorage;
        this.prefix = "source";
        this.httpOptions = {
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                Authorization: "Bearer ",
            }),
        };
        this.token = "";
        this.token = this.oauthStorage.getItem("access_token");
        // TODO: hay una mejor manera de hacer esto, creando diferentes y propios HttpClients que
        // tengan un comportamiento especifico (eg: sin/con autenticacion)
        // ver: https://github.com/angular/angular/issues/20203#issuecomment-369754776
        // otra solucion seria pasar parametros especiales como {ignore_auth = true} y que el
        // interceptor actue en consecuencia... .
        // https://github.com/angular/angular/issues/18155#issuecomment-382438006
        this.httpSearch = new HttpClient(handler);
    }
    /**
     * @param {?=} size
     * @param {?=} page
     * @param {?=} role
     * @return {?}
     */
    getMySources(size = 10, page = 1, role = 'manager') {
        /** @type {?} */
        let params = new HttpParams();
        params = params.set("size", size.toString(10));
        params = params.set("page", page.toString(10));
        /** @type {?} */
        const options = {
            params: params,
        };
        // this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/me/" + role + "/ALL";
        return this.http.get(req, options);
    }
    /**
     * @return {?}
     */
    getMySourcesAllRoles() {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/me/ALL";
        return this.http.get(req);
    }
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    adhocstringgify(source) {
        /** @type {?} */
        let orgs = JSON.stringify(source.data.organizations);
        console.log("-------------------", orgs);
        /** @type {?} */
        let all = source.entitystringify();
        console.log("-------------------", all);
        /** @type {?} */
        let from = all.search('"organizations"') + 16;
        /** @type {?} */
        let p1 = all.substr(0, from);
        console.log(p1);
        /** @type {?} */
        let p2 = all.substr(from);
        console.log(p2);
        /** @type {?} */
        let len = this.count_to_len(p2);
        console.log(len);
        /** @type {?} */
        let p3 = all.substr(from + len);
        console.log(p3);
        return p1 + orgs + p3;
    }
    /**
     * @private
     * @param {?} p2
     * @return {?}
     */
    count_to_len(p2) {
        if (p2[0] == "[") {
            /** @type {?} */
            let len = 1;
            /** @type {?} */
            let count = 1;
            for (let index = 1; index < p2.length; index++) {
                /** @type {?} */
                const element = p2[index];
                len++;
                if (p2[index] === "[")
                    count++;
                if (p2[index] === "]")
                    count--;
                if (count === 0)
                    return len;
            }
        }
    }
    /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    editSource(source, uuid) {
        // this.adhocstringgify(source)
        // console.log(source)
        // let valu = source.entitystringify();
        // console.log("s: ", valu)
        // this.adhocstringgify(source)
        // console.log(source)
        // let valu = source.entitystringify();
        // console.log("s: ", valu)
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/" + uuid + "/edit";
        return this.http.post(req, this.adhocstringgify(source), this.httpOptions);
    }
    /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    makeSourceAsApproved(source, uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/" + uuid + "/publish";
        return this.http.post(req, this.adhocstringgify(source), this.httpOptions);
    }
    /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    makeSourceAsUnApproved(source, uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/" + uuid + "/unpublish";
        return this.http.post(req, this.adhocstringgify(source), this.httpOptions);
    }
    /**
     * @param {?} source
     * @param {?} uuid
     * @param {?} role
     * @return {?}
     */
    newSource(source, uuid, role) {
        /** @type {?} */
        let params = new HttpParams();
        params = params.set("pid", uuid.toString());
        params = params.set("role", role.toString());
        /** @type {?} */
        const options = {
            params: params,
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/new";
        return this.http.post(req, this.adhocstringgify(source), options);
    }
    /**
     * @param {?} issn
     * @return {?}
     */
    getIssnInfo(issn) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/journal/issn/" + issn;
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getSourcesByTermUUID(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/relations/" + uuid;
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getSourceVersions(uuid) {
        this.httpOptions.headers = this.httpOptions.headers.set("Authorization", "Bearer " + this.token);
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/" + uuid + "/versions";
        return this.http.get(req, this.httpOptions);
    }
    /**
     * @param {?} uuid
     * @param {?=} level
     * @return {?}
     */
    countSourcesByTerm(uuid, level = 0) {
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const options = {
            params: params.set("level", level.toString(10)),
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + "/relations/" + uuid + "/count";
        return this.http.get(req, options);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getSourceByUUID(uuid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/' + uuid;
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    permissionGetSourceEditors(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/editor/' + uuid + '/users';
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    permissionSetSourceEditor(uuid, user, allow = false) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/editor/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    permissionGetSourceManagers(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/manager/' + uuid + '/users';
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    permissionSetSourceManager(uuid, user, allow = false) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/manager/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    permissionGetOrganizationManagers(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/organization/' + uuid + '/users';
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    permissionSetOrganizationManager(uuid, user, allow = false) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/organization/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    permissionGetTermManagers(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/term/' + uuid + '/users';
        return this.http.get(req);
    }
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    permissionSetTermManager(uuid, user, allow = false) {
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/term/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    }
}
SourceService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SourceService.ctorParameters = () => [
    { type: Environment },
    { type: HttpClient },
    { type: HttpBackend },
    { type: OAuthStorage }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.httpOptions;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.token;
    /** @type {?} */
    SourceService.prototype.httpSearch;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.env;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.handler;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.oauthStorage;
}
export class SourceServiceNoAuth {
    /**
     * @param {?} env
     * @param {?} handler
     */
    constructor(env, handler) {
        // TODO: hay una mejor manera de hacer esto, creando diferentes y propios HttpClients que
        // tengan un comportamiento especifico (eg: sin/con autenticacion)
        // ver: https://github.com/angular/angular/issues/20203#issuecomment-369754776
        // otra solucion seria pasar parametros especiales como {ignore_auth = true} y que el
        // interceptor actue en consecuencia... .
        // https://github.com/angular/angular/issues/18155#issuecomment-382438006
        this.env = env;
        this.handler = handler;
        this.http = new HttpClient(handler);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getSourceByUUID(uuid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        const req = this.env.sceibaApi + "/pid/source/" + uuid;
        return this.http.get(req);
    }
    /**
     * @param {?} issn
     * @return {?}
     */
    getSourceByISSN(issn) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        const req = this.env.sceibaApi + "source/byissn/" + issn;
        return this.http.get(req);
    }
    /**
     * @param {?} pid
     * @return {?}
     */
    getSourceByPID(pid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        let params = new HttpParams();
        params = params.set('value', pid);
        /** @type {?} */
        const options = {
            params: params,
        };
        /** @type {?} */
        const req = this.env.sceibaApi + 'source/pid';
        return this.http.get(req, options);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    getSources(params) {
        /** @type {?} */
        const options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        const req = this.env.sceibaApi + 'search/sources';
        return this.http.get(req, options);
    }
    /**
     * @param {?} topOrgId
     * @return {?}
     */
    getSourcesStats(topOrgId) {
        /** @type {?} */
        let params = new HttpParams();
        params = params.set('org', topOrgId);
        /** @type {?} */
        const options = {
            params: params,
        };
        /** @type {?} */
        const req = this.env.sceibaApi + 'source/stats';
        return this.http.get(req, options);
    }
}
SourceServiceNoAuth.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SourceServiceNoAuth.ctorParameters = () => [
    { type: Environment },
    { type: HttpBackend }
];
if (false) {
    /** @type {?} */
    SourceServiceNoAuth.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SourceServiceNoAuth.prototype.env;
    /**
     * @type {?}
     * @private
     */
    SourceServiceNoAuth.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,