/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/search.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { HttpBackend, HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { Environment } from '../core/public-api';
export class SearchService {
    /**
     * @param {?} env
     * @param {?} handler
     */
    constructor(env, handler) {
        // TODO: hay una mejor manera de hacer esto, creando diferentes y propios HttpClients que
        // tengan un comportamiento especifico (eg: sin/con autenticacion)
        // ver: https://github.com/angular/angular/issues/20203#issuecomment-369754776
        // otra solucion seria pasar parametros especiales como {ignore_auth = true} y que el
        // interceptor actue en consecuencia... .
        // https://github.com/angular/angular/issues/18155#issuecomment-382438006
        this.env = env;
        this.handler = handler;
        this.prefix = 'search';
        this.http = new HttpClient(handler);
    }
    /**
     * @param {?} field
     * @param {?=} size
     * @return {?}
     */
    getAggregation(field, size = 10) {
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const options = {
            params: params.set('size', size.toString(10))
        };
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/aggs/' + field;
        return this.http.get(req, options);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    getRecords(params) {
        /** @type {?} */
        const options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/records/';
        return this.http.get(req, options);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    getSources(params) {
        /** @type {?} */
        const options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/sources';
        return this.http.get(req, options);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    getOrganizations(params) {
        /** @type {?} */
        const options = {
            params: params,
        };
        // console.log(params);
        /** @type {?} */
        const req = this.env.sceibaApi + this.prefix + '/organizations/';
        // console.log(req);
        return this.http.get(req, options);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getOrganizationById(id) {
        /** @type {?} */
        const req = this.env.cuorApi + 'organizations/' + id + '/';
        // console.log(req);
        return this.http.get(req);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updateOrganizations(data) {
        //TODO: Do this method...
        return of(null);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    getSourcesOrgAggregation(uuid) {
        /** @type {?} */
        const req = this.env.sceibaApi + 'source/aggs/org/' + uuid;
        return this.http.get(req);
    }
}
SearchService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SearchService.ctorParameters = () => [
    { type: Environment },
    { type: HttpBackend }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.prefix;
    /** @type {?} */
    SearchService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.env;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9iYWNrZW5kL3NlYXJjaC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1BLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFZLE1BQU0sb0JBQW9CLENBQUM7QUFLM0QsTUFBTSxPQUFPLGFBQWE7Ozs7O0lBYXhCLFlBQTJCLEdBQWdCLEVBQVUsT0FBb0I7UUFFdkUseUZBQXlGO1FBQ3pGLGtFQUFrRTtRQUNsRSw4RUFBOEU7UUFDOUUscUZBQXFGO1FBQ3JGLHlDQUF5QztRQUN6Qyx5RUFBeUU7UUFQaEQsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWE7UUFYakUsV0FBTSxHQUFHLFFBQVEsQ0FBQztRQW9CeEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7Ozs7SUFFTSxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFOztZQUNoQyxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7O2NBQ3ZCLE9BQU8sR0FBRztZQUNkLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzlDOztjQUNLLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsR0FBRyxLQUFLO1FBQy9ELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWdCLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVNLFVBQVUsQ0FBQyxNQUFrQjs7Y0FDNUIsT0FBTyxHQUFHO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FFZjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7O2NBQ2IsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVztRQUMxRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF5QixHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFTSxVQUFVLENBQUMsTUFBa0I7O2NBQzVCLE9BQU8sR0FBRztZQUNkLE1BQU0sRUFBRSxNQUFNO1NBRWY7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztjQUNkLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVU7UUFDekQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBeUIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7O0lBRU0sZ0JBQWdCLENBQUMsTUFBa0I7O2NBQ2xDLE9BQU8sR0FBRztZQUNkLE1BQU0sRUFBRSxNQUFNO1NBRWY7OztjQUVLLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLGlCQUFpQjtRQUNoRSxvQkFBb0I7UUFFcEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBK0IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLENBQUM7Ozs7O0lBRU0sbUJBQW1CLENBQUMsRUFBVTs7Y0FDN0IsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLGdCQUFnQixHQUFHLEVBQUUsR0FBRyxHQUFHO1FBQzFELG9CQUFvQjtRQUVwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUErQixHQUFHLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7OztJQUNNLG1CQUFtQixDQUFDLElBQWtCO1FBQzNDLHlCQUF5QjtRQUN6QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDOzs7OztJQUVNLHdCQUF3QixDQUFDLElBQUk7O2NBQzVCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsR0FBRyxJQUFJO1FBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWdCLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7OztZQWpGRixVQUFVOzs7O1lBSkYsV0FBVztZQUhYLFdBQVc7Ozs7Ozs7SUFVbEIsK0JBQTBCOztJQVMxQiw2QkFBd0I7Ozs7O0lBRUwsNEJBQXdCOzs7OztJQUFFLGdDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgIENvcHlyaWdodCAoYykgMjAyMCBVbml2ZXJzaWRhZCBkZSBQaW5hciBkZWwgUsOtbyBcIkhlcm1hbm9zIFNhw616IE1vbnRlcyBkZSBPY2FcIlxuICogICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cblxuaW1wb3J0IHsgSHR0cEJhY2tlbmQsIEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQsIFJlc3BvbnNlIH0gZnJvbSAnLi4vY29yZS9wdWJsaWMtYXBpJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbiwgUmVjb3JkLCBTZWFyY2hSZXNwb25zZSwgU291cmNlIH0gZnJvbSAnLi4vZW50aXRpZXMvcHVibGljLWFwaSc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlYXJjaFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgcHJlZml4ID0gJ3NlYXJjaCc7XG5cbiAgLy8gcHJpdmF0ZSBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKFxuICAvLyAgICAge1xuICAvLyAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAvLyAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAvLyAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonXG4gIC8vICAgICB9XG4gIC8vICk7XG4gIHB1YmxpYyBodHRwOiBIdHRwQ2xpZW50O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGVudjogRW52aXJvbm1lbnQsIHByaXZhdGUgaGFuZGxlcjogSHR0cEJhY2tlbmQpIHtcblxuICAgIC8vIFRPRE86IGhheSB1bmEgbWVqb3IgbWFuZXJhIGRlIGhhY2VyIGVzdG8sIGNyZWFuZG8gZGlmZXJlbnRlcyB5IHByb3Bpb3MgSHR0cENsaWVudHMgcXVlXG4gICAgLy8gdGVuZ2FuIHVuIGNvbXBvcnRhbWllbnRvIGVzcGVjaWZpY28gKGVnOiBzaW4vY29uIGF1dGVudGljYWNpb24pXG4gICAgLy8gdmVyOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMDIwMyNpc3N1ZWNvbW1lbnQtMzY5NzU0Nzc2XG4gICAgLy8gb3RyYSBzb2x1Y2lvbiBzZXJpYSBwYXNhciBwYXJhbWV0cm9zIGVzcGVjaWFsZXMgY29tbyB7aWdub3JlX2F1dGggPSB0cnVlfSB5IHF1ZSBlbFxuICAgIC8vIGludGVyY2VwdG9yIGFjdHVlIGVuIGNvbnNlY3VlbmNpYS4uLiAuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTgxNTUjaXNzdWVjb21tZW50LTM4MjQzODAwNlxuXG4gICAgdGhpcy5odHRwID0gbmV3IEh0dHBDbGllbnQoaGFuZGxlcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWdncmVnYXRpb24oZmllbGQsIHNpemUgPSAxMCk6IE9ic2VydmFibGU8UmVzcG9uc2U8YW55Pj4ge1xuICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBwYXJhbXM6IHBhcmFtcy5zZXQoJ3NpemUnLCBzaXplLnRvU3RyaW5nKDEwKSlcbiAgICB9O1xuICAgIGNvbnN0IHJlcSA9IHRoaXMuZW52LnNjZWliYUFwaSArIHRoaXMucHJlZml4ICsgJy9hZ2dzLycgKyBmaWVsZDtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxSZXNwb25zZTxhbnk+PihyZXEsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGdldFJlY29yZHMocGFyYW1zOiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxTZWFyY2hSZXNwb25zZTxSZWNvcmQ+PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgLy8gaGVhZGVyczogdGhpcy5oZWFkZXJzXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyhwYXJhbXMpXG4gICAgY29uc3QgcmVxID0gdGhpcy5lbnYuc2NlaWJhQXBpICsgdGhpcy5wcmVmaXggKyAnL3JlY29yZHMvJztcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxTZWFyY2hSZXNwb25zZTxSZWNvcmQ+PihyZXEsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGdldFNvdXJjZXMocGFyYW1zOiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxTZWFyY2hSZXNwb25zZTxTb3VyY2U+PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgLy8gaGVhZGVyczogdGhpcy5oZWFkZXJzXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyhwYXJhbXMpO1xuICAgIGNvbnN0IHJlcSA9IHRoaXMuZW52LnNjZWliYUFwaSArIHRoaXMucHJlZml4ICsgJy9zb3VyY2VzJztcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxTZWFyY2hSZXNwb25zZTxTb3VyY2U+PihyZXEsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGdldE9yZ2FuaXphdGlvbnMocGFyYW1zOiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxTZWFyY2hSZXNwb25zZTxPcmdhbml6YXRpb24+PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgLy8gaGVhZGVyczogdGhpcy5oZWFkZXJzXG4gICAgfTtcbiAgICAvLyBjb25zb2xlLmxvZyhwYXJhbXMpO1xuICAgIGNvbnN0IHJlcSA9IHRoaXMuZW52LnNjZWliYUFwaSArIHRoaXMucHJlZml4ICsgJy9vcmdhbml6YXRpb25zLyc7XG4gICAgLy8gY29uc29sZS5sb2cocmVxKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFNlYXJjaFJlc3BvbnNlPE9yZ2FuaXphdGlvbj4+KHJlcSwgb3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0T3JnYW5pemF0aW9uQnlJZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxTZWFyY2hSZXNwb25zZTxPcmdhbml6YXRpb24+PiB7XG4gICAgY29uc3QgcmVxID0gdGhpcy5lbnYuY3VvckFwaSArICdvcmdhbml6YXRpb25zLycgKyBpZCArICcvJztcbiAgICAvLyBjb25zb2xlLmxvZyhyZXEpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8U2VhcmNoUmVzcG9uc2U8T3JnYW5pemF0aW9uPj4ocmVxKTtcbiAgfVxuICBwdWJsaWMgdXBkYXRlT3JnYW5pemF0aW9ucyhkYXRhOiBPcmdhbml6YXRpb24pOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbj4ge1xuICAgIC8vVE9ETzogRG8gdGhpcyBtZXRob2QuLi5cbiAgICByZXR1cm4gb2YobnVsbCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U291cmNlc09yZ0FnZ3JlZ2F0aW9uKHV1aWQpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPGFueT4+IHtcbiAgICBjb25zdCByZXEgPSB0aGlzLmVudi5zY2VpYmFBcGkgKyAnc291cmNlL2FnZ3Mvb3JnLycgKyB1dWlkO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFJlc3BvbnNlPGFueT4+KHJlcSk7XG4gIH1cbn1cbiJdfQ==