/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/taxonomy.entity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Entity, EntityBase } from './common';
/** @enum {string} */
const VocabulariesInmutableNames = {
    CUBAN_INTITUTIONS: "CUBAN_INTITUTIONS",
    SUBJECTS: "SUBJECTS",
    CUBAN_PROVINCES: "CUBAN_PROVINCES",
    // DATABASES = '3',
    // MES_GROUPS = 'MES_GROUPS',
    LICENCES: "LICENCES",
    INDEXES_CLASIFICATION: "INDEXES_CLASIFICATION",
    INDEXES: "INDEXES",
    UNESCO_VOCAB: "UNESCO_VOCAB",
    RECOD_SETS: "RECOD_SETS",
    RECORD_TYPES: "RECORD_TYPES",
    EXTRA_INSTITUTIONS: "EXTRA_INSTITUTIONS",
    SUBJECT_COVER: "SUBJECT_COVER",
    COUNTRIES: "COUNTRIES",
};
export { VocabulariesInmutableNames };
export class Term extends Entity {
    constructor() {
        super(...arguments);
        this.uuid = '';
        this.identifier = '';
        this.description = '';
        this.data = new EntityBase();
        this.vocabulary_id = '';
        this.parent_id = '';
        this.clasified_ids = [];
        this.class_ids = [];
        // deepcopy(data: any){
        //     switch (data['vocabulary_id']) {
        //         case VocabulariesInmutableNames.INTITUTION:
        //             this.data = new TermInstitutionData();
        //             break;
        //         case VocabulariesInmutableNames.LICENCES:
        //             this.data = new TermIndexData();
        //         default:
        //             this.data = new EntityBase();
        //     }
        //     super.deepcopy(data);
        // }
    }
}
if (false) {
    /** @type {?} */
    Term.prototype.uuid;
    /** @type {?} */
    Term.prototype.identifier;
    /** @type {?} */
    Term.prototype.description;
    /** @type {?} */
    Term.prototype.data;
    /** @type {?} */
    Term.prototype.vocabulary_id;
    /** @type {?} */
    Term.prototype.parent_id;
    /** @type {?} */
    Term.prototype.clasified_ids;
    /** @type {?} */
    Term.prototype.class_ids;
}
export class TermInstitutionData extends EntityBase {
    constructor() {
        super(...arguments);
        this.grid = '';
        this.email = '';
        this.website = '';
        this.address = '';
    }
}
if (false) {
    /** @type {?} */
    TermInstitutionData.prototype.grid;
    /** @type {?} */
    TermInstitutionData.prototype.email;
    /** @type {?} */
    TermInstitutionData.prototype.website;
    /** @type {?} */
    TermInstitutionData.prototype.address;
}
export class TermIndexData extends EntityBase {
    constructor() {
        super(...arguments);
        this.url = '';
        this.abrev = '';
        this.initial_cover = '';
        this.end_cover = '';
    }
}
if (false) {
    /** @type {?} */
    TermIndexData.prototype.url;
    /** @type {?} */
    TermIndexData.prototype.abrev;
    /** @type {?} */
    TermIndexData.prototype.initial_cover;
    /** @type {?} */
    TermIndexData.prototype.end_cover;
}
export class Vocabulary extends Entity {
    constructor() {
        super(...arguments);
        this.name = '';
        this.description = '';
        this.human_name = '';
        this.identifier = '';
    }
}
if (false) {
    /** @type {?} */
    Vocabulary.prototype.name;
    /** @type {?} */
    Vocabulary.prototype.description;
    /** @type {?} */
    Vocabulary.prototype.human_name;
    /** @type {?} */
    Vocabulary.prototype.identifier;
}
/**
 * File node data with possible child nodes.
 * @record
 */
export function TermNode() { }
if (false) {
    /** @type {?} */
    TermNode.prototype.term;
    /** @type {?} */
    TermNode.prototype.parent;
    /** @type {?|undefined} */
    TermNode.prototype.children;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGF4b25vbXkuZW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvZW50aXRpZXMvdGF4b25vbXkuZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1BLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUc5QyxNQUFZLDBCQUEwQjtJQUNsQyxpQkFBaUIscUJBQXNCO0lBQ3ZDLFFBQVEsWUFBYTtJQUNyQixlQUFlLG1CQUFvQjtJQUNuQyxtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLFFBQVEsWUFBYTtJQUNyQixxQkFBcUIseUJBQTBCO0lBQy9DLE9BQU8sV0FBWTtJQUNuQixZQUFZLGdCQUFpQjtJQUM3QixVQUFVLGNBQWU7SUFDekIsWUFBWSxnQkFBaUI7SUFDN0Isa0JBQWtCLHNCQUF1QjtJQUN6QyxhQUFhLGlCQUFrQjtJQUMvQixTQUFTLGFBQWM7RUFDeEI7O0FBRUgsTUFBTSxPQUFPLElBQUssU0FBUSxNQUFNO0lBQWhDOztRQUNJLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLFNBQUksR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ3hCLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ25CLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixrQkFBYSxHQUFhLEVBQUUsQ0FBQztRQUM3QixjQUFTLEdBQWEsRUFBRSxDQUFDO1FBRXpCLHVCQUF1QjtRQUN2Qix1Q0FBdUM7UUFDdkMsc0RBQXNEO1FBQ3RELHFEQUFxRDtRQUNyRCxxQkFBcUI7UUFDckIsb0RBQW9EO1FBQ3BELCtDQUErQztRQUMvQyxtQkFBbUI7UUFDbkIsNENBQTRDO1FBQzVDLFFBQVE7UUFDUiw0QkFBNEI7UUFDNUIsSUFBSTtJQUNSLENBQUM7Q0FBQTs7O0lBckJHLG9CQUFVOztJQUNWLDBCQUFnQjs7SUFDaEIsMkJBQWlCOztJQUNqQixvQkFBd0I7O0lBQ3hCLDZCQUFtQjs7SUFDbkIseUJBQWU7O0lBQ2YsNkJBQTZCOztJQUM3Qix5QkFBeUI7O0FBaUI3QixNQUFNLE9BQU8sbUJBQW9CLFNBQVEsVUFBVTtJQUFuRDs7UUFDSSxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixZQUFPLEdBQUcsRUFBRSxDQUFDO0lBRWpCLENBQUM7Q0FBQTs7O0lBTEcsbUNBQVU7O0lBQ1Ysb0NBQVc7O0lBQ1gsc0NBQWE7O0lBQ2Isc0NBQWE7O0FBSWpCLE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBVTtJQUE3Qzs7UUFDRSxRQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ1QsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ25CLGNBQVMsR0FBRyxFQUFFLENBQUM7SUFDakIsQ0FBQztDQUFBOzs7SUFKQyw0QkFBUzs7SUFDVCw4QkFBVzs7SUFDWCxzQ0FBbUI7O0lBQ25CLGtDQUFlOztBQUdqQixNQUFNLE9BQU8sVUFBVyxTQUFRLE1BQU07SUFBdEM7O1FBQ0ksU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsZUFBVSxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0NBQUE7OztJQUpHLDBCQUFVOztJQUNWLGlDQUFpQjs7SUFDakIsZ0NBQWdCOztJQUNoQixnQ0FBZ0I7Ozs7OztBQUlwQiw4QkFJQzs7O0lBSEcsd0JBQVc7O0lBQ1gsMEJBQWlCOztJQUNqQiw0QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMjAgVW5pdmVyc2lkYWQgZGUgUGluYXIgZGVsIFLDrW8gXCJIZXJtYW5vcyBTYcOteiBNb250ZXMgZGUgT2NhXCJcbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5cbmltcG9ydCB7IEVudGl0eSwgRW50aXR5QmFzZSB9IGZyb20gJy4vY29tbW9uJztcblxuLy8gVE9ETzogRXN0byBlc3RhIGJhc3RhbnRlIGZlby4uLiBoYXkgcXVlIGFncmVnYXJsZSBhIHZvY2FidWxhcmlvIHVuIG5vbWJyZSBpbm11dGFibGUgeSByZWZlcmlyc2UgYSBlc3RlIHBvciBhcXVpLCBubyBwb3IgbG9zIGlkc1xuZXhwb3J0IGVudW0gVm9jYWJ1bGFyaWVzSW5tdXRhYmxlTmFtZXMge1xuICAgIENVQkFOX0lOVElUVVRJT05TID0gJ0NVQkFOX0lOVElUVVRJT05TJyxcbiAgICBTVUJKRUNUUyA9ICdTVUJKRUNUUycsXG4gICAgQ1VCQU5fUFJPVklOQ0VTID0gJ0NVQkFOX1BST1ZJTkNFUycsXG4gICAgLy8gREFUQUJBU0VTID0gJzMnLFxuICAgIC8vIE1FU19HUk9VUFMgPSAnTUVTX0dST1VQUycsXG4gICAgTElDRU5DRVMgPSAnTElDRU5DRVMnLFxuICAgIElOREVYRVNfQ0xBU0lGSUNBVElPTiA9ICdJTkRFWEVTX0NMQVNJRklDQVRJT04nLFxuICAgIElOREVYRVMgPSAnSU5ERVhFUycsXG4gICAgVU5FU0NPX1ZPQ0FCID0gJ1VORVNDT19WT0NBQicsXG4gICAgUkVDT0RfU0VUUyA9ICdSRUNPRF9TRVRTJyxcbiAgICBSRUNPUkRfVFlQRVMgPSAnUkVDT1JEX1RZUEVTJyxcbiAgICBFWFRSQV9JTlNUSVRVVElPTlMgPSAnRVhUUkFfSU5TVElUVVRJT05TJyxcbiAgICBTVUJKRUNUX0NPVkVSID0gJ1NVQkpFQ1RfQ09WRVInLFxuICAgIENPVU5UUklFUyA9ICdDT1VOVFJJRVMnXG4gIH1cblxuZXhwb3J0IGNsYXNzIFRlcm0gZXh0ZW5kcyBFbnRpdHkge1xuICAgIHV1aWQgPSAnJztcbiAgICBpZGVudGlmaWVyID0gJyc7XG4gICAgZGVzY3JpcHRpb24gPSAnJztcbiAgICBkYXRhID0gbmV3IEVudGl0eUJhc2UoKTtcbiAgICB2b2NhYnVsYXJ5X2lkID0gJyc7XG4gICAgcGFyZW50X2lkID0gJyc7XG4gICAgY2xhc2lmaWVkX2lkczogbnVtYmVyW10gPSBbXTtcbiAgICBjbGFzc19pZHM6IG51bWJlcltdID0gW107XG5cbiAgICAvLyBkZWVwY29weShkYXRhOiBhbnkpe1xuICAgIC8vICAgICBzd2l0Y2ggKGRhdGFbJ3ZvY2FidWxhcnlfaWQnXSkge1xuICAgIC8vICAgICAgICAgY2FzZSBWb2NhYnVsYXJpZXNJbm11dGFibGVOYW1lcy5JTlRJVFVUSU9OOlxuICAgIC8vICAgICAgICAgICAgIHRoaXMuZGF0YSA9IG5ldyBUZXJtSW5zdGl0dXRpb25EYXRhKCk7XG4gICAgLy8gICAgICAgICAgICAgYnJlYWs7XG4gICAgLy8gICAgICAgICBjYXNlIFZvY2FidWxhcmllc0lubXV0YWJsZU5hbWVzLkxJQ0VOQ0VTOlxuICAgIC8vICAgICAgICAgICAgIHRoaXMuZGF0YSA9IG5ldyBUZXJtSW5kZXhEYXRhKCk7XG4gICAgLy8gICAgICAgICBkZWZhdWx0OlxuICAgIC8vICAgICAgICAgICAgIHRoaXMuZGF0YSA9IG5ldyBFbnRpdHlCYXNlKCk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgc3VwZXIuZGVlcGNvcHkoZGF0YSk7XG4gICAgLy8gfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBUZXJtSW5zdGl0dXRpb25EYXRhIGV4dGVuZHMgRW50aXR5QmFzZSB7XG4gICAgZ3JpZCA9ICcnO1xuICAgIGVtYWlsID0gJyc7XG4gICAgd2Vic2l0ZSA9ICcnO1xuICAgIGFkZHJlc3MgPSAnJztcblxufVxuXG5leHBvcnQgY2xhc3MgVGVybUluZGV4RGF0YSBleHRlbmRzIEVudGl0eUJhc2Uge1xuICB1cmwgPSAnJztcbiAgYWJyZXYgPSAnJztcbiAgaW5pdGlhbF9jb3ZlciA9ICcnO1xuICBlbmRfY292ZXIgPSAnJztcbn1cblxuZXhwb3J0IGNsYXNzIFZvY2FidWxhcnkgZXh0ZW5kcyBFbnRpdHkge1xuICAgIG5hbWUgPSAnJztcbiAgICBkZXNjcmlwdGlvbiA9ICcnO1xuICAgIGh1bWFuX25hbWUgPSAnJztcbiAgICBpZGVudGlmaWVyID0gJyc7XG59XG5cbi8qKiBGaWxlIG5vZGUgZGF0YSB3aXRoIHBvc3NpYmxlIGNoaWxkIG5vZGVzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXJtTm9kZSB7XG4gICAgdGVybTogVGVybTtcbiAgICBwYXJlbnQ6IFRlcm1Ob2RlO1xuICAgIGNoaWxkcmVuPzogVGVybU5vZGVbXTtcbn1cbiJdfQ==