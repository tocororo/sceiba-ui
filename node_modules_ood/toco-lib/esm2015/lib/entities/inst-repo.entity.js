/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/inst-repo.entity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EntityBase, Entity } from './common';
/**
 * Entity for main Institution based on schema `...-v1.0.0.json`.
 */
export class MainInstitution extends EntityBase {
}
if (false) {
    /**
     * The name typically used to refer to the institute.
     * @type {?}
     */
    MainInstitution.prototype.name;
    /**
     * Organization Identifiers, different from GRID mapping.
     * @type {?}
     */
    MainInstitution.prototype.identifiers;
}
/**
 * Entity for Institutional Repository based on schema `...-v1.0.0.json`.
 */
export class InstitutionalRepository extends Entity {
}
if (false) {
    /**
     * Name of the region.
     * @type {?}
     */
    InstitutionalRepository.prototype.name;
    /**
     * Main Institution.
     * @type {?}
     */
    InstitutionalRepository.prototype.mainInst;
    /**
     * URL page for the institute.
     * @type {?}
     */
    InstitutionalRepository.prototype.url;
    /**
     * URL-OAI page for the institute.
     * @type {?}
     */
    InstitutionalRepository.prototype.url_oai;
}
/**
 * Represents an object of `MainInstitution` type with all its values set to empty.
 * The `identifiers` array field must have one empty value at least.
 * @type {?}
 */
export const mainInstEmpty = {
    'name': '',
    'identifiers': [{
            'idtype': '',
            'value': ''
        }]
};
/**
 * Represents an object of `InstitutionalRepository` type with all its values set to empty.
 * @type {?}
 */
export const instRepoEmpty = {
    'id': '',
    'name': '',
    'mainInst': mainInstEmpty,
    'url': '',
    'url_oai': ''
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdC1yZXBvLmVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2VudGl0aWVzL2luc3QtcmVwby5lbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBYyxNQUFNLFVBQVUsQ0FBQzs7OztBQUsxRCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxVQUFVO0NBVTlDOzs7Ozs7SUFMRywrQkFBYTs7Ozs7SUFJYixzQ0FBK0I7Ozs7O0FBTW5DLE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxNQUFNO0NBa0JsRDs7Ozs7O0lBYkcsdUNBQWE7Ozs7O0lBSWIsMkNBQTBCOzs7OztJQUkxQixzQ0FBWTs7Ozs7SUFJWiwwQ0FBZ0I7Ozs7Ozs7QUFPcEIsTUFBTSxPQUFPLGFBQWEsR0FBUTtJQUM5QixNQUFNLEVBQUUsRUFBRTtJQUNWLGFBQWEsRUFBRSxDQUFDO1lBQ1osUUFBUSxFQUFFLEVBQUU7WUFDWixPQUFPLEVBQUUsRUFBRTtTQUNkLENBQUM7Q0FDTDs7Ozs7QUFLRCxNQUFNLE9BQU8sYUFBYSxHQUFRO0lBQzlCLElBQUksRUFBRSxFQUFFO0lBQ1IsTUFBTSxFQUFFLEVBQUU7SUFDVixVQUFVLEVBQUUsYUFBYTtJQUN6QixLQUFLLEVBQUUsRUFBRTtJQUNULFNBQVMsRUFBRSxFQUFFO0NBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBFbnRpdHlCYXNlLCBFbnRpdHksIElkZW50aWZpZXIgfSBmcm9tICcuL2NvbW1vbic7XG5cbi8qKlxuICogRW50aXR5IGZvciBtYWluIEluc3RpdHV0aW9uIGJhc2VkIG9uIHNjaGVtYSBgLi4uLXYxLjAuMC5qc29uYC4gXG4gKi9cbmV4cG9ydCBjbGFzcyBNYWluSW5zdGl0dXRpb24gZXh0ZW5kcyBFbnRpdHlCYXNlXG57XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgdHlwaWNhbGx5IHVzZWQgdG8gcmVmZXIgdG8gdGhlIGluc3RpdHV0ZS4gXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE9yZ2FuaXphdGlvbiBJZGVudGlmaWVycywgZGlmZmVyZW50IGZyb20gR1JJRCBtYXBwaW5nLiBcbiAgICAgKi9cbiAgICBpZGVudGlmaWVyczogQXJyYXk8SWRlbnRpZmllcj47XG59XG5cbi8qKlxuICogRW50aXR5IGZvciBJbnN0aXR1dGlvbmFsIFJlcG9zaXRvcnkgYmFzZWQgb24gc2NoZW1hIGAuLi4tdjEuMC4wLmpzb25gLiBcbiAqL1xuZXhwb3J0IGNsYXNzIEluc3RpdHV0aW9uYWxSZXBvc2l0b3J5IGV4dGVuZHMgRW50aXR5XG57XG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgcmVnaW9uLiBcbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTWFpbiBJbnN0aXR1dGlvbi4gXG4gICAgICovXG4gICAgbWFpbkluc3Q6IE1haW5JbnN0aXR1dGlvbjtcbiAgICAvKipcbiAgICAgKiBVUkwgcGFnZSBmb3IgdGhlIGluc3RpdHV0ZS4gXG4gICAgICovXG4gICAgdXJsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVVJMLU9BSSBwYWdlIGZvciB0aGUgaW5zdGl0dXRlLiBcbiAgICAgKi9cbiAgICB1cmxfb2FpOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBvYmplY3Qgb2YgYE1haW5JbnN0aXR1dGlvbmAgdHlwZSB3aXRoIGFsbCBpdHMgdmFsdWVzIHNldCB0byBlbXB0eS4gXG4gKiBUaGUgYGlkZW50aWZpZXJzYCBhcnJheSBmaWVsZCBtdXN0IGhhdmUgb25lIGVtcHR5IHZhbHVlIGF0IGxlYXN0LiBcbiAqL1xuZXhwb3J0IGNvbnN0IG1haW5JbnN0RW1wdHk6IGFueSA9IHtcbiAgICAnbmFtZSc6ICcnLFxuICAgICdpZGVudGlmaWVycyc6IFt7XG4gICAgICAgICdpZHR5cGUnOiAnJyxcbiAgICAgICAgJ3ZhbHVlJzogJydcbiAgICB9XVxufTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIG9iamVjdCBvZiBgSW5zdGl0dXRpb25hbFJlcG9zaXRvcnlgIHR5cGUgd2l0aCBhbGwgaXRzIHZhbHVlcyBzZXQgdG8gZW1wdHkuIFxuICovXG5leHBvcnQgY29uc3QgaW5zdFJlcG9FbXB0eTogYW55ID0ge1xuICAgICdpZCc6ICcnLFxuICAgICduYW1lJzogJycsXG4gICAgJ21haW5JbnN0JzogbWFpbkluc3RFbXB0eSxcbiAgICAndXJsJzogJycsXG4gICAgJ3VybF9vYWknOiAnJ1xufTtcbiJdfQ==