/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/evaluation.entity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EntityBase, Entity } from './common';
/** @enum {string} */
const CategoryQuestionType = {
    /**
     * The `bool` type is the default type. It shows a boolean control.
     */
    bool: "bool",
    /**
     * It shows a numeric control.
     */
    integer: "integer",
    /**
     * It shows a select control.
     */
    select: "select",
};
export { CategoryQuestionType };
/**
 * Entity for CategoryQuestion based on schema `...-v1.0.0.json`.
 * Represents a survey section category question.
 */
export class CategoryQuestion extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * This field is filled internally.
         * For internal use only.
         */
        this._inputContent = undefined;
    }
}
if (false) {
    /**
     * Question type.
     * @type {?}
     */
    CategoryQuestion.prototype.type;
    /**
     * Question id.
     * @type {?}
     */
    CategoryQuestion.prototype.id;
    /**
     * Question description.
     * @type {?}
     */
    CategoryQuestion.prototype.desc;
    /**
     * Question hint.
     * @type {?}
     */
    CategoryQuestion.prototype.hint;
    /**
     * Question answer.
     * @type {?}
     */
    CategoryQuestion.prototype.answer;
    /**
     * Possible minimum value. It is used if `type` == CategoryQuestionType.integer.
     * @type {?}
     */
    CategoryQuestion.prototype.min;
    /**
     * Possible maximum value. It is used if `type` == CategoryQuestionType.integer.
     * @type {?}
     */
    CategoryQuestion.prototype.max;
    /**
     * Options list that can be selected. It is used if `type` == CategoryQuestionType.select.
     * @type {?}
     */
    CategoryQuestion.prototype.selectOptions;
    /**
     * This field is filled internally.
     * For internal use only.
     * @type {?}
     */
    CategoryQuestion.prototype._inputContent;
}
/**
 * Entity for SectionCategory based on schema `...-v1.0.0.json`.
 * Represents a survey section category.
 */
export class SectionCategory extends EntityBase {
}
if (false) {
    /**
     * Category title.
     * @type {?}
     */
    SectionCategory.prototype.title;
    /**
     * Category desription.
     * @type {?}
     */
    SectionCategory.prototype.desc;
    /**
     * An array of questions associated with the category.
     * @type {?}
     */
    SectionCategory.prototype.questions;
}
/**
 * Entity for SurveySection based on schema `...-v1.0.0.json`.
 * Represents a survey section.
 */
export class SurveySection extends EntityBase {
}
if (false) {
    /**
     * Section title.
     * @type {?}
     */
    SurveySection.prototype.title;
    /**
     * An array of categories associated with the section.
     * @type {?}
     */
    SurveySection.prototype.categories;
}
/**
 * Entity for JournalGeneralData based on schema `...-v1.0.0.json`.
 * Represents the journal general data that a user fills in the first step.
 */
export class JournalGeneralData extends EntityBase {
}
if (false) {
    /**
     * Journal name.
     * @type {?}
     */
    JournalGeneralData.prototype.name;
    /**
     * Journal URL page.
     * @type {?}
     */
    JournalGeneralData.prototype.url;
    /**
     * Journal ISSN.
     * @type {?}
     */
    JournalGeneralData.prototype.issn;
}
/**
 * Entity for Evaluation based on schema `...-v1.0.0.json`.
 */
export class Evaluation extends Entity {
}
if (false) {
    /**
     * User who made the evaluation.
     * @type {?}
     */
    Evaluation.prototype.user;
    /**
     * Evaluation date.
     * @type {?}
     */
    Evaluation.prototype.date;
    /**
     * Journal Data.
     * @type {?}
     */
    Evaluation.prototype.journalData;
    /**
     * An array of sections associated with the survey.
     * @type {?}
     */
    Evaluation.prototype.sections;
}
/**
 * Entity for EvaluationOnlyAnswer based on schema `...-v1.0.0.json`.
 */
export class EvaluationOnlyAnswer extends Entity {
}
if (false) {
    /**
     * User who made the evaluation.
     * @type {?}
     */
    EvaluationOnlyAnswer.prototype.user;
    /**
     * Evaluation date.
     * @type {?}
     */
    EvaluationOnlyAnswer.prototype.date;
    /**
     * Journal Data.
     * @type {?}
     */
    EvaluationOnlyAnswer.prototype.journalData;
    /**
     * Journal survey.
     * @type {?}
     */
    EvaluationOnlyAnswer.prototype.survey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGlvbi5lbnRpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdGllcy9ldmFsdWF0aW9uLmVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUk3QyxNQUFZLG9CQUFvQjtJQUU3Qjs7T0FFRztJQUNILElBQUksUUFBUztJQUViOztPQUVHO0lBQ0gsT0FBTyxXQUFZO0lBRW5COztPQUVHO0lBQ0gsTUFBTSxVQUFXO0VBQ3BCOzs7Ozs7QUFNRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBVTtJQUFoRDs7Ozs7O1FBc0NJLGtCQUFhLEdBQWtCLFNBQVMsQ0FBQztJQUM3QyxDQUFDO0NBQUE7Ozs7OztJQWxDRyxnQ0FBMkI7Ozs7O0lBSTNCLDhCQUFXOzs7OztJQUlYLGdDQUFhOzs7OztJQUliLGdDQUFhOzs7OztJQUliLGtDQUFZOzs7OztJQUlaLCtCQUFhOzs7OztJQUliLCtCQUFhOzs7OztJQUliLHlDQUErQjs7Ozs7O0lBSy9CLHlDQUF5Qzs7Ozs7O0FBTzdDLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7Q0FjOUM7Ozs7OztJQVRHLGdDQUFjOzs7OztJQUlkLCtCQUFhOzs7OztJQUliLG9DQUFtQzs7Ozs7O0FBT3ZDLE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBVTtDQVU1Qzs7Ozs7O0lBTEcsOEJBQWM7Ozs7O0lBSWQsbUNBQW1DOzs7Ozs7QUFPdEMsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFVBQVU7Q0FjakQ7Ozs7OztJQVRHLGtDQUFhOzs7OztJQUliLGlDQUFZOzs7OztJQUlaLGtDQUFhOzs7OztBQU1qQixNQUFNLE9BQU8sVUFBVyxTQUFRLE1BQU07Q0EyQnJDOzs7Ozs7SUF0QkUsMEJBQWE7Ozs7O0lBSWIsMEJBQVc7Ozs7O0lBT1gsaUNBQWdDOzs7OztJQU9oQyw4QkFBK0I7Ozs7O0FBU25DLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxNQUFNO0NBMkIvQzs7Ozs7O0lBdEJHLG9DQUFhOzs7OztJQUliLG9DQUFXOzs7OztJQU9WLDJDQUFnQzs7Ozs7SUFPakMsc0NBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBQYXJhbXMgfSBmcm9tICcuLi9jb3JlL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgU2VsZWN0T3B0aW9uIH0gZnJvbSAnLi4vZm9ybXMvaW5wdXQvc2VsZWN0L3NlbGVjdC1pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5wdXRDb250ZW50IH0gZnJvbSAnLi4vZm9ybXMvaW5wdXQvaW5wdXQuY29udHJvbCc7XG5pbXBvcnQgeyBFbnRpdHlCYXNlLCBFbnRpdHkgfSBmcm9tICcuL2NvbW1vbic7XG4vKipcbiAqIEFuIGVudW0gdGhhdCByZXByZXNlbnRzIHRoZSB0eXBlIG9mIGFuIGBDYXRlZ29yeVF1ZXN0aW9uYC4gXG4gKi9cbiBleHBvcnQgZW51bSBDYXRlZ29yeVF1ZXN0aW9uVHlwZVxuIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYGJvb2xgIHR5cGUgaXMgdGhlIGRlZmF1bHQgdHlwZS4gSXQgc2hvd3MgYSBib29sZWFuIGNvbnRyb2wuIFxuICAgICAqL1xuICAgIGJvb2wgPSAnYm9vbCcsXG5cbiAgICAvKipcbiAgICAgKiBJdCBzaG93cyBhIG51bWVyaWMgY29udHJvbC4gXG4gICAgICovXG4gICAgaW50ZWdlciA9ICdpbnRlZ2VyJyxcblxuICAgIC8qKlxuICAgICAqIEl0IHNob3dzIGEgc2VsZWN0IGNvbnRyb2wuIFxuICAgICAqL1xuICAgIHNlbGVjdCA9ICdzZWxlY3QnXG59XG5cbi8qKlxuICogRW50aXR5IGZvciBDYXRlZ29yeVF1ZXN0aW9uIGJhc2VkIG9uIHNjaGVtYSBgLi4uLXYxLjAuMC5qc29uYC4gXG4gKiBSZXByZXNlbnRzIGEgc3VydmV5IHNlY3Rpb24gY2F0ZWdvcnkgcXVlc3Rpb24uIFxuICovXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnlRdWVzdGlvbiBleHRlbmRzIEVudGl0eUJhc2VcbntcbiAgICAvKipcbiAgICAgKiBRdWVzdGlvbiB0eXBlLiBcbiAgICAgKi9cbiAgICB0eXBlOiBDYXRlZ29yeVF1ZXN0aW9uVHlwZTtcbiAgICAvKipcbiAgICAgKiBRdWVzdGlvbiBpZC4gXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBRdWVzdGlvbiBkZXNjcmlwdGlvbi4gXG4gICAgICovXG4gICAgZGVzYzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFF1ZXN0aW9uIGhpbnQuIFxuICAgICAqL1xuICAgIGhpbnQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBRdWVzdGlvbiBhbnN3ZXIuIFxuICAgICAqL1xuICAgIGFuc3dlcjogYW55O1xuICAgIC8qKlxuICAgICAqIFBvc3NpYmxlIG1pbmltdW0gdmFsdWUuIEl0IGlzIHVzZWQgaWYgYHR5cGVgID09IENhdGVnb3J5UXVlc3Rpb25UeXBlLmludGVnZXIuIFxuICAgICAqL1xuICAgIG1pbj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBQb3NzaWJsZSBtYXhpbXVtIHZhbHVlLiBJdCBpcyB1c2VkIGlmIGB0eXBlYCA9PSBDYXRlZ29yeVF1ZXN0aW9uVHlwZS5pbnRlZ2VyLiBcbiAgICAgKi9cbiAgICBtYXg/OiBudW1iZXI7XG5cdC8qKlxuICAgICAqIE9wdGlvbnMgbGlzdCB0aGF0IGNhbiBiZSBzZWxlY3RlZC4gSXQgaXMgdXNlZCBpZiBgdHlwZWAgPT0gQ2F0ZWdvcnlRdWVzdGlvblR5cGUuc2VsZWN0LiBcblx0ICovXG4gICAgc2VsZWN0T3B0aW9ucz86IFNlbGVjdE9wdGlvbltdO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmllbGQgaXMgZmlsbGVkIGludGVybmFsbHkuIFxuICAgICAqIEZvciBpbnRlcm5hbCB1c2Ugb25seS4gXG4gICAgICovXG4gICAgX2lucHV0Q29udGVudD86IElucHV0Q29udGVudCA9IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBFbnRpdHkgZm9yIFNlY3Rpb25DYXRlZ29yeSBiYXNlZCBvbiBzY2hlbWEgYC4uLi12MS4wLjAuanNvbmAuIFxuICogUmVwcmVzZW50cyBhIHN1cnZleSBzZWN0aW9uIGNhdGVnb3J5LiBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3Rpb25DYXRlZ29yeSBleHRlbmRzIEVudGl0eUJhc2VcbntcbiAgICAvKipcbiAgICAgKiBDYXRlZ29yeSB0aXRsZS4gXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDYXRlZ29yeSBkZXNyaXB0aW9uLiBcbiAgICAgKi9cbiAgICBkZXNjOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgcXVlc3Rpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2F0ZWdvcnkuIFxuICAgICAqL1xuICAgIHF1ZXN0aW9uczogQXJyYXk8Q2F0ZWdvcnlRdWVzdGlvbj47XG59XG5cbi8qKlxuICogRW50aXR5IGZvciBTdXJ2ZXlTZWN0aW9uIGJhc2VkIG9uIHNjaGVtYSBgLi4uLXYxLjAuMC5qc29uYC4gXG4gKiBSZXByZXNlbnRzIGEgc3VydmV5IHNlY3Rpb24uIFxuICovXG5leHBvcnQgY2xhc3MgU3VydmV5U2VjdGlvbiBleHRlbmRzIEVudGl0eUJhc2VcbntcbiAgICAvKipcbiAgICAgKiBTZWN0aW9uIHRpdGxlLiBcbiAgICAgKi9cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGNhdGVnb3JpZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzZWN0aW9uLiBcbiAgICAgKi9cbiAgICBjYXRlZ29yaWVzOiBBcnJheTxTZWN0aW9uQ2F0ZWdvcnk+O1xufVxuXG4vKipcbiAqIEVudGl0eSBmb3IgSm91cm5hbEdlbmVyYWxEYXRhIGJhc2VkIG9uIHNjaGVtYSBgLi4uLXYxLjAuMC5qc29uYC4gXG4gKiBSZXByZXNlbnRzIHRoZSBqb3VybmFsIGdlbmVyYWwgZGF0YSB0aGF0IGEgdXNlciBmaWxscyBpbiB0aGUgZmlyc3Qgc3RlcC4gXG4gKi9cbiBleHBvcnQgY2xhc3MgSm91cm5hbEdlbmVyYWxEYXRhIGV4dGVuZHMgRW50aXR5QmFzZVxuIHtcbiAgICAvKipcbiAgICAgKiBKb3VybmFsIG5hbWUuIFxuICAgICAqL1xuICAgICBuYW1lOiBzdHJpbmc7XG4gICAgIC8qKlxuICAgICAgKiBKb3VybmFsIFVSTCBwYWdlLiBcbiAgICAgICovXG4gICAgIHVybDogc3RyaW5nO1xuICAgICAvKipcbiAgICAgICogSm91cm5hbCBJU1NOLiBcbiAgICAgICovXG4gICAgIGlzc246IHN0cmluZztcbiB9XG5cbi8qKlxuICogRW50aXR5IGZvciBFdmFsdWF0aW9uIGJhc2VkIG9uIHNjaGVtYSBgLi4uLXYxLjAuMC5qc29uYC4gXG4gKi9cbiBleHBvcnQgY2xhc3MgRXZhbHVhdGlvbiBleHRlbmRzIEVudGl0eVxuIHtcbiAgICAvKipcbiAgICAgKiBVc2VyIHdobyBtYWRlIHRoZSBldmFsdWF0aW9uLiBcbiAgICAgKi9cbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXZhbHVhdGlvbiBkYXRlLiBcbiAgICAgKi9cbiAgICBkYXRlOiBEYXRlO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogSm91cm5hbCBEYXRhICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8qKlxuICAgICAqIEpvdXJuYWwgRGF0YS4gXG4gICAgICovXG4gICAgam91cm5hbERhdGE6IEpvdXJuYWxHZW5lcmFsRGF0YTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIFN1cnZleSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBzZWN0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIHN1cnZleS4gXG4gICAgICovXG4gICAgc2VjdGlvbnM6IEFycmF5PFN1cnZleVNlY3Rpb24+O1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBSZXN1bHQgYW5kIFJlY29tbWVuZGF0aW9ucyAqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvLyBUT0RPOiAuLi4gXG4gfVxuXG4vKipcbiAqIEVudGl0eSBmb3IgRXZhbHVhdGlvbk9ubHlBbnN3ZXIgYmFzZWQgb24gc2NoZW1hIGAuLi4tdjEuMC4wLmpzb25gLiBcbiAqL1xuZXhwb3J0IGNsYXNzIEV2YWx1YXRpb25Pbmx5QW5zd2VyIGV4dGVuZHMgRW50aXR5XG57XG4gICAgLyoqXG4gICAgICogVXNlciB3aG8gbWFkZSB0aGUgZXZhbHVhdGlvbi4gXG4gICAgICovXG4gICAgdXNlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEV2YWx1YXRpb24gZGF0ZS4gXG4gICAgICovXG4gICAgZGF0ZTogRGF0ZTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEpvdXJuYWwgRGF0YSAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKipcbiAgICAgKiBKb3VybmFsIERhdGEuIFxuICAgICAqL1xuICAgICBqb3VybmFsRGF0YTogSm91cm5hbEdlbmVyYWxEYXRhO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogU3VydmV5ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8qKlxuICAgICAqIEpvdXJuYWwgc3VydmV5LiBcbiAgICAgKi9cbiAgICBzdXJ2ZXk6IFBhcmFtczxhbnk+O1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBSZXN1bHQgYW5kIFJlY29tbWVuZGF0aW9ucyAqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvLyBUT0RPOiAuLi4gXG59XG4iXX0=