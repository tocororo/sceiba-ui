/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/organization.entity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EntityBase, Entity } from './common';
/** @type {?} */
export const OrganizationRelationships = {
    PARENT: { label: 'Padre', value: 'parent' },
    CHILD: { label: 'Hija', value: 'child' },
    RELATED: { label: 'Relacionada', value: 'related' },
};
/**
 * Entity for `LabelDiffLang` based on schema `organization-v1.0.0.json`.
 * Name of the institute in different language.
 */
export class LabelDiffLang extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * Institute name in a language variant.
         */
        this.label = '';
        /**
         * ISO-639-1 language code.
         */
        this.iso639 = '';
    }
}
if (false) {
    /**
     * Institute name in a language variant.
     * @type {?}
     */
    LabelDiffLang.prototype.label;
    /**
     * ISO-639-1 language code.
     * @type {?}
     */
    LabelDiffLang.prototype.iso639;
}
/**
 * Entity for `Redirected` based on schema `organization-v1.0.0.json`.
 * Which organization redirects.
 */
export class Redirected extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * Institute name in a language variant.
         */
        this.idtype = '';
        /**
         * ISO-639-1 language code.
         */
        this.value = '';
    }
}
if (false) {
    /**
     * Institute name in a language variant.
     * @type {?}
     */
    Redirected.prototype.idtype;
    /**
     * ISO-639-1 language code.
     * @type {?}
     */
    Redirected.prototype.value;
}
/**
 * Entity for `Relationship` based on schema `organization-v1.0.0.json`.
 * A relationship the institute has to other.
 */
export class Relationship extends Entity {
    constructor() {
        super(...arguments);
        /**
         * Organization Identifiers, different from GRID mapping.
         */
        this.identifiers = new Array();
        /**
         * Relationship type.
         */
        this.type = '';
        /**
         * Name of the related institute.
         */
        this.label = '';
    }
}
if (false) {
    /**
     * Organization Identifiers, different from GRID mapping.
     * @type {?}
     */
    Relationship.prototype.identifiers;
    /**
     * Relationship type.
     * @type {?}
     */
    Relationship.prototype.type;
    /**
     * Name of the related institute.
     * @type {?}
     */
    Relationship.prototype.label;
}
/**
 * Entity for `GeoNamesAdmin` based on schema `organization-v1.0.0.json`.
 */
export class GeoNamesAdmin extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * ID in the region format.
         */
        this.id = '';
        /**
         * Name of the region.
         */
        this.name = '';
        /**
         * Preferred ASCII encoded name for the region.
         */
        this.ascii_name = '';
    }
}
if (false) {
    /**
     * ID in the region format.
     * @type {?}
     */
    GeoNamesAdmin.prototype.id;
    /**
     * Name of the region.
     * @type {?}
     */
    GeoNamesAdmin.prototype.name;
    /**
     * Preferred ASCII encoded name for the region.
     * @type {?}
     */
    GeoNamesAdmin.prototype.ascii_name;
}
/**
 * Entity for `GeoNamesCity` based on schema `organization-v1.0.0.json`.
 * The linked GeoNames data.
 */
export class GeoNamesCity extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * GeoNames ID.
         */
        this.id = 0;
        /**
         * Name of the city.
         */
        this.city = '';
        /**
         * geonames_admin1.
         */
        this.geonames_admin1 = undefined;
        /**
         * geonames_admin2.
         */
        this.geonames_admin2 = undefined;
        /**
         * nuts_level1.
         */
        this.nuts_level1 = undefined;
        /**
         * nuts_level2.
         */
        this.nuts_level2 = undefined;
        /**
         * nuts_level3.
         */
        this.nuts_level3 = undefined;
    }
}
if (false) {
    /**
     * GeoNames ID.
     * @type {?}
     */
    GeoNamesCity.prototype.id;
    /**
     * Name of the city.
     * @type {?}
     */
    GeoNamesCity.prototype.city;
    /**
     * geonames_admin1.
     * @type {?}
     */
    GeoNamesCity.prototype.geonames_admin1;
    /**
     * geonames_admin2.
     * @type {?}
     */
    GeoNamesCity.prototype.geonames_admin2;
    /**
     * nuts_level1.
     * @type {?}
     */
    GeoNamesCity.prototype.nuts_level1;
    /**
     * nuts_level2.
     * @type {?}
     */
    GeoNamesCity.prototype.nuts_level2;
    /**
     * nuts_level3.
     * @type {?}
     */
    GeoNamesCity.prototype.nuts_level3;
}
/**
 * Entity for `Address` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export class Address extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * Name of the city.
         */
        this.city = '';
        /**
         * Name of the country.
         */
        this.country = '';
        /**
         * ISO 3166-1 alpha-2 code of the country.
         */
        this.country_code = '';
        /**
         * Latitute of the institute.
         */
        this.lat = 0;
        /**
         * Longitude of the institute.
         */
        this.lng = 0;
        /**
         * First line of the address.
         */
        this.line_1 = '';
        /**
         * Second line of the address.
         */
        this.line_2 = '';
        /**
         * Third line of the address.
         */
        this.line_3 = '';
        /**
         * Postcode/zipcode.
         */
        this.postcode = '';
        /**
         * If there is more than one address, identifies the main location.
         * This address identifies the main location.
         */
        this.primary = false;
        /**
         * Name of the state/region.
         */
        this.state = '';
        /**
         * ISO 3166-2 region code.
         */
        this.state_code = '';
        /**
         * Name of the municipality.
         */
        this.municipality = '';
        /**
         * dpa municipality code.
         */
        this.municipality_dpa = '';
        /**
         * Linked GeoNames data.
         */
        this.geonames_city = undefined;
    }
}
if (false) {
    /**
     * Name of the city.
     * @type {?}
     */
    Address.prototype.city;
    /**
     * Name of the country.
     * @type {?}
     */
    Address.prototype.country;
    /**
     * ISO 3166-1 alpha-2 code of the country.
     * @type {?}
     */
    Address.prototype.country_code;
    /**
     * Latitute of the institute.
     * @type {?}
     */
    Address.prototype.lat;
    /**
     * Longitude of the institute.
     * @type {?}
     */
    Address.prototype.lng;
    /**
     * First line of the address.
     * @type {?}
     */
    Address.prototype.line_1;
    /**
     * Second line of the address.
     * @type {?}
     */
    Address.prototype.line_2;
    /**
     * Third line of the address.
     * @type {?}
     */
    Address.prototype.line_3;
    /**
     * Postcode/zipcode.
     * @type {?}
     */
    Address.prototype.postcode;
    /**
     * If there is more than one address, identifies the main location.
     * This address identifies the main location.
     * @type {?}
     */
    Address.prototype.primary;
    /**
     * Name of the state/region.
     * @type {?}
     */
    Address.prototype.state;
    /**
     * ISO 3166-2 region code.
     * @type {?}
     */
    Address.prototype.state_code;
    /**
     * Name of the municipality.
     * @type {?}
     */
    Address.prototype.municipality;
    /**
     * dpa municipality code.
     * @type {?}
     */
    Address.prototype.municipality_dpa;
    /**
     * Linked GeoNames data.
     * @type {?}
     */
    Address.prototype.geonames_city;
}
/**
 * Entity for `RedirectPropertiesIdtype` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export class RedirectPropertiesIdtype extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * description for RedirectPropertiesIdtype.
         */
        this.description = '';
        /**
         * type of RedirectPropertiesIdtype.
         */
        this.type = '';
        /**
         * enum for RedirectPropertiesIdtype.
         */
        this.enum = new Array();
    }
}
if (false) {
    /**
     * description for RedirectPropertiesIdtype.
     * @type {?}
     */
    RedirectPropertiesIdtype.prototype.description;
    /**
     * type of RedirectPropertiesIdtype.
     * @type {?}
     */
    RedirectPropertiesIdtype.prototype.type;
    /**
     * enum for RedirectPropertiesIdtype.
     * @type {?}
     */
    RedirectPropertiesIdtype.prototype.enum;
}
/**
 * Entity for `RedirectProperties` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export class RedirectProperties extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * Name of the city.
         */
        this.idtype = undefined;
        /**
         * Name of the country.
         */
        this.value = undefined;
    }
}
if (false) {
    /**
     * Name of the city.
     * @type {?}
     */
    RedirectProperties.prototype.idtype;
    /**
     * Name of the country.
     * @type {?}
     */
    RedirectProperties.prototype.value;
}
/**
 * Entity for `Redirect` based on schema `organization-v1.0.0.json`.
 * An address associated with the institute.
 */
export class Redirect extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * Type of redirect.
         */
        this.type = '';
        /**
         * Show additional properties for redirect if true.
         */
        this.additionalProperties = false;
        /**
         * Properties for redirect.
         */
        this.properties = undefined;
    }
}
if (false) {
    /**
     * Type of redirect.
     * @type {?}
     */
    Redirect.prototype.type;
    /**
     * Show additional properties for redirect if true.
     * @type {?}
     */
    Redirect.prototype.additionalProperties;
    /**
     * Properties for redirect.
     * @type {?}
     */
    Redirect.prototype.properties;
}
/**
 * Entity for `Organizations` based on schema `organization-v1.0.0.json`.
 */
export class Organization extends Entity {
    constructor() {
        super(...arguments);
        /**
         * Organization Identifiers, different from GRID mapping.
         */
        this.identifiers = new Array();
        /**
         * The name typically used to refer to the institute.
         */
        this.name = '';
        /**
         * For an active institute, this is always set to active.
         */
        this.status = '';
        /**
         * The list of other names the institute is known as.
         */
        this.aliases = new Array();
        /**
         * The list of short acronyms the institute is known as (e.g. MRC for the Medical Research Council).
         */
        this.acronyms = new Array();
        /**
         * The list of types describing the institute.
         */
        this.types = new Array();
        /**
         * URL of the wikipedia page for the institute.
         */
        this.wikipedia_url = '';
        /**
         * Contact email address for the institute.
         */
        this.email_address = '';
        /**
         * The list of IP addresses known to belong to the institute.
         */
        this.ip_addresses = new Array();
        /**
         * Year the institute opened, CE.
         */
        this.established = -1;
        /**
         * Year the institute registered on ONEI.
         */
        this.onei_registry = -1;
        /**
         * If its able for exporting to international organizations systems.
         */
        this.exportable = false;
        /**
         * The list of URLs linking to things like the homepage for the institute.
         */
        this.links = new Array();
        /**
         * Name of the institute in different languages.
         */
        this.labels = new Array();
        /**
         * Any relationships the institute has to others.
         */
        this.relationships = new Array();
        /**
         * An array of addresses associated with the institute.
         */
        this.addresses = new Array();
        /**
         * An array of addresses associated with the institute.
         */
        this.redirect = undefined;
    }
}
if (false) {
    /**
     * Organization Identifiers, different from GRID mapping.
     * @type {?}
     */
    Organization.prototype.identifiers;
    /**
     * The name typically used to refer to the institute.
     * @type {?}
     */
    Organization.prototype.name;
    /**
     * For an active institute, this is always set to active.
     * @type {?}
     */
    Organization.prototype.status;
    /**
     * The list of other names the institute is known as.
     * @type {?}
     */
    Organization.prototype.aliases;
    /**
     * The list of short acronyms the institute is known as (e.g. MRC for the Medical Research Council).
     * @type {?}
     */
    Organization.prototype.acronyms;
    /**
     * The list of types describing the institute.
     * @type {?}
     */
    Organization.prototype.types;
    /**
     * URL of the wikipedia page for the institute.
     * @type {?}
     */
    Organization.prototype.wikipedia_url;
    /**
     * Contact email address for the institute.
     * @type {?}
     */
    Organization.prototype.email_address;
    /**
     * The list of IP addresses known to belong to the institute.
     * @type {?}
     */
    Organization.prototype.ip_addresses;
    /**
     * Year the institute opened, CE.
     * @type {?}
     */
    Organization.prototype.established;
    /**
     * Year the institute registered on ONEI.
     * @type {?}
     */
    Organization.prototype.onei_registry;
    /**
     * If its able for exporting to international organizations systems.
     * @type {?}
     */
    Organization.prototype.exportable;
    /**
     * The list of URLs linking to things like the homepage for the institute.
     * @type {?}
     */
    Organization.prototype.links;
    /**
     * Name of the institute in different languages.
     * @type {?}
     */
    Organization.prototype.labels;
    /**
     * Any relationships the institute has to others.
     * @type {?}
     */
    Organization.prototype.relationships;
    /**
     * An array of addresses associated with the institute.
     * @type {?}
     */
    Organization.prototype.addresses;
    /**
     * An array of addresses associated with the institute.
     * @type {?}
     */
    Organization.prototype.redirect;
}
//# sourceMappingURL=data:application/json;base64,