/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/common.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
/**
 * La idea de esta clase es tener un deserializador.
 */
export class EntityBase extends Object {
    /**
     * @param {?} data
     * @param {?=} exclude
     * @return {?}
     */
    deepcopy(data, exclude = []) {
        /** @type {?} */
        const keys = Object.keys(this);
        for (const key of keys) {
            if (data[key] && !exclude.includes(key)) {
                // console.log('DEEEPCOPY OF : ', key, data[key])
                // if(this.toBoolean(data[key])){
                //   console.log('TO BOOLEAN IS TRUE !!!!!! ');
                //   this[key] = data[key].toLowerCase() === 'true';
                // } else {
                // if (this[key] instanceof EntityBaseList) {
                //   console.log('RECUSIVE CALL ON EntityBaseList',  this[key]);
                //   this[key].deepcopy(data[key], exclude);
                // } else{
                if (this[key] instanceof EntityBase) {
                    console.log('RECUSIVE CALL ON EntityBase', this[key]);
                    this[key].deepcopy(data[key], exclude);
                }
                else {
                    this[key] = data[key];
                }
                // }
            }
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    toBoolean(value) {
        if (typeof value === 'string' || value instanceof String) {
            console.log('DEEPCOPY ----------  TO BOOLEAN ------------ VAL=', value);
            console.log(value.toLowerCase() === 'true' || value.toLowerCase() === 'false');
            return value.toLowerCase() === 'true' || value.toLowerCase() === 'false';
        }
        return false;
    }
}
// export class EntityBaseList<T extends EntityBase> extends Array<T> {
//   constructor(private entityType: new () => T ){
//     super();
//   }
//   getNew() : T {
//     return new this.entityType();
//   }
//   public deepcopy(data: any[]): void {
//     for (let i = 0; i < data.length; i++) {
//       const element = data[i];
//       let e  = this.getNew();
//       e.deepcopy(element);
//       this.push(e);
//     }
//   }
//   public concat(list: EntityBaseList<T>){
//     this.concat(list);
//     return this;
//   }
// }
/**
 * Created by Edel on 02/04/2018.
 */
export class Entity extends EntityBase {
    constructor() {
        super();
        this.id = '';
        /**
         * By default is FALSE. If TRUE, means that the entity does not have valid identifiers or has not been saved to the backend.
         */
        this.isNew = false;
        // raw_data: String;
        // created_at: String;
        // updated_at: String;
        this.identifiers = new Array();
    }
    /**
     * @param {?} idtype
     * @return {?}
     */
    getIdentifierValue(idtype) {
        /** @type {?} */
        const id = this.identifiers.find((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value.idtype == idtype));
        return id != undefined ? id.value : '';
    }
    /**
     * @param {?} idtype
     * @param {?} value
     * @return {?}
     */
    setIdentifierValue(idtype, value) {
        if (value != '') {
            /** @type {?} */
            let added = false;
            for (let index = 0; index < this.identifiers.length; index++) {
                if (this.identifiers[index].idtype == idtype) {
                    this.identifiers[index].value = value;
                    added = true;
                }
            }
            if (!added) {
                /** @type {?} */
                const id = new Identifier();
                id.idtype = idtype;
                id.value = value;
                this.identifiers.push(id);
            }
        }
    }
    /**
     * return JSON.stringify, using a function to exclude object fields id and uuid
     * @return {?}
     */
    entitystringify() {
        return JSON.stringify(this, (/**
         * @param {?} k
         * @param {?} v
         * @return {?}
         */
        (k, v) => {
            // if (k !== "id" && k !== "uuid" && k !== "isNew") {
            if (k !== "isNew" && k !== "entityType" && (v != null && v != '' && v != undefined && v != [])) {
                return v;
            }
        }));
    }
}
if (false) {
    /** @type {?} */
    Entity.prototype.id;
    /**
     * By default is FALSE. If TRUE, means that the entity does not have valid identifiers or has not been saved to the backend.
     * @type {?}
     */
    Entity.prototype.isNew;
    /** @type {?} */
    Entity.prototype.identifiers;
}
/**
 * Entity for `Identifier` based on schema `organization-v1.0.0.json`.
 * Organization Identifier, different from GRID mapping.
 */
export class Identifier extends EntityBase {
    constructor() {
        super(...arguments);
        /**
         * Identifier value.
         */
        this.value = "";
    }
}
if (false) {
    /**
     * Identifier type.
     * @type {?}
     */
    Identifier.prototype.idtype;
    /**
     * Identifier value.
     * @type {?}
     */
    Identifier.prototype.value;
}
/** @enum {string} */
const IdentifierSchemas = {
    ark: "ark",
    arxiv: "arxiv",
    doi: "doi",
    bibcode: "bibcode",
    ean8: "ean8",
    ean13: "ean13",
    handle: "handle",
    isbn: "isbn",
    issn_p: "issn_p",
    issn_l: "issn_l",
    issn_e: "issn_e",
    issn_c: "issn_c",
    issn_o: "issn_o",
    istc: "istc",
    lsid: "lsid",
    pmid: "pmid",
    pmcid: "pmcid",
    purl: "purl",
    upc: "upc",
    url: "url",
    urn: "urn",
    orcid: "orcid",
    gnd: "gnd",
    ads: "ads",
    oai: "oai",
    prnps: "prnps",
    ernps: "ernps",
    oaiurl: "oaiurl",
    grid: "grid",
    wkdata: "wkdata",
    ror: "ror",
    isni: "isni",
    fudref: "fudref",
    orgref: "orgref",
    reup: "reup",
};
export { IdentifierSchemas };
export class Links extends EntityBase {
    constructor() {
        super(...arguments);
        this.self = "";
        this.next = "";
        this.prev = "";
    }
}
if (false) {
    /** @type {?} */
    Links.prototype.self;
    /** @type {?} */
    Links.prototype.next;
    /** @type {?} */
    Links.prototype.prev;
}
export class AggrBucket extends EntityBase {
    constructor() {
        super(...arguments);
        this.doc_count = 0;
        this.key = "";
    }
}
if (false) {
    /** @type {?} */
    AggrBucket.prototype.doc_count;
    /** @type {?} */
    AggrBucket.prototype.key;
}
class AggrMeta extends EntityBase {
    constructor() {
        super(...arguments);
        this.order = 0;
        this.title = "";
    }
}
if (false) {
    /** @type {?} */
    AggrMeta.prototype.order;
    /** @type {?} */
    AggrMeta.prototype.title;
}
export class Aggr extends EntityBase {
    constructor() {
        super(...arguments);
        this.buckets = new Array();
        this.meta = new AggrMeta();
        this.doc_count_error_upper_bound = 0;
        this.sum_other_doc_count = 0;
    }
}
if (false) {
    /** @type {?} */
    Aggr.prototype.buckets;
    /** @type {?} */
    Aggr.prototype.meta;
    /** @type {?} */
    Aggr.prototype.doc_count_error_upper_bound;
    /** @type {?} */
    Aggr.prototype.sum_other_doc_count;
}
/**
 * @template T
 */
export class Hit extends EntityBase {
    constructor() {
        super(...arguments);
        this.id = "";
        this.created = "";
        this.updated = "";
        this.links = new Links();
        this.revision = 0;
    }
}
if (false) {
    /** @type {?} */
    Hit.prototype.id;
    /** @type {?} */
    Hit.prototype.created;
    /** @type {?} */
    Hit.prototype.updated;
    /** @type {?} */
    Hit.prototype.links;
    /** @type {?} */
    Hit.prototype.metadata;
    /** @type {?} */
    Hit.prototype.revision;
    /** @type {?} */
    Hit.prototype.revisions;
}
/**
 * @template T
 */
export class HitList extends EntityBase {
    constructor() {
        super(...arguments);
        this.hits = new Array();
    }
}
if (false) {
    /** @type {?} */
    HitList.prototype.hits;
    /** @type {?} */
    HitList.prototype.total;
}
/**
 * @template T
 */
export class SearchResponse extends EntityBase {
    constructor() {
        super(...arguments);
        this.aggregations = {};
        this.hits = new HitList();
        this.links = new Links();
    }
}
if (false) {
    /** @type {?} */
    SearchResponse.prototype.aggregations;
    /** @type {?} */
    SearchResponse.prototype.hits;
    /** @type {?} */
    SearchResponse.prototype.links;
}
//# sourceMappingURL=data:application/json;base64,