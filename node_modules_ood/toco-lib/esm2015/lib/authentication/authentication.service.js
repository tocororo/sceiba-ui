/**
 * @fileoverview added by tsickle
 * Generated from: lib/authentication/authentication.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { JwksValidationHandler, OAuthModuleConfig, OAuthResourceServerErrorHandler, OAuthService, OAuthStorage } from 'angular-oauth2-oidc';
import { Subject, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Environment } from '../core/public-api';
import * as i0 from "@angular/core";
import * as i1 from "angular-oauth2-oidc";
import * as i2 from "@angular/common/http";
import * as i3 from "@angular/router";
import * as i4 from "../core/env";
/** @enum {string} */
const AuthBackend = {
    /**
     * `sceiba` represent the Sceiba's backend
     */
    sceiba: "sceiba",
    /**
     * `cuor` represent the Cuor's backend, The Organizations System
     */
    cuor: "cuor",
};
export { AuthBackend };
/**
 * This service handles the behavior when a user authentications and
 * gives information about it.
 */
export class OauthAuthenticationService {
    /**
     * @param {?} oauthStorage
     * @param {?} http
     * @param {?} _router
     * @param {?} oauthService
     * @param {?} errorHandler
     * @param {?} moduleConfig
     */
    constructor(oauthStorage, http, _router, oauthService, errorHandler, moduleConfig) {
        this.oauthStorage = oauthStorage;
        this.http = http;
        this._router = _router;
        this.oauthService = oauthService;
        this.errorHandler = errorHandler;
        this.moduleConfig = moduleConfig;
        // TODO: this object is `any` because we have two backends with two difrent userprofiles...
        this.authenticationSubject = new Subject();
        /**
         * Observer to handles the behavior when a user authenticates
         */
        this.authenticationSubjectObservable = this.authenticationSubject.asObservable();
    }
    /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param {?} user
     * @return {?}
     */
    login(user) {
        console.log('autentication service user:', user);
        this.authenticationSubject.next(user);
    }
    /**
     * @return {?}
     */
    logout() {
        this.authenticationSubject.next(null);
    }
    /**
     * gives information about an user authenticated
     * @return {?}
     */
    getUserInfo() {
        return this.http.get(this.userInfoEndpoint);
        // if (this.authBackend == AuthBackend.sceiba) {
        //     return this.http.get<any>(this.env.sceibaApi + 'me');
        // } else if (this.authBackend == AuthBackend.cuor){
        //     return this.http.get<any>(this.env.cuorApi + 'me');
        // }
    }
    /**
     * @param {?} next
     * @param {?} state
     * @return {?}
     */
    canActivate(next, state) {
        /** @type {?} */
        const user = this.oauthStorage.getItem('user');
        if (user) {
            return true;
        }
        else {
            this._router.navigate(['/']);
            return false;
        }
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        /** @type {?} */
        let token = this.oauthStorage.getItem('access_token');
        if (token) {
            /** @type {?} */
            let headers = req.headers.set('Authorization', 'Bearer ' + token);
            if (req.method != 'GET') {
                headers = headers.set('Content-Type', 'application/json');
                headers = headers.set('Access-Control-Allow-Origin', '*');
            }
            req = req.clone({ headers });
        }
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            /* 401 means the user is not authorized. */
            if (err.status === 401) {
                this.oauthService.initImplicitFlow();
                // this._router.navigateByUrl('/');
            }
            return throwError(err);
        })));
    }
    /**
     * Configure, this function is necessary if you will implement your own logic
     * @param {?} authConfig
     * @return {?}
     */
    configure(authConfig) {
        this.oauthService.configure(authConfig);
        this.oauthService.tokenValidationHandler = new JwksValidationHandler();
        this.oauthService.loadDiscoveryDocumentAndTryLogin();
    }
}
OauthAuthenticationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
OauthAuthenticationService.ctorParameters = () => [
    { type: OAuthStorage },
    { type: HttpClient },
    { type: Router },
    { type: OAuthService },
    { type: OAuthResourceServerErrorHandler },
    { type: OAuthModuleConfig, decorators: [{ type: Optional }] }
];
/** @nocollapse */ OauthAuthenticationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OauthAuthenticationService_Factory() { return new OauthAuthenticationService(i0.ɵɵinject(i1.OAuthStorage), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i1.OAuthService), i0.ɵɵinject(i1.OAuthResourceServerErrorHandler), i0.ɵɵinject(i1.OAuthModuleConfig, 8)); }, token: OauthAuthenticationService, providedIn: "root" });
if (false) {
    /** @type {?} */
    OauthAuthenticationService.prototype.userInfoEndpoint;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.authenticationSubject;
    /**
     * Observer to handles the behavior when a user authenticates
     * @type {?}
     */
    OauthAuthenticationService.prototype.authenticationSubjectObservable;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.oauthStorage;
    /**
     * @type {?}
     * @protected
     */
    OauthAuthenticationService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype._router;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.oauthService;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.errorHandler;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.moduleConfig;
}
export class SimpleAuthenticationService {
    /**
     * @param {?} env
     * @param {?} http
     * @param {?} _router
     */
    constructor(env, http, _router) {
        this.env = env;
        this.http = http;
        this._router = _router;
        //implements CanActivate {
        this.authBackend = AuthBackend.sceiba;
        this.authenticationSubject = new Subject();
        /**
         * Observer to handles the behavior when a user authenticates
         */
        this.authenticationSubjectObservable = this.authenticationSubject.asObservable();
    }
    /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param {?} islogged 'true' is loggued or 'false' other way
     * @return {?}
     */
    logguedChange(islogged) {
        this.authenticationSubject.next(islogged);
    }
    /**
     * gives information about an user authenticated
     * @return {?}
     */
    getUserInfo() {
        if (this.authBackend == AuthBackend.sceiba) {
            return this.http.get(this.env.sceibaApi + 'me');
        }
        else if (this.authBackend == AuthBackend.cuor) {
            return this.http.get(this.env.cuorApi + 'me');
        }
    }
}
SimpleAuthenticationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SimpleAuthenticationService.ctorParameters = () => [
    { type: Environment },
    { type: HttpClient },
    { type: Router }
];
/** @nocollapse */ SimpleAuthenticationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SimpleAuthenticationService_Factory() { return new SimpleAuthenticationService(i0.ɵɵinject(i4.Environment), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router)); }, token: SimpleAuthenticationService, providedIn: "root" });
if (false) {
    /** @type {?} */
    SimpleAuthenticationService.prototype.authBackend;
    /**
     * @type {?}
     * @private
     */
    SimpleAuthenticationService.prototype.authenticationSubject;
    /**
     * Observer to handles the behavior when a user authenticates
     * @type {?}
     */
    SimpleAuthenticationService.prototype.authenticationSubjectObservable;
    /**
     * @type {?}
     * @private
     */
    SimpleAuthenticationService.prototype.env;
    /**
     * @type {?}
     * @protected
     */
    SimpleAuthenticationService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SimpleAuthenticationService.prototype._router;
}
//# sourceMappingURL=data:application/json;base64,