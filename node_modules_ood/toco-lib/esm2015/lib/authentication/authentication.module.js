/**
 * @fileoverview added by tsickle
 * Generated from: lib/authentication/authentication.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { NgModule } from '@angular/core';
import { SharedModule } from '../shared/public-api';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { TranslateModule } from '@ngx-translate/core';
import { OAuthModule, OAuthStorage } from 'angular-oauth2-oidc';
import { AuthenticationComponent } from './authentication.component';
import { OauthAuthenticationService, SimpleAuthenticationService } from './authentication.service';
/**
 * @return {?}
 */
export function storageFactory() {
    return localStorage;
}
export class AuthenticationModule {
}
AuthenticationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AuthenticationComponent
                ],
                imports: [
                    SharedModule,
                    HttpClientModule,
                    TranslateModule,
                    OAuthModule.forRoot(),
                ],
                exports: [
                    AuthenticationComponent
                ],
                //TODO: esto se elimina de aquí y se pone en el fichero `core/services/http-interceptor.order.ts`.
                providers: [
                    { provide: OAuthStorage, useFactory: storageFactory },
                    OauthAuthenticationService,
                    SimpleAuthenticationService,
                    /* TODO: This can not be set here. */
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: OauthAuthenticationService,
                        multi: true
                    }
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1BLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWhFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRXBFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDBCQUEwQixDQUFBOzs7O0FBRWxHLE1BQU0sVUFBVSxjQUFjO0lBQzVCLE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUM7QUE4QkQsTUFBTSxPQUFPLG9CQUFvQjs7O1lBN0JoQyxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFO29CQUNWLHVCQUF1QjtpQkFDMUI7Z0JBRUQsT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osZ0JBQWdCO29CQUNoQixlQUFlO29CQUNmLFdBQVcsQ0FBQyxPQUFPLEVBQUU7aUJBRXhCO2dCQUNELE9BQU8sRUFBRTtvQkFDTCx1QkFBdUI7aUJBQzFCOztnQkFHRCxTQUFTLEVBQUU7b0JBQ1AsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7b0JBQ3JELDBCQUEwQjtvQkFDMUIsMkJBQTJCO29CQUMzQixxQ0FBcUM7b0JBQ3JDO3dCQUNJLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFFBQVEsRUFBRSwwQkFBMEI7d0JBQ3BDLEtBQUssRUFBRSxJQUFJO3FCQUNkO2lCQUNGO2FBQ04iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMjAgVW5pdmVyc2lkYWQgZGUgUGluYXIgZGVsIFLDrW8gXCJIZXJtYW5vcyBTYcOteiBNb250ZXMgZGUgT2NhXCJcbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5cbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTaGFyZWRNb2R1bGUgfSBmcm9tICcuLi9zaGFyZWQvcHVibGljLWFwaSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlLCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgT0F1dGhNb2R1bGUsIE9BdXRoU3RvcmFnZSB9IGZyb20gJ2FuZ3VsYXItb2F1dGgyLW9pZGMnO1xuXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vYXV0aGVudGljYXRpb24uY29tcG9uZW50J1xuaW1wb3J0IHsgQXV0aGVudGljYXRlUm91dGluZ01vZHVsZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24tcm91dGluZy5tb2R1bGUnXG5pbXBvcnQgeyBPYXV0aEF1dGhlbnRpY2F0aW9uU2VydmljZSwgU2ltcGxlQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gc3RvcmFnZUZhY3RvcnkoKSA6IE9BdXRoU3RvcmFnZSB7XG4gIHJldHVybiBsb2NhbFN0b3JhZ2Vcbn1cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIEF1dGhlbnRpY2F0aW9uQ29tcG9uZW50XG4gICAgXSxcblxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgU2hhcmVkTW9kdWxlLFxuICAgICAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgICAgICBUcmFuc2xhdGVNb2R1bGUsXG4gICAgICAgIE9BdXRoTW9kdWxlLmZvclJvb3QoKSxcbiAgICAgICAgLy8gQXV0aGVudGljYXRlUm91dGluZ01vZHVsZVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBBdXRoZW50aWNhdGlvbkNvbXBvbmVudFxuICAgIF0sXG5cbiAgICAvL1RPRE86IGVzdG8gc2UgZWxpbWluYSBkZSBhcXXDrSB5IHNlIHBvbmUgZW4gZWwgZmljaGVybyBgY29yZS9zZXJ2aWNlcy9odHRwLWludGVyY2VwdG9yLm9yZGVyLnRzYC5cbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBPQXV0aFN0b3JhZ2UsIHVzZUZhY3Rvcnk6IHN0b3JhZ2VGYWN0b3J5IH0sXG4gICAgICAgIE9hdXRoQXV0aGVudGljYXRpb25TZXJ2aWNlLFxuICAgICAgICBTaW1wbGVBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgIC8qIFRPRE86IFRoaXMgY2FuIG5vdCBiZSBzZXQgaGVyZS4gKi9cbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICAgICAgICB1c2VDbGFzczogT2F1dGhBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG59KVxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uTW9kdWxlXG57IH1cbiJdfQ==