/**
 * @fileoverview added by tsickle
 * Generated from: lib/search/query-input/query-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
/**
 * Represents a component used to search a query.
 *
 * In order to use this component with the correct i18n, you must include
 * (in your i18n translate files that are in the folder `assets\i18n`)
 * a translation key of name "TOCO_SEARCH_QUERY_INPUT" that contains
 * an object as value with the translation needed by this component.
 *
 * In the case of `es.json` file, you must include the following translation key:
 * "TOCO_SEARCH_QUERY_INPUT": {
 * "INPUT_SEARCH_LABEL": "Buscar",
 * "INPUT_SEARCH_PLACEHOLDER": "Escriba un criterio y presione Enter",
 * "BUTTON_SEARCH": "Buscar"
 * }
 *
 * In the case of `en.json` file, you must include the following translation key:
 * "TOCO_SEARCH_QUERY_INPUT": {
 * "INPUT_SEARCH_LABEL": "Search",
 * "INPUT_SEARCH_PLACEHOLDER": "Write a phrase and press Enter",
 * "BUTTON_SEARCH": "Search"
 * }
 *
 * If you have another language, then you have another `*.json` file,
 * and you must include the "TOCO_SEARCH_QUERY_INPUT" translation key with the correct translation values.
 */
export class QueryInputComponent {
    constructor() {
        this.query = "";
        this.minWordCount = 3;
        this.appearance = 'outline';
        this.inputColor = '';
        this.buttonColor = 'primary';
        this.showButton = true;
        this.width = 100;
        this.queryChange = new EventEmitter();
        this.queryCtrl = new FormControl();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.queryCtrl.valueChanges
        // .subscribe({
        //   next: (queryValueChanges) => {
        //     // this condition check if the param is a `string` an if at least write 3 letters
        //     if (typeof queryValueChanges === 'string' && (queryValueChanges.length >= this.minWordCount)) {
        //       this.queryChange.emit(queryValueChanges);
        //     }
        //   }
        // })
    }
    /**
     * @return {?}
     */
    riseQuery() {
        this.queryChange.emit(this.queryCtrl.value ? this.queryCtrl.value : '');
    }
}
QueryInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-search-query-input',
                template: "<div fxLayout=\"row\" [ngStyle]=\"{'align-items': 'center', 'width.%': width }\">\n    \n    <mat-form-field *ngIf=\"appearance == 'outline';else templateMatFormField\" appearance=\"{{appearance}}\" [color]=\"inputColor\" class=\"query-input\" [ngStyle]=\"{'width.%': 100 }\">\n        <mat-label>{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_LABEL' | translate }}</mat-label>\n        <input matInput placeholder=\"{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_PLACEHOLDER' | translate }}\" type=\"search\" [value]=\"query\" [formControl]=\"queryCtrl\" (keyup.enter)= \"riseQuery()\">\n    </mat-form-field>\n    \n    <ng-template #templateMatFormField>\n        <mat-form-field [ngStyle]=\"{'width.%': width }\">\n            <mat-label>{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_LABEL' | translate }}</mat-label>\n            <input matInput placeholder=\"{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_PLACEHOLDER' | translate }}\" type=\"search\" [value]=\"query\" [formControl]=\"queryCtrl\" (keyup.enter)= \"riseQuery()\">\n        </mat-form-field>\n    </ng-template>\n    \n    <button mat-raised-button *ngIf=\"showButton && appearance == 'outline'\" (click)=\"riseQuery()\" color=\"{{buttonColor}}\" [ngStyle]=\"{'height': '59.5px', 'margin-left': '1em'}\">{{ 'TOCO_SEARCH_QUERY_INPUT.BUTTON_SEARCH' | translate }}</button>\n    <button mat-raised-button *ngIf=\"showButton && appearance != 'outline'\" (click)=\"riseQuery()\" color=\"{{buttonColor}}\" [ngStyle]=\"{'margin-left': '1em'}\">{{ 'TOCO_SEARCH_QUERY_INPUT.BUTTON_SEARCH' | translate }}</button>\n\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
QueryInputComponent.ctorParameters = () => [];
QueryInputComponent.propDecorators = {
    query: [{ type: Input }],
    minWordCount: [{ type: Input }],
    appearance: [{ type: Input }],
    inputColor: [{ type: Input }],
    buttonColor: [{ type: Input }],
    showButton: [{ type: Input }],
    width: [{ type: Input }],
    queryChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    QueryInputComponent.prototype.query;
    /** @type {?} */
    QueryInputComponent.prototype.minWordCount;
    /** @type {?} */
    QueryInputComponent.prototype.appearance;
    /** @type {?} */
    QueryInputComponent.prototype.inputColor;
    /** @type {?} */
    QueryInputComponent.prototype.buttonColor;
    /** @type {?} */
    QueryInputComponent.prototype.showButton;
    /** @type {?} */
    QueryInputComponent.prototype.width;
    /** @type {?} */
    QueryInputComponent.prototype.queryChange;
    /** @type {?} */
    QueryInputComponent.prototype.queryCtrl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoL3F1ZXJ5LWlucHV0L3F1ZXJ5LWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDN0MsTUFBTSxPQUFPLG1CQUFtQjtJQTRCOUI7UUF6QkEsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUduQixpQkFBWSxHQUFXLENBQUMsQ0FBQztRQUd6QixlQUFVLEdBQVcsU0FBUyxDQUFDO1FBRy9CLGVBQVUsR0FBVyxFQUFFLENBQUM7UUFHeEIsZ0JBQVcsR0FBVyxTQUFTLENBQUM7UUFHaEMsZUFBVSxHQUFHLElBQUksQ0FBQztRQUdsQixVQUFLLEdBQVcsR0FBRyxDQUFDO1FBR3BCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV6QyxjQUFTLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQUVkLENBQUM7Ozs7SUFFakIsUUFBUTtRQUNOLDhCQUE4QjtRQUM5QixlQUFlO1FBQ2YsbUNBQW1DO1FBQ25DLHdGQUF3RjtRQUN4RixzR0FBc0c7UUFDdEcsa0RBQWtEO1FBQ2xELFFBQVE7UUFDUixNQUFNO1FBQ04sS0FBSztJQUNQLENBQUM7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDOzs7WUFqREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLHVpREFBMkM7O2FBRTVDOzs7OztvQkFHRSxLQUFLOzJCQUdMLEtBQUs7eUJBR0wsS0FBSzt5QkFHTCxLQUFLOzBCQUdMLEtBQUs7eUJBR0wsS0FBSztvQkFHTCxLQUFLOzBCQUdMLE1BQU07Ozs7SUFyQlAsb0NBQ21COztJQUVuQiwyQ0FDeUI7O0lBRXpCLHlDQUMrQjs7SUFFL0IseUNBQ3dCOztJQUV4QiwwQ0FDZ0M7O0lBRWhDLHlDQUNrQjs7SUFFbEIsb0NBQ29COztJQUVwQiwwQ0FDeUM7O0lBRXpDLHdDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbXBvbmVudCB1c2VkIHRvIHNlYXJjaCBhIHF1ZXJ5LiBcbiAqIFxuICogSW4gb3JkZXIgdG8gdXNlIHRoaXMgY29tcG9uZW50IHdpdGggdGhlIGNvcnJlY3QgaTE4biwgeW91IG11c3QgaW5jbHVkZSBcbiAqIChpbiB5b3VyIGkxOG4gdHJhbnNsYXRlIGZpbGVzIHRoYXQgYXJlIGluIHRoZSBmb2xkZXIgYGFzc2V0c1xcaTE4bmApIFxuICogYSB0cmFuc2xhdGlvbiBrZXkgb2YgbmFtZSBcIlRPQ09fU0VBUkNIX1FVRVJZX0lOUFVUXCIgdGhhdCBjb250YWlucyBcbiAqIGFuIG9iamVjdCBhcyB2YWx1ZSB3aXRoIHRoZSB0cmFuc2xhdGlvbiBuZWVkZWQgYnkgdGhpcyBjb21wb25lbnQuIFxuICogXG4gKiBJbiB0aGUgY2FzZSBvZiBgZXMuanNvbmAgZmlsZSwgeW91IG11c3QgaW5jbHVkZSB0aGUgZm9sbG93aW5nIHRyYW5zbGF0aW9uIGtleTogXG4gICAgXCJUT0NPX1NFQVJDSF9RVUVSWV9JTlBVVFwiOiB7XG4gICAgICAgIFwiSU5QVVRfU0VBUkNIX0xBQkVMXCI6IFwiQnVzY2FyXCIsXG4gICAgICAgIFwiSU5QVVRfU0VBUkNIX1BMQUNFSE9MREVSXCI6IFwiRXNjcmliYSB1biBjcml0ZXJpbyB5IHByZXNpb25lIEVudGVyXCIsXG4gICAgICAgIFwiQlVUVE9OX1NFQVJDSFwiOiBcIkJ1c2NhclwiXG4gICAgfVxuICogXG4gKiBJbiB0aGUgY2FzZSBvZiBgZW4uanNvbmAgZmlsZSwgeW91IG11c3QgaW5jbHVkZSB0aGUgZm9sbG93aW5nIHRyYW5zbGF0aW9uIGtleTogXG4gICAgXCJUT0NPX1NFQVJDSF9RVUVSWV9JTlBVVFwiOiB7XG4gICAgICAgIFwiSU5QVVRfU0VBUkNIX0xBQkVMXCI6IFwiU2VhcmNoXCIsXG4gICAgICAgIFwiSU5QVVRfU0VBUkNIX1BMQUNFSE9MREVSXCI6IFwiV3JpdGUgYSBwaHJhc2UgYW5kIHByZXNzIEVudGVyXCIsXG4gICAgICAgIFwiQlVUVE9OX1NFQVJDSFwiOiBcIlNlYXJjaFwiXG4gICAgfVxuICogXG4gKiBJZiB5b3UgaGF2ZSBhbm90aGVyIGxhbmd1YWdlLCB0aGVuIHlvdSBoYXZlIGFub3RoZXIgYCouanNvbmAgZmlsZSwgXG4gKiBhbmQgeW91IG11c3QgaW5jbHVkZSB0aGUgXCJUT0NPX1NFQVJDSF9RVUVSWV9JTlBVVFwiIHRyYW5zbGF0aW9uIGtleSB3aXRoIHRoZSBjb3JyZWN0IHRyYW5zbGF0aW9uIHZhbHVlcy4gXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RvY28tc2VhcmNoLXF1ZXJ5LWlucHV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3F1ZXJ5LWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcXVlcnktaW5wdXQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBRdWVyeUlucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKVxuICBxdWVyeTogc3RyaW5nID0gXCJcIjtcblxuICBASW5wdXQoKVxuICBtaW5Xb3JkQ291bnQ6IG51bWJlciA9IDM7XG5cbiAgQElucHV0KClcbiAgYXBwZWFyYW5jZTogc3RyaW5nID0gJ291dGxpbmUnO1xuXG4gIEBJbnB1dCgpXG4gIGlucHV0Q29sb3I6IHN0cmluZyA9ICcnO1xuXG4gIEBJbnB1dCgpXG4gIGJ1dHRvbkNvbG9yOiBzdHJpbmcgPSAncHJpbWFyeSc7XG5cbiAgQElucHV0KClcbiAgc2hvd0J1dHRvbiA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgd2lkdGg6IG51bWJlciA9IDEwMDtcblxuICBAT3V0cHV0KClcbiAgcXVlcnlDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBxdWVyeUN0cmwgPSBuZXcgRm9ybUNvbnRyb2woKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIC8vIHRoaXMucXVlcnlDdHJsLnZhbHVlQ2hhbmdlc1xuICAgIC8vIC5zdWJzY3JpYmUoe1xuICAgIC8vICAgbmV4dDogKHF1ZXJ5VmFsdWVDaGFuZ2VzKSA9PiB7XG4gICAgLy8gICAgIC8vIHRoaXMgY29uZGl0aW9uIGNoZWNrIGlmIHRoZSBwYXJhbSBpcyBhIGBzdHJpbmdgIGFuIGlmIGF0IGxlYXN0IHdyaXRlIDMgbGV0dGVyc1xuICAgIC8vICAgICBpZiAodHlwZW9mIHF1ZXJ5VmFsdWVDaGFuZ2VzID09PSAnc3RyaW5nJyAmJiAocXVlcnlWYWx1ZUNoYW5nZXMubGVuZ3RoID49IHRoaXMubWluV29yZENvdW50KSkge1xuICAgIC8vICAgICAgIHRoaXMucXVlcnlDaGFuZ2UuZW1pdChxdWVyeVZhbHVlQ2hhbmdlcyk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH1cbiAgICAvLyB9KVxuICB9XG5cbiAgcmlzZVF1ZXJ5KCl7XG4gICAgdGhpcy5xdWVyeUNoYW5nZS5lbWl0KHRoaXMucXVlcnlDdHJsLnZhbHVlID8gdGhpcy5xdWVyeUN0cmwudmFsdWUgOiAnJyk7XG4gIH1cbn1cbiJdfQ==