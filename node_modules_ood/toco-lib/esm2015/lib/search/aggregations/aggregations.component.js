/**
 * @fileoverview added by tsickle
 * Generated from: lib/search/aggregations/aggregations.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from "@angular/core";
/**
 * @record
 */
export function AggregationsSelection() { }
export class AggregationsComponent {
    constructor() {
        this.aggregations = {};
        /**
         *
         * {
         *  'country': ['Cuba','Peru'],
         *  'state': ['New York']
         *  ...
         * }
         *
         * in the aggregation country, buckets 'Cuba' and 'Peru' are selected
         * in the aggregation state, bucket 'New York' is selected
         *
         */
        this.selectedAggr = {};
        this.keySelect = new EventEmitter();
        this.keys = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        for (const key in this.aggregations) {
            if (this.aggregations.hasOwnProperty(key)) {
                /** @type {?} */
                const element = this.aggregations[key];
                //this.keys.push(key);
                this.keys.push({ "key": key, "sp": this._translate(key) });
            }
        }
        console.log("cola");
        console.log(this.keys);
    }
    //aqui se agregan los casos que puedan haber en las agregaciones para q salgan siempre en español
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    _translate(key) {
        switch (key) {
            case "status": {
                return "Estado";
            }
            case "country": {
                return "País";
            }
            case "state": {
                return "Provincia (Estado)";
            }
            case "types": {
                return "Tipos";
            }
            default: {
                return this.aggregations[key]['label'];
            }
        }
        return key;
    }
    /**
     * @param {?} aggrKey
     * @param {?} bucket
     * @return {?}
     */
    isSelected(aggrKey, bucket) {
        if (this.selectedAggr.hasOwnProperty(aggrKey)) {
            for (let index = 0; index < this.selectedAggr[aggrKey].length; index++) {
                /** @type {?} */
                const element = this.selectedAggr[aggrKey][index];
                if (element == bucket.key) {
                    // console.log(this.selectedAggr, aggrKey, bucket);
                    // console.log("--------------------");
                    return true;
                }
            }
            // this.selectedAggr[aggrKey].forEach((key) => {
            //   if (key == bucket.key) {
            //     console.log(this.selectedAggr, aggrKey, bucket);
            //     console.log("--------------------");
            //     return true;
            //   }
            // });
        }
        // console.log("FALSE");
        return false;
    }
    /**
     * @param {?} aggrKey
     * @param {?} bucket
     * @return {?}
     */
    selectionChange(aggrKey, bucket) {
        if (!this.selectedAggr.hasOwnProperty(aggrKey)) {
            this.selectedAggr[aggrKey] = [];
        }
        if (this.selectedAggr[aggrKey].find((/**
         * @param {?} k
         * @return {?}
         */
        k => k == bucket.key))) {
            this.selectedAggr[aggrKey] = this.selectedAggr[aggrKey].filter((/**
             * @param {?} k
             * @return {?}
             */
            k => k != bucket.key));
        }
        else {
            this.selectedAggr[aggrKey].push(bucket.key);
        }
        this.keySelect.emit(this.selectedAggr);
    }
}
AggregationsComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-search-aggregations",
                template: "<ng-container *ngFor=\"let key of keys\">\n  <mat-card *ngIf=\"aggregations[key.key].buckets.length != 0\" class=\"m-1\">\n    <mat-card-header>\n      <mat-card-title class=\"text-capitalize\">{{ key.sp }} </mat-card-title>\n    </mat-card-header>\n    <mat-card-content fxLayout=\"column\">\n      <mat-checkbox\n        *ngFor=\"let bucket of aggregations[key.key].buckets\"\n        [checked]=\"isSelected(key.key, bucket)\"\n        (change)=\"selectionChange(key.key, bucket)\"\n        class=\"text-capitalize\"\n      >\n        {{ bucket.key }} ({{ bucket.doc_count }})\n      </mat-checkbox>\n    </mat-card-content>\n  </mat-card>\n</ng-container>\n",
                styles: [".m-1{margin:1em}.text-capitalize{text-transform:capitalize!important}"]
            }] }
];
/** @nocollapse */
AggregationsComponent.ctorParameters = () => [];
AggregationsComponent.propDecorators = {
    aggregations: [{ type: Input }],
    selectedAggr: [{ type: Input }],
    keySelect: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AggregationsComponent.prototype.aggregations;
    /**
     *
     * {
     *  'country': ['Cuba','Peru'],
     *  'state': ['New York']
     *  ...
     * }
     *
     * in the aggregation country, buckets 'Cuba' and 'Peru' are selected
     * in the aggregation state, bucket 'New York' is selected
     *
     * @type {?}
     */
    AggregationsComponent.prototype.selectedAggr;
    /** @type {?} */
    AggregationsComponent.prototype.keySelect;
    /** @type {?} */
    AggregationsComponent.prototype.keys;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL3NlYXJjaC9hZ2dyZWdhdGlvbnMvYWdncmVnYXRpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFHL0UsMkNBRUM7QUFPRCxNQUFNLE9BQU8scUJBQXFCO0lBdUJoQztRQXJCQSxpQkFBWSxHQUEyQixFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7UUFjMUMsaUJBQVksR0FBMEIsRUFBRSxDQUFDO1FBR3pDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBeUIsQ0FBQztRQUV0RCxTQUFJLEdBQUcsRUFBRSxDQUFDO0lBRUssQ0FBQzs7OztJQUVoQixRQUFRO1FBQ04sS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7O3NCQUNuQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUM7Z0JBQ3RDLHNCQUFzQjtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUN4RDtTQUNGO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV6QixDQUFDOzs7Ozs7O0lBR08sVUFBVSxDQUFDLEdBQUc7UUFDcEIsUUFBUSxHQUFHLEVBQ1g7WUFDRSxLQUFLLFFBQVEsQ0FBQyxDQUFDO2dCQUNiLE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztnQkFDZCxPQUFPLE1BQU0sQ0FBQzthQUNmO1lBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDWixPQUFPLG9CQUFvQixDQUFDO2FBQzdCO1lBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDWixPQUFPLE9BQU8sQ0FBQzthQUNoQjtZQUNELE9BQU8sQ0FBQyxDQUFDO2dCQUNQLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUV4QztTQUNGO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOzs7Ozs7SUFHRCxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQWtCO1FBRXBDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDN0MsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFOztzQkFDaEUsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUNqRCxJQUFJLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO29CQUN6QixtREFBbUQ7b0JBQ25ELHVDQUF1QztvQkFFdkMsT0FBTyxJQUFJLENBQUM7aUJBQ2I7YUFDRjtZQUNELGdEQUFnRDtZQUNoRCw2QkFBNkI7WUFDN0IsdURBQXVEO1lBQ3ZELDJDQUEyQztZQUUzQyxtQkFBbUI7WUFDbkIsTUFBTTtZQUNOLE1BQU07U0FDUDtRQUNELHdCQUF3QjtRQUV4QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVELGVBQWUsQ0FBQyxPQUFPLEVBQUUsTUFBa0I7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFDO1lBQzdDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2pDO1FBRUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFDLEVBQUM7WUFDeEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFDLENBQUM7U0FDdEY7YUFBSztZQUNKLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUM1QztRQUdILElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUE1R0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLGdxQkFBNEM7O2FBRTdDOzs7OzsyQkFFRSxLQUFLOzJCQWNMLEtBQUs7d0JBR0wsTUFBTTs7OztJQWpCUCw2Q0FDMEM7Ozs7Ozs7Ozs7Ozs7O0lBYTFDLDZDQUN5Qzs7SUFFekMsMENBQ3NEOztJQUV0RCxxQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQWdnciwgQWdnckJ1Y2tldCB9IGZyb20gXCIuLi8uLi9lbnRpdGllcy9wdWJsaWMtYXBpXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdncmVnYXRpb25zU2VsZWN0aW9ue1xuICBbaWQ6IHN0cmluZ106IHN0cmluZ1tdXG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJ0b2NvLXNlYXJjaC1hZ2dyZWdhdGlvbnNcIixcbiAgdGVtcGxhdGVVcmw6IFwiLi9hZ2dyZWdhdGlvbnMuY29tcG9uZW50Lmh0bWxcIixcbiAgc3R5bGVVcmxzOiBbXCIuL2FnZ3JlZ2F0aW9ucy5jb21wb25lbnQuc2Nzc1wiXSxcbn0pXG5leHBvcnQgY2xhc3MgQWdncmVnYXRpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgYWdncmVnYXRpb25zOiB7IFtpZDogc3RyaW5nXTogQWdnciB9ID0ge307XG5cbiAgLyoqKlxuICAgKiB7XG4gICAqICAnY291bnRyeSc6IFsnQ3ViYScsJ1BlcnUnXSxcbiAgICogICdzdGF0ZSc6IFsnTmV3IFlvcmsnXVxuICAgKiAgLi4uXG4gICAqIH1cbiAgICpcbiAgICogaW4gdGhlIGFnZ3JlZ2F0aW9uIGNvdW50cnksIGJ1Y2tldHMgJ0N1YmEnIGFuZCAnUGVydScgYXJlIHNlbGVjdGVkXG4gICAqIGluIHRoZSBhZ2dyZWdhdGlvbiBzdGF0ZSwgYnVja2V0ICdOZXcgWW9yaycgaXMgc2VsZWN0ZWRcbiAgICpcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNlbGVjdGVkQWdncjogQWdncmVnYXRpb25zU2VsZWN0aW9uID0ge307XG5cbiAgQE91dHB1dCgpXG4gIGtleVNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8QWdncmVnYXRpb25zU2VsZWN0aW9uPigpO1xuXG4gIGtleXMgPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5hZ2dyZWdhdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLmFnZ3JlZ2F0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmFnZ3JlZ2F0aW9uc1trZXldO1xuICAgICAgICAvL3RoaXMua2V5cy5wdXNoKGtleSk7XG4gICAgICAgIHRoaXMua2V5cy5wdXNoKHtcImtleVwiOmtleSwgXCJzcFwiOnRoaXMuX3RyYW5zbGF0ZShrZXkpfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiY29sYVwiKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzLmtleXMpO1xuXG4gIH1cblxuICAvL2FxdWkgc2UgYWdyZWdhbiBsb3MgY2Fzb3MgcXVlIHB1ZWRhbiBoYWJlciBlbiBsYXMgYWdyZWdhY2lvbmVzIHBhcmEgcSBzYWxnYW4gc2llbXByZSBlbiBlc3Bhw7FvbFxuICBwcml2YXRlIF90cmFuc2xhdGUoa2V5KXtcbiAgICBzd2l0Y2ggKGtleSlcbiAgICB7XG4gICAgICBjYXNlIFwic3RhdHVzXCI6IHtcbiAgICAgICAgcmV0dXJuIFwiRXN0YWRvXCI7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY291bnRyeVwiOiB7XG4gICAgICAgIHJldHVybiBcIlBhw61zXCI7XG4gICAgICB9XG4gICAgICBjYXNlIFwic3RhdGVcIjoge1xuICAgICAgICByZXR1cm4gXCJQcm92aW5jaWEgKEVzdGFkbylcIjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0eXBlc1wiOiB7XG4gICAgICAgIHJldHVybiBcIlRpcG9zXCI7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0aW9uc1trZXldWydsYWJlbCddO1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG5cbiAgaXNTZWxlY3RlZChhZ2dyS2V5LCBidWNrZXQ6IEFnZ3JCdWNrZXQpIHtcblxuICAgIGlmICh0aGlzLnNlbGVjdGVkQWdnci5oYXNPd25Qcm9wZXJ0eShhZ2dyS2V5KSkge1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc2VsZWN0ZWRBZ2dyW2FnZ3JLZXldLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5zZWxlY3RlZEFnZ3JbYWdncktleV1baW5kZXhdO1xuICAgICAgICBpZiAoZWxlbWVudCA9PSBidWNrZXQua2V5KSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zZWxlY3RlZEFnZ3IsIGFnZ3JLZXksIGJ1Y2tldCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyB0aGlzLnNlbGVjdGVkQWdnclthZ2dyS2V5XS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIC8vICAgaWYgKGtleSA9PSBidWNrZXQua2V5KSB7XG4gICAgICAvLyAgICAgY29uc29sZS5sb2codGhpcy5zZWxlY3RlZEFnZ3IsIGFnZ3JLZXksIGJ1Y2tldCk7XG4gICAgICAvLyAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcblxuICAgICAgLy8gICAgIHJldHVybiB0cnVlO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9KTtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coXCJGQUxTRVwiKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNlbGVjdGlvbkNoYW5nZShhZ2dyS2V5LCBidWNrZXQ6IEFnZ3JCdWNrZXQpIHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0ZWRBZ2dyLmhhc093blByb3BlcnR5KGFnZ3JLZXkpKXtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBZ2dyW2FnZ3JLZXldID0gW107XG4gICAgfVxuXG4gICAgICBpZiAodGhpcy5zZWxlY3RlZEFnZ3JbYWdncktleV0uZmluZChrID0+IGsgPT0gYnVja2V0LmtleSkpe1xuICAgICAgICB0aGlzLnNlbGVjdGVkQWdnclthZ2dyS2V5XSA9IHRoaXMuc2VsZWN0ZWRBZ2dyW2FnZ3JLZXldLmZpbHRlcihrID0+IGsgIT0gYnVja2V0LmtleSk7XG4gICAgICB9IGVsc2V7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBZ2dyW2FnZ3JLZXldLnB1c2goYnVja2V0LmtleSlcbiAgICAgIH1cblxuXG4gICAgdGhpcy5rZXlTZWxlY3QuZW1pdCh0aGlzLnNlbGVjdGVkQWdncik7XG4gIH1cbn1cbiJdfQ==