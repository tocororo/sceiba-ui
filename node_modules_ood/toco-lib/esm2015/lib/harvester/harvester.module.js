/**
 * @fileoverview added by tsickle
 * Generated from: lib/harvester/harvester.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { SharedModule } from '../shared/public-api';
import { ReactiveFormsModule } from '@angular/forms';
import { FiltersModule } from '../filters/public-api';
import { CatalogService } from '../backend/public-api';
import { HarvesterRoutingModule } from './harvester-routing.module';
import { RepositoriesComponent } from './repositories/repositories.component';
import { RepositoryComponent } from './repository/repository.component';
import { HarvesterComponent } from './harvester/harvester.component';
import { HarvesterService } from './harvester.service';
import { HarvesterFiltersComponent } from './harvester-filters/harvester-filters.component';
export class HarvesterModule {
}
HarvesterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    RepositoriesComponent,
                    RepositoryComponent,
                    HarvesterComponent,
                    HarvesterFiltersComponent
                ],
                imports: [
                    SharedModule,
                    ReactiveFormsModule,
                    HarvesterRoutingModule,
                    FiltersModule
                ],
                exports: [
                    RepositoriesComponent,
                    RepositoryComponent,
                    HarvesterComponent,
                    HarvesterFiltersComponent
                ],
                providers: [
                    CatalogService,
                    HarvesterService
                    // FiltersService,
                    // FilterContainerService
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFydmVzdGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2hhcnZlc3Rlci9oYXJ2ZXN0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQStCNUYsTUFBTSxPQUFPLGVBQWU7OztZQTdCM0IsUUFBUSxTQUFDO2dCQUNOLFlBQVksRUFBRTtvQkFDVixxQkFBcUI7b0JBQ3JCLG1CQUFtQjtvQkFDbkIsa0JBQWtCO29CQUNsQix5QkFBeUI7aUJBQzVCO2dCQUVELE9BQU8sRUFBRTtvQkFDTCxZQUFZO29CQUNaLG1CQUFtQjtvQkFDbkIsc0JBQXNCO29CQUN0QixhQUFhO2lCQUNoQjtnQkFFRCxPQUFPLEVBQUU7b0JBQ0wscUJBQXFCO29CQUNyQixtQkFBbUI7b0JBQ25CLGtCQUFrQjtvQkFDbEIseUJBQXlCO2lCQUM1QjtnQkFFRCxTQUFTLEVBQUU7b0JBQ1AsY0FBYztvQkFDZCxnQkFBZ0I7b0JBQ2hCLGtCQUFrQjtvQkFDbEIseUJBQXlCO2lCQUM1QjthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hhcmVkTW9kdWxlIH0gZnJvbSAnLi4vc2hhcmVkL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRmlsdGVyc01vZHVsZSB9IGZyb20gJy4uL2ZpbHRlcnMvcHVibGljLWFwaSc7XG5pbXBvcnQgeyBDYXRhbG9nU2VydmljZSB9IGZyb20gJy4uL2JhY2tlbmQvcHVibGljLWFwaSc7XG5cbmltcG9ydCB7IEhhcnZlc3RlclJvdXRpbmdNb2R1bGUgfSBmcm9tICcuL2hhcnZlc3Rlci1yb3V0aW5nLm1vZHVsZSc7XG5pbXBvcnQgeyBSZXBvc2l0b3JpZXNDb21wb25lbnQgfSBmcm9tICcuL3JlcG9zaXRvcmllcy9yZXBvc2l0b3JpZXMuY29tcG9uZW50JztcbmltcG9ydCB7IFJlcG9zaXRvcnlDb21wb25lbnQgfSBmcm9tICcuL3JlcG9zaXRvcnkvcmVwb3NpdG9yeS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGFydmVzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9oYXJ2ZXN0ZXIvaGFydmVzdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIYXJ2ZXN0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9oYXJ2ZXN0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBIYXJ2ZXN0ZXJGaWx0ZXJzQ29tcG9uZW50IH0gZnJvbSAnLi9oYXJ2ZXN0ZXItZmlsdGVycy9oYXJ2ZXN0ZXItZmlsdGVycy5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBSZXBvc2l0b3JpZXNDb21wb25lbnQsXG4gICAgICAgIFJlcG9zaXRvcnlDb21wb25lbnQsXG4gICAgICAgIEhhcnZlc3RlckNvbXBvbmVudCxcbiAgICAgICAgSGFydmVzdGVyRmlsdGVyc0NvbXBvbmVudFxuICAgIF0sXG5cbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIFNoYXJlZE1vZHVsZSxcbiAgICAgICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICAgICAgSGFydmVzdGVyUm91dGluZ01vZHVsZSxcbiAgICAgICAgRmlsdGVyc01vZHVsZVxuICAgIF0sXG5cbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFJlcG9zaXRvcmllc0NvbXBvbmVudCxcbiAgICAgICAgUmVwb3NpdG9yeUNvbXBvbmVudCxcbiAgICAgICAgSGFydmVzdGVyQ29tcG9uZW50LFxuICAgICAgICBIYXJ2ZXN0ZXJGaWx0ZXJzQ29tcG9uZW50XG4gICAgXSxcblxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBDYXRhbG9nU2VydmljZSxcbiAgICAgICAgSGFydmVzdGVyU2VydmljZVxuICAgICAgICAvLyBGaWx0ZXJzU2VydmljZSxcbiAgICAgICAgLy8gRmlsdGVyQ29udGFpbmVyU2VydmljZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgSGFydmVzdGVyTW9kdWxlXG57IH1cbiJdfQ==