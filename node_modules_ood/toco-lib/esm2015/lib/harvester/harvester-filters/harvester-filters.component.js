/**
 * @fileoverview added by tsickle
 * Generated from: lib/harvester/harvester-filters/harvester-filters.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver } from '@angular/core';
import { CatalogService } from '../../backend/public-api';
import { FilterContainerComponent, FilterContainerService } from '../../filters/public-api';
export class HarvesterFiltersComponent extends FilterContainerComponent {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} childrenService
     * @param {?} service
     */
    constructor(componentFactoryResolver, childrenService, service) {
        super(componentFactoryResolver, childrenService);
        this.componentFactoryResolver = componentFactoryResolver;
        this.childrenService = childrenService;
        this.service = service;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        default_filters.forEach((/**
         * @param {?} filter
         * @return {?}
         */
        filter => {
            this.filters_data.push(filter);
        }));
        this.service.getJournalsVocab().subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            response.data.vocabularies.forEach((/**
             * @param {?} vocab
             * @return {?}
             */
            vocab => {
                this.service.getTerminosByVocab(vocab.name + '/any').subscribe((/**
                 * @param {?} termsResponse
                 * @return {?}
                 */
                termsResponse => {
                    this.filters_data.push({
                        index: this.filters_data.length,
                        field: 'terms',
                        type: 'select-autocomplete',
                        placeholder: vocab.name,
                        name: vocab.name,
                        idVocab: vocab.id,
                        selectOptions: termsResponse.data.terms,
                        is_enabled: true
                    });
                }));
            }));
        }));
    }
}
HarvesterFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-harvester-filters-container',
                template: "<!-- <div fxLayout=\"row wrap\" fxLayoutAlign=\"start center\" fxLayoutAlign.xs=\"center center\" fxLayoutGap=\"1em\" fxLayoutGap.xs=\"0\"> -->\n\n  <ng-template toco-Filter></ng-template>\n\n<!-- </div> -->\n\n<button mat-icon-button [matMenuTriggerFor]=\"menu\">\n    <mat-icon>add</mat-icon>\n</button>\n  <mat-menu #menu=\"matMenu\" >\n    <ng-container *ngFor=\"let item of filters_data,let i=index\">\n        <ng-container *ngIf=\"item.is_enabled\">\n          <button mat-menu-item (click)=\"addFilter(i)\">\n            {{item.name}}\n          </button>\n        </ng-container>\n    </ng-container>\n    \n\n    \n  </mat-menu>",
                styles: [".width-100{width:100%}.mat-menu-item{height:37px}"]
            }] }
];
/** @nocollapse */
HarvesterFiltersComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: FilterContainerService },
    { type: CatalogService }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    HarvesterFiltersComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @protected
     */
    HarvesterFiltersComponent.prototype.childrenService;
    /**
     * @type {?}
     * @protected
     */
    HarvesterFiltersComponent.prototype.service;
}
/** @type {?} */
const default_filters = [
    {
        index: 0,
        field: 'title',
        type: 'search',
        placeholder: 'Título',
        name: 'Título',
        is_enabled: true
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFydmVzdGVyLWZpbHRlcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvaGFydmVzdGVyL2hhcnZlc3Rlci1maWx0ZXJzL2hhcnZlc3Rlci1maWx0ZXJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBTzVGLE1BQU0sT0FBTyx5QkFBMEIsU0FBUSx3QkFBd0I7Ozs7OztJQUVuRSxZQUFzQix3QkFBa0QsRUFDMUQsZUFBdUMsRUFDdkMsT0FBd0I7UUFFbEMsS0FBSyxDQUFDLHdCQUF3QixFQUFFLGVBQWUsQ0FBQyxDQUFBO1FBSjlCLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDMUQsb0JBQWUsR0FBZixlQUFlLENBQXdCO1FBQ3ZDLFlBQU8sR0FBUCxPQUFPLENBQWlCO0lBR3RDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBRWhCLGVBQWUsQ0FBQyxPQUFPOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkMsQ0FBQyxFQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUzs7OztRQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2pELFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7WUFBQyxLQUFLLENBQUMsRUFBRTtnQkFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVM7Ozs7Z0JBQUMsYUFBYSxDQUFDLEVBQUU7b0JBQ3pFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO3dCQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNO3dCQUMvQixLQUFLLEVBQUUsT0FBTzt3QkFDZCxJQUFJLEVBQUUscUJBQXFCO3dCQUMzQixXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUk7d0JBQ3ZCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTt3QkFDaEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFO3dCQUNqQixhQUFhLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLO3dCQUN2QyxVQUFVLEVBQUUsSUFBSTtxQkFDbkIsQ0FBQyxDQUFDO2dCQUNQLENBQUMsRUFBQyxDQUFDO1lBQ1AsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7OztZQXJDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtDQUFrQztnQkFDNUMsMG9CQUFpRDs7YUFFcEQ7Ozs7WUFUbUIsd0JBQXdCO1lBR1Qsc0JBQXNCO1lBRGhELGNBQWM7Ozs7Ozs7SUFVUCw2REFBNEQ7Ozs7O0lBQ3BFLG9EQUFpRDs7Ozs7SUFDakQsNENBQWtDOzs7TUErQnBDLGVBQWUsR0FBRztJQUNwQjtRQUNJLEtBQUssRUFBRSxDQUFDO1FBQ1IsS0FBSyxFQUFFLE9BQU87UUFDZCxJQUFJLEVBQUUsUUFBUTtRQUNkLFdBQVcsRUFBRSxRQUFRO1FBQ3JCLElBQUksRUFBRSxRQUFRO1FBQ2QsVUFBVSxFQUFFLElBQUk7S0FDbkI7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2F0YWxvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9iYWNrZW5kL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgRmlsdGVyQ29udGFpbmVyQ29tcG9uZW50LCBGaWx0ZXJDb250YWluZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZmlsdGVycy9wdWJsaWMtYXBpJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0b2NvLWhhcnZlc3Rlci1maWx0ZXJzLWNvbnRhaW5lcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2hhcnZlc3Rlci1maWx0ZXJzLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9oYXJ2ZXN0ZXItZmlsdGVycy5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEhhcnZlc3RlckZpbHRlcnNDb21wb25lbnQgZXh0ZW5kcyBGaWx0ZXJDb250YWluZXJDb21wb25lbnR7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgIHByb3RlY3RlZCBjaGlsZHJlblNlcnZpY2U6IEZpbHRlckNvbnRhaW5lclNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBzZXJ2aWNlOiAgQ2F0YWxvZ1NlcnZpY2UsKVxuICAgIHtcbiAgICAgICAgc3VwZXIoY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBjaGlsZHJlblNlcnZpY2UpXG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHN1cGVyLm5nT25Jbml0KClcblxuICAgICAgICBkZWZhdWx0X2ZpbHRlcnMuZm9yRWFjaChmaWx0ZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJzX2RhdGEucHVzaChmaWx0ZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Sm91cm5hbHNWb2NhYigpLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhLnZvY2FidWxhcmllcy5mb3JFYWNoKHZvY2FiID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0VGVybWlub3NCeVZvY2FiKHZvY2FiLm5hbWUrJy9hbnknKS5zdWJzY3JpYmUodGVybXNSZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyc19kYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuZmlsdGVyc19kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiAndGVybXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdC1hdXRvY29tcGxldGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHZvY2FiLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB2b2NhYi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWRWb2NhYjogdm9jYWIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zOiB0ZXJtc1Jlc3BvbnNlLmRhdGEudGVybXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19lbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgZGVmYXVsdF9maWx0ZXJzID0gW1xuICAgIHtcbiAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgIGZpZWxkOiAndGl0bGUnLFxuICAgICAgICB0eXBlOiAnc2VhcmNoJyxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICdUw610dWxvJyxcbiAgICAgICAgbmFtZTogJ1TDrXR1bG8nLFxuICAgICAgICBpc19lbmFibGVkOiB0cnVlXG4gICAgfVxuXTtcbiJdfQ==