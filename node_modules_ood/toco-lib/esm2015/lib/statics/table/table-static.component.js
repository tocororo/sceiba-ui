/**
 * @fileoverview added by tsickle
 * Generated from: lib/statics/table/table-static.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * @record
 */
export function PeriodicElement() { }
if (false) {
    /** @type {?} */
    PeriodicElement.prototype.name;
    /** @type {?} */
    PeriodicElement.prototype.position;
    /** @type {?} */
    PeriodicElement.prototype.weight;
    /** @type {?} */
    PeriodicElement.prototype.symbol;
}
/* For testing. */
/** @type {?} */
const ELEMENT_DATA = [
    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },
    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },
    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },
    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },
    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },
    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },
    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },
    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },
    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },
    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },
];
/**
 * Represents a static control that shows an array of objects using a table.
 */
export class StaticTableComponent {
    constructor() {
        this.appearance = 'outline';
        this.desc = undefined;
        this.value = [];
        this.columnsObjectProperty = [];
        this.columnsHeaderText = [];
    }
}
StaticTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'static-table',
                template: "\n<!-- TODO: En dependencia del valor de `appearance`, se aplican las clases CSS para lograr la apariencia deseada. \n     Actualmente, `appearance = 'outline'` es el \u00FAnico que est\u00E1 hecho. -->\n<fieldset class=\"static-table-fieldset\">\n    <legend class=\"static-table-fieldset-legend\">{{ desc }}</legend>\n\n    <table mat-table [dataSource]=\"value\" class=\"mat-elevation-z8\" [attr.aria-label]=\"desc\">\n        <!-- The content that is showed when the `dataSource` is not empty. -->\n        <ng-container *ngFor=\"let column of columnsObjectProperty; let pos = index\" [matColumnDef]=\"column\">\n            <th mat-header-cell *matHeaderCellDef>\n                {{ columnsHeaderText[pos] }}\n            </th>\n\n            <td mat-cell *matCellDef=\"let element\">\n                {{ element[column] }}\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"columnsObjectProperty; sticky: true\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: columnsObjectProperty;\"></tr>\n    </table>\n\n</fieldset>\n",
                styles: [".static-table-fieldset{width:auto;margin:-4px 0 24px;padding:0 10px 14px;cursor:default;background-color:#fff;border:1px solid rgba(0,0,0,.12);border-radius:4px}.static-table-fieldset-legend{padding:0 4px;background-color:#fff;color:rgba(0,0,0,.6);font-size:10px}table{width:100%;box-shadow:none}"]
            }] }
];
/** @nocollapse */
StaticTableComponent.ctorParameters = () => [];
StaticTableComponent.propDecorators = {
    appearance: [{ type: Input }],
    desc: [{ type: Input }],
    value: [{ type: Input }],
    columnsObjectProperty: [{ type: Input }],
    columnsHeaderText: [{ type: Input }]
};
if (false) {
    /**
     * The control's appearance.
     * By default, its value is `'outline'`.
     * @type {?}
     */
    StaticTableComponent.prototype.appearance;
    /**
     * The control's description.
     * By default, its value is `undefined` and it is not showed.
     * @type {?}
     */
    StaticTableComponent.prototype.desc;
    /**
     * The array of data that should be rendered by the table, where each object represents one row.
     * By default, its value is `[]`.
     * @type {?}
     */
    StaticTableComponent.prototype.value;
    /**
     * The array of strings that indicates the object property name of the columns.
     * By default, its value is `[]`.
     * @type {?}
     */
    StaticTableComponent.prototype.columnsObjectProperty;
    /**
     * The array of strings that indicates the header text of the columns.
     * By default, its value is `[]`.
     * @type {?}
     */
    StaticTableComponent.prototype.columnsHeaderText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtc3RhdGljLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL3N0YXRpY3MvdGFibGUvdGFibGUtc3RhdGljLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBS2pELHFDQU1DOzs7SUFKQSwrQkFBYTs7SUFDYixtQ0FBaUI7O0lBQ2pCLGlDQUFlOztJQUNmLGlDQUFlOzs7O01BSVYsWUFBWSxHQUFzQjtJQUN2QyxFQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUM7SUFDNUQsRUFBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDO0lBQzNELEVBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQztJQUMzRCxFQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUM7SUFDOUQsRUFBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDO0lBQ3pELEVBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBQztJQUMzRCxFQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUM7SUFDN0QsRUFBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDO0lBQzNELEVBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBQztJQUM3RCxFQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUM7Q0FDM0Q7Ozs7QUFXRCxNQUFNLE9BQU8sb0JBQW9CO0lBcUNoQztRQUVDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBRWhCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7WUFsREQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxjQUFjO2dCQUN4Qixta0NBQTRDOzthQUU1Qzs7Ozs7eUJBT0MsS0FBSzttQkFPTCxLQUFLO29CQU9MLEtBQUs7b0NBT0wsS0FBSztnQ0FPTCxLQUFLOzs7Ozs7OztJQTVCTiwwQ0FDMEI7Ozs7OztJQU0xQixvQ0FDb0I7Ozs7OztJQU1wQixxQ0FDNEI7Ozs7OztJQU01QixxREFDdUM7Ozs7OztJQU12QyxpREFDbUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUGFyYW1zIH0gZnJvbSAnLi4vLi4vY29yZS9wdWJsaWMtYXBpJztcblxuLyogRm9yIHRlc3RpbmcuICovXG5leHBvcnQgaW50ZXJmYWNlIFBlcmlvZGljRWxlbWVudFxue1xuXHRuYW1lOiBzdHJpbmc7XG5cdHBvc2l0aW9uOiBudW1iZXI7XG5cdHdlaWdodDogbnVtYmVyO1xuXHRzeW1ib2w6IHN0cmluZztcbn1cblxuLyogRm9yIHRlc3RpbmcuICovXG5jb25zdCBFTEVNRU5UX0RBVEE6IFBlcmlvZGljRWxlbWVudFtdID0gW1xuXHR7cG9zaXRpb246IDEsIG5hbWU6ICdIeWRyb2dlbicsIHdlaWdodDogMS4wMDc5LCBzeW1ib2w6ICdIJ30sXG5cdHtwb3NpdGlvbjogMiwgbmFtZTogJ0hlbGl1bScsIHdlaWdodDogNC4wMDI2LCBzeW1ib2w6ICdIZSd9LFxuXHR7cG9zaXRpb246IDMsIG5hbWU6ICdMaXRoaXVtJywgd2VpZ2h0OiA2Ljk0MSwgc3ltYm9sOiAnTGknfSxcblx0e3Bvc2l0aW9uOiA0LCBuYW1lOiAnQmVyeWxsaXVtJywgd2VpZ2h0OiA5LjAxMjIsIHN5bWJvbDogJ0JlJ30sXG5cdHtwb3NpdGlvbjogNSwgbmFtZTogJ0Jvcm9uJywgd2VpZ2h0OiAxMC44MTEsIHN5bWJvbDogJ0InfSxcblx0e3Bvc2l0aW9uOiA2LCBuYW1lOiAnQ2FyYm9uJywgd2VpZ2h0OiAxMi4wMTA3LCBzeW1ib2w6ICdDJ30sXG5cdHtwb3NpdGlvbjogNywgbmFtZTogJ05pdHJvZ2VuJywgd2VpZ2h0OiAxNC4wMDY3LCBzeW1ib2w6ICdOJ30sXG5cdHtwb3NpdGlvbjogOCwgbmFtZTogJ094eWdlbicsIHdlaWdodDogMTUuOTk5NCwgc3ltYm9sOiAnTyd9LFxuXHR7cG9zaXRpb246IDksIG5hbWU6ICdGbHVvcmluZScsIHdlaWdodDogMTguOTk4NCwgc3ltYm9sOiAnRid9LFxuXHR7cG9zaXRpb246IDEwLCBuYW1lOiAnTmVvbicsIHdlaWdodDogMjAuMTc5Nywgc3ltYm9sOiAnTmUnfSxcbl07XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3RhdGljIGNvbnRyb2wgdGhhdCBzaG93cyBhbiBhcnJheSBvZiBvYmplY3RzIHVzaW5nIGEgdGFibGUuIFxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdzdGF0aWMtdGFibGUnLFxuXHR0ZW1wbGF0ZVVybDogJy4vdGFibGUtc3RhdGljLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJy4vdGFibGUtc3RhdGljLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgU3RhdGljVGFibGVDb21wb25lbnRcbntcbiAgICAvKipcbiAgICAgKiBUaGUgY29udHJvbCdzIGFwcGVhcmFuY2UuIFxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ291dGxpbmUnYC4gXG4gICAgICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBhcHBlYXJhbmNlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSBjb250cm9sJ3MgZGVzY3JpcHRpb24uIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAgYW5kIGl0IGlzIG5vdCBzaG93ZWQuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIGRlc2M6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGFycmF5IG9mIGRhdGEgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYnkgdGhlIHRhYmxlLCB3aGVyZSBlYWNoIG9iamVjdCByZXByZXNlbnRzIG9uZSByb3cuIFxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB2YWx1ZTogUGFyYW1zPGFueT5bXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcnJheSBvZiBzdHJpbmdzIHRoYXQgaW5kaWNhdGVzIHRoZSBvYmplY3QgcHJvcGVydHkgbmFtZSBvZiB0aGUgY29sdW1ucy4gXG4gICAgICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuICAgICAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgY29sdW1uc09iamVjdFByb3BlcnR5OiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcnJheSBvZiBzdHJpbmdzIHRoYXQgaW5kaWNhdGVzIHRoZSBoZWFkZXIgdGV4dCBvZiB0aGUgY29sdW1ucy4gXG4gICAgICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuICAgICAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgY29sdW1uc0hlYWRlclRleHQ6IHN0cmluZ1tdO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcigpXG5cdHtcblx0XHR0aGlzLmFwcGVhcmFuY2UgPSAnb3V0bGluZSc7XG5cdFx0dGhpcy5kZXNjID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMudmFsdWUgPSBbXTtcblxuXHRcdHRoaXMuY29sdW1uc09iamVjdFByb3BlcnR5ID0gW107XG5cdFx0dGhpcy5jb2x1bW5zSGVhZGVyVGV4dCA9IFtdO1xuXHR9XG59XG4iXX0=