/**
 * @fileoverview added by tsickle
 * Generated from: lib/statics/text/text-static.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { FormControl } from '@angular/forms';
/**
 * Represents a static control that shows a text.
 */
export class StaticTextComponent {
    constructor() {
        this.width = '100%';
        this.appearance = 'outline';
        this.desc = undefined;
        this.value = undefined;
        this.valueByDefault = 'There is not any text to show!';
        this.textAlign = 'left';
        this.input_static = undefined;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.value === undefined)
            this.value = this.valueByDefault;
        this.input_static = new FormControl(this.value);
    }
    /**
     * Handler method that is called when the control's value changes in the UI.
     * It is always used to set the `value` input field as the component value.
     * For internal use only.
     * @return {?}
     */
    handleInput() {
        /* It always sets the `value` input field as the component value. */
        this.input_static.setValue(this.value);
    }
}
StaticTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'static-text',
                template: "\n<mat-form-field class=\"text-mat-form-field control-without-interactivity\" [appearance]=\"appearance\">\n    <mat-label>{{ desc }}</mat-label>\n    <input matInput [formControl]=\"input_static\" [style.textAlign]=\"textAlign\" [attr.aria-label]=\"desc\" (input)=\"handleInput()\" />\n</mat-form-field>\n",
                host: {
                    '[style.width]': 'width'
                },
                styles: [".text-mat-form-field{width:100%}.control-without-interactivity{pointer-events:none}"]
            }] }
];
/** @nocollapse */
StaticTextComponent.ctorParameters = () => [];
StaticTextComponent.propDecorators = {
    width: [{ type: Input }],
    appearance: [{ type: Input }],
    desc: [{ type: Input }],
    value: [{ type: Input }],
    valueByDefault: [{ type: Input }],
    textAlign: [{ type: Input }]
};
if (false) {
    /**
     * The control's width.
     * The width of the content area, padding area or border area (depending on `box-sizing`) of certain boxes.
     * By default, its value is `'100%'`.
     * @type {?}
     */
    StaticTextComponent.prototype.width;
    /**
     * The control's appearance.
     * By default, its value is `'outline'`.
     * @type {?}
     */
    StaticTextComponent.prototype.appearance;
    /**
     * The control's description.
     * By default, its value is `undefined` and it is not showed.
     * @type {?}
     */
    StaticTextComponent.prototype.desc;
    /**
     * The control's value.
     * By default, its value is `undefined`.
     * @type {?}
     */
    StaticTextComponent.prototype.value;
    /**
     * The control's default value.
     * By default, its value is `'There is not any text to show!'`.
     * @type {?}
     */
    StaticTextComponent.prototype.valueByDefault;
    /**
     * Returns the control's text align.
     * By default, its value is `'left'`.
     * @type {?}
     */
    StaticTextComponent.prototype.textAlign;
    /**
     * Returns a reference to the `FormControl` that tracks the value and validity state
     * of the internal control that contains the text input.
     * For internal use only.
     * @type {?}
     */
    StaticTextComponent.prototype.input_static;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1zdGF0aWMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvc3RhdGljcy90ZXh0L3RleHQtc3RhdGljLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQWE3QyxNQUFNLE9BQU8sbUJBQW1CO0lBb0QvQjtRQUVDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsZ0NBQWdDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFFeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVTLFFBQVE7UUFFakIsSUFBRyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVM7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFFOUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7OztJQU9NLFdBQVc7UUFFakIsb0VBQW9FO1FBQ3BFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7WUF4RkQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxhQUFhO2dCQUN2Qiw4VEFBMkM7Z0JBRXhDLElBQUksRUFBRTtvQkFDRixlQUFlLEVBQUUsT0FBTztpQkFDM0I7O2FBQ0o7Ozs7O29CQVFDLEtBQUs7eUJBT0wsS0FBSzttQkFPTCxLQUFLO29CQU9MLEtBQUs7NkJBT0wsS0FBSzt3QkFPTCxLQUFLOzs7Ozs7Ozs7SUFuQ04sb0NBQ3FCOzs7Ozs7SUFNckIseUNBQzBCOzs7Ozs7SUFNMUIsbUNBQ29COzs7Ozs7SUFNcEIsb0NBQ3FCOzs7Ozs7SUFNckIsNkNBQzhCOzs7Ozs7SUFNOUIsd0NBQzRCOzs7Ozs7O0lBTzVCLDJDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzdGF0aWMgY29udHJvbCB0aGF0IHNob3dzIGEgdGV4dC4gXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ3N0YXRpYy10ZXh0Jyxcblx0dGVtcGxhdGVVcmw6ICcuL3RleHQtc3RhdGljLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJy4vdGV4dC1zdGF0aWMuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbc3R5bGUud2lkdGhdJzogJ3dpZHRoJ1xuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgU3RhdGljVGV4dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdFxue1xuICAgIC8qKlxuICAgICAqIFRoZSBjb250cm9sJ3Mgd2lkdGguIFxuICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgY29udGVudCBhcmVhLCBwYWRkaW5nIGFyZWEgb3IgYm9yZGVyIGFyZWEgKGRlcGVuZGluZyBvbiBgYm94LXNpemluZ2ApIG9mIGNlcnRhaW4gYm94ZXMuIFxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJzEwMCUnYC4gXG4gICAgICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB3aWR0aDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRyb2wncyBhcHBlYXJhbmNlLiBcbiAgICAgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdvdXRsaW5lJ2AuIFxuICAgICAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgYXBwZWFyYW5jZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgY29udHJvbCdzIGRlc2NyaXB0aW9uLiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgIGFuZCBpdCBpcyBub3Qgc2hvd2VkLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBkZXNjOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSBjb250cm9sJ3MgdmFsdWUuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIHZhbHVlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSBjb250cm9sJ3MgZGVmYXVsdCB2YWx1ZS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ1RoZXJlIGlzIG5vdCBhbnkgdGV4dCB0byBzaG93ISdgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB2YWx1ZUJ5RGVmYXVsdDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29udHJvbCdzIHRleHQgYWxpZ24uIFxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ2xlZnQnYC4gXG4gICAgICovXG5cdEBJbnB1dCgpXG4gICAgcHVibGljIHRleHRBbGlnbjogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBgRm9ybUNvbnRyb2xgIHRoYXQgdHJhY2tzIHRoZSB2YWx1ZSBhbmQgdmFsaWRpdHkgc3RhdGUgXG5cdCAqIG9mIHRoZSBpbnRlcm5hbCBjb250cm9sIHRoYXQgY29udGFpbnMgdGhlIHRleHQgaW5wdXQuIFxuXHQgKiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuIFxuXHQgKi9cblx0cHVibGljIGlucHV0X3N0YXRpYzogRm9ybUNvbnRyb2w7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHRoaXMud2lkdGggPSAnMTAwJSc7XG5cdFx0dGhpcy5hcHBlYXJhbmNlID0gJ291dGxpbmUnO1xuXHRcdHRoaXMuZGVzYyA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMudmFsdWVCeURlZmF1bHQgPSAnVGhlcmUgaXMgbm90IGFueSB0ZXh0IHRvIHNob3chJztcblx0XHR0aGlzLnRleHRBbGlnbiA9ICdsZWZ0JztcblxuXHRcdHRoaXMuaW5wdXRfc3RhdGljID0gdW5kZWZpbmVkO1xuXHR9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuXHR7XG5cdFx0aWYodGhpcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZUJ5RGVmYXVsdDtcblxuXHRcdHRoaXMuaW5wdXRfc3RhdGljID0gbmV3IEZvcm1Db250cm9sKHRoaXMudmFsdWUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIGNvbnRyb2wncyB2YWx1ZSBjaGFuZ2VzIGluIHRoZSBVSS4gXG5cdCAqIEl0IGlzIGFsd2F5cyB1c2VkIHRvIHNldCB0aGUgYHZhbHVlYCBpbnB1dCBmaWVsZCBhcyB0aGUgY29tcG9uZW50IHZhbHVlLiBcblx0ICogRm9yIGludGVybmFsIHVzZSBvbmx5LiBcblx0ICovXG5cdHB1YmxpYyBoYW5kbGVJbnB1dCgpOiB2b2lkXG5cdHtcblx0XHQvKiBJdCBhbHdheXMgc2V0cyB0aGUgYHZhbHVlYCBpbnB1dCBmaWVsZCBhcyB0aGUgY29tcG9uZW50IHZhbHVlLiAqL1xuXHRcdHRoaXMuaW5wdXRfc3RhdGljLnNldFZhbHVlKHRoaXMudmFsdWUpO1xuXHR9XG59XG4iXX0=