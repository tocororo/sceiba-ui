/**
 * @fileoverview added by tsickle
 * Generated from: lib/filters/filters.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Injectable, Output, EventEmitter } from '@angular/core';
import { FilterHttpMap } from './filter-item';
export class FiltersService {
    constructor() {
        this.params = new Array();
        // httpParams: HttpParams = new HttpParams();
        this.autocompleteFilter = new Array();
        this.paramsChanged = new EventEmitter();
    }
    /**
     *
     * @param {?=} field el nombre del campo que se esta filtrando (title, etc...)
     * @param {?=} value el valor del filtro
     * @param {?=} emitEvent si se emite o no el evento de cambio de parametros, para los que estan suscritos.
     * @return {?}
     */
    changeFilter(field, value, emitEvent = true) {
        if (this.params.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.field == field))) {
            this.params.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.field == field)).value = value;
        }
        else if (field && value) {
            this.params.push(new FilterHttpMap(field, value));
        }
        /*
        crear el httpParams... a partir del params...
        */
        // this.httpParams.set(field, value);
        if (emitEvent)
            this.paramsChanged.emit(this.params);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    deleteParameter(field) {
        /** @type {?} */
        var paramToDelete = this.params.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.field == field));
        if (paramToDelete) {
            this.params.splice(this.params.indexOf(this.params.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.field == field))), 1);
            this.paramsChanged.emit(this.params);
        }
    }
    /**
     * Especifico para el filtro de terminos.
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    changeAutocompleteFilter(name, value) {
        /** @type {?} */
        let isexist = false;
        this.autocompleteFilter.forEach((/**
         * @param {?} filter
         * @return {?}
         */
        filter => {
            if (filter.name == name) {
                filter.value = value;
                isexist = true;
            }
        }));
        if (!isexist) {
            this.autocompleteFilter.push(new AutocompleteFilter(name, value));
        }
        this.createAutocompleteFilterValue();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    deleteAutocompleteFilter(name) {
        this.autocompleteFilter.splice(this.autocompleteFilter.indexOf(this.autocompleteFilter.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.name == name))), 1);
        this.createAutocompleteFilterValue();
    }
    /**
     * @return {?}
     */
    createAutocompleteFilterValue() {
        /** @type {?} */
        let emitValue = this.autocompleteFilter[0].value;
        for (let index = 1; index < this.autocompleteFilter.length; index++) {
            emitValue = emitValue + ',' + this.autocompleteFilter[index].value;
        }
        this.changeFilter('terms', emitValue, true);
    }
}
FiltersService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FiltersService.ctorParameters = () => [];
FiltersService.propDecorators = {
    paramsChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FiltersService.prototype.params;
    /** @type {?} */
    FiltersService.prototype.autocompleteFilter;
    /** @type {?} */
    FiltersService.prototype.paramsChanged;
}
export class AutocompleteFilter {
    /**
     * @param {?} name
     * @param {?} value
     */
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
}
if (false) {
    /** @type {?} */
    AutocompleteFilter.prototype.name;
    /** @type {?} */
    AutocompleteFilter.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvZmlsdGVycy9maWx0ZXJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHOUMsTUFBTSxPQUFPLGNBQWM7SUFRdkI7UUFOQSxXQUFNLEdBQXlCLElBQUksS0FBSyxFQUFFLENBQUM7O1FBRTNDLHVCQUFrQixHQUE4QixJQUFJLEtBQUssRUFBRSxDQUFDO1FBRWxELGtCQUFhLEdBQXVDLElBQUksWUFBWSxFQUFFLENBQUM7SUFHL0UsQ0FBQzs7Ozs7Ozs7SUFRSCxZQUFZLENBQUMsS0FBZSxFQUFFLEtBQVcsRUFBRSxZQUFvQixJQUFJO1FBQy9ELElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssRUFBQyxFQUFDO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3pEO2FBQ0ksSUFBRyxLQUFLLElBQUksS0FBSyxFQUFDO1lBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBQ0Q7O1VBRUU7UUFDRixxQ0FBcUM7UUFFckMsSUFBRyxTQUFTO1lBQ1IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBRUQsZUFBZSxDQUFDLEtBQVk7O1lBQ3BCLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxFQUFDO1FBQzNELElBQUcsYUFBYSxFQUFDO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDbkYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQzs7Ozs7OztJQVFELHdCQUF3QixDQUFDLElBQVksRUFBRSxLQUFhOztZQUM1QyxPQUFPLEdBQUcsS0FBSztRQUNuQixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JDLElBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUM7Z0JBQ25CLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO2dCQUNwQixPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ2xCO1FBQ0wsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFHLENBQUMsT0FBTyxFQUFDO1lBQ1IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLGtCQUFrQixDQUFDLElBQUksRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1NBQ25FO1FBQ0QsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7SUFDekMsQ0FBQzs7Ozs7SUFFRCx3QkFBd0IsQ0FBQyxJQUFZO1FBQ2pDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSTs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3JILElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFRCw2QkFBNkI7O1lBQ3JCLFNBQVMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUNoRCxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNqRSxTQUFTLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBRXJFO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7OztZQTNFSixVQUFVOzs7Ozs0QkFPTixNQUFNOzs7O0lBSlAsZ0NBQTJDOztJQUUzQyw0Q0FBNEQ7O0lBRTVELHVDQUFpRjs7QUF1RXJGLE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBSzNCLFlBQVksSUFBWSxFQUFFLEtBQWE7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztDQUNKOzs7SUFQRyxrQ0FBYTs7SUFDYixtQ0FBYyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgIENvcHlyaWdodCAoYykgMjAyMCBVbml2ZXJzaWRhZCBkZSBQaW5hciBkZWwgUsOtbyBcIkhlcm1hbm9zIFNhw616IE1vbnRlcyBkZSBPY2FcIlxuICogICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRmlsdGVySHR0cE1hcCB9IGZyb20gJy4vZmlsdGVyLWl0ZW0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmlsdGVyc1NlcnZpY2Uge1xuXG4gICAgcGFyYW1zOiBBcnJheTxGaWx0ZXJIdHRwTWFwPiA9IG5ldyBBcnJheSgpO1xuICAgIC8vIGh0dHBQYXJhbXM6IEh0dHBQYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgIGF1dG9jb21wbGV0ZUZpbHRlcjogQXJyYXk8QXV0b2NvbXBsZXRlRmlsdGVyPiA9IG5ldyBBcnJheSgpO1xuXG4gICAgQE91dHB1dCgpIHBhcmFtc0NoYW5nZWQ6IEV2ZW50RW1pdHRlcjxBcnJheTxGaWx0ZXJIdHRwTWFwPj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpXG4gICAgeyB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZmllbGQgZWwgbm9tYnJlIGRlbCBjYW1wbyBxdWUgc2UgZXN0YSBmaWx0cmFuZG8gKHRpdGxlLCBldGMuLi4pXG4gICAgICogQHBhcmFtIHZhbHVlIGVsIHZhbG9yIGRlbCBmaWx0cm9cbiAgICAgKiBAcGFyYW0gZW1pdEV2ZW50IHNpIHNlIGVtaXRlIG8gbm8gZWwgZXZlbnRvIGRlIGNhbWJpbyBkZSBwYXJhbWV0cm9zLCBwYXJhIGxvcyBxdWUgZXN0YW4gc3VzY3JpdG9zLiAgXG4gICAgICovXG4gICAgY2hhbmdlRmlsdGVyKGZpZWxkPyA6IHN0cmluZywgdmFsdWU/OiBhbnksIGVtaXRFdmVudDpib29sZWFuID0gdHJ1ZSk6IHZvaWR7XG4gICAgICAgIGlmKHRoaXMucGFyYW1zLmZpbmQoeCA9PiB4LmZpZWxkID09IGZpZWxkKSl7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5maW5kKHggPT4geC5maWVsZCA9PSBmaWVsZCkudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGZpZWxkICYmIHZhbHVlKXtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zLnB1c2gobmV3IEZpbHRlckh0dHBNYXAoZmllbGQsIHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgY3JlYXIgZWwgaHR0cFBhcmFtcy4uLiBhIHBhcnRpciBkZWwgcGFyYW1zLi4uIFxuICAgICAgICAqL1xuICAgICAgICAvLyB0aGlzLmh0dHBQYXJhbXMuc2V0KGZpZWxkLCB2YWx1ZSk7XG4gICAgICAgIFxuICAgICAgICBpZihlbWl0RXZlbnQpIFxuICAgICAgICAgICAgdGhpcy5wYXJhbXNDaGFuZ2VkLmVtaXQodGhpcy5wYXJhbXMpO1xuICAgIH1cblxuICAgIGRlbGV0ZVBhcmFtZXRlcihmaWVsZDpzdHJpbmcpOnZvaWR7XG4gICAgICAgIHZhciBwYXJhbVRvRGVsZXRlID0gdGhpcy5wYXJhbXMuZmluZCh4ID0+IHguZmllbGQgPT0gZmllbGQpO1xuICAgICAgICBpZihwYXJhbVRvRGVsZXRlKXtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zLnNwbGljZSh0aGlzLnBhcmFtcy5pbmRleE9mKHRoaXMucGFyYW1zLmZpbmQoeCA9PiB4LmZpZWxkID09IGZpZWxkKSksIDEpXG4gICAgICAgICAgICB0aGlzLnBhcmFtc0NoYW5nZWQuZW1pdCh0aGlzLnBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEVzcGVjaWZpY28gcGFyYSBlbCBmaWx0cm8gZGUgdGVybWlub3MuXG4gICAgICogQHBhcmFtIHRlcm1WYWx1ZSBpZGVudGlmaWNhZG9yIGRlbCB0ZXJtaW5vIHBvciBlbCBjdWFsIHNlIGVzdGEgZmlsdHJhbmRvXG4gICAgICogQHBhcmFtIGlzZGVsZXRlIGVzcGVjaWZpY2Egc2kgc2UgdmEgYSBlbGltaW5hciBvIGFkaWNpb25hciBlbCBAcGFyYW0gdGVybVZhbHVlXG4gICAgICovXG4gICAgY2hhbmdlQXV0b2NvbXBsZXRlRmlsdGVyKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyl7XG4gICAgICAgIGxldCBpc2V4aXN0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlRmlsdGVyLmZvckVhY2goZmlsdGVyID0+e1xuICAgICAgICAgICAgaWYoZmlsdGVyLm5hbWUgPT0gbmFtZSl7XG4gICAgICAgICAgICAgICAgZmlsdGVyLnZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICBpc2V4aXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmKCFpc2V4aXN0KXtcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlRmlsdGVyLnB1c2gobmV3IEF1dG9jb21wbGV0ZUZpbHRlcihuYW1lLHZhbHVlKSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyZWF0ZUF1dG9jb21wbGV0ZUZpbHRlclZhbHVlKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlQXV0b2NvbXBsZXRlRmlsdGVyKG5hbWU6IHN0cmluZyl7XG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlRmlsdGVyLnNwbGljZSh0aGlzLmF1dG9jb21wbGV0ZUZpbHRlci5pbmRleE9mKHRoaXMuYXV0b2NvbXBsZXRlRmlsdGVyLmZpbmQoeCA9PiB4Lm5hbWUgPT0gbmFtZSkpLCAxKVxuICAgICAgICB0aGlzLmNyZWF0ZUF1dG9jb21wbGV0ZUZpbHRlclZhbHVlKCk7XG4gICAgfVxuICAgIFxuICAgIGNyZWF0ZUF1dG9jb21wbGV0ZUZpbHRlclZhbHVlKCl7XG4gICAgICAgIGxldCBlbWl0VmFsdWUgPSB0aGlzLmF1dG9jb21wbGV0ZUZpbHRlclswXS52YWx1ZTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IHRoaXMuYXV0b2NvbXBsZXRlRmlsdGVyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgZW1pdFZhbHVlID0gZW1pdFZhbHVlICsgJywnKyB0aGlzLmF1dG9jb21wbGV0ZUZpbHRlcltpbmRleF0udmFsdWU7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hhbmdlRmlsdGVyKCd0ZXJtcycsIGVtaXRWYWx1ZSwgdHJ1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlRmlsdGVyXG57XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpe1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufSJdfQ==