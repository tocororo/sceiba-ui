/**
 * @fileoverview added by tsickle
 * Generated from: lib/filters/tree-filter/tree-filter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component, Input } from '@angular/core';
import { FiltersService } from '../filters.service';
import { FilterContainerService } from '../filter-container.service';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material';
import { of } from 'rxjs';
import { SelectionModel } from '@angular/cdk/collections';
import { FormControl } from '@angular/forms';
/**
 * @record
 */
export function FlatTreeNodeFilter() { }
if (false) {
    /** @type {?} */
    FlatTreeNodeFilter.prototype.name;
    /** @type {?} */
    FlatTreeNodeFilter.prototype.level;
    /** @type {?} */
    FlatTreeNodeFilter.prototype.expandable;
    /** @type {?} */
    FlatTreeNodeFilter.prototype.term;
}
/**
 * @record
 */
function TreeFilterData() { }
if (false) {
    /** @type {?} */
    TreeFilterData.prototype.selectOptions;
    /** @type {?} */
    TreeFilterData.prototype.type;
    /** @type {?} */
    TreeFilterData.prototype.placeholder;
    /** @type {?} */
    TreeFilterData.prototype.text;
    /** @type {?} */
    TreeFilterData.prototype.field;
    /** @type {?} */
    TreeFilterData.prototype.index;
    /** @type {?} */
    TreeFilterData.prototype.value;
    /** @type {?} */
    TreeFilterData.prototype.idVocab;
}
export class TreeFilterComponent {
    /**
     * @param {?} filterService
     * @param {?} filterContainerService
     */
    constructor(filterService, filterContainerService) {
        this.filterService = filterService;
        this.filterContainerService = filterContainerService;
        this.checklistSelection = new SelectionModel(true /* multiple */);
        this.myControl = new FormControl();
        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.data.value = '';
        this.dataSource.data = this.data.selectOptions;
        this.myControl.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this._filter(value);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => { }), (/**
         * @return {?}
         */
        () => {
        }));
        this.inputId = this.data.placeholder.trim().toLowerCase();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _filter(value) {
        /** @type {?} */
        const filterValue = value.toLowerCase();
        console.log(filterValue);
        /** @type {?} */
        const newData = this.data.selectOptions.filter((/**
         * @param {?} node
         * @return {?}
         */
        node => this._include_node(filterValue, node)));
        this.dataSource.data = newData;
        this._fix_selection();
    }
    /**
     * return true if any children is include, false otherwise
     * @private
     * @param {?} filter
     * @param {?} node
     * @return {?}
     */
    _include_node(filter, node) {
        if (node.term.identifier.toLowerCase().includes(filter)) {
            return true;
        }
        else if (node.children) {
            for (const child of node.children) {
                if (this._include_node(filter, child)) {
                    return true;
                }
            }
        }
        else {
            return false;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    _fix_selection() {
        for (const node of this.treeControl.dataNodes) {
            console.log(node);
        }
        // if (this.checklistSelection.selected) {
        //   const old = this.checklistSelection.selected.find(
        //     (value: FlatTreeNode, index: number, obj: FlatTreeNode[]) => value.term.id === node.term.id
        //   );
        //   if (old !== undefined) {
        //     this.checklistSelection.deselect(old);
        //     this.checklistSelection.select(result);
        //   }
        // }
    }
    /**
     * @return {?}
     */
    remove_component() {
        this.filterService.deleteParameter(this.data.field);
        this.filterContainerService.filterDeleted(this.data.index);
    }
    /**
     * @return {?}
     */
    onChange() {
        this.filterService.changeFilter(this.data.field, this.data.value);
    }
    /**
     * @return {?}
     */
    emitSelection() {
        console.log(this.checklistSelection.selected);
        /** @type {?} */
        var valueEmiter = 'OR';
        this.checklistSelection.selected.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            valueEmiter = valueEmiter + ',' + node.term.id;
        }));
        this.filterService.changeAutocompleteFilter(this.data.idVocab.toString(10), valueEmiter);
    }
    /**
     * Transform the data to something the tree can read.
     * @param {?} node
     * @param {?} level
     * @return {?}
     */
    transformer(node, level) {
        /** @type {?} */
        const result = {
            name: node.term.identifier,
            level: level,
            expandable: (node.children.length > 0),
            term: node.term,
        };
        return result;
    }
    /**
     * Get the level of the node
     * @param {?} node
     * @return {?}
     */
    getLevel(node) {
        return node.level;
    }
    /**
     * Get whether the node is expanded or not.
     * @param {?} node
     * @return {?}
     */
    isExpandable(node) {
        return node.expandable;
    }
    /**
     * Get whether the node has children or not.
     * @param {?} index
     * @param {?} node
     * @return {?}
     */
    hasChild(index, node) {
        return node.expandable;
    }
    /**
     * Get the children for the node.
     * @param {?} node
     * @return {?}
     */
    getChildren(node) {
        return of(node.children);
    }
    /**
     * Whether all the descendants of the node are selected.
     * @param {?} node
     * @return {?}
     */
    descendantsAllSelected(node) {
        /** @type {?} */
        const descendants = this.treeControl.getDescendants(node);
        /** @type {?} */
        const descAllSelected = descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        child => this.checklistSelection.isSelected(child)));
        return descAllSelected;
    }
    /**
     * Whether part of the descendants are selected
     * @param {?} node
     * @return {?}
     */
    descendantsPartiallySelected(node) {
        /** @type {?} */
        const descendants = this.treeControl.getDescendants(node);
        /** @type {?} */
        const result = descendants.some((/**
         * @param {?} child
         * @return {?}
         */
        child => this.checklistSelection.isSelected(child)));
        return result && !this.descendantsAllSelected(node);
    }
    /**
     * Select/deselect all the descendants node
     * @param {?} node
     * @return {?}
     */
    itemSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        /** @type {?} */
        const descendants = this.treeControl.getDescendants(node);
        this.checklistSelection.isSelected(node)
            ? this.checklistSelection.select(...descendants)
            : this.checklistSelection.deselect(...descendants);
        // Force update for the parent
        descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        child => this.checklistSelection.isSelected(child)));
        this.checkAllParentsSelection(node);
        this.emitSelection();
    }
    /**
     * Check all the parents to see if they changed
     * @param {?} node
     * @return {?}
     */
    leafItemSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        this.checkAllParentsSelection(node);
        this.emitSelection();
    }
    /* Checks all the parents when a leaf node is selected/unselected */
    /**
     * @param {?} node
     * @return {?}
     */
    checkAllParentsSelection(node) {
        /** @type {?} */
        let parent = this.getParentNode(node);
        while (parent) {
            this.checkRootNodeSelection(parent);
            parent = this.getParentNode(parent);
        }
    }
    /**
     * Check root node checked state and change it accordingly
     * @param {?} node
     * @return {?}
     */
    checkRootNodeSelection(node) {
        /** @type {?} */
        const nodeSelected = this.checklistSelection.isSelected(node);
        /** @type {?} */
        const descendants = this.treeControl.getDescendants(node);
        /** @type {?} */
        const descAllSelected = descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        child => this.checklistSelection.isSelected(child)));
        if (nodeSelected && !descAllSelected) {
            this.checklistSelection.deselect(node);
        }
        else if (!nodeSelected && descAllSelected) {
            this.checklistSelection.select(node);
        }
    }
    /* Get the parent node of a node */
    /**
     * @param {?} node
     * @return {?}
     */
    getParentNode(node) {
        /** @type {?} */
        const currentLevel = this.getLevel(node);
        if (currentLevel < 1) {
            return null;
        }
        /** @type {?} */
        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;
        for (let i = startIndex; i >= 0; i--) {
            /** @type {?} */
            const currentNode = this.treeControl.dataNodes[i];
            if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
            }
        }
        return null;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    removeChip(i) {
        console.log(i);
    }
}
TreeFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-tree-filter',
                template: "<div class=\"card-filter\">\n  <input\n    type=\"text\"\n    placeholder=\"{{ data.placeholder }}\"\n    aria-label=\"Number\"\n    matInput\n    [formControl]=\"myControl\"\n    id=\"{{ inputId }}\"\n  />\n\n  <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"padd\">\n    <mat-tree-node\n      class=\"hover\"\n      *matTreeNodeDef=\"let node\"\n      matTreeNodeToggle\n      matTreeNodePadding\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n    >\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <button mat-icon-button disabled></button>\n        <mat-checkbox\n          class=\"checklist-leaf-node\"\n          [checked]=\"checklistSelection.isSelected(node)\"\n          (change)=\"leafItemSelectionToggle(node)\"\n          matTooltip=\"{{ node.name }}\"\n          >{{ node.name }}</mat-checkbox\n        >\n      </div>\n    </mat-tree-node>\n\n    <mat-tree-node\n      class=\"hover\"\n      *matTreeNodeDef=\"let node; when: hasChild\"\n      matTreeNodePadding\n    >\n      <button\n        mat-icon-button\n        matTreeNodeToggle\n        [attr.aria-label]=\"'toggle ' + node.name\"\n      >\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\n        </mat-icon>\n      </button>\n      <div\n        class=\"item-width\"\n        fxLayout=\"row\"\n        fxLayoutAlign=\"space-between center\"\n      >\n        <mat-checkbox\n          [checked]=\"descendantsAllSelected(node)\"\n          [indeterminate]=\"descendantsPartiallySelected(node)\"\n          (change)=\"itemSelectionToggle(node)\"\n          matTooltip=\"{{ node.name }}\"\n          >{{ node.name }}</mat-checkbox\n        >\n      </div>\n    </mat-tree-node>\n  </mat-tree>\n\n  <button\n    mat-icon-button\n    color=\"accent\"\n    class=\"delete-filter\"\n    (click)=\"remove_component()\"\n  >\n    <mat-icon>close</mat-icon>\n  </button>\n\n  <mat-chip-list\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n    style=\"margin-bottom: .5em\"\n    id=\"chiplist\"\n  >\n    <mat-chip\n      *ngFor=\"let item of chipsList; let i = index\"\n      (click)=\"removeChip(i)\"\n      >{{ item.name }}</mat-chip\n    >\n  </mat-chip-list>\n</div>\n",
                styles: [".card-filter{border:2px solid #e4e4e4;border-radius:5px;padding:5px .5em 0;position:relative;box-shadow:2px 3px 10px RGB(0,0,0,.053);width:15em;margin:.4em 0}.delete-filter{position:absolute;top:-1.9em;right:-1.4em;width:2em;height:2em}.delete-filter mat-icon{font-size:medium}"]
            }] }
];
/** @nocollapse */
TreeFilterComponent.ctorParameters = () => [
    { type: FiltersService },
    { type: FilterContainerService }
];
TreeFilterComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TreeFilterComponent.prototype.data;
    /** @type {?} */
    TreeFilterComponent.prototype.chipsList;
    /** @type {?} */
    TreeFilterComponent.prototype.treeControl;
    /** @type {?} */
    TreeFilterComponent.prototype.treeFlattener;
    /** @type {?} */
    TreeFilterComponent.prototype.dataSource;
    /** @type {?} */
    TreeFilterComponent.prototype.checklistSelection;
    /** @type {?} */
    TreeFilterComponent.prototype.myControl;
    /** @type {?} */
    TreeFilterComponent.prototype.inputId;
    /**
     * @type {?}
     * @private
     */
    TreeFilterComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    TreeFilterComponent.prototype.filterContainerService;
}
//# sourceMappingURL=data:application/json;base64,