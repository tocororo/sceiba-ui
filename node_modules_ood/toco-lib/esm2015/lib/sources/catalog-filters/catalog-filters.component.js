/**
 * @fileoverview added by tsickle
 * Generated from: lib/sources/catalog-filters/catalog-filters.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component, ComponentFactoryResolver } from '@angular/core';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { MatSnackBar } from '@angular/material';
import { FilterItem } from '../../filters/public-api';
import { BooleanFilterComponent } from '../../filters/public-api';
import { FilterContainerService } from '../../filters/public-api';
import { FilterContainerComponent } from '../../filters/public-api';
import { MessageHandler, StatusCode } from '../../core/public-api';
import { CatalogService, TaxonomyService } from '../../backend/public-api';
import { Environment } from '../../core/env';
import { VocabulariesInmutableNames } from '../../entities/public-api';
export class CatalogFiltersComponent extends FilterContainerComponent {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} childrenService
     * @param {?} service
     * @param {?} taxonomyService
     * @param {?} _snackBar
     * @param {?} env
     */
    constructor(componentFactoryResolver, childrenService, service, taxonomyService, _snackBar, env) {
        super(componentFactoryResolver, childrenService);
        this.componentFactoryResolver = componentFactoryResolver;
        this.childrenService = childrenService;
        this.service = service;
        this.taxonomyService = taxonomyService;
        this._snackBar = _snackBar;
        this.env = env;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.addOperator();
        // tslint:disable-next-line: no-use-before-declare
        default_filters.forEach((/**
         * @param {?} filter
         * @return {?}
         */
        filter => {
            this.filters_data.push(filter);
        }));
        this.service.getJournalsVocab().pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            /** @type {?} */
            const m = new MessageHandler(this._snackBar);
            m.showMessage(StatusCode.serverError, error.message);
            return of(null);
        })))
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response) {
                response.data.vocabularies.forEach((/**
                 * @param {?} vocab
                 * @return {?}
                 */
                vocab => {
                    if (VocabulariesInmutableNames.CUBAN_INTITUTIONS === vocab.id
                        && this.env.topOrganizationPID !== '') {
                        console.log(this.env.topOrganizationPID);
                        this.taxonomyService.getTermByUUID(this.env.topOrganizationPID).subscribe((/**
                         * @param {?} termsResponse
                         * @return {?}
                         */
                        termsResponse => {
                            this.filters_data.push({
                                index: this.filters_data.length,
                                field: 'terms',
                                type: 'tree',
                                placeholder: vocab.human_name,
                                name: vocab.human_name,
                                idVocab: vocab.id,
                                selectOptions: termsResponse.data.term_node.children,
                                is_enabled: true
                            });
                        }));
                    }
                    else {
                        this.service.getTerminosByVocab(vocab.id).subscribe((/**
                         * @param {?} termsResponse
                         * @return {?}
                         */
                        termsResponse => {
                            this.filters_data.push({
                                index: this.filters_data.length,
                                field: 'terms',
                                type: 'select-autocomplete',
                                placeholder: vocab.human_name,
                                name: vocab.human_name,
                                idVocab: vocab.id,
                                selectOptions: termsResponse.data.terms,
                                is_enabled: true
                            });
                        }));
                    }
                }));
            }
            else {
                /** @type {?} */
                const m = new MessageHandler(this._snackBar);
                m.showMessage(StatusCode.serverError, "No puedo cargar los vocabularios");
            }
        }));
    }
    /**
     * @return {?}
     */
    addOperator() {
        /** @type {?} */
        const f = new FilterItem(BooleanFilterComponent, { field: 'op', value: true, name: ['AND', 'OR'], is_enabled: false, index: -1 });
        // this.current_filters.push(f);
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(f.component);
        /** @type {?} */
        const viewContainerRef = this.adHost.viewContainerRef;
        // viewContainerRef.clear();
        /** @type {?} */
        const componentRef = viewContainerRef.createComponent(componentFactory);
        ((/** @type {?} */ (componentRef.instance))).data = f.data;
    }
}
CatalogFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-catalog-filters-container',
                template: "<!-- <div fxLayout=\"row wrap\" fxLayoutAlign=\"start center\" fxLayoutAlign.xs=\"center center\" fxLayoutGap=\"1em\" fxLayoutGap.xs=\"0\"> -->\n\n  <ng-template toco-Filter></ng-template>\n\n<!-- </div> -->\n\n<button mat-icon-button [matMenuTriggerFor]=\"menu\">\n    <mat-icon>add</mat-icon>\n</button>\n  <mat-menu #menu=\"matMenu\" >\n    <ng-container *ngFor=\"let item of filters_data,let i=index\">\n        <ng-container *ngIf=\"item.is_enabled\">\n          <button mat-menu-item (click)=\"addFilter(i)\">\n            {{item.name}}\n          </button>\n        </ng-container>\n    </ng-container>\n    \n\n    \n  </mat-menu>",
                styles: [".width-100{width:100%}.mat-menu-item{height:37px}"]
            }] }
];
/** @nocollapse */
CatalogFiltersComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: FilterContainerService },
    { type: CatalogService },
    { type: TaxonomyService },
    { type: MatSnackBar },
    { type: Environment }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    CatalogFiltersComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @protected
     */
    CatalogFiltersComponent.prototype.childrenService;
    /**
     * @type {?}
     * @protected
     */
    CatalogFiltersComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    CatalogFiltersComponent.prototype.taxonomyService;
    /**
     * @type {?}
     * @private
     */
    CatalogFiltersComponent.prototype._snackBar;
    /**
     * @type {?}
     * @private
     */
    CatalogFiltersComponent.prototype.env;
}
/** @type {?} */
const default_filters = [
    {
        index: 0,
        field: 'title',
        type: 'search',
        placeholder: 'Título',
        name: 'Título',
        is_enabled: true
    },
    {
        index: 1,
        field: 'issn',
        type: 'text',
        placeholder: 'ISSN',
        name: 'ISSN',
        is_enabled: true
    } /*,
        {
            index: 2,
            field: 'e_issn',
            type: 'text',
            placeholder: 'eISSN',
            name: 'eISSN',
            is_enabled: true
        },
        {
            index: 3,
            field: 'i_issn',
            type: 'text',
            placeholder: 'iISSN',
            name: 'iISSN',
            is_enabled: true
        }*/,
    {
        index: 2,
        field: 'rnps',
        type: 'number',
        placeholder: 'RNPS',
        name: 'RNPS',
        is_enabled: true
    } /*,
        {
            index: 5,
            field: 'term',
            type: 'select',
            placeholder: 'Términos',
            name: 'Términos',
            is_enabled: true
        } */
];
//# sourceMappingURL=data:application/json;base64,