/**
 * @fileoverview added by tsickle
 * Generated from: lib/sources/source-edit/source-indexes/source-indexes.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { MatDialog, MAT_DIALOG_DATA } from '@angular/material';
import { TaxonomyService } from '../../../backend/public-api';
import { SourceData, SourceClasification, VocabulariesInmutableNames } from '../../../entities/public-api';
import { InputTextComponent, FormFieldType, SelectComponent, InputUrlComponent, HintValue, HintPosition } from '../../../forms/public-api';
export class SourceIndexesComponent {
    /**
     * @param {?} dialog
     * @param {?} service
     */
    constructor(dialog, service) {
        this.dialog = dialog;
        this.service = service;
        this.editable = true;
        /*
            el arbol entero de los indexes
            el primer nivel se considera que es una clasificacion del index, por ejemplo
                {
                  "children": {...}
                  "term": {
                    "clasified_ids": [],
                    "class_ids": [],
                    "data": null,
                    "description": "WoS / Scopus",
                    "id": 4355,
                    "name": "http://miar.ub.edu/databases/GRUPO/G",
                    "parent_id": null,
                    "uuid": "a4aae8a2-b65d-4313-b666-5ef4170fc549",
                    "vocabulary_id": "INDEXES"
                  }
                }
            en el segundo nivel (children) estan los indices(bases de datos) que realmente clasifican a las fuentes
          */
        this.databases = null;
        /*
            cada elemento de este array tiene:
            dbclass, que es un termino del primer nivel de databases,
            dblist, son las clasificaciones de las fuentes con los correspondientes datos,
              los terminos correspondientes de los elementos de dblist son hijos de dbclass en databses
          */
        this.selectedDatabases = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.service.getTermsTreeByVocab(VocabulariesInmutableNames.INDEXES, 1).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.data.tree.term_node) {
                this.databases = response.data.tree.term_node;
                this.initIndexes();
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.log('ERROR: ' + err + '.');
        }), (/**
         * @return {?}
         */
        () => {
        }));
    }
    /**
     * @return {?}
     */
    initIndexes() {
        this.selectedDatabases = new Array(this.databases.length);
        this._setSelectedDatabses();
        this._setIndexesToSource();
        console.log('******* complete process');
    }
    /**
     * divide los source.classifications que son de INDEXES
     * en el arreglo selectedDatabases, cuyos elementos tienen
     * dbclass, que es el primer nivel
     * dblist, que son los SourceClassification seleccionados e hijos de dbclass
     * @private
     * @return {?}
     */
    _setSelectedDatabses() {
        for (let i = 0; i < this.databases.length; i++) {
            this.selectedDatabases[i] = {
                dbclass: this.databases[i].term,
                dblist: this.sourceData.classifications.filter((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => value.vocabulary == VocabulariesInmutableNames.INDEXES &&
                    this.databases[i].children.find((/**
                     * @param {?} db
                     * @return {?}
                     */
                    db => db.term.uuid == value.id)) != undefined))
            };
        }
        for (let i = 0; i < this.databases.length; i++) {
            for (let k = 0; k < this.selectedDatabases[i].dblist.length; k++) {
                /** @type {?} */
                const element = this.selectedDatabases[i].dblist[k];
                if (!this.selectedDatabases[i].dblist[k].data) {
                    this.selectedDatabases[i].dblist[k].data = {};
                }
                if (!this.selectedDatabases[i].dblist[k].data['url']) {
                    this.selectedDatabases[i].dblist[k].data['url'] = '';
                }
                if (!this.selectedDatabases[i].dblist[k].data['initial_cover']) {
                    this.selectedDatabases[i].dblist[k].data['initial_cover'] = '';
                }
                if (!this.selectedDatabases[i].dblist[k].data['end_cover']) {
                    this.selectedDatabases[i].dblist[k].data['end_cover'] = '';
                }
            }
        }
    }
    /**
     * mantiene la lista sourceData.classification bien formada en relacion con lo que hay en selectedDatabases
     * @private
     * @return {?}
     */
    _setIndexesToSource() {
        // filtra las clasificaciones que no sean indexes
        this.sourceData.classifications = this.sourceData.classifications.filter((/**
         * @param {?} value
         * @return {?}
         */
        value => value.vocabulary != VocabulariesInmutableNames.INDEXES));
        this.selectedDatabases.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            // por cada elemento en selectedDatabases, si tiene algun elemento en dblist
            // entonces dbclass y dblist tambien son parte de sourceData.classifications
            if (element.dblist.length > 0) {
                /** @type {?} */
                const parent = new SourceClasification();
                parent.id = element.dbclass.uuid;
                parent.description = element.dbclass.description;
                parent.vocabulary = element.dbclass.vocabulary_id;
                this.sourceData.classifications.push(parent);
                this.sourceData.classifications = this.sourceData.classifications.concat(element.dblist);
            }
        }));
        console.log(this.sourceData);
    }
    /**
     * @param {?} dbclassIndex
     * @return {?}
     */
    addIndexAction(dbclassIndex) {
        /** @type {?} */
        const dbclass = this.selectedDatabases[dbclassIndex].dbclass;
        /** @type {?} */
        const options = this.databases[dbclassIndex].children.filter((/**
         * @param {?} value
         * @return {?}
         */
        value => this.selectedDatabases[dbclassIndex].dblist.find((/**
         * @param {?} db
         * @return {?}
         */
        db => db.id == value.term.uuid)) == undefined));
        if (options.length > 0) {
            this.dialog.open(SourceEditAddIndexComponent, {
                data: {
                    dbclass: this.selectedDatabases[dbclassIndex].dbclass,
                    options: options,
                    editing: null,
                    addIndex: (/**
                     * @param {?} result
                     * @return {?}
                     */
                    (result) => {
                        this.dialog.closeAll();
                        this.selectedDatabases[dbclassIndex].dblist = this.selectedDatabases[dbclassIndex].dblist.filter((/**
                         * @param {?} value
                         * @return {?}
                         */
                        value => value.id != result.id));
                        this.selectedDatabases[dbclassIndex].dblist.push(result);
                        this._setIndexesToSource();
                    }),
                },
            });
        }
    }
    /**
     * @param {?} dbclassIndex
     * @param {?} editing
     * @return {?}
     */
    editIndexAction(dbclassIndex, editing) {
        /** @type {?} */
        const dbclass = this.selectedDatabases[dbclassIndex].dbclass;
        if (editing) {
            // this.selectedDatabases[dbclassIndex].dblist = this.selectedDatabases[dbclassIndex].dblist.filter(
            //   value => value.id != editing.id
            // );
            /** @type {?} */
            const options = this.databases[dbclassIndex].children.filter((/**
             * @param {?} value
             * @return {?}
             */
            value => this.selectedDatabases[dbclassIndex].dblist.find((/**
             * @param {?} db
             * @return {?}
             */
            db => db.id == value.term.uuid)) == undefined ||
                value.term.uuid == editing.id));
            if (options.length > 0 || editing) {
                this.dialog.open(SourceEditAddIndexComponent, {
                    data: {
                        dbclass: this.selectedDatabases[dbclassIndex].dbclass,
                        options: options,
                        editing: editing,
                        addIndex: (/**
                         * @param {?} result
                         * @return {?}
                         */
                        (result) => {
                            this.dialog.closeAll();
                            // console.log('----------------------------',this.selectedDatabases[dbclassIndex].dblist);
                            /** @type {?} */
                            const newSelected = [];
                            this.selectedDatabases[dbclassIndex].dblist.forEach((/**
                             * @param {?} element
                             * @return {?}
                             */
                            element => {
                                if (element.id != result.id && element.id != editing.id) {
                                    newSelected.push(element);
                                }
                            }));
                            this.selectedDatabases[dbclassIndex].dblist = newSelected;
                            // this.selectedDatabases[dbclassIndex].dblist = this.selectedDatabases[dbclassIndex].dblist.filter(
                            //   value => (value.id == result.id && value.id == editing.id));
                            // console.log('++++++++++++++++++++++',this.selectedDatabases[dbclassIndex].dblist);
                            this.selectedDatabases[dbclassIndex].dblist.push(result);
                            // console.log('*********************',this.selectedDatabases[dbclassIndex].dblist);
                            this._setIndexesToSource();
                        }),
                    },
                });
            }
        }
    }
    /**
     * @param {?} dbclassIndex
     * @param {?} toDelete
     * @return {?}
     */
    deleteIndexAction(dbclassIndex, toDelete) {
        // console.log('DELETE', toDelete);
        this.selectedDatabases[dbclassIndex].dblist = this.selectedDatabases[dbclassIndex].dblist.filter((/**
         * @param {?} value
         * @return {?}
         */
        value => value.id != toDelete.id));
        this._setIndexesToSource();
    }
}
SourceIndexesComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-source-indexes",
                template: "<mat-progress-bar\n  *ngIf=\"!selectedDatabases\"\n  mode=\"indeterminate\"\n></mat-progress-bar>\n\n<mat-accordion *ngIf=\"selectedDatabases\">\n  <mat-expansion-panel\n    *ngFor=\"let clasification of selectedDatabases; let classIndex = index\"\n  >\n    <mat-expansion-panel-header>\n      {{ clasification.dbclass.description }} ({{clasification.dblist.length}})\n    </mat-expansion-panel-header>\n    <mat-action-row *ngIf=\"editable\">\n      <button\n          mat-icon-button\n          aria-label=\"Adicionar\"\n          matTooltip=\"Adicionar\"\n          (click)=\"addIndexAction(classIndex)\"\n        >\n          <mat-icon>add</mat-icon>\n        </button>\n    </mat-action-row>\n    <mat-card *ngFor=\"let db of clasification.dblist; let dbIndex = index\">\n      <mat-card-header>\n        <mat-card-title><mat-label>{{ db.description }}</mat-label></mat-card-title>\n        <mat-card-subtitle>\n          <mat-label style=\"font-weight: bold;\">URL: </mat-label>\n          {{ db.data[\"url\"] }}\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n          <mat-label style=\"font-weight: bold;\">Cobertura: </mat-label>\n          <mat-label>\n            {{ db.data[\"initial_cover\"] }} - {{ db.data[\"end_cover\"] }}\n          </mat-label>\n      </mat-card-content>\n      <mat-card-actions *ngIf=\"editable\">\n        <button\n          mat-icon-button\n          aria-label=\"Editar\"\n          matTooltip=\"Editar\"\n          (click)=\"editIndexAction(classIndex, db)\"\n        >\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          aria-label=\"Eliminar\"\n          matTooltip=\"Eliminar\"\n          (click)=\"deleteIndexAction(classIndex, db)\"\n        >\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-card-actions>\n    </mat-card>\n  </mat-expansion-panel>\n</mat-accordion>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
SourceIndexesComponent.ctorParameters = () => [
    { type: MatDialog },
    { type: TaxonomyService }
];
SourceIndexesComponent.propDecorators = {
    sourceData: [{ type: Input }],
    editable: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SourceIndexesComponent.prototype.sourceData;
    /** @type {?} */
    SourceIndexesComponent.prototype.editable;
    /** @type {?} */
    SourceIndexesComponent.prototype.databases;
    /** @type {?} */
    SourceIndexesComponent.prototype.selectedDatabases;
    /** @type {?} */
    SourceIndexesComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    SourceIndexesComponent.prototype.service;
}
export class SourceEditAddIndexComponent {
    /**
     * @param {?} service
     * @param {?} _formBuilder
     * @param {?} data
     */
    constructor(service, _formBuilder, data) {
        // console.log(data);
        this.service = service;
        this._formBuilder = _formBuilder;
        this.data = data;
        this.indexPanel = null;
        this.editing = null;
        this.dbclass = data.dbclass;
        this.options = data.options;
        if (data.editing) {
            this.editing = data.editing;
        }
        this.addIndex = data.addIndex;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.indexFormGroup = this._formBuilder.group({});
        if (this.dbclass) {
            this.indexPanel = [
                {
                    title: (this.editing) ? 'Editar' : 'Adicionar',
                    description: '',
                    iconName: '',
                    formSection: this.indexFormGroup,
                    formSectionContent: [
                        {
                            formControl: InputTextComponent.getFormControlByDefault(),
                            name: 'indexes',
                            label: this.dbclass.description,
                            type: FormFieldType.select_expr,
                            controlType: SelectComponent,
                            required: true,
                            width: '100%',
                            value: (this.editing) ? this.editing.id : null,
                            extraContent: {
                                multiple: false,
                                getOptions: (/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                (response) => {
                                    /** @type {?} */
                                    const opts = [];
                                    this.options.forEach((/**
                                     * @param {?} node
                                     * @return {?}
                                     */
                                    (node) => {
                                        opts.push({
                                            value: node.term.uuid,
                                            label: node.term.description,
                                        });
                                    }));
                                    return opts;
                                }),
                                selectionChange: (/**
                                 * @param {?} value
                                 * @return {?}
                                 */
                                (value) => {
                                    console.log(value);
                                })
                            }
                        },
                        {
                            formControl: InputUrlComponent.getFormControlByDefault(),
                            name: 'url',
                            label: 'URL',
                            type: FormFieldType.url,
                            controlType: InputUrlComponent,
                            required: false,
                            startHint: new HintValue(HintPosition.start, 'URL de la revista en el índice.'),
                            width: '100%',
                            value: (this.editing) ? [this.editing.data['url']] : '',
                        },
                        {
                            formControl: InputTextComponent.getFormControlByDefault(),
                            name: 'initial_cover',
                            label: 'Cobertura inicio',
                            type: FormFieldType.text,
                            controlType: InputTextComponent,
                            required: false,
                            startHint: new HintValue(HintPosition.start, ''),
                            width: '45%',
                            value: (this.editing) ? [this.editing.data['initial_cover']] : '',
                        },
                        {
                            formControl: InputTextComponent.getFormControlByDefault(),
                            name: 'end_cover',
                            label: 'Cobertura',
                            type: FormFieldType.text,
                            controlType: InputTextComponent,
                            required: false,
                            startHint: new HintValue(HintPosition.start, ''),
                            width: '45%',
                            value: (this.editing) ? [this.editing.data['end_cover']] : '',
                        },
                    ],
                },
            ];
        }
        this.addIndexAction = {
            doit: (/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (this.indexFormGroup.valid) {
                    /** @type {?} */
                    const result = new SourceClasification();
                    // console.log(this.indexFormGroup);
                    if (this.indexFormGroup.controls['indexes'].value) {
                        /** @type {?} */
                        const node = this.options.find((/**
                         * @param {?} value
                         * @return {?}
                         */
                        value => value.term.uuid == this.indexFormGroup.controls['indexes'].value));
                        if (node) {
                            result.vocabulary = node.term.vocabulary_id;
                            result.description = node.term.description;
                            result.id = node.term.uuid;
                            result.data = {
                                url: this.indexFormGroup.controls['url'].value,
                                initial_cover: this.indexFormGroup.controls['initial_cover'].value,
                                end_cover: this.indexFormGroup.controls['end_cover'].value,
                            };
                            this.addIndex(result);
                        }
                    }
                }
            }),
        };
    }
}
SourceEditAddIndexComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-source-addindex",
                template: `
    <toco-form-container
      #indexPanelContainer
      [panelsContent]="indexPanel"
      [useAccordion]="false"
      fxLayout="row"
      [formGroup]="indexFormGroup"
      [action]="addIndexAction"
      [actionLabel]="'OK'"
      [deleteValuesAfterAction]="false"
    ></toco-form-container>
  `,
                styles: [""]
            }] }
];
/** @nocollapse */
SourceEditAddIndexComponent.ctorParameters = () => [
    { type: TaxonomyService },
    { type: FormBuilder },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.indexPanel;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.indexFormGroup;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.addIndexAction;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.dbclass;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.options;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.editing;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.addIndex;
    /**
     * @type {?}
     * @private
     */
    SourceEditAddIndexComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    SourceEditAddIndexComponent.prototype._formBuilder;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,