/**
 * @fileoverview added by tsickle
 * Generated from: lib/sources/source-edit/source-organizations/source-organizations.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject } from "@angular/core";
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from "@angular/material";
import { OrganizationServiceNoAuth } from '../../../backend/public-api';
import { MessageHandler, StatusCode, HandlerComponent } from '../../../core/public-api';
import { SourceData, Organization, SourceOrganizationRole, SourceOrganization, OrganizationRelationships } from '../../../entities/public-api';
export class SourceOrganizationsComponent {
    /**
     * @param {?} dialog
     * @param {?} orgService
     */
    constructor(dialog, orgService) {
        this.dialog = dialog;
        this.orgService = orgService;
        this.editable = true;
        this.topMainOrganization = null;
        this.roles = SourceOrganizationRole;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log(this.sourceData.organizations);
        this.sourceData.organizations = this.sourceData.organizations.filter((/**
         * @param {?} element
         * @return {?}
         */
        (element) => element && element.role));
        console.log(this.sourceData.organizations);
    }
    /**
     * @param {?=} cuban
     * @param {?=} topMain
     * @return {?}
     */
    addOrg(cuban = true, topMain = false) {
        if (topMain && this.topMainOrganization) {
            this.dialog.open(SourceOrganizationSelectTopDialog, {
                width: "500px",
                data: {
                    topMainOrganization: this.topMainOrganization,
                    selectOrg: (/**
                     * @param {?} org
                     * @param {?} parents
                     * @return {?}
                     */
                    (org, parents) => {
                        this.addOrgToSource(org, SourceOrganizationRole.MAIN.value);
                        parents.forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        (element) => {
                            this.addOrgToSource(element, SourceOrganizationRole.COLABORATOR.value);
                        }));
                    }),
                },
            });
        }
        else {
            this.dialog.open(SourceOrganizationSelectDialog, {
                width: "500px",
                data: {
                    filter: cuban ? { type: "country", value: "Cuba" } : null,
                    canSelectRole: this.topMainOrganization == null,
                    selectOrg: (/**
                     * @param {?} org
                     * @param {?} role
                     * @param {?} parents
                     * @return {?}
                     */
                    (org, role, parents) => {
                        this.addOrgToSource(org, role);
                        parents.forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        (element) => {
                            this.addOrgToSource(element, SourceOrganizationRole.COLABORATOR.value);
                        }));
                    }),
                },
            });
        }
    }
    /**
     * @private
     * @param {?} org
     * @param {?} role
     * @return {?}
     */
    addOrgToSource(org, role) {
        if (!this.sourceData.organizations.find((/**
         * @param {?} o
         * @return {?}
         */
        (o) => o.id == org.id))) {
            /** @type {?} */
            let selected = new SourceOrganization();
            selected.deepcopy(org);
            selected.role = role;
            this.sourceData.organizations.push(selected);
            if (SourceOrganizationRole.MAIN.value == role) {
                this.setAsMain(org);
            }
        }
    }
    /**
     * @param {?} organization
     * @return {?}
     */
    setAsMain(organization) {
        this.sourceData.organizations.forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            if (organization.id == element.id) {
                element.role = SourceOrganizationRole.MAIN.value;
            }
            else {
                element.role = SourceOrganizationRole.COLABORATOR.value;
            }
        }));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeInst(index) {
        /** @type {?} */
        const organization = this.sourceData.organizations[index];
        /** @type {?} */
        const m = new MessageHandler(null, this.dialog);
        /** @type {?} */
        const child = this.childToRemove(organization);
        if (child == null) {
            /** @type {?} */
            let parents = this.getOrgToDelete(organization);
            /** @type {?} */
            let toDelete = [];
            /** @type {?} */
            let msg = "";
            for (let i = 0; i < parents.length; i++) {
                /** @type {?} */
                const element = parents[i];
                toDelete.push(this.sourceData.organizations[element]);
                msg += this.sourceData.organizations[element].name + ", ";
            }
            toDelete.push(organization);
            console.log(toDelete);
            if (toDelete.length > 0) {
                m.showMessage(StatusCode.OK, msg, HandlerComponent.dialog, "Se eliminó también: ");
            }
            /** @type {?} */
            let orgs = [];
            for (let i = 0; i < this.sourceData.organizations.length; i++) {
                if (!toDelete.find((/**
                 * @param {?} o
                 * @return {?}
                 */
                (o) => o.id == this.sourceData.organizations[i].id))) {
                    orgs.push(this.sourceData.organizations[i]);
                }
            }
            console.log(orgs);
            this.sourceData.organizations = orgs;
            // this.sourceData.organizations = this.sourceData.organizations.filter(
            //   (o) => o.id != organization.id
            // );
        }
        else {
            m.showMessage(StatusCode.OK, child.name, HandlerComponent.dialog, "Para eliminar este elemento debe eliminar:");
        }
    }
    /**
     * @private
     * @param {?} org
     * @return {?}
     */
    childToRemove(org) {
        // se puede eliminar si no tiene hijos en el sourceData.organizations
        /** @type {?} */
        let result = true;
        if (org.relationships) {
            for (let index = 0; index < org.relationships.length; index++) {
                /** @type {?} */
                const element = org.relationships[index];
                if (element.type == OrganizationRelationships.CHILD.value) {
                    /** @type {?} */
                    const childIndex = this.getIndexByPid(element.identifiers[0].value);
                    if (childIndex != null) {
                        return this.sourceData.organizations[childIndex];
                    }
                }
            }
            return null;
        }
    }
    // removeInst(index) {
    //   let toDelete = []
    //   toDelete.push(index);
    //   toDelete.concat(this.getOrgToDelete(this.sourceData.organizations[index]));
    //   let orgs = [];
    //   for (let i = 0; i < this.sourceData.organizations.length; i++) {
    //     if(!toDelete.find((o) => o == i)){
    //       orgs.push(this.sourceData.organizations[i]);
    //     }
    //   }
    //   this.sourceData.organizations = orgs;
    // }
    /**
     * @private
     * @param {?} org
     * @return {?}
     */
    getOrgToDelete(org) {
        /** @type {?} */
        let toDelete = [];
        if (org.relationships) {
            org.relationships.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                if (element.type == OrganizationRelationships.PARENT.value) {
                    /** @type {?} */
                    const parentIndex = this.getIndexByPid(element.identifiers[0].value);
                    if (parentIndex) {
                        toDelete.push(parentIndex);
                        toDelete.concat(this.getOrgToDelete(this.sourceData.organizations[parentIndex]));
                    }
                }
            }));
        }
        return toDelete;
    }
    /**
     * @private
     * @param {?} pid
     * @return {?}
     */
    getIndexByPid(pid) {
        for (let index = 0; index < this.sourceData.organizations.length; index++) {
            /** @type {?} */
            const element = this.sourceData.organizations[index];
            for (let pidindex = 0; pidindex < element.identifiers.length; pidindex++) {
                /** @type {?} */
                const identifier = element.identifiers[pidindex];
                console.log(identifier.value + "==" + pid);
                if (identifier.value == pid) {
                    console.log(identifier.value + "==" + pid + "  iguales!!!");
                    return index;
                }
            }
        }
        return null;
    }
}
SourceOrganizationsComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-source-organizations",
                template: "<ng-container>\n  <mat-toolbar\n    *ngIf=\"editable\"\n    fxLayout=\"row wrap\"\n    fxLayoutAlign=\"space-between center\"\n    fxLayoutGap=\"20px\"\n  >\n    <span>Adicionar</span>\n    <div\n      fxLayout=\"row wrap\"\n      fxLayoutAlign=\"space-between center\"\n      fxLayoutGap=\"20px\"\n    >\n    <button *ngIf=\"topMainOrganization\" mat-raised-button (click)=\"addOrg(true, true)\">\n      Organizaci\u00F3n Principal\n    </button>\n      <button mat-raised-button (click)=\"addOrg(true)\">\n        Organizaciones Cubanas\n      </button>\n      <button mat-raised-button (click)=\"addOrg(false)\">\n        Otras\n      </button>\n    </div>\n  </mat-toolbar>\n\n  \n  <mat-accordion>\n    <mat-expansion-panel\n      *ngFor=\"let org of sourceData.organizations; let index = index\"\n      [expanded]=\"false\"\n    >\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          {{ roles[org.role].label }}\n        </mat-panel-title>\n        <mat-panel-description>\n          {{ org.name }}\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <mat-action-row *ngIf=\"editable\">\n        <button\n          mat-stroked-button\n          [disabled]=\"org.length === 1\"\n          (click)=\"setAsMain(org)\"\n          *ngIf=\"!topMainOrganization\"\n        >\n          Establecer como Principal\n        </button>\n        <button\n          mat-stroked-button\n          [disabled]=\"org.length === 1\"\n          (click)=\"removeInst(index)\"\n        >\n          Eliminar\n        </button>\n      </mat-action-row>\n      <toco-org-view [org]=\"org\" [showContent]=\"false\"></toco-org-view>\n    </mat-expansion-panel>\n  </mat-accordion>\n</ng-container>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
SourceOrganizationsComponent.ctorParameters = () => [
    { type: MatDialog },
    { type: OrganizationServiceNoAuth }
];
SourceOrganizationsComponent.propDecorators = {
    sourceData: [{ type: Input }],
    editable: [{ type: Input }],
    topMainOrganization: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SourceOrganizationsComponent.prototype.sourceData;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.editable;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.topMainOrganization;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.roles;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    SourceOrganizationsComponent.prototype.orgService;
}
export class SourceOrganizationSelectTopDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     * @param {?} orgService
     */
    constructor(dialogRef, data, orgService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.orgService = orgService;
        this.topMainOrganization = null;
        this.toSelect = null;
        this.selected = -1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.topMainOrganization = this.data.topMainOrganization;
        this.toSelect = new Array();
        this.topMainOrganization.relationships.forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            if (element.type == OrganizationRelationships.CHILD.value) {
                this.toSelect.push(element);
            }
        }));
        console.log(this.toSelect);
    }
    /**
     * @return {?}
     */
    onNoClick() {
        this.dialogRef.close();
    }
    /**
     * @return {?}
     */
    ok() {
        // let selected = new SourceOrganization()
        // selected.organization = org;
        // selected.role = SourceOrganizationRole.MAIN.value;
        if (this.selected >= 0) {
            console.log(this.toSelect[this.selected]);
            this.orgService
                .getOrganizationByPID(this.toSelect[this.selected].identifiers[0].value)
                .subscribe({
                next: (/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    this.data.selectOrg(response.metadata, [this.topMainOrganization]);
                    this.dialogRef.close();
                }),
            });
        }
    }
}
SourceOrganizationSelectTopDialog.decorators = [
    { type: Component, args: [{
                selector: "toco-source-organizations-select-top-main",
                template: `<mat-dialog-content class="height-auto">
    <ng-container *ngIf="toSelect"
      >{{ topMainOrganization.name }}
      <br />
      <mat-form-field>
        <mat-label>Seleccione la Organización Principal: </mat-label>
        <mat-select [(value)]="selected" required>
          <mat-option
            *ngFor="let item of toSelect; let index = index"
            value="{{ index }}"
            >{{ item.label }}</mat-option
          >
        </mat-select>
      </mat-form-field>

      <br />
      <mat-label *ngIf="selected >= 0">{{
        toSelect[selected].label
      }}</mat-label>
      <br />
    </ng-container>
    <br />
    <button mat-raised-button (click)="ok()">OK</button>
  </mat-dialog-content>`
            }] }
];
/** @nocollapse */
SourceOrganizationSelectTopDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: OrganizationServiceNoAuth }
];
if (false) {
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.topMainOrganization;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.toSelect;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.selected;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.dialogRef;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.data;
    /**
     * @type {?}
     * @private
     */
    SourceOrganizationSelectTopDialog.prototype.orgService;
}
export class SourceOrganizationSelectDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     * @param {?} orgService
     */
    constructor(dialogRef, data, orgService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.orgService = orgService;
        this.roles = [
            { label: "Principal", value: "MAIN" },
            { label: "Colaborador", value: "COLABORATOR" },
        ];
        this.role = null;
        this.parents = new Array();
        this.placeholder = "Buscar una organización";
        this.canSelectRole = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log(this.data);
        this.canSelectRole = this.data.canSelectRole;
        if (this.data.filter) {
            this.placeholder = "Buscar una organización cubana";
        }
    }
    /**
     * @return {?}
     */
    onNoClick() {
        this.dialogRef.close();
    }
    /**
     * @param {?=} org
     * @return {?}
     */
    selectedOrg(org) {
        console.log(org);
        this.org = org;
        this.addParent(this.org);
    }
    /**
     * @private
     * @param {?} child
     * @return {?}
     */
    addParent(child) {
        child.relationships.forEach((/**
         * @param {?} p
         * @return {?}
         */
        (p) => {
            if (p.type == OrganizationRelationships.PARENT.value) {
                if (p.identifiers.length > 0 && p.identifiers[0].value) {
                    this.orgService
                        .getOrganizationByPID(p.identifiers[0].value)
                        .subscribe({
                        next: (/**
                         * @param {?} response
                         * @return {?}
                         */
                        (response) => {
                            console.log(response);
                            this.parents.push(response.metadata);
                            this.addParent(response.metadata);
                        }),
                    });
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    ok() {
        // let selected = new SourceOrganization()
        // selected.organization = org;
        // selected.role = SourceOrganizationRole.MAIN.value;
        if (this.canSelectRole) {
            if (this.role) {
                this.data.selectOrg(this.org, this.role, this.parents);
                this.dialogRef.close();
            }
        }
        else {
            this.data.selectOrg(this.org, SourceOrganizationRole.COLABORATOR.value, this.parents);
            this.dialogRef.close();
        }
    }
}
SourceOrganizationSelectDialog.decorators = [
    { type: Component, args: [{
                selector: "toco-source-organizations-select-dialog",
                template: `<mat-dialog-content class="height-auto">
    <toco-org-search
      [orgFilter]="data.filter"
      (selectedOrg)="selectedOrg($event)"
      [placeholder]="placeholder"
    >
    </toco-org-search>
    <br />
    <mat-label *ngIf="org">{{ org.name }}</mat-label>
    <br />
    <mat-form-field *ngIf="canSelectRole">
      <mat-label>Rol</mat-label>
      <mat-select [(value)]="role" required>
        <mat-option *ngFor="let item of roles" value="{{ item.value }}">{{
          item.label
        }}</mat-option>
      </mat-select>
    </mat-form-field>

    <br />

    <ng-container *ngIf="parents.length > 0">
      <mat-label>Se añadirá también: </mat-label>
      <ng-container *ngFor="let item of parents">
        <br />
        <mat-label>{{ item.name }}</mat-label>
        <br />
      </ng-container>
      <br />
    </ng-container>

    <button mat-raised-button (click)="ok()">OK</button>
  </mat-dialog-content>`
            }] }
];
/** @nocollapse */
SourceOrganizationSelectDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: OrganizationServiceNoAuth }
];
if (false) {
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.roles;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.role;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.org;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.parents;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.placeholder;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.canSelectRole;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.dialogRef;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.data;
    /**
     * @type {?}
     * @private
     */
    SourceOrganizationSelectDialog.prototype.orgService;
}
//# sourceMappingURL=data:application/json;base64,