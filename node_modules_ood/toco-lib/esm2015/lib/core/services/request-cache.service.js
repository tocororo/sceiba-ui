/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/request-cache.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns a constant that is used in the `HttpHeaders` to do request although the request exists in cache.
 * @type {?}
 */
export const REFRESH_X_CACHE = 'refresh-x-cache';
/**
 * Represents the base abstract class for all services that implement the cachable URL request.
 * See `CachableUrl` service.
 * @abstract
 */
export class Cachable {
}
if (false) {
    /**
     * Returns a number greater than zero if the specified request is cachable;
     * that number represents the maximum cache age in milliseconds.
     * Return zero if the specified request is NOT cachable.
     * @abstract
     * @param {?} req The outgoing request object to handle.
     * @return {?}
     */
    Cachable.prototype.isCachable = function (req) { };
}
/**
 * Represents the base abstract class for all services that implement the request cache.
 * See `RequestCacheDifferentTimeWithMap` service.
 * @abstract
 */
export class RequestCache {
}
if (false) {
    /**
     * @abstract
     * @param {?} req
     * @return {?}
     */
    RequestCache.prototype.get = function (req) { };
    /**
     * @abstract
     * @param {?} req
     * @param {?} maxAgeInCache
     * @param {?} response
     * @return {?}
     */
    RequestCache.prototype.set = function (req, maxAgeInCache, response) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1jYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvY29yZS9zZXJ2aWNlcy9yZXF1ZXN0LWNhY2hlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUEsTUFBTSxPQUFPLGVBQWUsR0FBVyxpQkFBaUI7Ozs7OztBQU14RCxNQUFNLE9BQWdCLFFBQVE7Q0FTN0I7Ozs7Ozs7Ozs7SUFERyxtREFBeUQ7Ozs7Ozs7QUFPN0QsTUFBTSxPQUFnQixZQUFZO0NBS2pDOzs7Ozs7O0lBSEEsZ0RBQTBFOzs7Ozs7OztJQUUxRSx5RUFBcUciLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8qKlxuICogUmV0dXJucyBhIGNvbnN0YW50IHRoYXQgaXMgdXNlZCBpbiB0aGUgYEh0dHBIZWFkZXJzYCB0byBkbyByZXF1ZXN0IGFsdGhvdWdoIHRoZSByZXF1ZXN0IGV4aXN0cyBpbiBjYWNoZS4gXG4gKi9cbmV4cG9ydCBjb25zdCBSRUZSRVNIX1hfQ0FDSEU6IHN0cmluZyA9ICdyZWZyZXNoLXgtY2FjaGUnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGJhc2UgYWJzdHJhY3QgY2xhc3MgZm9yIGFsbCBzZXJ2aWNlcyB0aGF0IGltcGxlbWVudCB0aGUgY2FjaGFibGUgVVJMIHJlcXVlc3QuIFxuICogU2VlIGBDYWNoYWJsZVVybGAgc2VydmljZS4gXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYWNoYWJsZVxue1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBudW1iZXIgZ3JlYXRlciB0aGFuIHplcm8gaWYgdGhlIHNwZWNpZmllZCByZXF1ZXN0IGlzIGNhY2hhYmxlOyBcblx0ICogdGhhdCBudW1iZXIgcmVwcmVzZW50cyB0aGUgbWF4aW11bSBjYWNoZSBhZ2UgaW4gbWlsbGlzZWNvbmRzLiBcblx0ICogUmV0dXJuIHplcm8gaWYgdGhlIHNwZWNpZmllZCByZXF1ZXN0IGlzIE5PVCBjYWNoYWJsZS4gXG4gICAgICogQHBhcmFtIHJlcSBUaGUgb3V0Z29pbmcgcmVxdWVzdCBvYmplY3QgdG8gaGFuZGxlLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgaXNDYWNoYWJsZShyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBudW1iZXJcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBiYXNlIGFic3RyYWN0IGNsYXNzIGZvciBhbGwgc2VydmljZXMgdGhhdCBpbXBsZW1lbnQgdGhlIHJlcXVlc3QgY2FjaGUuIFxuICogU2VlIGBSZXF1ZXN0Q2FjaGVEaWZmZXJlbnRUaW1lV2l0aE1hcGAgc2VydmljZS4gXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZXF1ZXN0Q2FjaGVcbntcblx0cHVibGljIGFic3RyYWN0IGdldChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVzcG9uc2U8YW55PiB8IHVuZGVmaW5lZDtcblxuXHRwdWJsaWMgYWJzdHJhY3Qgc2V0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbWF4QWdlSW5DYWNoZTogbnVtYmVyLCByZXNwb25zZTogSHR0cFJlc3BvbnNlPGFueT4pOiB2b2lkO1xufVxuIl19