/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/icon.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MatIconRegistry } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/icon";
import * as i2 from "@angular/platform-browser";
/**
 * A service that registers custom svg icons in order to use them through the `mat-icon` component.
 * Which simply registers the custom icons with the `MatIconRegistry` service provided by Angular Material.
 */
export class IconService {
    /**
     * @param {?} _matIconRegistry
     * @param {?} _domSanitizer
     */
    constructor(_matIconRegistry, _domSanitizer) {
        this._matIconRegistry = _matIconRegistry;
        this._domSanitizer = _domSanitizer;
    }
    /**
     * Registers an array of icons.
     * @param {?} iconNames Array of names under which the icons should be registered.
     * @param {?} iconUrl The relative URL path pointing to the location of the icons.
     * @return {?}
     */
    registerIcons(iconNames, iconUrl) {
        iconNames.forEach((/**
         * @param {?} iconName
         * @return {?}
         */
        iconName => {
            this._matIconRegistry.addSvgIcon(iconName, this._domSanitizer.bypassSecurityTrustResourceUrl(`${iconUrl}/${iconName}.svg`));
        }));
    }
}
/**
 * Returns the default icon name. It represents a blank icon.
 * It is used by controls that want to have occupied the icon space, but nothing is showed.
 */
IconService.defaultIconName = 'outlined-blank-24px';
IconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IconService.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer }
];
/** @nocollapse */ IconService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(i0.ɵɵinject(i1.MatIconRegistry), i0.ɵɵinject(i2.DomSanitizer)); }, token: IconService, providedIn: "root" });
if (false) {
    /**
     * Returns the default icon name. It represents a blank icon.
     * It is used by controls that want to have occupied the icon space, but nothing is showed.
     * @type {?}
     */
    IconService.defaultIconName;
    /**
     * @type {?}
     * @private
     */
    IconService.prototype._matIconRegistry;
    /**
     * @type {?}
     * @private
     */
    IconService.prototype._domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvY29yZS9zZXJ2aWNlcy9pY29uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7Ozs7O0FBU3pELE1BQU0sT0FBTyxXQUFXOzs7OztJQVF2QixZQUEyQixnQkFBaUMsRUFBVSxhQUEyQjtRQUF0RSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQWM7SUFDL0YsQ0FBQzs7Ozs7OztJQU9JLGFBQWEsQ0FBQyxTQUFtQixFQUFFLE9BQWU7UUFFeEQsU0FBUyxDQUFDLE9BQU87Ozs7UUFBQyxRQUFRLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUMvQixRQUFRLEVBQ1IsSUFBSSxDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxHQUFJLE9BQVEsSUFBSyxRQUFTLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDeEYsQ0FBQyxFQUFDLENBQUM7SUFDSixDQUFDOzs7Ozs7QUFqQnNCLDJCQUFlLEdBQVcscUJBQXFCLENBQUM7O1lBVHZFLFVBQVUsU0FBQztnQkFDWCxVQUFVLEVBQUUsTUFBTTthQUNsQjs7OztZQVRRLGVBQWU7WUFDZixZQUFZOzs7Ozs7Ozs7SUFlcEIsNEJBQXVFOzs7OztJQUVwRCx1Q0FBeUM7Ozs7O0lBQUUsb0NBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRJY29uUmVnaXN0cnkgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuLyoqXG4gKiBBIHNlcnZpY2UgdGhhdCByZWdpc3RlcnMgY3VzdG9tIHN2ZyBpY29ucyBpbiBvcmRlciB0byB1c2UgdGhlbSB0aHJvdWdoIHRoZSBgbWF0LWljb25gIGNvbXBvbmVudC4gXG4gKiBXaGljaCBzaW1wbHkgcmVnaXN0ZXJzIHRoZSBjdXN0b20gaWNvbnMgd2l0aCB0aGUgYE1hdEljb25SZWdpc3RyeWAgc2VydmljZSBwcm92aWRlZCBieSBBbmd1bGFyIE1hdGVyaWFsLiBcbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSWNvblNlcnZpY2Vcbntcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRlZmF1bHQgaWNvbiBuYW1lLiBJdCByZXByZXNlbnRzIGEgYmxhbmsgaWNvbi4gXG5cdCAqIEl0IGlzIHVzZWQgYnkgY29udHJvbHMgdGhhdCB3YW50IHRvIGhhdmUgb2NjdXBpZWQgdGhlIGljb24gc3BhY2UsIGJ1dCBub3RoaW5nIGlzIHNob3dlZC4gXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRJY29uTmFtZTogc3RyaW5nID0gJ291dGxpbmVkLWJsYW5rLTI0cHgnO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9tYXRJY29uUmVnaXN0cnk6IE1hdEljb25SZWdpc3RyeSwgcHJpdmF0ZSBfZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpXG5cdHsgfVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgYW4gYXJyYXkgb2YgaWNvbnMuIFxuXHQgKiBAcGFyYW0gaWNvbk5hbWVzIEFycmF5IG9mIG5hbWVzIHVuZGVyIHdoaWNoIHRoZSBpY29ucyBzaG91bGQgYmUgcmVnaXN0ZXJlZC4gXG5cdCAqIEBwYXJhbSBpY29uVXJsIFRoZSByZWxhdGl2ZSBVUkwgcGF0aCBwb2ludGluZyB0byB0aGUgbG9jYXRpb24gb2YgdGhlIGljb25zLiBcblx0ICovXG5cdHB1YmxpYyByZWdpc3Rlckljb25zKGljb25OYW1lczogc3RyaW5nW10sIGljb25Vcmw6IHN0cmluZyk6IHZvaWRcblx0e1xuXHRcdGljb25OYW1lcy5mb3JFYWNoKGljb25OYW1lID0+IHtcblx0XHQgIHRoaXMuX21hdEljb25SZWdpc3RyeS5hZGRTdmdJY29uKFxuXHRcdFx0ICBpY29uTmFtZSwgXG5cdFx0XHQgIHRoaXMuX2RvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoYCR7IGljb25VcmwgfS8keyBpY29uTmFtZSB9LnN2Z2ApKTtcblx0XHR9KTtcblx0fVxufVxuIl19