/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/http.interceptor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { REFRESH_X_CACHE, Cachable, RequestCache } from './request-cache.service';
import * as i0 from "@angular/core";
import * as i1 from "./request-cache.service";
/* Note: When you are going to use the Interceptors, make a "Barrel" of Http Interceptors.
 * Angular applies interceptors in the order that you provide them. If you provide interceptors A,
 * then B, then C, requests will flow in A->B->C and responses will flow out C->B->A.
 * You cannot change the order or remove interceptors later. If you need to enable and disable
 * an interceptor dynamically, you'll have to build that capability into the interceptor itself. */
/**
 * A service that caches certain requests and responses to improve performance.
 * It is delegated to an interceptor without disturbing the existing data services.
 *
 * - If request is cachable (e.g., package search) and response is in cache,
 * then returns the cached response as observable.
 * - If request is cachable and has `REFRESH_X_CACHE` option header in true (or the request is not in cache),
 * then passes request to the following `HttpHandler` and makes a cache from response.
 * - If request is not cachable,
 * then passes request to the following `HttpHandler`.
 */
export class CachingInterceptor {
    /**
     * @param {?} _cachable
     * @param {?} _cache
     */
    constructor(_cachable, _cache) {
        this._cachable = _cachable;
        this._cache = _cache;
    }
    /**
     * Identifies and handles a given HTTP request.
     * @param {?} req The outgoing request object to handle.
     * @param {?} next The next interceptor in the chain, or the backend if no interceptors remain in the chain.
     * @return {?} An observable of the event stream.
     */
    intercept(req, next) {
        /** @type {?} */
        let maxAgeInCache;
        /* Continues if not cachable. */
        if (!(maxAgeInCache = this._cachable.isCachable(req))) {
            return next.handle(req);
        }
        /* This option is triggered by the presence of a custom `REFRESH_X_CACHE` header with true value. */
        if (req.headers.get(REFRESH_X_CACHE)) {
            /* fetch. */
            return this._sendRequest(req, maxAgeInCache, true, next);
        }
        /* cache-or-fetch. */
        /** @type {?} */
        const cachedResponse = this._cache.get(req);
        return (cachedResponse
            ? of(cachedResponse)
            : this._sendRequest(req, maxAgeInCache, false, next));
    }
    /**
     * Gets server response observable by sending request to `next` argument.
     * It will add the response to the cache on the way out.
     * @private
     * @param {?} req The outgoing request object to handle.
     * @param {?} maxAgeInCache The maximum cache age in milliseconds.
     * @param {?} hasRefreshXCache It is true if the custom `REFRESH_X_CACHE` header is present; otherwise, false.
     * @param {?} next The next interceptor in the chain, or the backend if no interceptors remain in the chain.
     * @return {?} An observable of the event stream.
     */
    _sendRequest(req, maxAgeInCache, hasRefreshXCache, next) {
        /* Removes the `REFRESH_X_CACHE` custom option from header. */
        /** @type {?} */
        let reqWithoutCustomHeader = (hasRefreshXCache)
            ? req.clone({ headers: (req.headers.delete(REFRESH_X_CACHE)) })
            : req;
        console.log('Req-2: ', reqWithoutCustomHeader.headers);
        return next.handle(reqWithoutCustomHeader).pipe(tap((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /* There may be other events besides the response. */
            if (event instanceof HttpResponse) {
                /* Updates the cache. */
                this._cache.set(req, maxAgeInCache, event); /* Cached the original request `req`. */
            }
        })));
    }
}
CachingInterceptor.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CachingInterceptor.ctorParameters = () => [
    { type: Cachable },
    { type: RequestCache }
];
/** @nocollapse */ CachingInterceptor.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CachingInterceptor_Factory() { return new CachingInterceptor(i0.ɵɵinject(i1.Cachable), i0.ɵɵinject(i1.RequestCache)); }, token: CachingInterceptor, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CachingInterceptor.prototype._cachable;
    /**
     * @type {?}
     * @private
     */
    CachingInterceptor.prototype._cache;
}
//# sourceMappingURL=data:application/json;base64,