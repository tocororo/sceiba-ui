/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/utils/get-view-container.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
/**
 * A helper directive to mark valid insertion points in the template.
 * This directive injects the `ViewContainerRef` to gain access to the view container of the element
 * that will host the dynamically components.
 * In the `\@Directive` decorator, notice the selector name, `get-view-container`; that's what you use
 * to apply the directive to the element.
 */
export class GetViewContainerDirective {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _componentFactoryResolver
     */
    constructor(_viewContainerRef, _componentFactoryResolver) {
        this._viewContainerRef = _viewContainerRef;
        this._componentFactoryResolver = _componentFactoryResolver;
    }
    /**
     * Returns the injected `ViewContainerRef` to gain access to the view container of the element
     * that will host the dynamically components.
     * @return {?}
     */
    get viewContainerRef() {
        return this._viewContainerRef;
    }
    /**
     * Returns the injected `ComponentFactoryResolver` to gain access to the factory for a given component type.
     * @return {?}
     */
    get componentFactoryResolver() {
        return this._componentFactoryResolver;
    }
}
GetViewContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[get-view-container]'
            },] }
];
/** @nocollapse */
GetViewContainerDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetViewContainerDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    GetViewContainerDirective.prototype._componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXZpZXctY29udGFpbmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2NvcmUvdXRpbHMvZ2V0LXZpZXctY29udGFpbmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBWXRGLE1BQU0sT0FBTyx5QkFBeUI7Ozs7O0lBRWxDLFlBQTJCLGlCQUFtQyxFQUFVLHlCQUFtRDtRQUFoRyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtCO1FBQVUsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEwQjtJQUN6SCxDQUFDOzs7Ozs7SUFNSCxJQUFXLGdCQUFnQjtRQUV2QixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUtELElBQVcsd0JBQXdCO1FBRS9CLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO0lBQzFDLENBQUM7OztZQXZCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7OztZQVhtQixnQkFBZ0I7WUFBRSx3QkFBd0I7Ozs7Ozs7SUFjdkMsc0RBQTJDOzs7OztJQUFFLDhEQUEyRCIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRGlyZWN0aXZlLCBWaWV3Q29udGFpbmVyUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBIGhlbHBlciBkaXJlY3RpdmUgdG8gbWFyayB2YWxpZCBpbnNlcnRpb24gcG9pbnRzIGluIHRoZSB0ZW1wbGF0ZS4gXG4gKiBUaGlzIGRpcmVjdGl2ZSBpbmplY3RzIHRoZSBgVmlld0NvbnRhaW5lclJlZmAgdG8gZ2FpbiBhY2Nlc3MgdG8gdGhlIHZpZXcgY29udGFpbmVyIG9mIHRoZSBlbGVtZW50IFxuICogdGhhdCB3aWxsIGhvc3QgdGhlIGR5bmFtaWNhbGx5IGNvbXBvbmVudHMuIFxuICogSW4gdGhlIGBARGlyZWN0aXZlYCBkZWNvcmF0b3IsIG5vdGljZSB0aGUgc2VsZWN0b3IgbmFtZSwgYGdldC12aWV3LWNvbnRhaW5lcmA7IHRoYXQncyB3aGF0IHlvdSB1c2UgXG4gKiB0byBhcHBseSB0aGUgZGlyZWN0aXZlIHRvIHRoZSBlbGVtZW50LiBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbZ2V0LXZpZXctY29udGFpbmVyXSdcbn0pXG5leHBvcnQgY2xhc3MgR2V0Vmlld0NvbnRhaW5lckRpcmVjdGl2ZVxue1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcilcbiAgICB7IH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGluamVjdGVkIGBWaWV3Q29udGFpbmVyUmVmYCB0byBnYWluIGFjY2VzcyB0byB0aGUgdmlldyBjb250YWluZXIgb2YgdGhlIGVsZW1lbnQgXG4gICAgICogdGhhdCB3aWxsIGhvc3QgdGhlIGR5bmFtaWNhbGx5IGNvbXBvbmVudHMuIFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdmlld0NvbnRhaW5lclJlZigpOiBWaWV3Q29udGFpbmVyUmVmXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlld0NvbnRhaW5lclJlZjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbmplY3RlZCBgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyYCB0byBnYWluIGFjY2VzcyB0byB0aGUgZmFjdG9yeSBmb3IgYSBnaXZlbiBjb21wb25lbnQgdHlwZS4gXG4gICAgICovXG4gICAgcHVibGljIGdldCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIoKTogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICAgIH1cbn1cbiJdfQ==