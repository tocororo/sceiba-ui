/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/utils/message-handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
/** @enum {string} */
const HandlerComponent = {
    snackBar: "snackBar",
    dialog: "dialog",
};
export { HandlerComponent };
/** @enum {number} */
const StatusCode = {
    OK: 200,
    serverError: 500,
    notFound: 400,
};
export { StatusCode };
StatusCode[StatusCode.OK] = 'OK';
StatusCode[StatusCode.serverError] = 'serverError';
StatusCode[StatusCode.notFound] = 'notFound';
/**
 * Object that is used with the `DialogContentComponent` component.
 * It contains the different data that are showed in the message.
 */
export class DialogMessageData {
}
if (false) {
    /**
     * Message title.
     * @type {?}
     */
    DialogMessageData.prototype.title;
    /**
     * Message content.
     * @type {?}
     */
    DialogMessageData.prototype.content;
}
/**
 * Object that is used with the `DialogDeleteConfirmComponent` component.
 * It contains the different data that are showed in the message.
 */
export class DialogDeleteConfirmMessageData {
}
if (false) {
    /**
     * Article of the type to delete.
     * @type {?}
     */
    DialogDeleteConfirmMessageData.prototype.delTypeArt;
    /**
     * Type to delete.
     * @type {?}
     */
    DialogDeleteConfirmMessageData.prototype.delType;
    /**
     * Value to delete.
     * @type {?}
     */
    DialogDeleteConfirmMessageData.prototype.delValue;
}
/**
 * Simple dialog message.
 */
export class DialogContentComponent {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
DialogContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-dialog-message',
                template: `
		<h1 mat-dialog-title>
			{{ data.title }}
		</h1>
		<mat-dialog-content> {{ data.content }} </mat-dialog-content>
		<mat-dialog-actions align="end">
			<button mat-stroked-button mat-dialog-close>OK</button>
		</mat-dialog-actions>
	`
            }] }
];
/** @nocollapse */
DialogContentComponent.ctorParameters = () => [
    { type: DialogMessageData, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    DialogContentComponent.prototype.data;
}
/**
 * Dialog confirm message used to delete something.
 */
export class DialogDeleteConfirmComponent {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
DialogDeleteConfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-dialog-delete-confirm',
                template: `
		<h1 mat-dialog-title>
			¿Está usted seguro que desea eliminar {{ data.delTypeArt }} <strong>{{ data.delType }}</strong>?
		</h1>
		<mat-dialog-content>
			Su valor es: <em>{{ data.delValue }}</em>
		</mat-dialog-content>
		<mat-dialog-actions align="end">
			<button mat-stroked-button mat-dialog-close color="warning">Cancelar</button>
			<button mat-stroked-button [mat-dialog-close]="true" color="warning" cdkFocusInitial>Eliminar</button>
		</mat-dialog-actions>
	`
            }] }
];
/** @nocollapse */
DialogDeleteConfirmComponent.ctorParameters = () => [
    { type: DialogDeleteConfirmMessageData, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    DialogDeleteConfirmComponent.prototype.data;
}
export class MessageHandler {
    /**
     * @param {?=} _snackBar
     * @param {?=} dialog
     */
    constructor(_snackBar, dialog) {
        this._snackBar = _snackBar;
        this.dialog = dialog;
    }
    /**
     * @param {?} status
     * @param {?=} message
     * @param {?=} component
     * @param {?=} title
     * @param {?=} width
     * @return {?}
     */
    showMessage(status, message, component, title, width) {
        switch (status) {
            case StatusCode.serverError:
                this.componentHandler(message ? message : 'No se pudo conectar al servidor.', component, title, width);
                break;
            case StatusCode.notFound:
                this.componentHandler(message ? message : 'Operación extraviada, no se pudo realizar.', component, title, width);
                break;
            default:
                this.componentHandler(message ? message : 'Operación realizada con éxito.', component, title, width);
                break;
        }
    }
    /**
     * @private
     * @param {?} message
     * @param {?=} handlercomponent
     * @param {?=} title
     * @param {?=} width
     * @return {?}
     */
    componentHandler(message, handlercomponent, title, width = '300px') {
        switch (handlercomponent) {
            case HandlerComponent.dialog:
                this.dialog.open(DialogContentComponent, {
                    width: width,
                    data: { title: title, content: message }
                });
                break;
            default:
                this._snackBar.open(message, null, {
                    duration: 5000,
                    verticalPosition: 'bottom',
                });
                break;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MessageHandler.prototype._snackBar;
    /** @type {?} */
    MessageHandler.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvY29yZS91dGlscy9tZXNzYWdlLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQWEsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0FBRXRFLE1BQVksZ0JBQWdCO0lBQzNCLFFBQVEsWUFBYTtJQUNyQixNQUFNLFVBQVc7RUFDakI7OztBQUVELE1BQVksVUFBVTtJQUNyQixFQUFFLEtBQU07SUFDUixXQUFXLEtBQU07SUFDakIsUUFBUSxLQUFNO0VBQ2Q7Ozs7Ozs7OztBQU1ELE1BQU0sT0FBTyxpQkFBaUI7Q0FTN0I7Ozs7OztJQUxBLGtDQUFjOzs7OztJQUlkLG9DQUFnQjs7Ozs7O0FBT2pCLE1BQU0sT0FBTyw4QkFBOEI7Q0FjMUM7Ozs7OztJQVRBLG9EQUFtQjs7Ozs7SUFJbkIsaURBQWdCOzs7OztJQUloQixrREFBaUI7Ozs7O0FBa0JsQixNQUFNLE9BQU8sc0JBQXNCOzs7O0lBRWxDLFlBQW1ELElBQXVCO1FBQXZCLFNBQUksR0FBSixJQUFJLENBQW1CO0lBQ3hFLENBQUM7OztZQWZILFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixRQUFRLEVBQUU7Ozs7Ozs7O0VBUVQ7YUFDRDs7OztZQUd5RCxpQkFBaUIsdUJBQXRELE1BQU0sU0FBQyxlQUFlOzs7O0lBQXZCLHNDQUF1RDs7Ozs7QUFzQjNFLE1BQU0sT0FBTyw0QkFBNEI7Ozs7SUFFeEMsWUFFaUMsSUFBb0M7UUFBcEMsU0FBSSxHQUFKLElBQUksQ0FBZ0M7SUFDbkUsQ0FBQzs7O1lBcEJILFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsNEJBQTRCO2dCQUN0QyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0VBV1Q7YUFDRDs7OztZQUt1Qyw4QkFBOEIsdUJBQW5FLE1BQU0sU0FBQyxlQUFlOzs7O0lBQXZCLDRDQUFvRTs7QUFJdEUsTUFBTSxPQUFPLGNBQWM7Ozs7O0lBRTFCLFlBQW9CLFNBQXVCLEVBQVMsTUFBa0I7UUFBbEQsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUFTLFdBQU0sR0FBTixNQUFNLENBQVk7SUFDcEUsQ0FBQzs7Ozs7Ozs7O0lBRUgsV0FBVyxDQUFDLE1BQWtCLEVBQUUsT0FBZ0IsRUFBRSxTQUE0QixFQUFFLEtBQWMsRUFBRSxLQUFjO1FBQzdHLFFBQVEsTUFBTSxFQUNkO1lBQ0MsS0FBSyxVQUFVLENBQUMsV0FBVztnQkFDMUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxrQ0FBa0MsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUN2RyxNQUFNO1lBQ1AsS0FBSyxVQUFVLENBQUMsUUFBUTtnQkFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyw0Q0FBNEMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNqSCxNQUFNO1lBQ1A7Z0JBQ0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxnQ0FBZ0MsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNyRyxNQUFNO1NBQ1A7SUFDRixDQUFDOzs7Ozs7Ozs7SUFFTyxnQkFBZ0IsQ0FBQyxPQUFlLEVBQUUsZ0JBQW1DLEVBQUUsS0FBYyxFQUFFLFFBQWdCLE9BQU87UUFDckgsUUFBUSxnQkFBZ0IsRUFDeEI7WUFDQyxLQUFLLGdCQUFnQixDQUFDLE1BQU07Z0JBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFO29CQUN4QyxLQUFLLEVBQUUsS0FBSztvQkFDWixJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUU7aUJBQ3hDLENBQUMsQ0FBQztnQkFDSCxNQUFNO1lBRVA7Z0JBQ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtvQkFDbEMsUUFBUSxFQUFFLElBQUk7b0JBQ2QsZ0JBQWdCLEVBQUUsUUFBUTtpQkFDMUIsQ0FBQyxDQUFDO2dCQUNILE1BQU07U0FDUDtJQUNGLENBQUM7Q0FDRDs7Ozs7O0lBcENZLG1DQUErQjs7SUFBRSxnQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTbmFja0JhciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NuYWNrLWJhcic7XG5pbXBvcnQgeyBNYXREaWFsb2csIE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbmV4cG9ydCBlbnVtIEhhbmRsZXJDb21wb25lbnQge1xuXHRzbmFja0JhciA9ICdzbmFja0JhcicsXG5cdGRpYWxvZyA9ICdkaWFsb2cnLFxufVxuXG5leHBvcnQgZW51bSBTdGF0dXNDb2RlIHtcblx0T0sgPSAyMDAsXG5cdHNlcnZlckVycm9yID0gNTAwLFxuXHRub3RGb3VuZCA9IDQwMFxufVxuXG4vKipcbiAqIE9iamVjdCB0aGF0IGlzIHVzZWQgd2l0aCB0aGUgYERpYWxvZ0NvbnRlbnRDb21wb25lbnRgIGNvbXBvbmVudC5cbiAqIEl0IGNvbnRhaW5zIHRoZSBkaWZmZXJlbnQgZGF0YSB0aGF0IGFyZSBzaG93ZWQgaW4gdGhlIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBEaWFsb2dNZXNzYWdlRGF0YSB7XG4gICAgLyoqXG4gICAgICogTWVzc2FnZSB0aXRsZS5cbiAgICAgKi9cblx0dGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXNzYWdlIGNvbnRlbnQuXG4gICAgICovXG5cdGNvbnRlbnQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBPYmplY3QgdGhhdCBpcyB1c2VkIHdpdGggdGhlIGBEaWFsb2dEZWxldGVDb25maXJtQ29tcG9uZW50YCBjb21wb25lbnQuXG4gKiBJdCBjb250YWlucyB0aGUgZGlmZmVyZW50IGRhdGEgdGhhdCBhcmUgc2hvd2VkIGluIHRoZSBtZXNzYWdlLlxuICovXG5leHBvcnQgY2xhc3MgRGlhbG9nRGVsZXRlQ29uZmlybU1lc3NhZ2VEYXRhXG57XG4gICAgLyoqXG4gICAgICogQXJ0aWNsZSBvZiB0aGUgdHlwZSB0byBkZWxldGUuXG4gICAgICovXG5cdGRlbFR5cGVBcnQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUeXBlIHRvIGRlbGV0ZS5cbiAgICAgKi9cblx0ZGVsVHlwZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFZhbHVlIHRvIGRlbGV0ZS5cbiAgICAgKi9cblx0ZGVsVmFsdWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBTaW1wbGUgZGlhbG9nIG1lc3NhZ2UuXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ3RvY28tZGlhbG9nLW1lc3NhZ2UnLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxoMSBtYXQtZGlhbG9nLXRpdGxlPlxuXHRcdFx0e3sgZGF0YS50aXRsZSB9fVxuXHRcdDwvaDE+XG5cdFx0PG1hdC1kaWFsb2ctY29udGVudD4ge3sgZGF0YS5jb250ZW50IH19IDwvbWF0LWRpYWxvZy1jb250ZW50PlxuXHRcdDxtYXQtZGlhbG9nLWFjdGlvbnMgYWxpZ249XCJlbmRcIj5cblx0XHRcdDxidXR0b24gbWF0LXN0cm9rZWQtYnV0dG9uIG1hdC1kaWFsb2ctY2xvc2U+T0s8L2J1dHRvbj5cblx0XHQ8L21hdC1kaWFsb2ctYWN0aW9ucz5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBEaWFsb2dDb250ZW50Q29tcG9uZW50XG57XG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IERpYWxvZ01lc3NhZ2VEYXRhKVxuXHR7IH1cbn1cblxuLyoqXG4gKiBEaWFsb2cgY29uZmlybSBtZXNzYWdlIHVzZWQgdG8gZGVsZXRlIHNvbWV0aGluZy5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAndG9jby1kaWFsb2ctZGVsZXRlLWNvbmZpcm0nLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxoMSBtYXQtZGlhbG9nLXRpdGxlPlxuXHRcdFx0wr9Fc3TDoSB1c3RlZCBzZWd1cm8gcXVlIGRlc2VhIGVsaW1pbmFyIHt7IGRhdGEuZGVsVHlwZUFydCB9fSA8c3Ryb25nPnt7IGRhdGEuZGVsVHlwZSB9fTwvc3Ryb25nPj9cblx0XHQ8L2gxPlxuXHRcdDxtYXQtZGlhbG9nLWNvbnRlbnQ+XG5cdFx0XHRTdSB2YWxvciBlczogPGVtPnt7IGRhdGEuZGVsVmFsdWUgfX08L2VtPlxuXHRcdDwvbWF0LWRpYWxvZy1jb250ZW50PlxuXHRcdDxtYXQtZGlhbG9nLWFjdGlvbnMgYWxpZ249XCJlbmRcIj5cblx0XHRcdDxidXR0b24gbWF0LXN0cm9rZWQtYnV0dG9uIG1hdC1kaWFsb2ctY2xvc2UgY29sb3I9XCJ3YXJuaW5nXCI+Q2FuY2VsYXI8L2J1dHRvbj5cblx0XHRcdDxidXR0b24gbWF0LXN0cm9rZWQtYnV0dG9uIFttYXQtZGlhbG9nLWNsb3NlXT1cInRydWVcIiBjb2xvcj1cIndhcm5pbmdcIiBjZGtGb2N1c0luaXRpYWw+RWxpbWluYXI8L2J1dHRvbj5cblx0XHQ8L21hdC1kaWFsb2ctYWN0aW9ucz5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBEaWFsb2dEZWxldGVDb25maXJtQ29tcG9uZW50XG57XG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihcblx0XHQvKnB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxEaWFsb2dEZWxldGVDb25maXJtQ29tcG9uZW50PiwqL1xuXHRcdEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogRGlhbG9nRGVsZXRlQ29uZmlybU1lc3NhZ2VEYXRhKVxuXHR7IH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VIYW5kbGVyXG57XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgX3NuYWNrQmFyPzogTWF0U25hY2tCYXIsIHB1YmxpYyBkaWFsb2c/OiBNYXREaWFsb2cpXG5cdHsgfVxuXG5cdHNob3dNZXNzYWdlKHN0YXR1czogU3RhdHVzQ29kZSwgbWVzc2FnZT86IHN0cmluZywgY29tcG9uZW50PzogSGFuZGxlckNvbXBvbmVudCwgdGl0bGU/OiBzdHJpbmcsIHdpZHRoPzogc3RyaW5nKSB7XG5cdFx0c3dpdGNoIChzdGF0dXMpXG5cdFx0e1xuXHRcdFx0Y2FzZSBTdGF0dXNDb2RlLnNlcnZlckVycm9yOlxuXHRcdFx0XHR0aGlzLmNvbXBvbmVudEhhbmRsZXIobWVzc2FnZSA/IG1lc3NhZ2UgOiAnTm8gc2UgcHVkbyBjb25lY3RhciBhbCBzZXJ2aWRvci4nLCBjb21wb25lbnQsIHRpdGxlLCB3aWR0aCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBTdGF0dXNDb2RlLm5vdEZvdW5kOlxuXHRcdFx0XHR0aGlzLmNvbXBvbmVudEhhbmRsZXIobWVzc2FnZSA/IG1lc3NhZ2UgOiAnT3BlcmFjacOzbiBleHRyYXZpYWRhLCBubyBzZSBwdWRvIHJlYWxpemFyLicsIGNvbXBvbmVudCwgdGl0bGUsIHdpZHRoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aGlzLmNvbXBvbmVudEhhbmRsZXIobWVzc2FnZSA/IG1lc3NhZ2UgOiAnT3BlcmFjacOzbiByZWFsaXphZGEgY29uIMOpeGl0by4nLCBjb21wb25lbnQsIHRpdGxlLCB3aWR0aCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY29tcG9uZW50SGFuZGxlcihtZXNzYWdlOiBzdHJpbmcsIGhhbmRsZXJjb21wb25lbnQ/OiBIYW5kbGVyQ29tcG9uZW50LCB0aXRsZT86IHN0cmluZywgd2lkdGg6IHN0cmluZyA9ICczMDBweCcpOiB2b2lkIHtcblx0XHRzd2l0Y2ggKGhhbmRsZXJjb21wb25lbnQpXG5cdFx0e1xuXHRcdFx0Y2FzZSBIYW5kbGVyQ29tcG9uZW50LmRpYWxvZzpcblx0XHRcdFx0dGhpcy5kaWFsb2cub3BlbihEaWFsb2dDb250ZW50Q29tcG9uZW50LCB7XG5cdFx0XHRcdFx0d2lkdGg6IHdpZHRoLFxuXHRcdFx0XHRcdGRhdGE6IHsgdGl0bGU6IHRpdGxlLCBjb250ZW50OiBtZXNzYWdlIH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aGlzLl9zbmFja0Jhci5vcGVuKG1lc3NhZ2UsIG51bGwsIHtcblx0XHRcdFx0XHRkdXJhdGlvbjogNTAwMCxcblx0XHRcdFx0XHR2ZXJ0aWNhbFBvc2l0aW9uOiAnYm90dG9tJyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxufVxuIl19