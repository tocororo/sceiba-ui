/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/utils/road-map/road-map.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { isObject } from 'util';
/** @type {?} */
const seriesName_English = ['achieved', 'unresolved'];
/** @type {?} */
const seriesName_Spanish = ['realizado', 'pendiente'];
/**
 * An interface that represents the content of a feature object.
 * @record
 */
export function Feature() { }
if (false) {
    /**
     * The feature's name.
     * @type {?}
     */
    Feature.prototype.name;
    /**
     * The feature's achieved percentage.
     * @type {?}
     */
    Feature.prototype.achieved;
}
/**
 * An interface that represents the content of a product object.
 * Its achieved percentage value is calculated from its `features` array field.
 * @record
 */
export function Product() { }
if (false) {
    /**
     * The product's name.
     * @type {?}
     */
    Product.prototype.name;
    /**
     * The product's features array.
     * @type {?}
     */
    Product.prototype.features;
}
/**
 * An interface that represents the content of a result object.
 * @record
 */
export function Result() { }
if (false) {
    /**
     * The result's name.
     * @type {?}
     */
    Result.prototype.name;
    /**
     * The result's value.
     * @type {?}
     */
    Result.prototype.value;
}
/**
 * An interface that represents the content of a chart bar object.
 * Its `series` field is an array of length 2 that contains
 * the achieved/unresolved results; for example,
 * `'series': [
 * {
 * 'name': 'achieved',
 * 'value': 20
 * },
 * {
 * 'name': 'unresolved',
 * 'value': 80
 * }
 * ]`
 * @record
 */
export function ChartBar() { }
if (false) {
    /**
     * The chart's bar name.
     * @type {?}
     */
    ChartBar.prototype.name;
    /**
     * The results array that makes up the chart's bar.
     * @type {?}
     */
    ChartBar.prototype.series;
}
/**
 * An interface that represents the content of an entry element object.
 * @record
 */
export function EntryElement() { }
if (false) {
    /** @type {?} */
    EntryElement.prototype.name;
    /** @type {?|undefined} */
    EntryElement.prototype.value;
    /** @type {?|undefined} */
    EntryElement.prototype.label;
    /** @type {?|undefined} */
    EntryElement.prototype.series;
}
/**
 * Component for displaying a roadmap. It basically displays the products
 * that we are currently working, and the products that we will work in the future.
 * Besides, when a product is selected, its features are displayed.
 * It always shows the achieved/unresolved work in percentage.
 */
export class RoadMapComponent {
    constructor() {
        /**
         * Returns the -1 value that is used to remove a chart.
         */
        this.removeChart_PosFlag = -1;
        this.withoutProductText = '¡No hay ningún producto!';
        this._isChartVertical = true;
        this.tabLabel_CW = 'Trabajos Actuales';
        this.tabLabel_FW = 'Trabajos Futuros o Pendientes';
        this._selectedTabPos = 0;
        /* The `_gridHeight` value is set when the `legendPosition` value is set. */
        this.chartTitle_P = 'Lista de productos';
        this._isUsingTrick_RepaintChart = false;
        this._products = this._currentProducts = [];
        this._futureProducts = [];
        this._products_Internal = this._currentProducts_Internal = [];
        this._futureProducts_Internal = [];
        this._featuresTotal_Internal = this._currentFeaturesTotal_Internal = [];
        this._futureFeaturesTotal_Internal = [];
        this._features_Internal = this._currentFeatures_Internal = [];
        this._futureFeatures_Internal = [];
        this._activeEntries_P_CW = [];
        this._activeEntries_P_FW = [];
        this.view = [900, 350];
        this.colorScheme_CW = {
            domain: [
                // '#85E96E',  // green
                '#6EE9B5',
                '#E96E70',
            ]
            //			domain: [  // all colors dark
            //   '#2F6E6F',
            //			  '#2F6F40',  // green
            //   '#6B6F2F',  // light green
            //			  '#6F432F',  // red
            //   '#6F2F4F',
            //   '#562F6F',
            //   '#302F6F',
            //   '#2F466F'
            //			]
            // domain: [  // all colors grey
            //	 '#a6a6a6',
            //   '#828282',
            //   '#686868',
            //	 '#555555',
            //   '#4d4d4d',
            //   '#464646',
            //   '#434343',
            //   '#3d3d3d',
            //   '#343434',
            //   '#262626',
            //   '#252525',
            //   '#000000'
            // ]
        };
        this.colorScheme_FW = {
            domain: [
                '#6F6EE9',
                '#6EBBE9' // light blue
            ]
        };
        this.gradient = false;
        this.barPadding = 12;
        this.showXAxis = true;
        this.showXAxisLabel = true;
        this.xAxisLabel_P = 'Producto';
        this.maxAxisTickLength = 16;
        this.showYAxis = true;
        this.showYAxisLabel = true;
        this.yAxisLabel_P = 'Realizado / Pendiente En Por Ciento';
        this.showLegend = true;
        this.legendTitle = 'Leyenda';
        this.legendPosition = 'right';
        this._selectedProductPos = this._selectedProductPos_CW = this._selectedProductPos_FW = this.removeChart_PosFlag;
        this._chartTitle_F = this._chartTitle_F_CW = this._chartTitle_F_FW = 'Lista de características del producto seleccionado';
        this.xAxisLabel_F = 'Característica';
        this.yAxisLabel_F = 'Realizado / Pendiente En Por Ciento';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * Returns the input field that contains the chart's visualization direction.
     * It is true if the chart is visualized vertically; otherwise, false (horizontally).
     * When this value is set, the `xAxisLabel_P`/`yAxisLabel_P` and `xAxisLabel_F`/`yAxisLabel_F` values are set accordingly.
     * By default, its value is `true`.
     * @return {?}
     */
    get isChartVertical() {
        return this._isChartVertical;
    }
    /**
     * Sets the input field that contains the chart's visualization direction.
     * It is true if the chart is visualized vertically; otherwise, false (horizontally).
     * When this value is set, the `xAxisLabel_P`/`yAxisLabel_P` and `xAxisLabel_F`/`yAxisLabel_F` values are set accordingly.
     * By default, its value is `true`.
     * @param {?} value The new chart's visualization direction to set.
     * @return {?}
     */
    set isChartVertical(value) {
        if (this._isChartVertical != value) {
            /** @type {?} */
            let temp = this.xAxisLabel_P;
            this.xAxisLabel_P = this.yAxisLabel_P;
            this.yAxisLabel_P = temp;
            temp = this.xAxisLabel_F;
            this.xAxisLabel_F = this.yAxisLabel_F;
            this.yAxisLabel_F = temp;
            this._isChartVertical = value;
        }
    }
    /**
     * Returns the grid height.
     * Its value is set depending on the `legendPosition` value.
     * @return {?}
     */
    get gridHeight() {
        return this._gridHeight;
    }
    /**
     * Returns the input field that contains the current products array introduced by the user.
     * From this array is created the `currentProducts_Internal` and `currentFeatures_Internal` arrays.
     * By default, its value is `[]`.
     * @return {?}
     */
    get currentProducts() {
        return this._currentProducts;
    }
    /**
     * Sets the input field that contains the current products array.
     * By default, its value is `[]`.
     * @param {?} value The new current products array to set.
     * @return {?}
     */
    set currentProducts(value) {
        // console.log('currentProducts: ', value);
        /* Updates the current products/features arrays. */
        this._currentProducts = value || [];
        if (this._isUsingTrick_RepaintChart) {
            this._isUsingTrick_RepaintChart = false;
            this._currentProducts_Internal = this._currentProducts_Internal.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value));
            this._currentFeaturesTotal_Internal = this._currentFeaturesTotal_Internal.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value))));
        }
        else {
            this._currentProducts_Internal = [];
            this._currentFeaturesTotal_Internal = [];
            /* Creates the internal arrays that are going to be passed in the template;
            `_currentProducts_Internal` and `_currentFeaturesTotal_Internal` arrays.
            The `_currentFeatures_Internal` array references an element in
            the `_currentFeaturesTotal_Internal` array. This element represents the features
            of a selected product in the `_currentProducts_Internal` array. */
            this._createsInternalArrays(this._currentProducts, this._currentProducts_Internal, this._currentFeaturesTotal_Internal);
        }
        this._currentFeatures_Internal = [];
        /* Updates the fields whether there is a selected current product. */
        if (this._selectedProductPos_CW != this.removeChart_PosFlag) {
            if (this._selectedProductPos_CW < this._currentProducts.length) {
                /* Updates the fields whether the new `_currentProducts` array has the enough length. */
                /* The `_selectedProductPos_CW` value is already correct. */
                this._currentFeatures_Internal = this._currentFeaturesTotal_Internal[this._selectedProductPos_CW];
                this._set_activeEntries_P_CW(false);
                this._chartTitle_F_CW = this._chartTitle_F
                    + ((this._chartTitle_F.length == 0) ? '' : ' ')
                    + `“${this._currentProducts_Internal[this._selectedProductPos_CW].name}”`;
            }
            else {
                /* Removes the selected current product because the `_currentProducts` array has not the enough length. */
                this._selectedProductPos_CW = this.removeChart_PosFlag;
                /* The `_currentFeatures_Internal` array is already correct (an empty array). */
                this._set_activeEntries_P_CW(true);
                this._chartTitle_F_CW = this._chartTitle_F;
            }
        }
        /* Updates the fields whether the selected tab is the current works. */
        if (this._selectedTabPos == 0) {
            this._setData_CW();
        }
    }
    /**
     * Returns the current products array displayed in the chart.
     * It is created from the `currentProducts` array.
     * By default, its value is `[]`.
     * @return {?}
     */
    get currentProducts_Internal() {
        return this._currentProducts_Internal;
    }
    /**
     * Returns the current features array of a selected product displayed in the chart.
     * It is created from the `currentProducts` array.
     * By default, its value is `[]`.
     * @return {?}
     */
    get currentFeatures_Internal() {
        return this._currentFeatures_Internal;
    }
    /**
     * Returns the input field that contains the future products array introduced by the user.
     * From this array is created the `futureProducts_Internal` and `futureFeatures_Internal` arrays.
     * By default, its value is `[]`.
     * @return {?}
     */
    get futureProducts() {
        return this._futureProducts;
    }
    /**
     * Sets the input field that contains the future products array.
     * By default, its value is `[]`.
     * @param {?} value The new future products array to set.
     * @return {?}
     */
    set futureProducts(value) {
        // console.log('futureProducts: ', value);
        /* Updates the future products/features arrays. */
        this._futureProducts = value || [];
        if (this._isUsingTrick_RepaintChart) {
            this._isUsingTrick_RepaintChart = false;
            this._futureProducts_Internal = this._futureProducts_Internal.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value));
            this._futureFeaturesTotal_Internal = this._futureFeaturesTotal_Internal.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value))));
        }
        else {
            this._futureProducts_Internal = [];
            this._futureFeaturesTotal_Internal = [];
            /* Creates the internal arrays that are going to be passed in the template;
            `_futureProducts_Internal` and `_futureFeaturesTotal_Internal` arrays.
            The `_futureFeatures_Internal` array references an element in
            the `_futureFeaturesTotal_Internal` array. This element represents the features
            of a selected product in the `_futureProducts_Internal` array. */
            this._createsInternalArrays(this._futureProducts, this._futureProducts_Internal, this._futureFeaturesTotal_Internal);
        }
        this._futureFeatures_Internal = [];
        /* Updates the fields whether there is a selected future product. */
        if (this._selectedProductPos_FW != this.removeChart_PosFlag) {
            if (this._selectedProductPos_FW < this._futureProducts.length) {
                /* Updates the fields whether the new `_futureProducts` array has the enough length. */
                /* The `_selectedProductPos_FW` value is already correct. */
                this._futureFeatures_Internal = this._futureFeaturesTotal_Internal[this._selectedProductPos_FW];
                this._set_activeEntries_P_FW(false);
                this._chartTitle_F_FW = this._chartTitle_F
                    + ((this._chartTitle_F.length == 0) ? '' : ' ')
                    + `“${this._futureProducts_Internal[this._selectedProductPos_FW].name}”`;
            }
            else {
                /* Removes the selected future product because the `_futureProducts` array has not the enough length. */
                this._selectedProductPos_FW = this.removeChart_PosFlag;
                /* The `_futureFeatures_Internal` array is already correct (an empty array). */
                this._set_activeEntries_P_FW(true);
                this._chartTitle_F_FW = this._chartTitle_F;
            }
        }
        /* Updates the fields whether the selected tab is the future works. */
        if (this._selectedTabPos == 1) {
            this._setData_FW();
        }
    }
    /**
     * Returns the future products array displayed in the chart.
     * It is created from the `futureProducts` array.
     * By default, its value is `[]`.
     * @return {?}
     */
    get futureProducts_Internal() {
        return this._futureProducts_Internal;
    }
    /**
     * Returns the future features array of a selected product displayed in the chart.
     * It is created from the `futureProducts` array.
     * By default, its value is `[]`.
     * @return {?}
     */
    get futureFeatures_Internal() {
        return this._futureFeatures_Internal;
    }
    /**
     * Returns the current product elements array to highlight displayed in the chart.
     * It is modified dynamically.
     * By default, its value is `[]`.
     * @return {?}
     */
    get activeEntries_P_CW() {
        return this._activeEntries_P_CW;
    }
    /**
     * Sets the current product elements array to highlight displayed in the chart.
     * @private
     * @param {?} setEmpty If it is true, then sets the `_activeEntries_P_CW` array to empty.
     * @return {?}
     */
    _set_activeEntries_P_CW(setEmpty) {
        // console.log('Called "_set_activeEntries_P_CW": setEmpty = ', setEmpty);
        if (setEmpty) {
            this._activeEntries_P_CW = [];
        }
        else {
            /** @type {?} */
            let selectedProduct = this._currentProducts_Internal[this._selectedProductPos_CW];
            this._activeEntries_P_CW = [
                {
                    'name': selectedProduct.series[0].name,
                    'value': selectedProduct.series[0].value,
                    'label': selectedProduct.series[0].name,
                    'series': selectedProduct.name
                },
                {
                    'name': selectedProduct.series[1].name,
                    'value': selectedProduct.series[1].value,
                    'label': selectedProduct.series[1].name,
                    'series': selectedProduct.name
                }
            ];
        }
    }
    /**
     * Returns the future product elements array to highlight displayed in the chart.
     * It is modified dynamically.
     * By default, its value is `[]`.
     * @return {?}
     */
    get activeEntries_P_FW() {
        return this._activeEntries_P_FW;
    }
    /**
     * Sets the future product elements array to highlight displayed in the chart.
     * @private
     * @param {?} setEmpty If it is true, then sets the `_activeEntries_P_FW` array to empty.
     * @return {?}
     */
    _set_activeEntries_P_FW(setEmpty) {
        // console.log('Called "_set_activeEntries_P_FW": setEmpty = ', setEmpty);
        if (setEmpty) {
            this._activeEntries_P_FW = [];
        }
        else {
            /** @type {?} */
            let selectedProduct = this._futureProducts_Internal[this._selectedProductPos_FW];
            this._activeEntries_P_FW = [
                {
                    'name': selectedProduct.series[0].name,
                    'value': selectedProduct.series[0].value,
                    'label': selectedProduct.series[0].name,
                    'series': selectedProduct.name
                },
                {
                    'name': selectedProduct.series[1].name,
                    'value': selectedProduct.series[1].value,
                    'label': selectedProduct.series[1].name,
                    'series': selectedProduct.name
                }
            ];
        }
    }
    /**
     * Returns the input field that contains the chart's legend position. Its value is `'right'` or `'below'`.
     * By default, its value is `'right'`.
     * @return {?}
     */
    get legendPosition() {
        return this._legendPosition;
    }
    /**
     * Sets the input field that contains the chart's legend position. Its value is `'right'` or `'below'`.
     * By default, its value is `'right'`.
     * @param {?} value The new chart's legend position to set.
     * @return {?}
     */
    set legendPosition(value) {
        if ((this._legendPosition = value) == 'below') {
            /* Sets the grid height. */
            this._gridHeight = this.view[1] + 60; /* More 60 to include the legend in the grid. */
        }
        else {
            /* Sets the grid height. */
            this._gridHeight = this.view[1];
        }
    }
    /**
     * Returns a boolean value that indicates the legend position.
     * It is true if the legend position is `'right'`; otherwise, false (`'below'`).
     * By default, its value is `true`.
     * @return {?}
     */
    get isLegendRight() {
        return (this.legendPosition == 'right');
    }
    /**
     * Sets a boolean value that indicates the legend position.
     * It is true if the legend position is `'right'`; otherwise, false (`'below'`).
     * By default, its value is `true`.
     * @param {?} value The new boolean value to set.
     * @return {?}
     */
    set isLegendRight(value) {
        this.legendPosition = (value) ? 'right' : 'below';
    }
    /**
     * Returns the selected current product position. Contains the `removeChart_PosFlag` value when
     * there is not any selected current product position.
     * @return {?}
     */
    get selectedProductPos_CW() {
        return this._selectedProductPos_CW;
    }
    /**
     * Returns the selected future product position. Contains the `removeChart_PosFlag` value when
     * there is not any selected future product position.
     * @return {?}
     */
    get selectedProductPos_FW() {
        return this._selectedProductPos_FW;
    }
    /**
     * Returns the input field that contains the chart's title of features.
     * By default, its value is `'Lista de características del producto seleccionado'`.
     * @return {?}
     */
    get chartTitle_F() {
        return this._chartTitle_F;
    }
    /**
     * Sets the input field that contains the chart's title of features.
     * By default, its value is `'Lista de características del producto seleccionado'`.
     * @param {?} value The new chart's title of features to set.
     * @return {?}
     */
    set chartTitle_F(value) {
        this._chartTitle_F = value || 'Lista de características del producto seleccionado';
        /* Updates all chart's titles of features. */
        this._chartTitle_F_CW = (this._selectedProductPos_CW == this.removeChart_PosFlag)
            ? (this._chartTitle_F)
            : (this._chartTitle_F
                + ((this._chartTitle_F.length == 0) ? '' : ' ')
                + `“${this._currentProducts_Internal[this._selectedProductPos_CW].name}”`);
        this._chartTitle_F_FW = (this._selectedProductPos_FW == this.removeChart_PosFlag)
            ? (this._chartTitle_F)
            : (this._chartTitle_F
                + ((this._chartTitle_F.length == 0) ? '' : ' ')
                + `“${this._futureProducts_Internal[this._selectedProductPos_FW].name}”`);
    }
    /**
     * Returns the chart's title of working current features.
     * By default, its value is `'Lista de características del producto seleccionado'`.
     * @return {?}
     */
    get chartTitle_F_CW() {
        return this._chartTitle_F_CW;
    }
    /**
     * Returns the chart's title of working future features.
     * By default, its value is `'Lista de características del producto seleccionado'`.
     * @return {?}
     */
    get chartTitle_F_FW() {
        return this._chartTitle_F_FW;
    }
    /**
     * @param {?} newPos
     * @return {?}
     */
    onSelectTab(newPos) {
        // console.log('onSelectTab pos: ', newPos);
        /* Uses this trick to obligate repainting the chart. */
        this._isUsingTrick_RepaintChart = true;
        if ((this._selectedTabPos = newPos) == 0) {
            this.currentProducts = this.currentProducts.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value));
            // this._setData_CW();  /* Better performance: Use this option if you do not use the dynamic legend position or not resize the navigator. */
        }
        else {
            this.futureProducts = this.futureProducts.map((/**
             * @param {?} value
             * @return {?}
             */
            value => value));
            // this._setData_FW();  /* Better performance: Use this option if you do not use the dynamic legend position or not resize the navigator. */
        }
    }
    /**
     * @param {?} eventInfo
     * @return {?}
     */
    onSelect(eventInfo) {
        // console.log('onSelect: ', eventInfo);
        if (isObject(eventInfo)) /* It has not clicked a legend item. */ {
            /** @type {?} */
            let tempPos;
            /** @type {?} */
            const len = this._products_Internal.length;
            /** @type {?} */
            const posAsString = eventInfo.series;
            /* Gets the new selected position. */
            for (tempPos = 0; tempPos < len; tempPos++) {
                if (this._products_Internal[tempPos].name == posAsString)
                    break;
            }
            /* Updates the `_selectedProductPos_CW`/`_selectedProductPos_FW`. If the new selected
             * position equals the current selected position, then the chart for displaying
             * the features list of the selected product will be removed. */
            this._updateProductPos(tempPos);
        }
    }
    /**
     * @param {?} eventInfo
     * @return {?}
     */
    onActivate(eventInfo) {
        // console.log('onActivate: ', eventInfo);
    }
    /**
     * @param {?} eventInfo
     * @return {?}
     */
    onDeactivate(eventInfo) {
        // console.log('onDeactivate: ', eventInfo, ', _activeEntries_P_CW = ', this._activeEntries_P_CW, ', _activeEntries_P_FW = ', this._activeEntries_P_FW);
        if (this._isFeaturesChartShowed) {
            if (this._selectedTabPos == 0) {
                this._activeEntries_P_CW = this._activeEntries_P_CW.map((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => value));
            }
            else {
                this._activeEntries_P_FW = this._activeEntries_P_FW.map((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => value));
            }
        }
    }
    /**
     * Sets the data of current works.
     * @private
     * @return {?}
     */
    _setData_CW() {
        this._products = this._currentProducts;
        this._products_Internal = this._currentProducts_Internal;
        this._featuresTotal_Internal = this._currentFeaturesTotal_Internal;
        this._features_Internal = this._currentFeatures_Internal;
        this._selectedProductPos = this._selectedProductPos_CW;
    }
    /**
     * Sets the data of future works.
     * @private
     * @return {?}
     */
    _setData_FW() {
        this._products = this._futureProducts;
        this._products_Internal = this._futureProducts_Internal;
        this._featuresTotal_Internal = this._futureFeaturesTotal_Internal;
        this._features_Internal = this._futureFeatures_Internal;
        this._selectedProductPos = this._selectedProductPos_FW;
    }
    /**
     * Returns true if the features chart is showed; otherwise, false.
     * @private
     * @return {?}
     */
    get _isFeaturesChartShowed() {
        return (this._selectedProductPos != this.removeChart_PosFlag);
    }
    /**
     * Updates the `selectedProductPos`. If the new selected position equals the current
     * selected position, then the chart for displaying the features list of the selected product
     * will be removed.
     * @private
     * @param {?} newSelectedPosition The new selected position.
     * @return {?}
     */
    _updateProductPos(newSelectedPosition) {
        /* Updates the `selectedProductPos`. If the new selected position equals the current
         * selected position, then the chart for displaying the features list of the selected product
         * will be removed. */
        if (newSelectedPosition == this._selectedProductPos) {
            if (this._selectedTabPos == 0) {
                this._selectedProductPos = this._selectedProductPos_CW = this.removeChart_PosFlag;
                this._features_Internal = this._currentFeatures_Internal = [];
                this._set_activeEntries_P_CW(true);
                this._chartTitle_F_CW = this._chartTitle_F;
            }
            else {
                this._selectedProductPos = this._selectedProductPos_FW = this.removeChart_PosFlag;
                this._features_Internal = this._futureFeatures_Internal = [];
                this._set_activeEntries_P_FW(true);
                this._chartTitle_F_FW = this._chartTitle_F;
            }
        }
        else {
            if (this._selectedTabPos == 0) {
                this._selectedProductPos = this._selectedProductPos_CW = newSelectedPosition;
                this._features_Internal = this._currentFeatures_Internal = this._featuresTotal_Internal[newSelectedPosition];
                this._set_activeEntries_P_CW(false);
                this._chartTitle_F_CW = this._chartTitle_F
                    + ((this._chartTitle_F.length == 0) ? '' : ' ')
                    + `“${this._products_Internal[newSelectedPosition].name}”`;
            }
            else {
                this._selectedProductPos = this._selectedProductPos_FW = newSelectedPosition;
                this._features_Internal = this._futureFeatures_Internal = this._featuresTotal_Internal[newSelectedPosition];
                this._set_activeEntries_P_FW(false);
                this._chartTitle_F_FW = this._chartTitle_F
                    + ((this._chartTitle_F.length == 0) ? '' : ' ')
                    + `“${this._products_Internal[newSelectedPosition].name}”`;
            }
        }
    }
    /**
     * Creates the internal arrays that are going to be passed in the template
     * for the current/future products/features accordingly.
     * @private
     * @param {?} products The current/future products array introduced by the user.
     * @param {?} products_Internal The current/future products array displayed in the chart.
     * @param {?} featuresTotal_Internal The array that contains all current/future features arrays that can be displayed in the chart.
     * @return {?}
     */
    _createsInternalArrays(products, products_Internal, featuresTotal_Internal) {
        /* Creates the internal arrays that are going to be passed in the template;
        `_currentProducts_Internal`/`_futureProducts_Internal` and `_currentFeaturesTotal_Internal`/`_futureFeaturesTotal_Internal` arrays.
        The `_currentFeatures_Internal`/`_futureFeatures_Internal` array references an element in
        the `_currentFeaturesTotal_Internal`/`_futureFeaturesTotal_Internal` array. This element represents the features
        of a selected product in the `_currentProducts_Internal`/`_futureProducts_Internal` array. */
        /* Creates the internal arrays that are going to be passed in the template;
                `_currentProducts_Internal`/`_futureProducts_Internal` and `_currentFeaturesTotal_Internal`/`_futureFeaturesTotal_Internal` arrays.
                The `_currentFeatures_Internal`/`_futureFeatures_Internal` array references an element in
                the `_currentFeaturesTotal_Internal`/`_futureFeaturesTotal_Internal` array. This element represents the features
                of a selected product in the `_currentProducts_Internal`/`_futureProducts_Internal` array. */
        /** @type {?} */
        let i;
        /** @type {?} */
        let j;
        /** @type {?} */
        const len_i = products.length;
        /** @type {?} */
        let len_j;
        /** @type {?} */
        let tempCurrentFeatures_Internal;
        /** @type {?} */
        let tempFeatures;
        /** @type {?} */
        let tempAchieved;
        /* Calculates the achieved percentage of a product. */
        /** @type {?} */
        let achievedPercentage_P;
        /** @type {?} */
        let maxPercentage_F;
        /** @type {?} */
        let achievedPercentage_F;
        for (i = 0; i < len_i; i++) {
            tempCurrentFeatures_Internal = [];
            len_j = ((tempFeatures = products[i].features) ? tempFeatures.length : 0);
            maxPercentage_F = len_j * 100.00;
            achievedPercentage_F = 0;
            for (j = 0; j < len_j; j++) {
                /* Adds all `achieved` values of the `tempFeatures` array. */
                achievedPercentage_F += (tempAchieved = tempFeatures[j].achieved);
                /* Creates the current features array of this product displayed in the chart. */
                tempCurrentFeatures_Internal.push({
                    'name': tempFeatures[j].name,
                    'series': [
                        {
                            'name': 'realizado',
                            // TODO: Use the `seriesName_English` and `seriesName_Spanish` constants depending on the language selected. 
                            'value': tempAchieved
                        },
                        {
                            'name': 'pendiente',
                            // TODO: Use the `seriesName_English` and `seriesName_Spanish` constants depending on the language selected. 
                            'value': 100.00 - tempAchieved
                        }
                    ]
                });
            }
            /* Calculates the achieved percentage of this product. */
            achievedPercentage_P = (achievedPercentage_F * 100.00) / maxPercentage_F;
            // achievedPercentage_P = Math.round(((achievedPercentage_F * 100.00) / maxPercentage_F) * 100.00) / 100.00;
            /* Creates the current products array displayed in the chart. */
            products_Internal.push({
                'name': products[i].name,
                'series': [
                    {
                        'name': 'realizado',
                        // TODO: Use the `seriesName_English` and `seriesName_Spanish` constants depending on the language selected. 
                        'value': achievedPercentage_P
                    },
                    {
                        'name': 'pendiente',
                        // TODO: Use the `seriesName_English` and `seriesName_Spanish` constants depending on the language selected. 
                        'value': 100.00 - achievedPercentage_P
                    }
                ]
            });
            /* Creates the array that contains all current features arrays that can be displayed in the chart. */
            featuresTotal_Internal.push(tempCurrentFeatures_Internal);
        }
    }
    /**
     * Removes the chart for displaying the features list of the selected product.
     * @return {?}
     */
    click_RemoveChart() {
        this._updateProductPos(this._selectedProductPos);
    }
}
RoadMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-road-map',
                template: "\n<ng-container *ngIf=\"currentProducts_Internal.length; then thenTemplate_Products; else elseTemplate_WithoutProducts\"></ng-container>\n\n<ng-template #thenTemplate_Products>\n\n    <mat-checkbox [(ngModel)]=\"isChartVertical\" [color]=\"'primary'\" [matTooltip]=\"'Visualizar el gr\u00E1fico vertical / horizontal'\" [matTooltipPosition]=\"'left'\">Gr\u00E1fico vertical</mat-checkbox>\n    <mat-checkbox class=\"checkbox-not-first\" [(ngModel)]=\"isLegendRight\" [color]=\"'primary'\" [matTooltip]=\"'Visualizar la leyenda a la derecha / abajo'\" [matTooltipPosition]=\"'right'\">Leyenda a la derecha</mat-checkbox>\n\n    <mat-divider class=\"mat-divider-chart\"></mat-divider>\n\n    <mat-tab-group mat-align-tabs=\"center\" [animationDuration]=\"'1500ms'\" (selectedIndexChange)=\"onSelectTab($event)\">\n        <mat-tab [label]=\"tabLabel_CW\">\n\n            <!---------------------------------------------------------------------------->\n            <!-- Displays the current products list. -->\n            <!---------------------------------------------------------------------------->\n\n            <h3>{{ chartTitle_P }}</h3>\n\n            <mat-grid-list [cols]=\"'1'\" [rowHeight]=\"gridHeight\">\n                <mat-grid-tile>\n                    <ng-container *ngIf=\"isChartVertical; then thenTempl_Ver_NormBarChart_CurProducts; else elseTempl_Hor_NormBarChart_CurProducts\"></ng-container>\n                    <button mat-icon-button\n                        class=\"button-close-product\"\n                        color=\"primary\"\n                        [attr.aria-label]=\"'Cerrar el chart'\"\n                        [matTooltip]=\"'Cerrar el chart'\"        \n                        [matTooltipPosition]=\"'above'\"\n                    >\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-grid-tile>\n            </mat-grid-list>\n\n            <ng-template #thenTempl_Ver_NormBarChart_CurProducts>\n                <ngx-charts-bar-vertical-normalized style=\"display: inline-block\"\n                    [results]=\"currentProducts_Internal\"\n                    [activeEntries]=\"activeEntries_P_CW\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_CW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_P\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_P\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n\n                    (select)=\"onSelect($event)\"\n                    (activate)=\"onActivate($event)\"\n                    (deactivate)=\"onDeactivate($event)\"\n                >\n                </ngx-charts-bar-vertical-normalized>\n            </ng-template>\n\n            <ng-template #elseTempl_Hor_NormBarChart_CurProducts>\n                <ngx-charts-bar-horizontal-normalized style=\"display: inline-block\"\n                    [results]=\"currentProducts_Internal\"\n                    [activeEntries]=\"activeEntries_P_CW\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_CW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_P\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_P\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n\n                    (select)=\"onSelect($event)\"\n                    (activate)=\"onActivate($event)\"\n                    (deactivate)=\"onDeactivate($event)\"\n                >\n                </ngx-charts-bar-horizontal-normalized>\n            </ng-template>\n\n\n            <!---------------------------------------------------------------------------->\n            <!-- Displays the current features list of a selected product. -->\n            <!---------------------------------------------------------------------------->\n\n            <ng-container *ngIf=\"selectedProductPos_CW != removeChart_PosFlag\">\n\n                <mat-divider class=\"mat-divider-chart\"></mat-divider>\n\n                <h3>{{ chartTitle_F_CW }}</h3>\n\n                <mat-grid-list [cols]=\"'1'\" [rowHeight]=\"gridHeight\">\n                    <mat-grid-tile>\n                        <ng-container *ngIf=\"isChartVertical; then thenTempl_Ver_NormBarChart_CurFeatures; else elseTempl_Hor_NormBarChart_CurFeatures\"></ng-container>\n                        <button mat-icon-button\n                            class=\"button-close-feature\"\n                            color=\"primary\"\n                            [attr.aria-label]=\"'Cerrar el chart'\"\n                            [matTooltip]=\"'Cerrar el chart'\"        \n                            [matTooltipPosition]=\"'above'\"\n                            (click)=\"click_RemoveChart()\"\n                        >\n                            <mat-icon>close</mat-icon>\n                        </button>\n                    </mat-grid-tile>\n                </mat-grid-list>\n\n            </ng-container>\n\n            <ng-template #thenTempl_Ver_NormBarChart_CurFeatures>\n                <ngx-charts-bar-vertical-normalized style=\"display: inline-block\"\n                    [results]=\"currentFeatures_Internal\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_CW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_F\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_F\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n                >\n                </ngx-charts-bar-vertical-normalized>\n            </ng-template>\n\n            <ng-template #elseTempl_Hor_NormBarChart_CurFeatures>\n                <ngx-charts-bar-horizontal-normalized style=\"display: inline-block\"\n                    [results]=\"currentFeatures_Internal\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_CW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_F\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_F\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n                >\n                </ngx-charts-bar-horizontal-normalized>\n            </ng-template>\n\n            <mat-divider class=\"mat-divider-chart\"></mat-divider>\n\n        </mat-tab>\n\n        <mat-tab [label]=\"tabLabel_FW\">\n\n            <!---------------------------------------------------------------------------->\n            <!-- Displays the future products list. -->\n            <!---------------------------------------------------------------------------->\n\n            <h3>{{ chartTitle_P }}</h3>\n\n            <mat-grid-list [cols]=\"'1'\" [rowHeight]=\"gridHeight\">\n                <mat-grid-tile>\n                    <ng-container *ngIf=\"isChartVertical; then thenTempl_Ver_NormBarChart_FutProducts; else elseTempl_Hor_NormBarChart_FutProducts\"></ng-container>\n                    <button mat-icon-button\n                        class=\"button-close-product\"\n                        color=\"primary\"\n                        [attr.aria-label]=\"'Cerrar el chart'\"\n                        [matTooltip]=\"'Cerrar el chart'\"        \n                        [matTooltipPosition]=\"'above'\"\n                    >\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-grid-tile>\n            </mat-grid-list>\n\n            <ng-template #thenTempl_Ver_NormBarChart_FutProducts>\n                <ngx-charts-bar-vertical-normalized style=\"display: inline-block\"\n                    [results]=\"futureProducts_Internal\"\n                    [activeEntries]=\"activeEntries_P_FW\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_FW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_P\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_P\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n\n                    (select)=\"onSelect($event)\"\n                    (activate)=\"onActivate($event)\"\n                    (deactivate)=\"onDeactivate($event)\"\n                >\n                </ngx-charts-bar-vertical-normalized>\n            </ng-template>\n\n            <ng-template #elseTempl_Hor_NormBarChart_FutProducts>\n                <ngx-charts-bar-horizontal-normalized style=\"display: inline-block\"\n                    [results]=\"futureProducts_Internal\"\n                    [activeEntries]=\"activeEntries_P_FW\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_FW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_P\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_P\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n\n                    (select)=\"onSelect($event)\"\n                    (activate)=\"onActivate($event)\"\n                    (deactivate)=\"onDeactivate($event)\"\n                >\n                </ngx-charts-bar-horizontal-normalized>\n            </ng-template>\n\n\n            <!---------------------------------------------------------------------------->\n            <!-- Displays the future features list of a selected product. -->\n            <!---------------------------------------------------------------------------->\n\n            <ng-container *ngIf=\"selectedProductPos_FW != removeChart_PosFlag\">\n\n                <mat-divider class=\"mat-divider-chart\"></mat-divider>\n\n                <h3>{{ chartTitle_F_FW }}</h3>\n\n                <mat-grid-list [cols]=\"'1'\" [rowHeight]=\"gridHeight\">\n                    <mat-grid-tile>\n                        <ng-container *ngIf=\"isChartVertical; then thenTempl_Ver_NormBarChart_FutFeatures; else elseTempl_Hor_NormBarChart_FutFeatures\"></ng-container>\n                        <button mat-icon-button\n                            class=\"button-close-feature\"\n                            color=\"primary\"\n                            [attr.aria-label]=\"'Cerrar el chart'\"\n                            [matTooltip]=\"'Cerrar el chart'\"        \n                            [matTooltipPosition]=\"'above'\"\n                            (click)=\"click_RemoveChart()\"\n                        >\n                            <mat-icon>close</mat-icon>\n                        </button>\n                    </mat-grid-tile>\n                </mat-grid-list>\n\n            </ng-container>\n\n            <ng-template #thenTempl_Ver_NormBarChart_FutFeatures>\n                <ngx-charts-bar-vertical-normalized style=\"display: inline-block\"\n                    [results]=\"futureFeatures_Internal\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_FW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_F\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_F\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n                >\n                </ngx-charts-bar-vertical-normalized>\n            </ng-template>\n\n            <ng-template #elseTempl_Hor_NormBarChart_FutFeatures>\n                <ngx-charts-bar-horizontal-normalized style=\"display: inline-block\"\n                    [results]=\"futureFeatures_Internal\"\n                    [view]=\"view\"\n                    [scheme]=\"colorScheme_FW\"\n                    [gradient]=\"gradient\"\n                    [barPadding]=\"barPadding\"\n\n                    [xAxis]=\"showXAxis\"\n                    [showXAxisLabel]=\"showXAxisLabel\"\n                    [xAxisLabel]=\"xAxisLabel_F\"\n                    [maxXAxisTickLength]=\"maxAxisTickLength\"\n\n                    [yAxis]=\"showYAxis\"\n                    [showYAxisLabel]=\"showYAxisLabel\"\n                    [yAxisLabel]=\"yAxisLabel_F\"\n                    [maxYAxisTickLength]=\"maxAxisTickLength\"\n\n                    [legend]=\"showLegend\"\n                    [legendTitle]=\"legendTitle\"\n                    [legendPosition]=\"legendPosition\"\n                >\n                </ngx-charts-bar-horizontal-normalized>\n            </ng-template>\n\n            <mat-divider class=\"mat-divider-chart\"></mat-divider>\n\n        </mat-tab>\n    </mat-tab-group>\n\n    <br />\n\n</ng-template>\n\n\n<ng-template #elseTemplate_WithoutProducts>\n\n    <div class=\"without-product\">{{ withoutProductText }}</div>\n\n</ng-template>\n",
                styles: [".mat-divider-chart{margin:1em 2em 0}.checkbox-not-first{margin-left:20px}:host ::ng-deep .mat-grid-tile .mat-figure{align-items:start}.button-close-product{visibility:hidden;margin-top:.2em}.button-close-feature{visibility:visible;margin-top:.2em}:host ::ng-deep header.legend-title{text-align:left;font-weight:400}.without-product{margin:6em 0;text-align:center;cursor:default;color:#444;font-size:1.5em;font-weight:lighter}"]
            }] }
];
/** @nocollapse */
RoadMapComponent.ctorParameters = () => [];
RoadMapComponent.propDecorators = {
    withoutProductText: [{ type: Input }],
    tabLabel_CW: [{ type: Input }],
    tabLabel_FW: [{ type: Input }],
    chartTitle_P: [{ type: Input }],
    view: [{ type: Input }],
    colorScheme_CW: [{ type: Input }],
    colorScheme_FW: [{ type: Input }],
    gradient: [{ type: Input }],
    barPadding: [{ type: Input }],
    xAxisLabel_P: [{ type: Input }],
    maxAxisTickLength: [{ type: Input }],
    yAxisLabel_P: [{ type: Input }],
    legendTitle: [{ type: Input }],
    xAxisLabel_F: [{ type: Input }],
    yAxisLabel_F: [{ type: Input }],
    isChartVertical: [{ type: Input }],
    currentProducts: [{ type: Input }],
    futureProducts: [{ type: Input }],
    legendPosition: [{ type: Input }],
    chartTitle_F: [{ type: Input }]
};
if (false) {
    /**
     * Returns the -1 value that is used to remove a chart.
     * @type {?}
     */
    RoadMapComponent.prototype.removeChart_PosFlag;
    /**
     * Input field that contains the text that is displayed when there is not any product.
     * By default, its value is `'¡No hay ningún producto!'`.
     * @type {?}
     */
    RoadMapComponent.prototype.withoutProductText;
    /**
     * Returns the chart's visualization direction.
     * It is true if the chart is visualized vertically; otherwise, false (horizontally).
     * By default, its value is `true`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._isChartVertical;
    /**
     * Input field that contains the tab's label of current works.
     * By default, its value is `'Trabajos Actuales'`.
     * @type {?}
     */
    RoadMapComponent.prototype.tabLabel_CW;
    /**
     * Input field that contains the tab's label of future works.
     * By default, its value is `'Trabajos Futuros o Pendientes'`.
     * @type {?}
     */
    RoadMapComponent.prototype.tabLabel_FW;
    /**
     * Returns the selected tab position. Its value is set internally.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._selectedTabPos;
    /**
     * Returns the grid height.
     * Its value is set depending on the `legendPosition` value.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._gridHeight;
    /**
     * Input field that contains the chart's title of products.
     * By default, its value is `'Lista de productos'`.
     * @type {?}
     */
    RoadMapComponent.prototype.chartTitle_P;
    /**
     * Returns true if it is using a trick to obligate repainting the chart; otherwise, false.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._isUsingTrick_RepaintChart;
    /**
     * Returns the working products array introduced by the user.
     * It references the `_currentProducts` or `_futureProducts` array.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._products;
    /**
     * Returns the current products array introduced by the user.
     * From this array is created the `_currentProducts_Internal` and `_currentFeatures_Internal` arrays.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._currentProducts;
    /**
     * Returns the future products array introduced by the user.
     * From this array is created the `_futureProducts_Internal` and `_futureFeatures_Internal` arrays.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._futureProducts;
    /**
     * Returns the working products array displayed in the chart.
     * It references the `_currentProducts_Internal` or `_futureProducts_Internal` array.
     * It is created from the `_products` array.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._products_Internal;
    /**
     * Returns the current products array displayed in the chart.
     * It is created from the `_currentProducts` array.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._currentProducts_Internal;
    /**
     * Returns the future products array displayed in the chart.
     * It is created from the `_futureProducts` array.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._futureProducts_Internal;
    /**
     * Returns the array that contains all working features arrays that can be displayed in the chart.
     * This array contains the same length than `_products_Internal` array because
     * each position contains the working features array for a product.
     * It references the `_currentFeaturesTotal_Internal` or `_futureFeaturesTotal_Internal` array.
     * It is created from the `_products` array.
     * This array is for internal use only.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._featuresTotal_Internal;
    /**
     * Returns the array that contains all current features arrays that can be displayed in the chart.
     * This array contains the same length than `_currentProducts_Internal` array because
     * each position contains the current features array for a product.
     * It is created from the `_currentProducts` array.
     * This array is for internal use only.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._currentFeaturesTotal_Internal;
    /**
     * Returns the array that contains all future features arrays that can be displayed in the chart.
     * This array contains the same length than `_futureProducts_Internal` array because
     * each position contains the future features array for a product.
     * It is created from the `_futureProducts` array.
     * This array is for internal use only.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._futureFeaturesTotal_Internal;
    /**
     * Returns the working features array of a selected product displayed in the chart.
     * It references an element in the `_featuresTotal_Internal` array. This element
     * represents the features of a selected product in the `_products_Internal` array.
     * It references the `_currentFeatures_Internal` or `_futureFeatures_Internal` array.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._features_Internal;
    /**
     * Returns the current features array of a selected product displayed in the chart.
     * It references an element in the `_currentFeaturesTotal_Internal` array. This element
     * represents the features of a selected product in the `_currentProducts_Internal` array.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._currentFeatures_Internal;
    /**
     * Returns the future features array of a selected product displayed in the chart.
     * It references an element in the `_futureFeaturesTotal_Internal` array. This element
     * represents the features of a selected product in the `_futureProducts_Internal` array.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._futureFeatures_Internal;
    /**
     * Returns the current product elements array to highlight displayed in the chart.
     * It is modified dynamically.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._activeEntries_P_CW;
    /**
     * Returns the future product elements array to highlight displayed in the chart.
     * It is modified dynamically.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._activeEntries_P_FW;
    /**
     * Input field that contains the chart's dimensions [width, height].
     * By default, its value is `[900, 350]`.
     * @type {?}
     */
    RoadMapComponent.prototype.view;
    /**
     * Input field that contains the chart's color scheme of current works.
     * By default, its value is the following object:
     * `{
     * domain: [
     * '#6EE9B5',  // light green
     * '#E96E70'   // red
     * ]
     * }`
     * @type {?}
     */
    RoadMapComponent.prototype.colorScheme_CW;
    /**
     * Input field that contains the chart's color scheme of future works.
     * By default, its value is the following object:
     * `{
     * domain: [
     * '#6F6EE9',  // blue
     * '#6EBBE9'   // light blue
     * ]
     * }`
     * @type {?}
     */
    RoadMapComponent.prototype.colorScheme_FW;
    /**
     * Input field that indicates to fill chart's elements with a gradient or a solid color.
     * It is true if the chart's elements are filled with a gradient color; otherwise, false (filled with a solid color).
     * By default, its value is `false`.
     * @type {?}
     */
    RoadMapComponent.prototype.gradient;
    /**
     * Input field that contains the chart's padding between bars in px.
     * By default, its value is `12`.
     * @type {?}
     */
    RoadMapComponent.prototype.barPadding;
    /**
     * Shows the chart's x axis.
     * @type {?}
     */
    RoadMapComponent.prototype.showXAxis;
    /**
     * Shows the chart's x axis label.
     * @type {?}
     */
    RoadMapComponent.prototype.showXAxisLabel;
    /**
     * Input field that contains the chart's x axis label text of products.
     * By default, its value is `'Producto'`.
     * @type {?}
     */
    RoadMapComponent.prototype.xAxisLabel_P;
    /**
     * Input field that contains the chart's max length of the ticks (ticks over this length will be trimmed).
     * By default, its value is `16`.
     * @type {?}
     */
    RoadMapComponent.prototype.maxAxisTickLength;
    /**
     * Shows the chart's y axis.
     * @type {?}
     */
    RoadMapComponent.prototype.showYAxis;
    /**
     * Shows the chart's y axis label.
     * @type {?}
     */
    RoadMapComponent.prototype.showYAxisLabel;
    /**
     * Input field that contains the chart's y axis label text of products.
     * By default, its value is `'Realizado / Pendiente En Por Ciento'`.
     * @type {?}
     */
    RoadMapComponent.prototype.yAxisLabel_P;
    /**
     * Shows the chart's legend.
     * @type {?}
     */
    RoadMapComponent.prototype.showLegend;
    /**
     * Input field that contains the chart's legend title.
     * By default, its value is `'Leyenda'`.
     * @type {?}
     */
    RoadMapComponent.prototype.legendTitle;
    /**
     * Input field that contains the chart's legend position. Its value is `'right'` or `'below'`.
     * By default, its value is `'right'`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._legendPosition;
    /**
     * Returns the working product position. Contains the `removeChart_PosFlag` value when
     * there is not any selected working product position.
     * It has the `_selectedProductPos_CW` or `_selectedProductPos_FW` value.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._selectedProductPos;
    /**
     * Returns the selected current product position. Contains the `removeChart_PosFlag` value when
     * there is not any selected current product position.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._selectedProductPos_CW;
    /**
     * Returns the selected future product position. Contains the `removeChart_PosFlag` value when
     * there is not any selected future product position.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._selectedProductPos_FW;
    /**
     * Returns the chart's title of features.
     * This field is updated a little different.
     * By default, its value is `'Lista de características del producto seleccionado'`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._chartTitle_F;
    /**
     * Returns the chart's title of working current features.
     * This field is updated a little different.
     * By default, its value is `'Lista de características del producto seleccionado'`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._chartTitle_F_CW;
    /**
     * Returns the chart's title of working future features.
     * This field is updated a little different.
     * By default, its value is `'Lista de características del producto seleccionado'`.
     * @type {?}
     * @private
     */
    RoadMapComponent.prototype._chartTitle_F_FW;
    /**
     * Input field that contains the chart's x axis label text of features.
     * By default, its value is `'Característica'`.
     * @type {?}
     */
    RoadMapComponent.prototype.xAxisLabel_F;
    /**
     * Input field that contains the chart's y axis label text of features.
     * By default, its value is `'Realizado / Pendiente En Por Ciento'`.
     * @type {?}
     */
    RoadMapComponent.prototype.yAxisLabel_F;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9hZC1tYXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvY29yZS91dGlscy9yb2FkLW1hcC9yb2FkLW1hcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDOztNQUUxQixrQkFBa0IsR0FBYSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUM7O01BQ3pELGtCQUFrQixHQUFhLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQzs7Ozs7QUFLL0QsNkJBV0M7Ozs7OztJQU5BLHVCQUFhOzs7OztJQUtiLDJCQUFpQjs7Ozs7OztBQU9sQiw2QkFXQzs7Ozs7O0lBTkEsdUJBQWE7Ozs7O0lBS2IsMkJBQW9COzs7Ozs7QUFNckIsNEJBV0M7Ozs7OztJQU5BLHNCQUFhOzs7OztJQUtiLHVCQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQmYsOEJBV0M7Ozs7OztJQU5BLHdCQUFhOzs7OztJQUtiLDBCQUFpQjs7Ozs7O0FBTWxCLGtDQU1DOzs7SUFKQSw0QkFBYTs7SUFDYiw2QkFBZTs7SUFDZiw2QkFBZTs7SUFDZiw4QkFBZ0I7Ozs7Ozs7O0FBY2pCLE1BQU0sT0FBTyxnQkFBZ0I7SUFrVTVCOzs7O1FBN1RnQix3QkFBbUIsR0FBRyxDQUFDLENBQUMsQ0FBQztRQStUeEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLDBCQUEwQixDQUFDO1FBRXJELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLCtCQUErQixDQUFDO1FBQ25ELElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLDRFQUE0RTtRQUU1RSxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDO1FBRXpDLElBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFLLENBQUM7UUFDeEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRyxDQUFDO1FBQzdDLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMseUJBQXlCLEdBQUcsRUFBRyxDQUFDO1FBQy9ELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxFQUFHLENBQUM7UUFDcEMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxFQUFHLENBQUM7UUFDekUsSUFBSSxDQUFDLDZCQUE2QixHQUFHLEVBQUcsQ0FBQztRQUN6QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixHQUFHLEVBQUcsQ0FBQztRQUMvRCxJQUFJLENBQUMsd0JBQXdCLEdBQUcsRUFBRyxDQUFDO1FBRXBDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxFQUFHLENBQUM7UUFDL0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEVBQUcsQ0FBQztRQUUvQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUc7WUFDckIsTUFBTSxFQUFFO2dCQUNQLHVCQUF1QjtnQkFDdkIsU0FBUztnQkFDVCxTQUFTO2FBY1Q7WUFDSixrQ0FBa0M7WUFDL0IsZUFBZTtZQUNsQiwyQkFBMkI7WUFDeEIsK0JBQStCO1lBQ2xDLHlCQUF5QjtZQUN0QixlQUFlO1lBQ2YsZUFBZTtZQUNmLGVBQWU7WUFDZixjQUFjO1lBQ2pCLE1BQU07WUFDSCxnQ0FBZ0M7WUFDaEMsY0FBYztZQUNkLGVBQWU7WUFDZixlQUFlO1lBQ2YsY0FBYztZQUNkLGVBQWU7WUFDZixlQUFlO1lBQ2YsZUFBZTtZQUNmLGVBQWU7WUFDZixlQUFlO1lBQ2YsZUFBZTtZQUNmLGVBQWU7WUFDZixjQUFjO1lBQ2QsSUFBSTtTQUNKLENBQUM7UUFDRixJQUFJLENBQUMsY0FBYyxHQUFHO1lBQ3JCLE1BQU0sRUFBRTtnQkFDUCxTQUFTO2dCQUNULFNBQVMsQ0FBRyxhQUFhO2FBQ3pCO1NBQ0QsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBRXJCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDO1FBQy9CLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxxQ0FBcUMsQ0FBQztRQUUxRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztRQUc5QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7UUFFaEgsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG9EQUFvRCxDQUFDO1FBQzFILElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxxQ0FBcUMsQ0FBQztJQUMzRCxDQUFDOzs7O0lBRU0sUUFBUSxLQUNiLENBQUM7Ozs7Ozs7O0lBUUgsSUFDVyxlQUFlO1FBRXpCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQzlCLENBQUM7Ozs7Ozs7OztJQVNELElBQVcsZUFBZSxDQUFDLEtBQWM7UUFFeEMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksS0FBSyxFQUNsQzs7Z0JBQ0ssSUFBSSxHQUFXLElBQUksQ0FBQyxZQUFZO1lBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUN0QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUV6QixJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFFekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtTQUM3QjtJQUNGLENBQUM7Ozs7OztJQU1ELElBQVcsVUFBVTtRQUVwQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDekIsQ0FBQzs7Ozs7OztJQU9ELElBQ1csZUFBZTtRQUV6QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUM5QixDQUFDOzs7Ozs7O0lBT0QsSUFBVyxlQUFlLENBQUMsS0FBZ0I7UUFFMUMsMkNBQTJDO1FBRTNDLG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxJQUFJLEVBQUcsQ0FBQztRQUNyQyxJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFDbkM7WUFDQyxJQUFJLENBQUMsMEJBQTBCLEdBQUcsS0FBSyxDQUFDO1lBRXhDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsR0FBRzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQUM7WUFDcEYsSUFBSSxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxHQUFHOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQztTQUNsSDthQUVEO1lBQ0MsSUFBSSxDQUFDLHlCQUF5QixHQUFHLEVBQUcsQ0FBQztZQUNyQyxJQUFJLENBQUMsOEJBQThCLEdBQUcsRUFBRyxDQUFDO1lBRTFDOzs7OzhFQUlrRTtZQUNsRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUN4SDtRQUNELElBQUksQ0FBQyx5QkFBeUIsR0FBRyxFQUFHLENBQUM7UUFFckMscUVBQXFFO1FBQ3JFLElBQUksSUFBSSxDQUFDLHNCQUFzQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFDM0Q7WUFDQyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUM5RDtnQkFDQyx3RkFBd0Y7Z0JBRXhGLDREQUE0RDtnQkFDNUQsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztnQkFDbEcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWE7c0JBQ3ZDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7c0JBQzdDLElBQUssSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLElBQUssR0FBRyxDQUFDO2FBQzdFO2lCQUVEO2dCQUNDLDBHQUEwRztnQkFFMUcsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztnQkFDdkQsZ0ZBQWdGO2dCQUNoRixJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO2FBQzNDO1NBQ0Q7UUFFRCx1RUFBdUU7UUFDdkUsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsRUFDN0I7WUFDQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDbkI7SUFDRixDQUFDOzs7Ozs7O0lBT0QsSUFBVyx3QkFBd0I7UUFFbEMsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUM7SUFDdkMsQ0FBQzs7Ozs7OztJQU9ELElBQVcsd0JBQXdCO1FBRWxDLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO0lBQ3ZDLENBQUM7Ozs7Ozs7SUFPRCxJQUNXLGNBQWM7UUFFeEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzdCLENBQUM7Ozs7Ozs7SUFPRCxJQUFXLGNBQWMsQ0FBQyxLQUFnQjtRQUV6QywwQ0FBMEM7UUFFMUMsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxJQUFJLEVBQUcsQ0FBQztRQUNwQyxJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFDbkM7WUFDQyxJQUFJLENBQUMsMEJBQTBCLEdBQUcsS0FBSyxDQUFDO1lBRXhDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQUM7WUFDbEYsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxHQUFHOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQztTQUNoSDthQUVEO1lBQ0MsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEVBQUcsQ0FBQztZQUNwQyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsRUFBRyxDQUFDO1lBRXpDOzs7OzZFQUlpRTtZQUNqRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDckg7UUFDRCxJQUFJLENBQUMsd0JBQXdCLEdBQUcsRUFBRyxDQUFDO1FBRXBDLG9FQUFvRTtRQUNwRSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQzNEO1lBQ0MsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQzdEO2dCQUNDLHVGQUF1RjtnQkFFdkYsNERBQTREO2dCQUM1RCxJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2dCQUNoRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYTtzQkFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztzQkFDN0MsSUFBSyxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSyxHQUFHLENBQUM7YUFDNUU7aUJBRUQ7Z0JBQ0Msd0dBQXdHO2dCQUV4RyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO2dCQUN2RCwrRUFBK0U7Z0JBQy9FLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDM0M7U0FDRDtRQUVELHNFQUFzRTtRQUN0RSxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxFQUM3QjtZQUNDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNuQjtJQUNGLENBQUM7Ozs7Ozs7SUFPRCxJQUFXLHVCQUF1QjtRQUVqQyxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztJQUN0QyxDQUFDOzs7Ozs7O0lBT0QsSUFBVyx1QkFBdUI7UUFFakMsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUM7SUFDdEMsQ0FBQzs7Ozs7OztJQU9ELElBQVcsa0JBQWtCO1FBRTVCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ2pDLENBQUM7Ozs7Ozs7SUFNTyx1QkFBdUIsQ0FBQyxRQUFpQjtRQUVoRCwwRUFBMEU7UUFFMUUsSUFBSSxRQUFRLEVBQ1o7WUFDQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRyxDQUFDO1NBQy9CO2FBRUQ7O2dCQUNLLGVBQWUsR0FBYSxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBRTNGLElBQUksQ0FBQyxtQkFBbUIsR0FBRztnQkFDMUI7b0JBQ0MsTUFBTSxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtvQkFDdEMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztvQkFDeEMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtvQkFDdkMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxJQUFJO2lCQUM5QjtnQkFDRDtvQkFDQyxNQUFNLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUN0QyxPQUFPLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO29CQUN4QyxPQUFPLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUN2QyxRQUFRLEVBQUUsZUFBZSxDQUFDLElBQUk7aUJBQzlCO2FBQ0QsQ0FBQztTQUNGO0lBQ0YsQ0FBQzs7Ozs7OztJQU9ELElBQVcsa0JBQWtCO1FBRTVCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ2pDLENBQUM7Ozs7Ozs7SUFNTyx1QkFBdUIsQ0FBQyxRQUFpQjtRQUVoRCwwRUFBMEU7UUFFMUUsSUFBSSxRQUFRLEVBQ1o7WUFDQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRyxDQUFDO1NBQy9CO2FBRUQ7O2dCQUNLLGVBQWUsR0FBYSxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBRTFGLElBQUksQ0FBQyxtQkFBbUIsR0FBRztnQkFDMUI7b0JBQ0MsTUFBTSxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtvQkFDdEMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztvQkFDeEMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtvQkFDdkMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxJQUFJO2lCQUM5QjtnQkFDRDtvQkFDQyxNQUFNLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUN0QyxPQUFPLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO29CQUN4QyxPQUFPLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUN2QyxRQUFRLEVBQUUsZUFBZSxDQUFDLElBQUk7aUJBQzlCO2FBQ0QsQ0FBQztTQUNGO0lBQ0YsQ0FBQzs7Ozs7O0lBTUQsSUFDVyxjQUFjO1FBRXhCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM3QixDQUFDOzs7Ozs7O0lBT0QsSUFBVyxjQUFjLENBQUMsS0FBYTtRQUV0QyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQzdDO1lBQ0MsMkJBQTJCO1lBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBRSxnREFBZ0Q7U0FDdkY7YUFFRDtZQUNDLDJCQUEyQjtZQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEM7SUFDRixDQUFDOzs7Ozs7O0lBT0QsSUFBVyxhQUFhO1FBRXZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7Ozs7O0lBUUQsSUFBVyxhQUFhLENBQUMsS0FBYztRQUV0QyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQU1ELElBQVcscUJBQXFCO1FBRS9CLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ3BDLENBQUM7Ozs7OztJQU1ELElBQVcscUJBQXFCO1FBRS9CLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ3BDLENBQUM7Ozs7OztJQU1ELElBQ1csWUFBWTtRQUV0QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDM0IsQ0FBQzs7Ozs7OztJQU9ELElBQVcsWUFBWSxDQUFDLEtBQWE7UUFFcEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLElBQUksb0RBQW9ELENBQUM7UUFFbkYsNkNBQTZDO1FBRTdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDaEYsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYTtrQkFDbEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztrQkFDN0MsSUFBSyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSyxHQUFHLENBQUMsQ0FBQztRQUUvRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ2hGLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWE7a0JBQ2xCLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7a0JBQzdDLElBQUssSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLElBQUssR0FBRyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7O0lBTUQsSUFBVyxlQUFlO1FBRXpCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQzlCLENBQUM7Ozs7OztJQU1ELElBQVcsZUFBZTtRQUV6QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVNLFdBQVcsQ0FBQyxNQUFjO1FBRWhDLDRDQUE0QztRQUU1Qyx1REFBdUQ7UUFDdkQsSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQztRQUV2QyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ3hDO1lBQ0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUc7Ozs7WUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBQyxDQUFDO1lBRWhFLDRJQUE0STtTQUM1STthQUVEO1lBQ0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUc7Ozs7WUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBQyxDQUFDO1lBRTlELDRJQUE0STtTQUM1STtJQUNGLENBQUM7Ozs7O0lBRU0sUUFBUSxDQUFDLFNBQWM7UUFFN0Isd0NBQXdDO1FBRXhDLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFHLHVDQUF1QyxDQUNqRTs7Z0JBQ0ssT0FBZTs7a0JBQ2IsR0FBRyxHQUFXLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNOztrQkFDNUMsV0FBVyxHQUFXLFNBQVMsQ0FBQyxNQUFNO1lBRTVDLHFDQUFxQztZQUNyQyxLQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFDekM7Z0JBQ0MsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxJQUFJLFdBQVc7b0JBQUUsTUFBTTthQUNoRTtZQUVEOzs0RUFFZ0U7WUFDaEUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hDO0lBQ0YsQ0FBQzs7Ozs7SUFFTSxVQUFVLENBQUMsU0FBYztRQUUvQiwwQ0FBMEM7SUFDM0MsQ0FBQzs7Ozs7SUFFTSxZQUFZLENBQUMsU0FBYztRQUVqQyx3SkFBd0o7UUFFeEosSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQy9CO1lBQ0MsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsRUFDN0I7Z0JBQ0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHOzs7O2dCQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQUM7YUFDeEU7aUJBRUQ7Z0JBQ0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHOzs7O2dCQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQUM7YUFDeEU7U0FDRDtJQUNGLENBQUM7Ozs7OztJQUtPLFdBQVc7UUFFbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztRQUN6RCxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLDhCQUE4QixDQUFDO1FBQ25FLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUM7UUFFekQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUN4RCxDQUFDOzs7Ozs7SUFLTyxXQUFXO1FBRWxCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUN0QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDO1FBQ3hELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUM7UUFDbEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztRQUV4RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ3hELENBQUM7Ozs7OztJQUtELElBQVksc0JBQXNCO1FBRWpDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7Ozs7O0lBUU8saUJBQWlCLENBQUMsbUJBQTJCO1FBRXBEOzs4QkFFc0I7UUFDdEIsSUFBSSxtQkFBbUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQ25EO1lBQ0MsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsRUFDN0I7Z0JBQ0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7Z0JBQ2xGLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMseUJBQXlCLEdBQUcsRUFBRyxDQUFDO2dCQUMvRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO2FBQzNDO2lCQUVEO2dCQUNDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO2dCQUNsRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEVBQUcsQ0FBQztnQkFDOUQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMzQztTQUNEO2FBRUQ7WUFDQyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxFQUM3QjtnQkFDQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixHQUFHLG1CQUFtQixDQUFDO2dCQUM3RSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUM3RyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYTtzQkFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztzQkFDN0MsSUFBSyxJQUFJLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFLLEdBQUcsQ0FBQzthQUM5RDtpQkFFRDtnQkFDQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixHQUFHLG1CQUFtQixDQUFDO2dCQUM3RSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUM1RyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYTtzQkFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztzQkFDN0MsSUFBSyxJQUFJLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFLLEdBQUcsQ0FBQzthQUM5RDtTQUNEO0lBQ0YsQ0FBQzs7Ozs7Ozs7OztJQVNPLHNCQUFzQixDQUFDLFFBQW1CLEVBQUUsaUJBQTZCLEVBQUUsc0JBQW9DO1FBRXRIOzs7O3FHQUk2Rjs7Ozs7OztZQUV6RixDQUFTOztZQUFFLENBQVM7O2NBQ2xCLEtBQUssR0FBVyxRQUFRLENBQUMsTUFBTTs7WUFDakMsS0FBYTs7WUFDYiw0QkFBd0M7O1lBQ3hDLFlBQXVCOztZQUN2QixZQUFvQjs7O1lBR3BCLG9CQUE0Qjs7WUFDNUIsZUFBdUI7O1lBQ3ZCLG9CQUE0QjtRQUVoQyxLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFDekI7WUFDQyw0QkFBNEIsR0FBRyxFQUFHLENBQUM7WUFDbkMsS0FBSyxHQUFHLENBQUMsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxRSxlQUFlLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztZQUNqQyxvQkFBb0IsR0FBRyxDQUFDLENBQUM7WUFFekIsS0FBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQ3pCO2dCQUNDLDZEQUE2RDtnQkFDN0Qsb0JBQW9CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUVsRSxnRkFBZ0Y7Z0JBQ2hGLDRCQUE0QixDQUFDLElBQUksQ0FBQztvQkFDakMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUM1QixRQUFRLEVBQUU7d0JBQ1Q7NEJBQ0MsTUFBTSxFQUFFLFdBQVc7OzRCQUNuQixPQUFPLEVBQUUsWUFBWTt5QkFDckI7d0JBQ0Q7NEJBQ0MsTUFBTSxFQUFFLFdBQVc7OzRCQUNuQixPQUFPLEVBQUUsTUFBTSxHQUFHLFlBQVk7eUJBQzlCO3FCQUNEO2lCQUNELENBQUMsQ0FBQzthQUNIO1lBRUQseURBQXlEO1lBQ3pELG9CQUFvQixHQUFHLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLEdBQUcsZUFBZSxDQUFDO1lBQ3pFLDRHQUE0RztZQUU1RyxnRUFBZ0U7WUFDaEUsaUJBQWlCLENBQUMsSUFBSSxDQUFDO2dCQUN0QixNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQ3hCLFFBQVEsRUFBRTtvQkFDVDt3QkFDQyxNQUFNLEVBQUUsV0FBVzs7d0JBQ25CLE9BQU8sRUFBRSxvQkFBb0I7cUJBQzdCO29CQUNEO3dCQUNDLE1BQU0sRUFBRSxXQUFXOzt3QkFDbkIsT0FBTyxFQUFFLE1BQU0sR0FBRyxvQkFBb0I7cUJBQ3RDO2lCQUNEO2FBQ0QsQ0FBQyxDQUFDO1lBRUgscUdBQXFHO1lBQ3JHLHNCQUFzQixDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1NBQzFEO0lBQ0YsQ0FBQzs7Ozs7SUFLTSxpQkFBaUI7UUFFdkIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xELENBQUM7OztZQW5sQ0QsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxlQUFlO2dCQUN6Qix3OWVBQXdDOzthQUV4Qzs7Ozs7aUNBa0JDLEtBQUs7MEJBY0wsS0FBSzswQkFNTCxLQUFLOzJCQWtCTCxLQUFLO21CQW1ITCxLQUFLOzZCQWFMLEtBQUs7NkJBWUwsS0FBSzt1QkFRTCxLQUFLO3lCQU9MLEtBQUs7MkJBZUwsS0FBSztnQ0FPTCxLQUFLOzJCQWVMLEtBQUs7MEJBV0wsS0FBSzsyQkFzREwsS0FBSzsyQkFPTCxLQUFLOzhCQWlITCxLQUFLOzhCQTJDTCxLQUFLOzZCQStGTCxLQUFLOzZCQW9MTCxLQUFLOzJCQW9FTCxLQUFLOzs7Ozs7O0lBN3lCTiwrQ0FBeUM7Ozs7OztJQVl6Qyw4Q0FDa0M7Ozs7Ozs7O0lBT2xDLDRDQUFrQzs7Ozs7O0lBTWxDLHVDQUMyQjs7Ozs7O0lBSzNCLHVDQUMyQjs7Ozs7O0lBSzNCLDJDQUFnQzs7Ozs7OztJQU1oQyx1Q0FBNEI7Ozs7OztJQU01Qix3Q0FDNEI7Ozs7OztJQUs1QixzREFBNEM7Ozs7Ozs7O0lBTTVDLHFDQUE2Qjs7Ozs7Ozs7SUFNN0IsNENBQW9DOzs7Ozs7OztJQU1wQywyQ0FBbUM7Ozs7Ozs7OztJQVFuQyw4Q0FBdUM7Ozs7Ozs7O0lBTXZDLHFEQUE4Qzs7Ozs7Ozs7SUFNOUMsb0RBQTZDOzs7Ozs7Ozs7Ozs7SUFXN0MsbURBQThDOzs7Ozs7Ozs7OztJQVM5QywwREFBcUQ7Ozs7Ozs7Ozs7O0lBU3JELHlEQUFvRDs7Ozs7Ozs7OztJQVNwRCw4Q0FBdUM7Ozs7Ozs7OztJQU92QyxxREFBOEM7Ozs7Ozs7OztJQU85QyxvREFBNkM7Ozs7Ozs7O0lBTzdDLCtDQUE0Qzs7Ozs7Ozs7SUFNNUMsK0NBQTRDOzs7Ozs7SUFNNUMsZ0NBQ3NCOzs7Ozs7Ozs7Ozs7SUFZdEIsMENBQzJCOzs7Ozs7Ozs7Ozs7SUFXM0IsMENBQzJCOzs7Ozs7O0lBTzNCLG9DQUN5Qjs7Ozs7O0lBTXpCLHNDQUMwQjs7Ozs7SUFLMUIscUNBQW1DOzs7OztJQUluQywwQ0FBd0M7Ozs7OztJQUt4Qyx3Q0FDNEI7Ozs7OztJQU01Qiw2Q0FDaUM7Ozs7O0lBS2pDLHFDQUFtQzs7Ozs7SUFJbkMsMENBQXdDOzs7Ozs7SUFLeEMsd0NBQzRCOzs7OztJQUs1QixzQ0FBb0M7Ozs7OztJQUtwQyx1Q0FDMkI7Ozs7Ozs7SUFLM0IsMkNBQWdDOzs7Ozs7OztJQWFoQywrQ0FBb0M7Ozs7Ozs7SUFLcEMsa0RBQXVDOzs7Ozs7O0lBS3ZDLGtEQUF1Qzs7Ozs7Ozs7SUFPdkMseUNBQThCOzs7Ozs7OztJQU05Qiw0Q0FBaUM7Ozs7Ozs7O0lBTWpDLDRDQUFpQzs7Ozs7O0lBTWpDLHdDQUM0Qjs7Ozs7O0lBTTVCLHdDQUM0QiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJ3V0aWwnO1xuXG5jb25zdCBzZXJpZXNOYW1lX0VuZ2xpc2g6IHN0cmluZ1tdID0gWydhY2hpZXZlZCcsICd1bnJlc29sdmVkJ107XG5jb25zdCBzZXJpZXNOYW1lX1NwYW5pc2g6IHN0cmluZ1tdID0gWydyZWFsaXphZG8nLCAncGVuZGllbnRlJ107XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgY29udGVudCBvZiBhIGZlYXR1cmUgb2JqZWN0LiBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlXG57XG5cdC8qKlxuXHQgKiBUaGUgZmVhdHVyZSdzIG5hbWUuIFxuXHQgKi9cblx0bmFtZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgZmVhdHVyZSdzIGFjaGlldmVkIHBlcmNlbnRhZ2UuIFxuXHQgKi9cblx0YWNoaWV2ZWQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjb250ZW50IG9mIGEgcHJvZHVjdCBvYmplY3QuIFxuICogSXRzIGFjaGlldmVkIHBlcmNlbnRhZ2UgdmFsdWUgaXMgY2FsY3VsYXRlZCBmcm9tIGl0cyBgZmVhdHVyZXNgIGFycmF5IGZpZWxkLiBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9kdWN0XG57XG5cdC8qKlxuXHQgKiBUaGUgcHJvZHVjdCdzIG5hbWUuIFxuXHQgKi9cblx0bmFtZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgcHJvZHVjdCdzIGZlYXR1cmVzIGFycmF5LiBcblx0ICovXG5cdGZlYXR1cmVzOiBGZWF0dXJlW107XG59XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgY29udGVudCBvZiBhIHJlc3VsdCBvYmplY3QuIFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdFxue1xuXHQvKipcblx0ICogVGhlIHJlc3VsdCdzIG5hbWUuIFxuXHQgKi9cblx0bmFtZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgcmVzdWx0J3MgdmFsdWUuIFxuXHQgKi9cblx0dmFsdWU6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjb250ZW50IG9mIGEgY2hhcnQgYmFyIG9iamVjdC4gXG4gKiBJdHMgYHNlcmllc2AgZmllbGQgaXMgYW4gYXJyYXkgb2YgbGVuZ3RoIDIgdGhhdCBjb250YWlucyBcbiAqIHRoZSBhY2hpZXZlZC91bnJlc29sdmVkIHJlc3VsdHM7IGZvciBleGFtcGxlLCBcblx0YCdzZXJpZXMnOiBbXG4gIFx0XHR7XG4gIFx0XHRcdCduYW1lJzogJ2FjaGlldmVkJyxcbiBcdFx0XHQndmFsdWUnOiAyMFxuIFx0XHR9LFxuIFx0XHR7XG4gXHRcdFx0J25hbWUnOiAndW5yZXNvbHZlZCcsXG4gXHRcdFx0J3ZhbHVlJzogODBcbiBcdFx0fVxuIFx0XWAgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnRCYXJcbntcblx0LyoqXG5cdCAqIFRoZSBjaGFydCdzIGJhciBuYW1lLiBcblx0ICovXG5cdG5hbWU6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIHJlc3VsdHMgYXJyYXkgdGhhdCBtYWtlcyB1cCB0aGUgY2hhcnQncyBiYXIuIFxuXHQgKi9cblx0c2VyaWVzOiBSZXN1bHRbXTtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjb250ZW50IG9mIGFuIGVudHJ5IGVsZW1lbnQgb2JqZWN0LiBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFbnRyeUVsZW1lbnRcbntcblx0bmFtZTogc3RyaW5nO1xuXHR2YWx1ZT86IG51bWJlcjtcblx0bGFiZWw/OiBzdHJpbmc7XG5cdHNlcmllcz86IHN0cmluZztcbn1cblxuLyoqXG4gKiBDb21wb25lbnQgZm9yIGRpc3BsYXlpbmcgYSByb2FkbWFwLiBJdCBiYXNpY2FsbHkgZGlzcGxheXMgdGhlIHByb2R1Y3RzIFxuICogdGhhdCB3ZSBhcmUgY3VycmVudGx5IHdvcmtpbmcsIGFuZCB0aGUgcHJvZHVjdHMgdGhhdCB3ZSB3aWxsIHdvcmsgaW4gdGhlIGZ1dHVyZS4gXG4gKiBCZXNpZGVzLCB3aGVuIGEgcHJvZHVjdCBpcyBzZWxlY3RlZCwgaXRzIGZlYXR1cmVzIGFyZSBkaXNwbGF5ZWQuIFxuICogSXQgYWx3YXlzIHNob3dzIHRoZSBhY2hpZXZlZC91bnJlc29sdmVkIHdvcmsgaW4gcGVyY2VudGFnZS4gXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ3RvY28tcm9hZC1tYXAnLFxuXHR0ZW1wbGF0ZVVybDogJy4vcm9hZC1tYXAuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9yb2FkLW1hcC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFJvYWRNYXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXRcbntcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIC0xIHZhbHVlIHRoYXQgaXMgdXNlZCB0byByZW1vdmUgYSBjaGFydC4gXG5cdCAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgcmVtb3ZlQ2hhcnRfUG9zRmxhZyA9IC0xO1xuXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICogT3B0aW9ucyBmb3IgZGlzcGxheWluZyB0aGUgcHJvZHVjdHMgbGlzdC4gXG5cdCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgdGV4dCB0aGF0IGlzIGRpc3BsYXllZCB3aGVuIHRoZXJlIGlzIG5vdCBhbnkgcHJvZHVjdC4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ8KhTm8gaGF5IG5pbmfDum4gcHJvZHVjdG8hJ2AuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIHdpdGhvdXRQcm9kdWN0VGV4dDogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjaGFydCdzIHZpc3VhbGl6YXRpb24gZGlyZWN0aW9uLiBcblx0ICogSXQgaXMgdHJ1ZSBpZiB0aGUgY2hhcnQgaXMgdmlzdWFsaXplZCB2ZXJ0aWNhbGx5OyBvdGhlcndpc2UsIGZhbHNlIChob3Jpem9udGFsbHkpLiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGB0cnVlYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9pc0NoYXJ0VmVydGljYWw6IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIElucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIHRhYidzIGxhYmVsIG9mIGN1cnJlbnQgd29ya3MuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdUcmFiYWpvcyBBY3R1YWxlcydgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB0YWJMYWJlbF9DVzogc3RyaW5nO1xuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgdGFiJ3MgbGFiZWwgb2YgZnV0dXJlIHdvcmtzLiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGAnVHJhYmFqb3MgRnV0dXJvcyBvIFBlbmRpZW50ZXMnYC4gXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgdGFiTGFiZWxfRlc6IHN0cmluZztcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2VsZWN0ZWQgdGFiIHBvc2l0aW9uLiBJdHMgdmFsdWUgaXMgc2V0IGludGVybmFsbHkuIFxuXHQgKi9cblx0cHJpdmF0ZSBfc2VsZWN0ZWRUYWJQb3M6IG51bWJlcjtcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZ3JpZCBoZWlnaHQuIFxuXHQgKiBJdHMgdmFsdWUgaXMgc2V0IGRlcGVuZGluZyBvbiB0aGUgYGxlZ2VuZFBvc2l0aW9uYCB2YWx1ZS4gXG5cdCAqL1xuXHRwcml2YXRlIF9ncmlkSGVpZ2h0OiBudW1iZXI7XG5cblx0LyoqXG5cdCAqIElucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIGNoYXJ0J3MgdGl0bGUgb2YgcHJvZHVjdHMuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdMaXN0YSBkZSBwcm9kdWN0b3MnYC4gXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgY2hhcnRUaXRsZV9QOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBpdCBpcyB1c2luZyBhIHRyaWNrIHRvIG9ibGlnYXRlIHJlcGFpbnRpbmcgdGhlIGNoYXJ0OyBvdGhlcndpc2UsIGZhbHNlLiBcblx0ICovXG5cdHByaXZhdGUgX2lzVXNpbmdUcmlja19SZXBhaW50Q2hhcnQ6IGJvb2xlYW47XG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB3b3JraW5nIHByb2R1Y3RzIGFycmF5IGludHJvZHVjZWQgYnkgdGhlIHVzZXIuIFxuXHQgKiBJdCByZWZlcmVuY2VzIHRoZSBgX2N1cnJlbnRQcm9kdWN0c2Agb3IgYF9mdXR1cmVQcm9kdWN0c2AgYXJyYXkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9wcm9kdWN0czogUHJvZHVjdFtdO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCBwcm9kdWN0cyBhcnJheSBpbnRyb2R1Y2VkIGJ5IHRoZSB1c2VyLiBcblx0ICogRnJvbSB0aGlzIGFycmF5IGlzIGNyZWF0ZWQgdGhlIGBfY3VycmVudFByb2R1Y3RzX0ludGVybmFsYCBhbmQgYF9jdXJyZW50RmVhdHVyZXNfSW50ZXJuYWxgIGFycmF5cy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHByaXZhdGUgX2N1cnJlbnRQcm9kdWN0czogUHJvZHVjdFtdO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnV0dXJlIHByb2R1Y3RzIGFycmF5IGludHJvZHVjZWQgYnkgdGhlIHVzZXIuIFxuXHQgKiBGcm9tIHRoaXMgYXJyYXkgaXMgY3JlYXRlZCB0aGUgYF9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbGAgYW5kIGBfZnV0dXJlRmVhdHVyZXNfSW50ZXJuYWxgIGFycmF5cy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHByaXZhdGUgX2Z1dHVyZVByb2R1Y3RzOiBQcm9kdWN0W107XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHdvcmtpbmcgcHJvZHVjdHMgYXJyYXkgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gXG5cdCAqIEl0IHJlZmVyZW5jZXMgdGhlIGBfY3VycmVudFByb2R1Y3RzX0ludGVybmFsYCBvciBgX2Z1dHVyZVByb2R1Y3RzX0ludGVybmFsYCBhcnJheS4gXG5cdCAqIEl0IGlzIGNyZWF0ZWQgZnJvbSB0aGUgYF9wcm9kdWN0c2AgYXJyYXkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9wcm9kdWN0c19JbnRlcm5hbDogQ2hhcnRCYXJbXTtcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgcHJvZHVjdHMgYXJyYXkgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gXG5cdCAqIEl0IGlzIGNyZWF0ZWQgZnJvbSB0aGUgYF9jdXJyZW50UHJvZHVjdHNgIGFycmF5LiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0cHJpdmF0ZSBfY3VycmVudFByb2R1Y3RzX0ludGVybmFsOiBDaGFydEJhcltdO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnV0dXJlIHByb2R1Y3RzIGFycmF5IGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuIFxuXHQgKiBJdCBpcyBjcmVhdGVkIGZyb20gdGhlIGBfZnV0dXJlUHJvZHVjdHNgIGFycmF5LiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0cHJpdmF0ZSBfZnV0dXJlUHJvZHVjdHNfSW50ZXJuYWw6IENoYXJ0QmFyW107XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFycmF5IHRoYXQgY29udGFpbnMgYWxsIHdvcmtpbmcgZmVhdHVyZXMgYXJyYXlzIHRoYXQgY2FuIGJlIGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuIFxuXHQgKiBUaGlzIGFycmF5IGNvbnRhaW5zIHRoZSBzYW1lIGxlbmd0aCB0aGFuIGBfcHJvZHVjdHNfSW50ZXJuYWxgIGFycmF5IGJlY2F1c2UgXG5cdCAqIGVhY2ggcG9zaXRpb24gY29udGFpbnMgdGhlIHdvcmtpbmcgZmVhdHVyZXMgYXJyYXkgZm9yIGEgcHJvZHVjdC4gXG5cdCAqIEl0IHJlZmVyZW5jZXMgdGhlIGBfY3VycmVudEZlYXR1cmVzVG90YWxfSW50ZXJuYWxgIG9yIGBfZnV0dXJlRmVhdHVyZXNUb3RhbF9JbnRlcm5hbGAgYXJyYXkuIFxuXHQgKiBJdCBpcyBjcmVhdGVkIGZyb20gdGhlIGBfcHJvZHVjdHNgIGFycmF5LiBcblx0ICogVGhpcyBhcnJheSBpcyBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9mZWF0dXJlc1RvdGFsX0ludGVybmFsOiBDaGFydEJhcltdW107XG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhcnJheSB0aGF0IGNvbnRhaW5zIGFsbCBjdXJyZW50IGZlYXR1cmVzIGFycmF5cyB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiBcblx0ICogVGhpcyBhcnJheSBjb250YWlucyB0aGUgc2FtZSBsZW5ndGggdGhhbiBgX2N1cnJlbnRQcm9kdWN0c19JbnRlcm5hbGAgYXJyYXkgYmVjYXVzZSBcblx0ICogZWFjaCBwb3NpdGlvbiBjb250YWlucyB0aGUgY3VycmVudCBmZWF0dXJlcyBhcnJheSBmb3IgYSBwcm9kdWN0LiBcblx0ICogSXQgaXMgY3JlYXRlZCBmcm9tIHRoZSBgX2N1cnJlbnRQcm9kdWN0c2AgYXJyYXkuIFxuXHQgKiBUaGlzIGFycmF5IGlzIGZvciBpbnRlcm5hbCB1c2Ugb25seS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHByaXZhdGUgX2N1cnJlbnRGZWF0dXJlc1RvdGFsX0ludGVybmFsOiBDaGFydEJhcltdW107XG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhcnJheSB0aGF0IGNvbnRhaW5zIGFsbCBmdXR1cmUgZmVhdHVyZXMgYXJyYXlzIHRoYXQgY2FuIGJlIGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuIFxuXHQgKiBUaGlzIGFycmF5IGNvbnRhaW5zIHRoZSBzYW1lIGxlbmd0aCB0aGFuIGBfZnV0dXJlUHJvZHVjdHNfSW50ZXJuYWxgIGFycmF5IGJlY2F1c2UgXG5cdCAqIGVhY2ggcG9zaXRpb24gY29udGFpbnMgdGhlIGZ1dHVyZSBmZWF0dXJlcyBhcnJheSBmb3IgYSBwcm9kdWN0LiBcblx0ICogSXQgaXMgY3JlYXRlZCBmcm9tIHRoZSBgX2Z1dHVyZVByb2R1Y3RzYCBhcnJheS4gXG5cdCAqIFRoaXMgYXJyYXkgaXMgZm9yIGludGVybmFsIHVzZSBvbmx5LiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0cHJpdmF0ZSBfZnV0dXJlRmVhdHVyZXNUb3RhbF9JbnRlcm5hbDogQ2hhcnRCYXJbXVtdO1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB3b3JraW5nIGZlYXR1cmVzIGFycmF5IG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiBcblx0ICogSXQgcmVmZXJlbmNlcyBhbiBlbGVtZW50IGluIHRoZSBgX2ZlYXR1cmVzVG90YWxfSW50ZXJuYWxgIGFycmF5LiBUaGlzIGVsZW1lbnQgXG5cdCAqIHJlcHJlc2VudHMgdGhlIGZlYXR1cmVzIG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBpbiB0aGUgYF9wcm9kdWN0c19JbnRlcm5hbGAgYXJyYXkuIFxuXHQgKiBJdCByZWZlcmVuY2VzIHRoZSBgX2N1cnJlbnRGZWF0dXJlc19JbnRlcm5hbGAgb3IgYF9mdXR1cmVGZWF0dXJlc19JbnRlcm5hbGAgYXJyYXkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9mZWF0dXJlc19JbnRlcm5hbDogQ2hhcnRCYXJbXTtcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgZmVhdHVyZXMgYXJyYXkgb2YgYSBzZWxlY3RlZCBwcm9kdWN0IGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuIFxuXHQgKiBJdCByZWZlcmVuY2VzIGFuIGVsZW1lbnQgaW4gdGhlIGBfY3VycmVudEZlYXR1cmVzVG90YWxfSW50ZXJuYWxgIGFycmF5LiBUaGlzIGVsZW1lbnQgXG5cdCAqIHJlcHJlc2VudHMgdGhlIGZlYXR1cmVzIG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBpbiB0aGUgYF9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWxgIGFycmF5LiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0cHJpdmF0ZSBfY3VycmVudEZlYXR1cmVzX0ludGVybmFsOiBDaGFydEJhcltdO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnV0dXJlIGZlYXR1cmVzIGFycmF5IG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiBcblx0ICogSXQgcmVmZXJlbmNlcyBhbiBlbGVtZW50IGluIHRoZSBgX2Z1dHVyZUZlYXR1cmVzVG90YWxfSW50ZXJuYWxgIGFycmF5LiBUaGlzIGVsZW1lbnQgXG5cdCAqIHJlcHJlc2VudHMgdGhlIGZlYXR1cmVzIG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBpbiB0aGUgYF9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbGAgYXJyYXkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9mdXR1cmVGZWF0dXJlc19JbnRlcm5hbDogQ2hhcnRCYXJbXTtcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCBwcm9kdWN0IGVsZW1lbnRzIGFycmF5IHRvIGhpZ2hsaWdodCBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiBcblx0ICogSXQgaXMgbW9kaWZpZWQgZHluYW1pY2FsbHkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9hY3RpdmVFbnRyaWVzX1BfQ1c6IEVudHJ5RWxlbWVudFtdO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnV0dXJlIHByb2R1Y3QgZWxlbWVudHMgYXJyYXkgdG8gaGlnaGxpZ2h0IGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuIFxuXHQgKiBJdCBpcyBtb2RpZmllZCBkeW5hbWljYWxseS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHByaXZhdGUgX2FjdGl2ZUVudHJpZXNfUF9GVzogRW50cnlFbGVtZW50W107XG5cblx0LyoqXG5cdCAqIElucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIGNoYXJ0J3MgZGltZW5zaW9ucyBbd2lkdGgsIGhlaWdodF0uIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFs5MDAsIDM1MF1gLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB2aWV3OiBudW1iZXJbXTtcblxuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyBjb2xvciBzY2hlbWUgb2YgY3VycmVudCB3b3Jrcy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyB0aGUgZm9sbG93aW5nIG9iamVjdDogXG5cdFx0YHtcblx0IFx0XHRkb21haW46IFsgXG5cdFx0XHRcdCcjNkVFOUI1JywgIC8vIGxpZ2h0IGdyZWVuIFxuXHRcdFx0XHQnI0U5NkU3MCcgICAvLyByZWRcblx0XHRcdF0gXG5cdFx0fWAgXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgY29sb3JTY2hlbWVfQ1c6IGFueTtcblx0LyoqXG5cdCAqIElucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIGNoYXJ0J3MgY29sb3Igc2NoZW1lIG9mIGZ1dHVyZSB3b3Jrcy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyB0aGUgZm9sbG93aW5nIG9iamVjdDogXG5cdFx0YHtcblx0IFx0XHRkb21haW46IFsgXG5cdFx0XHRcdCcjNkY2RUU5JywgIC8vIGJsdWVcblx0XHRcdFx0JyM2RUJCRTknICAgLy8gbGlnaHQgYmx1ZVxuXHRcdFx0XSBcblx0XHR9YCBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBjb2xvclNjaGVtZV9GVzogYW55O1xuXG5cdC8qKlxuXHQgKiBJbnB1dCBmaWVsZCB0aGF0IGluZGljYXRlcyB0byBmaWxsIGNoYXJ0J3MgZWxlbWVudHMgd2l0aCBhIGdyYWRpZW50IG9yIGEgc29saWQgY29sb3IuIFxuXHQgKiBJdCBpcyB0cnVlIGlmIHRoZSBjaGFydCdzIGVsZW1lbnRzIGFyZSBmaWxsZWQgd2l0aCBhIGdyYWRpZW50IGNvbG9yOyBvdGhlcndpc2UsIGZhbHNlIChmaWxsZWQgd2l0aCBhIHNvbGlkIGNvbG9yKS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgZmFsc2VgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBncmFkaWVudDogYm9vbGVhbjtcblxuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyBwYWRkaW5nIGJldHdlZW4gYmFycyBpbiBweC4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgMTJgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBiYXJQYWRkaW5nOiBudW1iZXI7XG5cblx0LyoqXG5cdCAqIFNob3dzIHRoZSBjaGFydCdzIHggYXhpcy4gXG5cdCAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgc2hvd1hBeGlzOiBib29sZWFuO1xuXHQvKipcblx0ICogU2hvd3MgdGhlIGNoYXJ0J3MgeCBheGlzIGxhYmVsLiBcblx0ICovXG5cdHB1YmxpYyByZWFkb25seSBzaG93WEF4aXNMYWJlbDogYm9vbGVhbjtcblx0LyoqXG5cdCAqIElucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIGNoYXJ0J3MgeCBheGlzIGxhYmVsIHRleHQgb2YgcHJvZHVjdHMuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdQcm9kdWN0bydgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB4QXhpc0xhYmVsX1A6IHN0cmluZztcblxuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyBtYXggbGVuZ3RoIG9mIHRoZSB0aWNrcyAodGlja3Mgb3ZlciB0aGlzIGxlbmd0aCB3aWxsIGJlIHRyaW1tZWQpLiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGAxNmAuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIG1heEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XG5cblx0LyoqXG5cdCAqIFNob3dzIHRoZSBjaGFydCdzIHkgYXhpcy4gXG5cdCAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgc2hvd1lBeGlzOiBib29sZWFuO1xuXHQvKipcblx0ICogU2hvd3MgdGhlIGNoYXJ0J3MgeSBheGlzIGxhYmVsLiBcblx0ICovXG5cdHB1YmxpYyByZWFkb25seSBzaG93WUF4aXNMYWJlbDogYm9vbGVhbjtcblx0LyoqXG5cdCAqIElucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIGNoYXJ0J3MgeSBheGlzIGxhYmVsIHRleHQgb2YgcHJvZHVjdHMuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdSZWFsaXphZG8gLyBQZW5kaWVudGUgRW4gUG9yIENpZW50bydgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB5QXhpc0xhYmVsX1A6IHN0cmluZztcblxuXHQvKipcblx0ICogU2hvd3MgdGhlIGNoYXJ0J3MgbGVnZW5kLiBcblx0ICovXG5cdHB1YmxpYyByZWFkb25seSBzaG93TGVnZW5kOiBib29sZWFuO1xuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyBsZWdlbmQgdGl0bGUuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdMZXllbmRhJ2AuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBJbnB1dCBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSBjaGFydCdzIGxlZ2VuZCBwb3NpdGlvbi4gSXRzIHZhbHVlIGlzIGAncmlnaHQnYCBvciBgJ2JlbG93J2AuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdyaWdodCdgLiBcblx0ICovXG5cdHByaXZhdGUgX2xlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XG5cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgKiBPcHRpb25zIGZvciBkaXNwbGF5aW5nIHRoZSBmZWF0dXJlcyBsaXN0IG9mIGEgc2VsZWN0ZWQgcHJvZHVjdC4gXG5cdCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgd29ya2luZyBwcm9kdWN0IHBvc2l0aW9uLiBDb250YWlucyB0aGUgYHJlbW92ZUNoYXJ0X1Bvc0ZsYWdgIHZhbHVlIHdoZW4gXG5cdCAqIHRoZXJlIGlzIG5vdCBhbnkgc2VsZWN0ZWQgd29ya2luZyBwcm9kdWN0IHBvc2l0aW9uLiBcblx0ICogSXQgaGFzIHRoZSBgX3NlbGVjdGVkUHJvZHVjdFBvc19DV2Agb3IgYF9zZWxlY3RlZFByb2R1Y3RQb3NfRldgIHZhbHVlLiBcblx0ICovXG5cdHByaXZhdGUgX3NlbGVjdGVkUHJvZHVjdFBvczogbnVtYmVyO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2VsZWN0ZWQgY3VycmVudCBwcm9kdWN0IHBvc2l0aW9uLiBDb250YWlucyB0aGUgYHJlbW92ZUNoYXJ0X1Bvc0ZsYWdgIHZhbHVlIHdoZW4gXG5cdCAqIHRoZXJlIGlzIG5vdCBhbnkgc2VsZWN0ZWQgY3VycmVudCBwcm9kdWN0IHBvc2l0aW9uLiBcblx0ICovXG5cdHByaXZhdGUgX3NlbGVjdGVkUHJvZHVjdFBvc19DVzogbnVtYmVyO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2VsZWN0ZWQgZnV0dXJlIHByb2R1Y3QgcG9zaXRpb24uIENvbnRhaW5zIHRoZSBgcmVtb3ZlQ2hhcnRfUG9zRmxhZ2AgdmFsdWUgd2hlbiBcblx0ICogdGhlcmUgaXMgbm90IGFueSBzZWxlY3RlZCBmdXR1cmUgcHJvZHVjdCBwb3NpdGlvbi4gXG5cdCAqL1xuXHRwcml2YXRlIF9zZWxlY3RlZFByb2R1Y3RQb3NfRlc6IG51bWJlcjtcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2hhcnQncyB0aXRsZSBvZiBmZWF0dXJlcy4gXG5cdCAqIFRoaXMgZmllbGQgaXMgdXBkYXRlZCBhIGxpdHRsZSBkaWZmZXJlbnQuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdMaXN0YSBkZSBjYXJhY3RlcsOtc3RpY2FzIGRlbCBwcm9kdWN0byBzZWxlY2Npb25hZG8nYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9jaGFydFRpdGxlX0Y6IHN0cmluZztcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNoYXJ0J3MgdGl0bGUgb2Ygd29ya2luZyBjdXJyZW50IGZlYXR1cmVzLiBcblx0ICogVGhpcyBmaWVsZCBpcyB1cGRhdGVkIGEgbGl0dGxlIGRpZmZlcmVudC4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ0xpc3RhIGRlIGNhcmFjdGVyw61zdGljYXMgZGVsIHByb2R1Y3RvIHNlbGVjY2lvbmFkbydgLiBcblx0ICovXG5cdHByaXZhdGUgX2NoYXJ0VGl0bGVfRl9DVzogc3RyaW5nO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2hhcnQncyB0aXRsZSBvZiB3b3JraW5nIGZ1dHVyZSBmZWF0dXJlcy4gXG5cdCAqIFRoaXMgZmllbGQgaXMgdXBkYXRlZCBhIGxpdHRsZSBkaWZmZXJlbnQuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdMaXN0YSBkZSBjYXJhY3RlcsOtc3RpY2FzIGRlbCBwcm9kdWN0byBzZWxlY2Npb25hZG8nYC4gXG5cdCAqL1xuXHRwcml2YXRlIF9jaGFydFRpdGxlX0ZfRlc6IHN0cmluZztcblxuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyB4IGF4aXMgbGFiZWwgdGV4dCBvZiBmZWF0dXJlcy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ0NhcmFjdGVyw61zdGljYSdgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyB4QXhpc0xhYmVsX0Y6IHN0cmluZztcblxuXHQvKipcblx0ICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyB5IGF4aXMgbGFiZWwgdGV4dCBvZiBmZWF0dXJlcy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ1JlYWxpemFkbyAvIFBlbmRpZW50ZSBFbiBQb3IgQ2llbnRvJ2AuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIHlBeGlzTGFiZWxfRjogc3RyaW5nO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcigpXG5cdHtcblx0XHR0aGlzLndpdGhvdXRQcm9kdWN0VGV4dCA9ICfCoU5vIGhheSBuaW5nw7puIHByb2R1Y3RvISc7XG5cblx0XHR0aGlzLl9pc0NoYXJ0VmVydGljYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy50YWJMYWJlbF9DVyA9ICdUcmFiYWpvcyBBY3R1YWxlcyc7XG5cdFx0dGhpcy50YWJMYWJlbF9GVyA9ICdUcmFiYWpvcyBGdXR1cm9zIG8gUGVuZGllbnRlcyc7XG5cdFx0dGhpcy5fc2VsZWN0ZWRUYWJQb3MgPSAwO1xuXHRcdC8qIFRoZSBgX2dyaWRIZWlnaHRgIHZhbHVlIGlzIHNldCB3aGVuIHRoZSBgbGVnZW5kUG9zaXRpb25gIHZhbHVlIGlzIHNldC4gKi9cblxuXHRcdHRoaXMuY2hhcnRUaXRsZV9QID0gJ0xpc3RhIGRlIHByb2R1Y3Rvcyc7XG5cblx0XHR0aGlzLl9pc1VzaW5nVHJpY2tfUmVwYWludENoYXJ0ID0gZmFsc2U7XG5cdFx0dGhpcy5fcHJvZHVjdHMgPSB0aGlzLl9jdXJyZW50UHJvZHVjdHMgPSBbIF07XG5cdFx0dGhpcy5fZnV0dXJlUHJvZHVjdHMgPSBbIF07XG5cdFx0dGhpcy5fcHJvZHVjdHNfSW50ZXJuYWwgPSB0aGlzLl9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWwgPSBbIF07XG5cdFx0dGhpcy5fZnV0dXJlUHJvZHVjdHNfSW50ZXJuYWwgPSBbIF07XG5cdFx0dGhpcy5fZmVhdHVyZXNUb3RhbF9JbnRlcm5hbCA9IHRoaXMuX2N1cnJlbnRGZWF0dXJlc1RvdGFsX0ludGVybmFsID0gWyBdO1xuXHRcdHRoaXMuX2Z1dHVyZUZlYXR1cmVzVG90YWxfSW50ZXJuYWwgPSBbIF07XG5cdFx0dGhpcy5fZmVhdHVyZXNfSW50ZXJuYWwgPSB0aGlzLl9jdXJyZW50RmVhdHVyZXNfSW50ZXJuYWwgPSBbIF07XG5cdFx0dGhpcy5fZnV0dXJlRmVhdHVyZXNfSW50ZXJuYWwgPSBbIF07XG5cblx0XHR0aGlzLl9hY3RpdmVFbnRyaWVzX1BfQ1cgPSBbIF07XG5cdFx0dGhpcy5fYWN0aXZlRW50cmllc19QX0ZXID0gWyBdO1xuXG5cdFx0dGhpcy52aWV3ID0gWzkwMCwgMzUwXTtcblx0XHR0aGlzLmNvbG9yU2NoZW1lX0NXID0ge1xuXHRcdFx0ZG9tYWluOiBbICAvLyBhbGwgY29sb3JzIGxpZ2h0XG5cdFx0XHRcdC8vICcjODVFOTZFJywgIC8vIGdyZWVuXG5cdFx0XHRcdCcjNkVFOUI1JywgIC8vIGxpZ2h0IGdyZWVuXG5cdFx0XHRcdCcjRTk2RTcwJywgIC8vIHJlZFxuXHRcdFx0XHQvLyAnIzZGNkVFOScsICAvLyBibHVlXG5cdFx0XHRcdC8vICcjNkVCQkU5JywgIC8vIGxpZ2h0IGJsdWVcblx0XG5cdFx0XHRcdC8vICcjQTlBOUE5Jyxcblx0XHRcdFx0Ly8gJyM4NUU5NkUnLFxuXHRcdFx0XHQvLyAnI0UzRTk2RScsXG5cdFx0XHRcdC8vICcjRTlBQzZFJyxcblx0XHRcdFx0Ly8gJyNFOTZFNzAnLFxuXHRcdFx0XHQvLyAnI0U5NkVCNicsXG5cdFx0XHRcdC8vICcjQUU2RUU5Jyxcblx0XHRcdFx0Ly8gJyM2RjZFRTknLFxuXHRcdFx0XHQvLyAnIzZFQkJFOScsXG5cdFx0XHRcdC8vICcjNkVFOUI1J1xuXHRcdFx0XVxuLy9cdFx0XHRkb21haW46IFsgIC8vIGFsbCBjb2xvcnMgZGFya1xuXHRcdFx0Ly8gICAnIzJGNkU2RicsXG4vL1x0XHRcdCAgJyMyRjZGNDAnLCAgLy8gZ3JlZW5cblx0XHRcdC8vICAgJyM2QjZGMkYnLCAgLy8gbGlnaHQgZ3JlZW5cbi8vXHRcdFx0ICAnIzZGNDMyRicsICAvLyByZWRcblx0XHRcdC8vICAgJyM2RjJGNEYnLFxuXHRcdFx0Ly8gICAnIzU2MkY2RicsXG5cdFx0XHQvLyAgICcjMzAyRjZGJyxcblx0XHRcdC8vICAgJyMyRjQ2NkYnXG4vL1x0XHRcdF1cblx0XHRcdC8vIGRvbWFpbjogWyAgLy8gYWxsIGNvbG9ycyBncmV5XG5cdFx0XHQvL1x0ICcjYTZhNmE2Jyxcblx0XHRcdC8vICAgJyM4MjgyODInLFxuXHRcdFx0Ly8gICAnIzY4Njg2OCcsXG5cdFx0XHQvL1x0ICcjNTU1NTU1Jyxcblx0XHRcdC8vICAgJyM0ZDRkNGQnLFxuXHRcdFx0Ly8gICAnIzQ2NDY0NicsXG5cdFx0XHQvLyAgICcjNDM0MzQzJyxcblx0XHRcdC8vICAgJyMzZDNkM2QnLFxuXHRcdFx0Ly8gICAnIzM0MzQzNCcsXG5cdFx0XHQvLyAgICcjMjYyNjI2Jyxcblx0XHRcdC8vICAgJyMyNTI1MjUnLFxuXHRcdFx0Ly8gICAnIzAwMDAwMCdcblx0XHRcdC8vIF1cblx0XHR9O1xuXHRcdHRoaXMuY29sb3JTY2hlbWVfRlcgPSB7XG5cdFx0XHRkb21haW46IFtcblx0XHRcdFx0JyM2RjZFRTknLCAgLy8gYmx1ZVxuXHRcdFx0XHQnIzZFQkJFOScgICAvLyBsaWdodCBibHVlXG5cdFx0XHRdXG5cdFx0fTtcblx0XHR0aGlzLmdyYWRpZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5iYXJQYWRkaW5nID0gMTI7XG5cblx0XHR0aGlzLnNob3dYQXhpcyA9IHRydWU7XG5cdFx0dGhpcy5zaG93WEF4aXNMYWJlbCA9IHRydWU7XHRcblx0XHR0aGlzLnhBeGlzTGFiZWxfUCA9ICdQcm9kdWN0byc7XG5cdFx0dGhpcy5tYXhBeGlzVGlja0xlbmd0aCA9IDE2O1xuXG5cdFx0dGhpcy5zaG93WUF4aXMgPSB0cnVlO1xuXHRcdHRoaXMuc2hvd1lBeGlzTGFiZWwgPSB0cnVlO1xuXHRcdHRoaXMueUF4aXNMYWJlbF9QID0gJ1JlYWxpemFkbyAvIFBlbmRpZW50ZSBFbiBQb3IgQ2llbnRvJztcblxuXHRcdHRoaXMuc2hvd0xlZ2VuZCA9IHRydWU7XG5cdFx0dGhpcy5sZWdlbmRUaXRsZSA9ICdMZXllbmRhJztcblx0XHR0aGlzLmxlZ2VuZFBvc2l0aW9uID0gJ3JpZ2h0JztcblxuXG5cdFx0dGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zID0gdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0NXID0gdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0ZXID0gdGhpcy5yZW1vdmVDaGFydF9Qb3NGbGFnO1xuXG5cdFx0dGhpcy5fY2hhcnRUaXRsZV9GID0gdGhpcy5fY2hhcnRUaXRsZV9GX0NXID0gdGhpcy5fY2hhcnRUaXRsZV9GX0ZXID0gJ0xpc3RhIGRlIGNhcmFjdGVyw61zdGljYXMgZGVsIHByb2R1Y3RvIHNlbGVjY2lvbmFkbyc7XG5cdFx0dGhpcy54QXhpc0xhYmVsX0YgPSAnQ2FyYWN0ZXLDrXN0aWNhJztcblx0XHR0aGlzLnlBeGlzTGFiZWxfRiA9ICdSZWFsaXphZG8gLyBQZW5kaWVudGUgRW4gUG9yIENpZW50byc7XG5cdH1cblxuXHRwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuXHR7IH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyB2aXN1YWxpemF0aW9uIGRpcmVjdGlvbi4gXG5cdCAqIEl0IGlzIHRydWUgaWYgdGhlIGNoYXJ0IGlzIHZpc3VhbGl6ZWQgdmVydGljYWxseTsgb3RoZXJ3aXNlLCBmYWxzZSAoaG9yaXpvbnRhbGx5KS4gXG5cdCAqIFdoZW4gdGhpcyB2YWx1ZSBpcyBzZXQsIHRoZSBgeEF4aXNMYWJlbF9QYC9geUF4aXNMYWJlbF9QYCBhbmQgYHhBeGlzTGFiZWxfRmAvYHlBeGlzTGFiZWxfRmAgdmFsdWVzIGFyZSBzZXQgYWNjb3JkaW5nbHkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHRydWVgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBnZXQgaXNDaGFydFZlcnRpY2FsKCk6IGJvb2xlYW5cblx0e1xuXHRcdHJldHVybiB0aGlzLl9pc0NoYXJ0VmVydGljYWw7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyB2aXN1YWxpemF0aW9uIGRpcmVjdGlvbi4gXG5cdCAqIEl0IGlzIHRydWUgaWYgdGhlIGNoYXJ0IGlzIHZpc3VhbGl6ZWQgdmVydGljYWxseTsgb3RoZXJ3aXNlLCBmYWxzZSAoaG9yaXpvbnRhbGx5KS4gXG5cdCAqIFdoZW4gdGhpcyB2YWx1ZSBpcyBzZXQsIHRoZSBgeEF4aXNMYWJlbF9QYC9geUF4aXNMYWJlbF9QYCBhbmQgYHhBeGlzTGFiZWxfRmAvYHlBeGlzTGFiZWxfRmAgdmFsdWVzIGFyZSBzZXQgYWNjb3JkaW5nbHkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHRydWVgLiBcblx0ICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgY2hhcnQncyB2aXN1YWxpemF0aW9uIGRpcmVjdGlvbiB0byBzZXQuIFxuXHQgKi9cblx0cHVibGljIHNldCBpc0NoYXJ0VmVydGljYWwodmFsdWU6IGJvb2xlYW4pXG5cdHtcblx0XHRpZiAodGhpcy5faXNDaGFydFZlcnRpY2FsICE9IHZhbHVlKVxuXHRcdHtcblx0XHRcdGxldCB0ZW1wOiBzdHJpbmcgPSB0aGlzLnhBeGlzTGFiZWxfUDtcblx0XHRcdHRoaXMueEF4aXNMYWJlbF9QID0gdGhpcy55QXhpc0xhYmVsX1A7XG5cdFx0XHR0aGlzLnlBeGlzTGFiZWxfUCA9IHRlbXA7XG5cblx0XHRcdHRlbXAgPSB0aGlzLnhBeGlzTGFiZWxfRjtcblx0XHRcdHRoaXMueEF4aXNMYWJlbF9GID0gdGhpcy55QXhpc0xhYmVsX0Y7XG5cdFx0XHR0aGlzLnlBeGlzTGFiZWxfRiA9IHRlbXA7XG5cblx0XHRcdHRoaXMuX2lzQ2hhcnRWZXJ0aWNhbCA9IHZhbHVlXG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGdyaWQgaGVpZ2h0LiBcblx0ICogSXRzIHZhbHVlIGlzIHNldCBkZXBlbmRpbmcgb24gdGhlIGBsZWdlbmRQb3NpdGlvbmAgdmFsdWUuIFxuXHQgKi9cblx0cHVibGljIGdldCBncmlkSGVpZ2h0KCk6IG51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2dyaWRIZWlnaHQ7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY3VycmVudCBwcm9kdWN0cyBhcnJheSBpbnRyb2R1Y2VkIGJ5IHRoZSB1c2VyLiBcblx0ICogRnJvbSB0aGlzIGFycmF5IGlzIGNyZWF0ZWQgdGhlIGBjdXJyZW50UHJvZHVjdHNfSW50ZXJuYWxgIGFuZCBgY3VycmVudEZlYXR1cmVzX0ludGVybmFsYCBhcnJheXMuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgZ2V0IGN1cnJlbnRQcm9kdWN0cygpOiBQcm9kdWN0W11cblx0e1xuXHRcdHJldHVybiB0aGlzLl9jdXJyZW50UHJvZHVjdHM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY3VycmVudCBwcm9kdWN0cyBhcnJheS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgY3VycmVudCBwcm9kdWN0cyBhcnJheSB0byBzZXQuIFxuXHQgKi9cblx0cHVibGljIHNldCBjdXJyZW50UHJvZHVjdHModmFsdWU6IFByb2R1Y3RbXSlcblx0e1xuXHRcdC8vIGNvbnNvbGUubG9nKCdjdXJyZW50UHJvZHVjdHM6ICcsIHZhbHVlKTtcblxuXHRcdC8qIFVwZGF0ZXMgdGhlIGN1cnJlbnQgcHJvZHVjdHMvZmVhdHVyZXMgYXJyYXlzLiAqL1xuXHRcdHRoaXMuX2N1cnJlbnRQcm9kdWN0cyA9IHZhbHVlIHx8IFsgXTtcblx0XHRpZiAodGhpcy5faXNVc2luZ1RyaWNrX1JlcGFpbnRDaGFydClcblx0XHR7XG5cdFx0XHR0aGlzLl9pc1VzaW5nVHJpY2tfUmVwYWludENoYXJ0ID0gZmFsc2U7XG5cblx0XHRcdHRoaXMuX2N1cnJlbnRQcm9kdWN0c19JbnRlcm5hbCA9IHRoaXMuX2N1cnJlbnRQcm9kdWN0c19JbnRlcm5hbC5tYXAodmFsdWUgPT4gdmFsdWUpO1xuXHRcdFx0dGhpcy5fY3VycmVudEZlYXR1cmVzVG90YWxfSW50ZXJuYWwgPSB0aGlzLl9jdXJyZW50RmVhdHVyZXNUb3RhbF9JbnRlcm5hbC5tYXAodmFsdWUgPT4gdmFsdWUubWFwKHZhbHVlID0+IHZhbHVlKSk7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR0aGlzLl9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWwgPSBbIF07XG5cdFx0XHR0aGlzLl9jdXJyZW50RmVhdHVyZXNUb3RhbF9JbnRlcm5hbCA9IFsgXTtcblxuXHRcdFx0LyogQ3JlYXRlcyB0aGUgaW50ZXJuYWwgYXJyYXlzIHRoYXQgYXJlIGdvaW5nIHRvIGJlIHBhc3NlZCBpbiB0aGUgdGVtcGxhdGU7IFxuXHRcdFx0YF9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWxgIGFuZCBgX2N1cnJlbnRGZWF0dXJlc1RvdGFsX0ludGVybmFsYCBhcnJheXMuIFxuXHRcdFx0VGhlIGBfY3VycmVudEZlYXR1cmVzX0ludGVybmFsYCBhcnJheSByZWZlcmVuY2VzIGFuIGVsZW1lbnQgaW4gXG5cdFx0XHR0aGUgYF9jdXJyZW50RmVhdHVyZXNUb3RhbF9JbnRlcm5hbGAgYXJyYXkuIFRoaXMgZWxlbWVudCByZXByZXNlbnRzIHRoZSBmZWF0dXJlcyBcblx0XHRcdG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBpbiB0aGUgYF9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWxgIGFycmF5LiAqL1xuXHRcdFx0dGhpcy5fY3JlYXRlc0ludGVybmFsQXJyYXlzKHRoaXMuX2N1cnJlbnRQcm9kdWN0cywgdGhpcy5fY3VycmVudFByb2R1Y3RzX0ludGVybmFsLCB0aGlzLl9jdXJyZW50RmVhdHVyZXNUb3RhbF9JbnRlcm5hbCk7XG5cdFx0fVxuXHRcdHRoaXMuX2N1cnJlbnRGZWF0dXJlc19JbnRlcm5hbCA9IFsgXTtcblxuXHRcdC8qIFVwZGF0ZXMgdGhlIGZpZWxkcyB3aGV0aGVyIHRoZXJlIGlzIGEgc2VsZWN0ZWQgY3VycmVudCBwcm9kdWN0LiAqL1xuXHRcdGlmICh0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfQ1cgIT0gdGhpcy5yZW1vdmVDaGFydF9Qb3NGbGFnKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfQ1cgPCB0aGlzLl9jdXJyZW50UHJvZHVjdHMubGVuZ3RoKVxuXHRcdFx0e1xuXHRcdFx0XHQvKiBVcGRhdGVzIHRoZSBmaWVsZHMgd2hldGhlciB0aGUgbmV3IGBfY3VycmVudFByb2R1Y3RzYCBhcnJheSBoYXMgdGhlIGVub3VnaCBsZW5ndGguICovXG5cblx0XHRcdFx0LyogVGhlIGBfc2VsZWN0ZWRQcm9kdWN0UG9zX0NXYCB2YWx1ZSBpcyBhbHJlYWR5IGNvcnJlY3QuICovXG5cdFx0XHRcdHRoaXMuX2N1cnJlbnRGZWF0dXJlc19JbnRlcm5hbCA9IHRoaXMuX2N1cnJlbnRGZWF0dXJlc1RvdGFsX0ludGVybmFsW3RoaXMuX3NlbGVjdGVkUHJvZHVjdFBvc19DV107XG5cdFx0XHRcdHRoaXMuX3NldF9hY3RpdmVFbnRyaWVzX1BfQ1coZmFsc2UpO1xuXHRcdFx0XHR0aGlzLl9jaGFydFRpdGxlX0ZfQ1cgPSB0aGlzLl9jaGFydFRpdGxlX0YgXG5cdFx0XHRcdFx0KyAoKHRoaXMuX2NoYXJ0VGl0bGVfRi5sZW5ndGggPT0gMCkgPyAnJyA6ICcgJykgXG5cdFx0XHRcdFx0KyBg4oCcJHsgdGhpcy5fY3VycmVudFByb2R1Y3RzX0ludGVybmFsW3RoaXMuX3NlbGVjdGVkUHJvZHVjdFBvc19DV10ubmFtZSB94oCdYDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0LyogUmVtb3ZlcyB0aGUgc2VsZWN0ZWQgY3VycmVudCBwcm9kdWN0IGJlY2F1c2UgdGhlIGBfY3VycmVudFByb2R1Y3RzYCBhcnJheSBoYXMgbm90IHRoZSBlbm91Z2ggbGVuZ3RoLiAqL1xuXG5cdFx0XHRcdHRoaXMuX3NlbGVjdGVkUHJvZHVjdFBvc19DVyA9IHRoaXMucmVtb3ZlQ2hhcnRfUG9zRmxhZztcblx0XHRcdFx0LyogVGhlIGBfY3VycmVudEZlYXR1cmVzX0ludGVybmFsYCBhcnJheSBpcyBhbHJlYWR5IGNvcnJlY3QgKGFuIGVtcHR5IGFycmF5KS4gKi9cblx0XHRcdFx0dGhpcy5fc2V0X2FjdGl2ZUVudHJpZXNfUF9DVyh0cnVlKTtcblx0XHRcdFx0dGhpcy5fY2hhcnRUaXRsZV9GX0NXID0gdGhpcy5fY2hhcnRUaXRsZV9GO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qIFVwZGF0ZXMgdGhlIGZpZWxkcyB3aGV0aGVyIHRoZSBzZWxlY3RlZCB0YWIgaXMgdGhlIGN1cnJlbnQgd29ya3MuICovXG5cdFx0aWYgKHRoaXMuX3NlbGVjdGVkVGFiUG9zID09IDApXG5cdFx0e1xuXHRcdFx0dGhpcy5fc2V0RGF0YV9DVygpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHByb2R1Y3RzIGFycmF5IGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuIFxuXHQgKiBJdCBpcyBjcmVhdGVkIGZyb20gdGhlIGBjdXJyZW50UHJvZHVjdHNgIGFycmF5LiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0cHVibGljIGdldCBjdXJyZW50UHJvZHVjdHNfSW50ZXJuYWwoKTogQ2hhcnRCYXJbXVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRQcm9kdWN0c19JbnRlcm5hbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGZlYXR1cmVzIGFycmF5IG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiBcblx0ICogSXQgaXMgY3JlYXRlZCBmcm9tIHRoZSBgY3VycmVudFByb2R1Y3RzYCBhcnJheS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHB1YmxpYyBnZXQgY3VycmVudEZlYXR1cmVzX0ludGVybmFsKCk6IENoYXJ0QmFyW11cblx0e1xuXHRcdHJldHVybiB0aGlzLl9jdXJyZW50RmVhdHVyZXNfSW50ZXJuYWw7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgZnV0dXJlIHByb2R1Y3RzIGFycmF5IGludHJvZHVjZWQgYnkgdGhlIHVzZXIuIFxuXHQgKiBGcm9tIHRoaXMgYXJyYXkgaXMgY3JlYXRlZCB0aGUgYGZ1dHVyZVByb2R1Y3RzX0ludGVybmFsYCBhbmQgYGZ1dHVyZUZlYXR1cmVzX0ludGVybmFsYCBhcnJheXMuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYFtdYC4gXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgZ2V0IGZ1dHVyZVByb2R1Y3RzKCk6IFByb2R1Y3RbXVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2Z1dHVyZVByb2R1Y3RzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGlucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIGZ1dHVyZSBwcm9kdWN0cyBhcnJheS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgZnV0dXJlIHByb2R1Y3RzIGFycmF5IHRvIHNldC4gXG5cdCAqL1xuXHRwdWJsaWMgc2V0IGZ1dHVyZVByb2R1Y3RzKHZhbHVlOiBQcm9kdWN0W10pXG5cdHtcblx0XHQvLyBjb25zb2xlLmxvZygnZnV0dXJlUHJvZHVjdHM6ICcsIHZhbHVlKTtcblxuXHRcdC8qIFVwZGF0ZXMgdGhlIGZ1dHVyZSBwcm9kdWN0cy9mZWF0dXJlcyBhcnJheXMuICovXG5cdFx0dGhpcy5fZnV0dXJlUHJvZHVjdHMgPSB2YWx1ZSB8fCBbIF07XG5cdFx0aWYgKHRoaXMuX2lzVXNpbmdUcmlja19SZXBhaW50Q2hhcnQpXG5cdFx0e1xuXHRcdFx0dGhpcy5faXNVc2luZ1RyaWNrX1JlcGFpbnRDaGFydCA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLl9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbCA9IHRoaXMuX2Z1dHVyZVByb2R1Y3RzX0ludGVybmFsLm1hcCh2YWx1ZSA9PiB2YWx1ZSk7XG5cdFx0XHR0aGlzLl9mdXR1cmVGZWF0dXJlc1RvdGFsX0ludGVybmFsID0gdGhpcy5fZnV0dXJlRmVhdHVyZXNUb3RhbF9JbnRlcm5hbC5tYXAodmFsdWUgPT4gdmFsdWUubWFwKHZhbHVlID0+IHZhbHVlKSk7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR0aGlzLl9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbCA9IFsgXTtcblx0XHRcdHRoaXMuX2Z1dHVyZUZlYXR1cmVzVG90YWxfSW50ZXJuYWwgPSBbIF07XG5cblx0XHRcdC8qIENyZWF0ZXMgdGhlIGludGVybmFsIGFycmF5cyB0aGF0IGFyZSBnb2luZyB0byBiZSBwYXNzZWQgaW4gdGhlIHRlbXBsYXRlOyBcblx0XHRcdGBfZnV0dXJlUHJvZHVjdHNfSW50ZXJuYWxgIGFuZCBgX2Z1dHVyZUZlYXR1cmVzVG90YWxfSW50ZXJuYWxgIGFycmF5cy4gXG5cdFx0XHRUaGUgYF9mdXR1cmVGZWF0dXJlc19JbnRlcm5hbGAgYXJyYXkgcmVmZXJlbmNlcyBhbiBlbGVtZW50IGluIFxuXHRcdFx0dGhlIGBfZnV0dXJlRmVhdHVyZXNUb3RhbF9JbnRlcm5hbGAgYXJyYXkuIFRoaXMgZWxlbWVudCByZXByZXNlbnRzIHRoZSBmZWF0dXJlcyBcblx0XHRcdG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBpbiB0aGUgYF9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbGAgYXJyYXkuICovXG5cdFx0XHR0aGlzLl9jcmVhdGVzSW50ZXJuYWxBcnJheXModGhpcy5fZnV0dXJlUHJvZHVjdHMsIHRoaXMuX2Z1dHVyZVByb2R1Y3RzX0ludGVybmFsLCB0aGlzLl9mdXR1cmVGZWF0dXJlc1RvdGFsX0ludGVybmFsKTtcblx0XHR9XG5cdFx0dGhpcy5fZnV0dXJlRmVhdHVyZXNfSW50ZXJuYWwgPSBbIF07XG5cblx0XHQvKiBVcGRhdGVzIHRoZSBmaWVsZHMgd2hldGhlciB0aGVyZSBpcyBhIHNlbGVjdGVkIGZ1dHVyZSBwcm9kdWN0LiAqL1xuXHRcdGlmICh0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfRlcgIT0gdGhpcy5yZW1vdmVDaGFydF9Qb3NGbGFnKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfRlcgPCB0aGlzLl9mdXR1cmVQcm9kdWN0cy5sZW5ndGgpXG5cdFx0XHR7XG5cdFx0XHRcdC8qIFVwZGF0ZXMgdGhlIGZpZWxkcyB3aGV0aGVyIHRoZSBuZXcgYF9mdXR1cmVQcm9kdWN0c2AgYXJyYXkgaGFzIHRoZSBlbm91Z2ggbGVuZ3RoLiAqL1xuXG5cdFx0XHRcdC8qIFRoZSBgX3NlbGVjdGVkUHJvZHVjdFBvc19GV2AgdmFsdWUgaXMgYWxyZWFkeSBjb3JyZWN0LiAqL1xuXHRcdFx0XHR0aGlzLl9mdXR1cmVGZWF0dXJlc19JbnRlcm5hbCA9IHRoaXMuX2Z1dHVyZUZlYXR1cmVzVG90YWxfSW50ZXJuYWxbdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0ZXXTtcblx0XHRcdFx0dGhpcy5fc2V0X2FjdGl2ZUVudHJpZXNfUF9GVyhmYWxzZSk7XG5cdFx0XHRcdHRoaXMuX2NoYXJ0VGl0bGVfRl9GVyA9IHRoaXMuX2NoYXJ0VGl0bGVfRiBcblx0XHRcdFx0XHQrICgodGhpcy5fY2hhcnRUaXRsZV9GLmxlbmd0aCA9PSAwKSA/ICcnIDogJyAnKSBcblx0XHRcdFx0XHQrIGDigJwkeyB0aGlzLl9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbFt0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfRlddLm5hbWUgfeKAnWA7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8qIFJlbW92ZXMgdGhlIHNlbGVjdGVkIGZ1dHVyZSBwcm9kdWN0IGJlY2F1c2UgdGhlIGBfZnV0dXJlUHJvZHVjdHNgIGFycmF5IGhhcyBub3QgdGhlIGVub3VnaCBsZW5ndGguICovXG5cblx0XHRcdFx0dGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0ZXID0gdGhpcy5yZW1vdmVDaGFydF9Qb3NGbGFnO1xuXHRcdFx0XHQvKiBUaGUgYF9mdXR1cmVGZWF0dXJlc19JbnRlcm5hbGAgYXJyYXkgaXMgYWxyZWFkeSBjb3JyZWN0IChhbiBlbXB0eSBhcnJheSkuICovXG5cdFx0XHRcdHRoaXMuX3NldF9hY3RpdmVFbnRyaWVzX1BfRlcodHJ1ZSk7XG5cdFx0XHRcdHRoaXMuX2NoYXJ0VGl0bGVfRl9GVyA9IHRoaXMuX2NoYXJ0VGl0bGVfRjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKiBVcGRhdGVzIHRoZSBmaWVsZHMgd2hldGhlciB0aGUgc2VsZWN0ZWQgdGFiIGlzIHRoZSBmdXR1cmUgd29ya3MuICovXG5cdFx0aWYgKHRoaXMuX3NlbGVjdGVkVGFiUG9zID09IDEpXG5cdFx0e1xuXHRcdFx0dGhpcy5fc2V0RGF0YV9GVygpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmdXR1cmUgcHJvZHVjdHMgYXJyYXkgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gXG5cdCAqIEl0IGlzIGNyZWF0ZWQgZnJvbSB0aGUgYGZ1dHVyZVByb2R1Y3RzYCBhcnJheS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHB1YmxpYyBnZXQgZnV0dXJlUHJvZHVjdHNfSW50ZXJuYWwoKTogQ2hhcnRCYXJbXVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2Z1dHVyZVByb2R1Y3RzX0ludGVybmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZ1dHVyZSBmZWF0dXJlcyBhcnJheSBvZiBhIHNlbGVjdGVkIHByb2R1Y3QgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gXG5cdCAqIEl0IGlzIGNyZWF0ZWQgZnJvbSB0aGUgYGZ1dHVyZVByb2R1Y3RzYCBhcnJheS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHB1YmxpYyBnZXQgZnV0dXJlRmVhdHVyZXNfSW50ZXJuYWwoKTogQ2hhcnRCYXJbXVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2Z1dHVyZUZlYXR1cmVzX0ludGVybmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgcHJvZHVjdCBlbGVtZW50cyBhcnJheSB0byBoaWdobGlnaHQgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gXG5cdCAqIEl0IGlzIG1vZGlmaWVkIGR5bmFtaWNhbGx5LiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0cHVibGljIGdldCBhY3RpdmVFbnRyaWVzX1BfQ1coKTogRW50cnlFbGVtZW50W11cblx0e1xuXHRcdHJldHVybiB0aGlzLl9hY3RpdmVFbnRyaWVzX1BfQ1c7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgY3VycmVudCBwcm9kdWN0IGVsZW1lbnRzIGFycmF5IHRvIGhpZ2hsaWdodCBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiBcblx0ICogQHBhcmFtIHNldEVtcHR5IElmIGl0IGlzIHRydWUsIHRoZW4gc2V0cyB0aGUgYF9hY3RpdmVFbnRyaWVzX1BfQ1dgIGFycmF5IHRvIGVtcHR5LiBcblx0ICovXG5cdHByaXZhdGUgX3NldF9hY3RpdmVFbnRyaWVzX1BfQ1coc2V0RW1wdHk6IGJvb2xlYW4pOiB2b2lkXG5cdHtcblx0XHQvLyBjb25zb2xlLmxvZygnQ2FsbGVkIFwiX3NldF9hY3RpdmVFbnRyaWVzX1BfQ1dcIjogc2V0RW1wdHkgPSAnLCBzZXRFbXB0eSk7XG5cblx0XHRpZiAoc2V0RW1wdHkpXG5cdFx0e1xuXHRcdFx0dGhpcy5fYWN0aXZlRW50cmllc19QX0NXID0gWyBdO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0bGV0IHNlbGVjdGVkUHJvZHVjdDogQ2hhcnRCYXIgPSB0aGlzLl9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWxbdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0NXXTtcblxuXHRcdFx0dGhpcy5fYWN0aXZlRW50cmllc19QX0NXID0gW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0J25hbWUnOiBzZWxlY3RlZFByb2R1Y3Quc2VyaWVzWzBdLm5hbWUsXG5cdFx0XHRcdFx0J3ZhbHVlJzogc2VsZWN0ZWRQcm9kdWN0LnNlcmllc1swXS52YWx1ZSxcblx0XHRcdFx0XHQnbGFiZWwnOiBzZWxlY3RlZFByb2R1Y3Quc2VyaWVzWzBdLm5hbWUsXG5cdFx0XHRcdFx0J3Nlcmllcyc6IHNlbGVjdGVkUHJvZHVjdC5uYW1lXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQnbmFtZSc6IHNlbGVjdGVkUHJvZHVjdC5zZXJpZXNbMV0ubmFtZSxcblx0XHRcdFx0XHQndmFsdWUnOiBzZWxlY3RlZFByb2R1Y3Quc2VyaWVzWzFdLnZhbHVlLFxuXHRcdFx0XHRcdCdsYWJlbCc6IHNlbGVjdGVkUHJvZHVjdC5zZXJpZXNbMV0ubmFtZSxcblx0XHRcdFx0XHQnc2VyaWVzJzogc2VsZWN0ZWRQcm9kdWN0Lm5hbWVcblx0XHRcdFx0fVxuXHRcdFx0XTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnV0dXJlIHByb2R1Y3QgZWxlbWVudHMgYXJyYXkgdG8gaGlnaGxpZ2h0IGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuIFxuXHQgKiBJdCBpcyBtb2RpZmllZCBkeW5hbWljYWxseS4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHB1YmxpYyBnZXQgYWN0aXZlRW50cmllc19QX0ZXKCk6IEVudHJ5RWxlbWVudFtdXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fYWN0aXZlRW50cmllc19QX0ZXO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGZ1dHVyZSBwcm9kdWN0IGVsZW1lbnRzIGFycmF5IHRvIGhpZ2hsaWdodCBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiBcblx0ICogQHBhcmFtIHNldEVtcHR5IElmIGl0IGlzIHRydWUsIHRoZW4gc2V0cyB0aGUgYF9hY3RpdmVFbnRyaWVzX1BfRldgIGFycmF5IHRvIGVtcHR5LiBcblx0ICovXG5cdHByaXZhdGUgX3NldF9hY3RpdmVFbnRyaWVzX1BfRlcoc2V0RW1wdHk6IGJvb2xlYW4pOiB2b2lkXG5cdHtcblx0XHQvLyBjb25zb2xlLmxvZygnQ2FsbGVkIFwiX3NldF9hY3RpdmVFbnRyaWVzX1BfRldcIjogc2V0RW1wdHkgPSAnLCBzZXRFbXB0eSk7XG5cblx0XHRpZiAoc2V0RW1wdHkpXG5cdFx0e1xuXHRcdFx0dGhpcy5fYWN0aXZlRW50cmllc19QX0ZXID0gWyBdO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0bGV0IHNlbGVjdGVkUHJvZHVjdDogQ2hhcnRCYXIgPSB0aGlzLl9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbFt0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfRlddO1xuXG5cdFx0XHR0aGlzLl9hY3RpdmVFbnRyaWVzX1BfRlcgPSBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQnbmFtZSc6IHNlbGVjdGVkUHJvZHVjdC5zZXJpZXNbMF0ubmFtZSxcblx0XHRcdFx0XHQndmFsdWUnOiBzZWxlY3RlZFByb2R1Y3Quc2VyaWVzWzBdLnZhbHVlLFxuXHRcdFx0XHRcdCdsYWJlbCc6IHNlbGVjdGVkUHJvZHVjdC5zZXJpZXNbMF0ubmFtZSxcblx0XHRcdFx0XHQnc2VyaWVzJzogc2VsZWN0ZWRQcm9kdWN0Lm5hbWVcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdCduYW1lJzogc2VsZWN0ZWRQcm9kdWN0LnNlcmllc1sxXS5uYW1lLFxuXHRcdFx0XHRcdCd2YWx1ZSc6IHNlbGVjdGVkUHJvZHVjdC5zZXJpZXNbMV0udmFsdWUsXG5cdFx0XHRcdFx0J2xhYmVsJzogc2VsZWN0ZWRQcm9kdWN0LnNlcmllc1sxXS5uYW1lLFxuXHRcdFx0XHRcdCdzZXJpZXMnOiBzZWxlY3RlZFByb2R1Y3QubmFtZVxuXHRcdFx0XHR9XG5cdFx0XHRdO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnB1dCBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSBjaGFydCdzIGxlZ2VuZCBwb3NpdGlvbi4gSXRzIHZhbHVlIGlzIGAncmlnaHQnYCBvciBgJ2JlbG93J2AuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdyaWdodCdgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBnZXQgbGVnZW5kUG9zaXRpb24oKTogc3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fbGVnZW5kUG9zaXRpb247XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyBsZWdlbmQgcG9zaXRpb24uIEl0cyB2YWx1ZSBpcyBgJ3JpZ2h0J2Agb3IgYCdiZWxvdydgLiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGAncmlnaHQnYC4gXG5cdCAqIEBwYXJhbSB2YWx1ZSBUaGUgbmV3IGNoYXJ0J3MgbGVnZW5kIHBvc2l0aW9uIHRvIHNldC4gXG5cdCAqL1xuXHRwdWJsaWMgc2V0IGxlZ2VuZFBvc2l0aW9uKHZhbHVlOiBzdHJpbmcpXG5cdHtcblx0XHRpZiAoKHRoaXMuX2xlZ2VuZFBvc2l0aW9uID0gdmFsdWUpID09ICdiZWxvdycpXG5cdFx0e1xuXHRcdFx0LyogU2V0cyB0aGUgZ3JpZCBoZWlnaHQuICovXG5cdFx0XHR0aGlzLl9ncmlkSGVpZ2h0ID0gdGhpcy52aWV3WzFdICsgNjA7ICAvKiBNb3JlIDYwIHRvIGluY2x1ZGUgdGhlIGxlZ2VuZCBpbiB0aGUgZ3JpZC4gKi9cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdC8qIFNldHMgdGhlIGdyaWQgaGVpZ2h0LiAqL1xuXHRcdFx0dGhpcy5fZ3JpZEhlaWdodCA9IHRoaXMudmlld1sxXTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgdGhlIGxlZ2VuZCBwb3NpdGlvbi4gXG5cdCAqIEl0IGlzIHRydWUgaWYgdGhlIGxlZ2VuZCBwb3NpdGlvbiBpcyBgJ3JpZ2h0J2A7IG90aGVyd2lzZSwgZmFsc2UgKGAnYmVsb3cnYCkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHRydWVgLiBcblx0ICovXG5cdHB1YmxpYyBnZXQgaXNMZWdlbmRSaWdodCgpOiBib29sZWFuXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMubGVnZW5kUG9zaXRpb24gPT0gJ3JpZ2h0Jyk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyBhIGJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgdGhlIGxlZ2VuZCBwb3NpdGlvbi4gXG5cdCAqIEl0IGlzIHRydWUgaWYgdGhlIGxlZ2VuZCBwb3NpdGlvbiBpcyBgJ3JpZ2h0J2A7IG90aGVyd2lzZSwgZmFsc2UgKGAnYmVsb3cnYCkuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHRydWVgLiBcblx0ICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgYm9vbGVhbiB2YWx1ZSB0byBzZXQuIFxuXHQgKi9cblx0cHVibGljIHNldCBpc0xlZ2VuZFJpZ2h0KHZhbHVlOiBib29sZWFuKVxuXHR7XG5cdFx0dGhpcy5sZWdlbmRQb3NpdGlvbiA9ICh2YWx1ZSkgPyAncmlnaHQnIDogJ2JlbG93Jztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzZWxlY3RlZCBjdXJyZW50IHByb2R1Y3QgcG9zaXRpb24uIENvbnRhaW5zIHRoZSBgcmVtb3ZlQ2hhcnRfUG9zRmxhZ2AgdmFsdWUgd2hlbiBcblx0ICogdGhlcmUgaXMgbm90IGFueSBzZWxlY3RlZCBjdXJyZW50IHByb2R1Y3QgcG9zaXRpb24uIFxuXHQgKi9cblx0cHVibGljIGdldCBzZWxlY3RlZFByb2R1Y3RQb3NfQ1coKTogbnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0NXO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHNlbGVjdGVkIGZ1dHVyZSBwcm9kdWN0IHBvc2l0aW9uLiBDb250YWlucyB0aGUgYHJlbW92ZUNoYXJ0X1Bvc0ZsYWdgIHZhbHVlIHdoZW4gXG5cdCAqIHRoZXJlIGlzIG5vdCBhbnkgc2VsZWN0ZWQgZnV0dXJlIHByb2R1Y3QgcG9zaXRpb24uIFxuXHQgKi9cblx0cHVibGljIGdldCBzZWxlY3RlZFByb2R1Y3RQb3NfRlcoKTogbnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0ZXO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGlucHV0IGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIGNoYXJ0J3MgdGl0bGUgb2YgZmVhdHVyZXMuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdMaXN0YSBkZSBjYXJhY3RlcsOtc3RpY2FzIGRlbCBwcm9kdWN0byBzZWxlY2Npb25hZG8nYC4gXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgZ2V0IGNoYXJ0VGl0bGVfRigpOiBzdHJpbmdcblx0e1xuXHRcdHJldHVybiB0aGlzLl9jaGFydFRpdGxlX0Y7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY2hhcnQncyB0aXRsZSBvZiBmZWF0dXJlcy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ0xpc3RhIGRlIGNhcmFjdGVyw61zdGljYXMgZGVsIHByb2R1Y3RvIHNlbGVjY2lvbmFkbydgLiBcblx0ICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgY2hhcnQncyB0aXRsZSBvZiBmZWF0dXJlcyB0byBzZXQuIFxuXHQgKi9cblx0cHVibGljIHNldCBjaGFydFRpdGxlX0YodmFsdWU6IHN0cmluZylcblx0e1xuXHRcdHRoaXMuX2NoYXJ0VGl0bGVfRiA9IHZhbHVlIHx8ICdMaXN0YSBkZSBjYXJhY3RlcsOtc3RpY2FzIGRlbCBwcm9kdWN0byBzZWxlY2Npb25hZG8nO1xuXG5cdFx0LyogVXBkYXRlcyBhbGwgY2hhcnQncyB0aXRsZXMgb2YgZmVhdHVyZXMuICovXG5cblx0XHR0aGlzLl9jaGFydFRpdGxlX0ZfQ1cgPSAodGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0NXID09IHRoaXMucmVtb3ZlQ2hhcnRfUG9zRmxhZykgXG5cdFx0XHQ/ICh0aGlzLl9jaGFydFRpdGxlX0YpXG5cdFx0XHQ6ICh0aGlzLl9jaGFydFRpdGxlX0YgXG5cdFx0XHRcdCsgKCh0aGlzLl9jaGFydFRpdGxlX0YubGVuZ3RoID09IDApID8gJycgOiAnICcpIFxuXHRcdFx0XHQrIGDigJwkeyB0aGlzLl9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWxbdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0NXXS5uYW1lIH3igJ1gKTtcblxuXHRcdHRoaXMuX2NoYXJ0VGl0bGVfRl9GVyA9ICh0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfRlcgPT0gdGhpcy5yZW1vdmVDaGFydF9Qb3NGbGFnKSBcblx0XHRcdD8gKHRoaXMuX2NoYXJ0VGl0bGVfRilcblx0XHRcdDogKHRoaXMuX2NoYXJ0VGl0bGVfRiBcblx0XHRcdFx0KyAoKHRoaXMuX2NoYXJ0VGl0bGVfRi5sZW5ndGggPT0gMCkgPyAnJyA6ICcgJykgXG5cdFx0XHRcdCsgYOKAnCR7IHRoaXMuX2Z1dHVyZVByb2R1Y3RzX0ludGVybmFsW3RoaXMuX3NlbGVjdGVkUHJvZHVjdFBvc19GV10ubmFtZSB94oCdYCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2hhcnQncyB0aXRsZSBvZiB3b3JraW5nIGN1cnJlbnQgZmVhdHVyZXMuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCdMaXN0YSBkZSBjYXJhY3RlcsOtc3RpY2FzIGRlbCBwcm9kdWN0byBzZWxlY2Npb25hZG8nYC4gXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IGNoYXJ0VGl0bGVfRl9DVygpOiBzdHJpbmdcblx0e1xuXHRcdHJldHVybiB0aGlzLl9jaGFydFRpdGxlX0ZfQ1c7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2hhcnQncyB0aXRsZSBvZiB3b3JraW5nIGZ1dHVyZSBmZWF0dXJlcy4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJ0xpc3RhIGRlIGNhcmFjdGVyw61zdGljYXMgZGVsIHByb2R1Y3RvIHNlbGVjY2lvbmFkbydgLiBcblx0ICovXG5cdHB1YmxpYyBnZXQgY2hhcnRUaXRsZV9GX0ZXKCk6IHN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2NoYXJ0VGl0bGVfRl9GVztcblx0fVxuXG5cdHB1YmxpYyBvblNlbGVjdFRhYihuZXdQb3M6IG51bWJlcik6IHZvaWRcblx0e1xuXHRcdC8vIGNvbnNvbGUubG9nKCdvblNlbGVjdFRhYiBwb3M6ICcsIG5ld1Bvcyk7XG5cblx0XHQvKiBVc2VzIHRoaXMgdHJpY2sgdG8gb2JsaWdhdGUgcmVwYWludGluZyB0aGUgY2hhcnQuICovXG5cdFx0dGhpcy5faXNVc2luZ1RyaWNrX1JlcGFpbnRDaGFydCA9IHRydWU7XG5cblx0XHRpZiAoKHRoaXMuX3NlbGVjdGVkVGFiUG9zID0gbmV3UG9zKSA9PSAwKVxuXHRcdHtcblx0XHRcdHRoaXMuY3VycmVudFByb2R1Y3RzID0gdGhpcy5jdXJyZW50UHJvZHVjdHMubWFwKHZhbHVlID0+IHZhbHVlKTtcblxuXHRcdFx0Ly8gdGhpcy5fc2V0RGF0YV9DVygpOyAgLyogQmV0dGVyIHBlcmZvcm1hbmNlOiBVc2UgdGhpcyBvcHRpb24gaWYgeW91IGRvIG5vdCB1c2UgdGhlIGR5bmFtaWMgbGVnZW5kIHBvc2l0aW9uIG9yIG5vdCByZXNpemUgdGhlIG5hdmlnYXRvci4gKi9cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHRoaXMuZnV0dXJlUHJvZHVjdHMgPSB0aGlzLmZ1dHVyZVByb2R1Y3RzLm1hcCh2YWx1ZSA9PiB2YWx1ZSk7XG5cblx0XHRcdC8vIHRoaXMuX3NldERhdGFfRlcoKTsgIC8qIEJldHRlciBwZXJmb3JtYW5jZTogVXNlIHRoaXMgb3B0aW9uIGlmIHlvdSBkbyBub3QgdXNlIHRoZSBkeW5hbWljIGxlZ2VuZCBwb3NpdGlvbiBvciBub3QgcmVzaXplIHRoZSBuYXZpZ2F0b3IuICovXG5cdFx0fVxuXHR9XG5cblx0cHVibGljIG9uU2VsZWN0KGV2ZW50SW5mbzogYW55KTogdm9pZFxuXHR7XG5cdFx0Ly8gY29uc29sZS5sb2coJ29uU2VsZWN0OiAnLCBldmVudEluZm8pO1xuXG5cdFx0aWYgKGlzT2JqZWN0KGV2ZW50SW5mbykpICAvKiBJdCBoYXMgbm90IGNsaWNrZWQgYSBsZWdlbmQgaXRlbS4gKi9cblx0XHR7XG5cdFx0XHRsZXQgdGVtcFBvczogbnVtYmVyO1xuXHRcdFx0Y29uc3QgbGVuOiBudW1iZXIgPSB0aGlzLl9wcm9kdWN0c19JbnRlcm5hbC5sZW5ndGg7XG5cdFx0XHRjb25zdCBwb3NBc1N0cmluZzogc3RyaW5nID0gZXZlbnRJbmZvLnNlcmllcztcblxuXHRcdFx0LyogR2V0cyB0aGUgbmV3IHNlbGVjdGVkIHBvc2l0aW9uLiAqL1xuXHRcdFx0Zm9yKHRlbXBQb3MgPSAwOyB0ZW1wUG9zIDwgbGVuOyB0ZW1wUG9zKyspXG5cdFx0XHR7XG5cdFx0XHRcdGlmICh0aGlzLl9wcm9kdWN0c19JbnRlcm5hbFt0ZW1wUG9zXS5uYW1lID09IHBvc0FzU3RyaW5nKSBicmVhaztcblx0XHRcdH1cblxuXHRcdFx0LyogVXBkYXRlcyB0aGUgYF9zZWxlY3RlZFByb2R1Y3RQb3NfQ1dgL2Bfc2VsZWN0ZWRQcm9kdWN0UG9zX0ZXYC4gSWYgdGhlIG5ldyBzZWxlY3RlZCBcblx0XHRcdCAqIHBvc2l0aW9uIGVxdWFscyB0aGUgY3VycmVudCBzZWxlY3RlZCBwb3NpdGlvbiwgdGhlbiB0aGUgY2hhcnQgZm9yIGRpc3BsYXlpbmcgXG5cdFx0XHQgKiB0aGUgZmVhdHVyZXMgbGlzdCBvZiB0aGUgc2VsZWN0ZWQgcHJvZHVjdCB3aWxsIGJlIHJlbW92ZWQuICovXG5cdFx0XHR0aGlzLl91cGRhdGVQcm9kdWN0UG9zKHRlbXBQb3MpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBvbkFjdGl2YXRlKGV2ZW50SW5mbzogYW55KTogdm9pZFxuXHR7XG5cdFx0Ly8gY29uc29sZS5sb2coJ29uQWN0aXZhdGU6ICcsIGV2ZW50SW5mbyk7XG5cdH1cblxuXHRwdWJsaWMgb25EZWFjdGl2YXRlKGV2ZW50SW5mbzogYW55KTogdm9pZFxuXHR7XG5cdFx0Ly8gY29uc29sZS5sb2coJ29uRGVhY3RpdmF0ZTogJywgZXZlbnRJbmZvLCAnLCBfYWN0aXZlRW50cmllc19QX0NXID0gJywgdGhpcy5fYWN0aXZlRW50cmllc19QX0NXLCAnLCBfYWN0aXZlRW50cmllc19QX0ZXID0gJywgdGhpcy5fYWN0aXZlRW50cmllc19QX0ZXKTtcblxuXHRcdGlmICh0aGlzLl9pc0ZlYXR1cmVzQ2hhcnRTaG93ZWQpXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuX3NlbGVjdGVkVGFiUG9zID09IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuX2FjdGl2ZUVudHJpZXNfUF9DVyA9IHRoaXMuX2FjdGl2ZUVudHJpZXNfUF9DVy5tYXAodmFsdWUgPT4gdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9hY3RpdmVFbnRyaWVzX1BfRlcgPSB0aGlzLl9hY3RpdmVFbnRyaWVzX1BfRlcubWFwKHZhbHVlID0+IHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZGF0YSBvZiBjdXJyZW50IHdvcmtzLiBcblx0ICovXG5cdHByaXZhdGUgX3NldERhdGFfQ1coKTogdm9pZFxuXHR7XG5cdFx0dGhpcy5fcHJvZHVjdHMgPSB0aGlzLl9jdXJyZW50UHJvZHVjdHM7XG5cdFx0dGhpcy5fcHJvZHVjdHNfSW50ZXJuYWwgPSB0aGlzLl9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWw7XG5cdFx0dGhpcy5fZmVhdHVyZXNUb3RhbF9JbnRlcm5hbCA9IHRoaXMuX2N1cnJlbnRGZWF0dXJlc1RvdGFsX0ludGVybmFsO1xuXHRcdHRoaXMuX2ZlYXR1cmVzX0ludGVybmFsID0gdGhpcy5fY3VycmVudEZlYXR1cmVzX0ludGVybmFsO1xuXG5cdFx0dGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zID0gdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zX0NXO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGRhdGEgb2YgZnV0dXJlIHdvcmtzLiBcblx0ICovXG5cdHByaXZhdGUgX3NldERhdGFfRlcoKTogdm9pZFxuXHR7XG5cdFx0dGhpcy5fcHJvZHVjdHMgPSB0aGlzLl9mdXR1cmVQcm9kdWN0cztcblx0XHR0aGlzLl9wcm9kdWN0c19JbnRlcm5hbCA9IHRoaXMuX2Z1dHVyZVByb2R1Y3RzX0ludGVybmFsO1xuXHRcdHRoaXMuX2ZlYXR1cmVzVG90YWxfSW50ZXJuYWwgPSB0aGlzLl9mdXR1cmVGZWF0dXJlc1RvdGFsX0ludGVybmFsO1xuXHRcdHRoaXMuX2ZlYXR1cmVzX0ludGVybmFsID0gdGhpcy5fZnV0dXJlRmVhdHVyZXNfSW50ZXJuYWw7XG5cblx0XHR0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3MgPSB0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfRlc7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBmZWF0dXJlcyBjaGFydCBpcyBzaG93ZWQ7IG90aGVyd2lzZSwgZmFsc2UuIFxuXHQgKi9cblx0cHJpdmF0ZSBnZXQgX2lzRmVhdHVyZXNDaGFydFNob3dlZCgpOiBib29sZWFuXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMuX3NlbGVjdGVkUHJvZHVjdFBvcyAhPSB0aGlzLnJlbW92ZUNoYXJ0X1Bvc0ZsYWcpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGBzZWxlY3RlZFByb2R1Y3RQb3NgLiBJZiB0aGUgbmV3IHNlbGVjdGVkIHBvc2l0aW9uIGVxdWFscyB0aGUgY3VycmVudCBcblx0ICogc2VsZWN0ZWQgcG9zaXRpb24sIHRoZW4gdGhlIGNoYXJ0IGZvciBkaXNwbGF5aW5nIHRoZSBmZWF0dXJlcyBsaXN0IG9mIHRoZSBzZWxlY3RlZCBwcm9kdWN0IFxuXHQgKiB3aWxsIGJlIHJlbW92ZWQuIFxuXHQgKiBAcGFyYW0gbmV3U2VsZWN0ZWRQb3NpdGlvbiBUaGUgbmV3IHNlbGVjdGVkIHBvc2l0aW9uLiBcblx0ICovXG5cdHByaXZhdGUgX3VwZGF0ZVByb2R1Y3RQb3MobmV3U2VsZWN0ZWRQb3NpdGlvbjogbnVtYmVyKTogdm9pZFxuXHR7XG5cdFx0LyogVXBkYXRlcyB0aGUgYHNlbGVjdGVkUHJvZHVjdFBvc2AuIElmIHRoZSBuZXcgc2VsZWN0ZWQgcG9zaXRpb24gZXF1YWxzIHRoZSBjdXJyZW50IFxuXHRcdCAqIHNlbGVjdGVkIHBvc2l0aW9uLCB0aGVuIHRoZSBjaGFydCBmb3IgZGlzcGxheWluZyB0aGUgZmVhdHVyZXMgbGlzdCBvZiB0aGUgc2VsZWN0ZWQgcHJvZHVjdCBcblx0XHQgKiB3aWxsIGJlIHJlbW92ZWQuICovXG5cdFx0aWYgKG5ld1NlbGVjdGVkUG9zaXRpb24gPT0gdGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLl9zZWxlY3RlZFRhYlBvcyA9PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3MgPSB0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfQ1cgPSB0aGlzLnJlbW92ZUNoYXJ0X1Bvc0ZsYWc7XG5cdFx0XHRcdHRoaXMuX2ZlYXR1cmVzX0ludGVybmFsID0gdGhpcy5fY3VycmVudEZlYXR1cmVzX0ludGVybmFsID0gWyBdO1xuXHRcdFx0XHR0aGlzLl9zZXRfYWN0aXZlRW50cmllc19QX0NXKHRydWUpO1xuXHRcdFx0XHR0aGlzLl9jaGFydFRpdGxlX0ZfQ1cgPSB0aGlzLl9jaGFydFRpdGxlX0Y7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdGVkUHJvZHVjdFBvcyA9IHRoaXMuX3NlbGVjdGVkUHJvZHVjdFBvc19GVyA9IHRoaXMucmVtb3ZlQ2hhcnRfUG9zRmxhZztcblx0XHRcdFx0dGhpcy5fZmVhdHVyZXNfSW50ZXJuYWwgPSB0aGlzLl9mdXR1cmVGZWF0dXJlc19JbnRlcm5hbCA9IFsgXTtcblx0XHRcdFx0dGhpcy5fc2V0X2FjdGl2ZUVudHJpZXNfUF9GVyh0cnVlKTtcblx0XHRcdFx0dGhpcy5fY2hhcnRUaXRsZV9GX0ZXID0gdGhpcy5fY2hhcnRUaXRsZV9GO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuX3NlbGVjdGVkVGFiUG9zID09IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdGVkUHJvZHVjdFBvcyA9IHRoaXMuX3NlbGVjdGVkUHJvZHVjdFBvc19DVyA9IG5ld1NlbGVjdGVkUG9zaXRpb247XG5cdFx0XHRcdHRoaXMuX2ZlYXR1cmVzX0ludGVybmFsID0gdGhpcy5fY3VycmVudEZlYXR1cmVzX0ludGVybmFsID0gdGhpcy5fZmVhdHVyZXNUb3RhbF9JbnRlcm5hbFtuZXdTZWxlY3RlZFBvc2l0aW9uXTtcblx0XHRcdFx0dGhpcy5fc2V0X2FjdGl2ZUVudHJpZXNfUF9DVyhmYWxzZSk7XG5cdFx0XHRcdHRoaXMuX2NoYXJ0VGl0bGVfRl9DVyA9IHRoaXMuX2NoYXJ0VGl0bGVfRiBcblx0XHRcdFx0XHQrICgodGhpcy5fY2hhcnRUaXRsZV9GLmxlbmd0aCA9PSAwKSA/ICcnIDogJyAnKSBcblx0XHRcdFx0XHQrIGDigJwkeyB0aGlzLl9wcm9kdWN0c19JbnRlcm5hbFtuZXdTZWxlY3RlZFBvc2l0aW9uXS5uYW1lIH3igJ1gO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3MgPSB0aGlzLl9zZWxlY3RlZFByb2R1Y3RQb3NfRlcgPSBuZXdTZWxlY3RlZFBvc2l0aW9uO1xuXHRcdFx0XHR0aGlzLl9mZWF0dXJlc19JbnRlcm5hbCA9IHRoaXMuX2Z1dHVyZUZlYXR1cmVzX0ludGVybmFsID0gdGhpcy5fZmVhdHVyZXNUb3RhbF9JbnRlcm5hbFtuZXdTZWxlY3RlZFBvc2l0aW9uXTtcblx0XHRcdFx0dGhpcy5fc2V0X2FjdGl2ZUVudHJpZXNfUF9GVyhmYWxzZSk7XG5cdFx0XHRcdHRoaXMuX2NoYXJ0VGl0bGVfRl9GVyA9IHRoaXMuX2NoYXJ0VGl0bGVfRiBcblx0XHRcdFx0XHQrICgodGhpcy5fY2hhcnRUaXRsZV9GLmxlbmd0aCA9PSAwKSA/ICcnIDogJyAnKSBcblx0XHRcdFx0XHQrIGDigJwkeyB0aGlzLl9wcm9kdWN0c19JbnRlcm5hbFtuZXdTZWxlY3RlZFBvc2l0aW9uXS5uYW1lIH3igJ1gO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBpbnRlcm5hbCBhcnJheXMgdGhhdCBhcmUgZ29pbmcgdG8gYmUgcGFzc2VkIGluIHRoZSB0ZW1wbGF0ZSBcblx0ICogZm9yIHRoZSBjdXJyZW50L2Z1dHVyZSBwcm9kdWN0cy9mZWF0dXJlcyBhY2NvcmRpbmdseS4gXG5cdCAqIEBwYXJhbSBwcm9kdWN0cyBUaGUgY3VycmVudC9mdXR1cmUgcHJvZHVjdHMgYXJyYXkgaW50cm9kdWNlZCBieSB0aGUgdXNlci4gXG5cdCAqIEBwYXJhbSBwcm9kdWN0c19JbnRlcm5hbCBUaGUgY3VycmVudC9mdXR1cmUgcHJvZHVjdHMgYXJyYXkgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gXG5cdCAqIEBwYXJhbSBmZWF0dXJlc1RvdGFsX0ludGVybmFsIFRoZSBhcnJheSB0aGF0IGNvbnRhaW5zIGFsbCBjdXJyZW50L2Z1dHVyZSBmZWF0dXJlcyBhcnJheXMgdGhhdCBjYW4gYmUgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gXG5cdCAqL1xuXHRwcml2YXRlIF9jcmVhdGVzSW50ZXJuYWxBcnJheXMocHJvZHVjdHM6IFByb2R1Y3RbXSwgcHJvZHVjdHNfSW50ZXJuYWw6IENoYXJ0QmFyW10sIGZlYXR1cmVzVG90YWxfSW50ZXJuYWw6IENoYXJ0QmFyW11bXSk6IHZvaWRcblx0e1xuXHRcdC8qIENyZWF0ZXMgdGhlIGludGVybmFsIGFycmF5cyB0aGF0IGFyZSBnb2luZyB0byBiZSBwYXNzZWQgaW4gdGhlIHRlbXBsYXRlOyBcblx0XHRgX2N1cnJlbnRQcm9kdWN0c19JbnRlcm5hbGAvYF9mdXR1cmVQcm9kdWN0c19JbnRlcm5hbGAgYW5kIGBfY3VycmVudEZlYXR1cmVzVG90YWxfSW50ZXJuYWxgL2BfZnV0dXJlRmVhdHVyZXNUb3RhbF9JbnRlcm5hbGAgYXJyYXlzLiBcblx0XHRUaGUgYF9jdXJyZW50RmVhdHVyZXNfSW50ZXJuYWxgL2BfZnV0dXJlRmVhdHVyZXNfSW50ZXJuYWxgIGFycmF5IHJlZmVyZW5jZXMgYW4gZWxlbWVudCBpbiBcblx0XHR0aGUgYF9jdXJyZW50RmVhdHVyZXNUb3RhbF9JbnRlcm5hbGAvYF9mdXR1cmVGZWF0dXJlc1RvdGFsX0ludGVybmFsYCBhcnJheS4gVGhpcyBlbGVtZW50IHJlcHJlc2VudHMgdGhlIGZlYXR1cmVzIFxuXHRcdG9mIGEgc2VsZWN0ZWQgcHJvZHVjdCBpbiB0aGUgYF9jdXJyZW50UHJvZHVjdHNfSW50ZXJuYWxgL2BfZnV0dXJlUHJvZHVjdHNfSW50ZXJuYWxgIGFycmF5LiAqL1xuXG5cdFx0bGV0IGk6IG51bWJlciwgajogbnVtYmVyO1xuXHRcdGNvbnN0IGxlbl9pOiBudW1iZXIgPSBwcm9kdWN0cy5sZW5ndGg7XG5cdFx0bGV0IGxlbl9qOiBudW1iZXI7XG5cdFx0bGV0IHRlbXBDdXJyZW50RmVhdHVyZXNfSW50ZXJuYWw6IENoYXJ0QmFyW107XG5cdFx0bGV0IHRlbXBGZWF0dXJlczogRmVhdHVyZVtdO1xuXHRcdGxldCB0ZW1wQWNoaWV2ZWQ6IG51bWJlcjtcblxuXHRcdC8qIENhbGN1bGF0ZXMgdGhlIGFjaGlldmVkIHBlcmNlbnRhZ2Ugb2YgYSBwcm9kdWN0LiAqL1xuXHRcdGxldCBhY2hpZXZlZFBlcmNlbnRhZ2VfUDogbnVtYmVyO1xuXHRcdGxldCBtYXhQZXJjZW50YWdlX0Y6IG51bWJlcjtcblx0XHRsZXQgYWNoaWV2ZWRQZXJjZW50YWdlX0Y6IG51bWJlcjtcblxuXHRcdGZvcihpID0gMDsgaSA8IGxlbl9pOyBpKyspXG5cdFx0e1xuXHRcdFx0dGVtcEN1cnJlbnRGZWF0dXJlc19JbnRlcm5hbCA9IFsgXTtcblx0XHRcdGxlbl9qID0gKCh0ZW1wRmVhdHVyZXMgPSBwcm9kdWN0c1tpXS5mZWF0dXJlcykgPyB0ZW1wRmVhdHVyZXMubGVuZ3RoIDogMCk7XG5cdFx0XHRtYXhQZXJjZW50YWdlX0YgPSBsZW5faiAqIDEwMC4wMDtcblx0XHRcdGFjaGlldmVkUGVyY2VudGFnZV9GID0gMDtcblxuXHRcdFx0Zm9yKGogPSAwOyBqIDwgbGVuX2o7IGorKylcblx0XHRcdHtcblx0XHRcdFx0LyogQWRkcyBhbGwgYGFjaGlldmVkYCB2YWx1ZXMgb2YgdGhlIGB0ZW1wRmVhdHVyZXNgIGFycmF5LiAqL1xuXHRcdFx0XHRhY2hpZXZlZFBlcmNlbnRhZ2VfRiArPSAodGVtcEFjaGlldmVkID0gdGVtcEZlYXR1cmVzW2pdLmFjaGlldmVkKTtcblxuXHRcdFx0XHQvKiBDcmVhdGVzIHRoZSBjdXJyZW50IGZlYXR1cmVzIGFycmF5IG9mIHRoaXMgcHJvZHVjdCBkaXNwbGF5ZWQgaW4gdGhlIGNoYXJ0LiAqL1xuXHRcdFx0XHR0ZW1wQ3VycmVudEZlYXR1cmVzX0ludGVybmFsLnB1c2goe1xuXHRcdFx0XHRcdCduYW1lJzogdGVtcEZlYXR1cmVzW2pdLm5hbWUsXG5cdFx0XHRcdFx0J3Nlcmllcyc6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0J25hbWUnOiAncmVhbGl6YWRvJywgIC8vIFRPRE86IFVzZSB0aGUgYHNlcmllc05hbWVfRW5nbGlzaGAgYW5kIGBzZXJpZXNOYW1lX1NwYW5pc2hgIGNvbnN0YW50cyBkZXBlbmRpbmcgb24gdGhlIGxhbmd1YWdlIHNlbGVjdGVkLiBcblx0XHRcdFx0XHRcdFx0J3ZhbHVlJzogdGVtcEFjaGlldmVkXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQnbmFtZSc6ICdwZW5kaWVudGUnLCAgLy8gVE9ETzogVXNlIHRoZSBgc2VyaWVzTmFtZV9FbmdsaXNoYCBhbmQgYHNlcmllc05hbWVfU3BhbmlzaGAgY29uc3RhbnRzIGRlcGVuZGluZyBvbiB0aGUgbGFuZ3VhZ2Ugc2VsZWN0ZWQuIFxuXHRcdFx0XHRcdFx0XHQndmFsdWUnOiAxMDAuMDAgLSB0ZW1wQWNoaWV2ZWRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBDYWxjdWxhdGVzIHRoZSBhY2hpZXZlZCBwZXJjZW50YWdlIG9mIHRoaXMgcHJvZHVjdC4gKi9cblx0XHRcdGFjaGlldmVkUGVyY2VudGFnZV9QID0gKGFjaGlldmVkUGVyY2VudGFnZV9GICogMTAwLjAwKSAvIG1heFBlcmNlbnRhZ2VfRjtcblx0XHRcdC8vIGFjaGlldmVkUGVyY2VudGFnZV9QID0gTWF0aC5yb3VuZCgoKGFjaGlldmVkUGVyY2VudGFnZV9GICogMTAwLjAwKSAvIG1heFBlcmNlbnRhZ2VfRikgKiAxMDAuMDApIC8gMTAwLjAwO1xuXG5cdFx0XHQvKiBDcmVhdGVzIHRoZSBjdXJyZW50IHByb2R1Y3RzIGFycmF5IGRpc3BsYXllZCBpbiB0aGUgY2hhcnQuICovXG5cdFx0XHRwcm9kdWN0c19JbnRlcm5hbC5wdXNoKHtcblx0XHRcdFx0J25hbWUnOiBwcm9kdWN0c1tpXS5uYW1lLFxuXHRcdFx0XHQnc2VyaWVzJzogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdCduYW1lJzogJ3JlYWxpemFkbycsICAvLyBUT0RPOiBVc2UgdGhlIGBzZXJpZXNOYW1lX0VuZ2xpc2hgIGFuZCBgc2VyaWVzTmFtZV9TcGFuaXNoYCBjb25zdGFudHMgZGVwZW5kaW5nIG9uIHRoZSBsYW5ndWFnZSBzZWxlY3RlZC4gXG5cdFx0XHRcdFx0XHQndmFsdWUnOiBhY2hpZXZlZFBlcmNlbnRhZ2VfUFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0J25hbWUnOiAncGVuZGllbnRlJywgIC8vIFRPRE86IFVzZSB0aGUgYHNlcmllc05hbWVfRW5nbGlzaGAgYW5kIGBzZXJpZXNOYW1lX1NwYW5pc2hgIGNvbnN0YW50cyBkZXBlbmRpbmcgb24gdGhlIGxhbmd1YWdlIHNlbGVjdGVkLiBcblx0XHRcdFx0XHRcdCd2YWx1ZSc6IDEwMC4wMCAtIGFjaGlldmVkUGVyY2VudGFnZV9QXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9KTtcblxuXHRcdFx0LyogQ3JlYXRlcyB0aGUgYXJyYXkgdGhhdCBjb250YWlucyBhbGwgY3VycmVudCBmZWF0dXJlcyBhcnJheXMgdGhhdCBjYW4gYmUgZGlzcGxheWVkIGluIHRoZSBjaGFydC4gKi9cblx0XHRcdGZlYXR1cmVzVG90YWxfSW50ZXJuYWwucHVzaCh0ZW1wQ3VycmVudEZlYXR1cmVzX0ludGVybmFsKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgY2hhcnQgZm9yIGRpc3BsYXlpbmcgdGhlIGZlYXR1cmVzIGxpc3Qgb2YgdGhlIHNlbGVjdGVkIHByb2R1Y3QuIFxuXHQgKi9cblx0cHVibGljIGNsaWNrX1JlbW92ZUNoYXJ0KCk6IHZvaWRcblx0e1xuXHRcdHRoaXMuX3VwZGF0ZVByb2R1Y3RQb3ModGhpcy5fc2VsZWN0ZWRQcm9kdWN0UG9zKTtcblx0fVxufVxuIl19