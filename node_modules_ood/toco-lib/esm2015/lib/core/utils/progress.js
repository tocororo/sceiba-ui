/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/utils/progress.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
// @Component({
//     selector: 'toco-progress',
//     template: `
//     <mat-progress-bar *ngIf="loading"
//         mode="indeterminate" color="warn" style="z-index: 1001">
//     </mat-progress-bar>
//     <div *ngIf="loading && position == 'fixed'" class="overlay-fixed">
//     </div >
//     <div *ngIf="loading && position == 'absolute'" class="overlay-absolute">
//     </div> `,
//     styles: [
// `.overlay-fixed {
//     opacity:    0.4;
//     background: #000;
//     width:      100%;
//     height:     100%;
//     z-index:    1000;
//     top:        0;
//     left:       0;
//     position:   fixed;
//   }
//   .overlay-absolute {
//     opacity:    0.4;
//     background: #000;
//     width:      100%;
//     height:     100%;
//     z-index:    1000;
//     top:        0;
//     left:       0;
//     position:   absolute;
//   }`
//     ]
//   })
export class ProgressComponent {
    constructor() {
        this.loading = false;
        this.position = 'fixed';
    }
}
ProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-progress',
                template: `
    <div class="spinner" *ngIf="loading">
      <div class="bounce1"></div>
      <div class="bounce2"></div>
      <div class="bounce3"></div>
    </div>
 `,
                styles: [`
.overlay-fixed {
      opacity:    0.4;
      background: #000;
      width:      100%;
      height:     100%;
      z-index:    1000;
      top:        0;
      left:       0;
      position:   fixed;
    }
    .overlay-absolute {
      opacity:    0.4;
      background: #000;
      width:      100%;
      height:     100%;
      z-index:    1000;
      top:        0;
      left:       0;
      position:   absolute;
    }

.spinner {
margin: 5px auto 0;
width: 70px;
text-align: center;
}

.spinner > div {
width: 14px;
height: 14px;


border-radius: 100%;
display: inline-block;
-webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
animation: sk-bouncedelay 1.4s infinite ease-in-out both;
}

.spinner .bounce1 {
background-color:#007e3e;
-webkit-animation-delay: -0.60s;
animation-delay: -0.60s;
}

.spinner .bounce2 {
background-color: #018d79;
-webkit-animation-delay: -0.30s;
animation-delay: -0.30s;
}

.spinner .bounce3 {
background-color: #0f6684;
}

@-webkit-keyframes sk-bouncedelay {
0%, 80%, 100% { -webkit-transform: scale(0) }
40% { -webkit-transform: scale(1.0) }
}

@keyframes sk-bouncedelay {
0%, 80%, 100% {
  -webkit-transform: scale(0);
  transform: scale(0);
} 40% {
  -webkit-transform: scale(1.0);
  transform: scale(1.0);
}
}`]
            }] }
];
/** @nocollapse */
ProgressComponent.ctorParameters = () => [];
ProgressComponent.propDecorators = {
    loading: [{ type: Input }],
    position: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ProgressComponent.prototype.loading;
    /** @type {?} */
    ProgressComponent.prototype.position;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3V0aWxzL3Byb2dyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0SC9DLE1BQU0sT0FBTyxpQkFBaUI7SUFLeEI7UUFITyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLGFBQVEsR0FBRyxPQUFPLENBQUM7SUFDVixDQUFDOzs7WUF6RnRCLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFOzs7Ozs7RUFNWjt5QkFHRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFvRUU7YUFHQzs7Ozs7c0JBR00sS0FBSzt1QkFFTCxLQUFLOzs7O0lBRk4sb0NBQ3VCOztJQUN2QixxQ0FDMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIEBDb21wb25lbnQoe1xuLy8gICAgIHNlbGVjdG9yOiAndG9jby1wcm9ncmVzcycsXG4vLyAgICAgdGVtcGxhdGU6IGBcbi8vICAgICA8bWF0LXByb2dyZXNzLWJhciAqbmdJZj1cImxvYWRpbmdcIlxuLy8gICAgICAgICBtb2RlPVwiaW5kZXRlcm1pbmF0ZVwiIGNvbG9yPVwid2FyblwiIHN0eWxlPVwiei1pbmRleDogMTAwMVwiPlxuLy8gICAgIDwvbWF0LXByb2dyZXNzLWJhcj5cbi8vICAgICA8ZGl2ICpuZ0lmPVwibG9hZGluZyAmJiBwb3NpdGlvbiA9PSAnZml4ZWQnXCIgY2xhc3M9XCJvdmVybGF5LWZpeGVkXCI+XG5cbi8vICAgICA8L2RpdiA+XG4vLyAgICAgPGRpdiAqbmdJZj1cImxvYWRpbmcgJiYgcG9zaXRpb24gPT0gJ2Fic29sdXRlJ1wiIGNsYXNzPVwib3ZlcmxheS1hYnNvbHV0ZVwiPlxuXG4vLyAgICAgPC9kaXY+IGAsXG5cbi8vICAgICBzdHlsZXM6IFtcbi8vIGAub3ZlcmxheS1maXhlZCB7XG4vLyAgICAgb3BhY2l0eTogICAgMC40O1xuLy8gICAgIGJhY2tncm91bmQ6ICMwMDA7XG4vLyAgICAgd2lkdGg6ICAgICAgMTAwJTtcbi8vICAgICBoZWlnaHQ6ICAgICAxMDAlO1xuLy8gICAgIHotaW5kZXg6ICAgIDEwMDA7XG4vLyAgICAgdG9wOiAgICAgICAgMDtcbi8vICAgICBsZWZ0OiAgICAgICAwO1xuLy8gICAgIHBvc2l0aW9uOiAgIGZpeGVkO1xuLy8gICB9XG4vLyAgIC5vdmVybGF5LWFic29sdXRlIHtcbi8vICAgICBvcGFjaXR5OiAgICAwLjQ7XG4vLyAgICAgYmFja2dyb3VuZDogIzAwMDtcbi8vICAgICB3aWR0aDogICAgICAxMDAlO1xuLy8gICAgIGhlaWdodDogICAgIDEwMCU7XG4vLyAgICAgei1pbmRleDogICAgMTAwMDtcbi8vICAgICB0b3A6ICAgICAgICAwO1xuLy8gICAgIGxlZnQ6ICAgICAgIDA7XG4vLyAgICAgcG9zaXRpb246ICAgYWJzb2x1dGU7XG4vLyAgIH1gXG4vLyAgICAgXVxuXG4vLyAgIH0pXG5cbiAgQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0b2NvLXByb2dyZXNzJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyXCIgKm5nSWY9XCJsb2FkaW5nXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYm91bmNlMVwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImJvdW5jZTJcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJib3VuY2UzXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gYCxcblxuICAgIHN0eWxlczogW1xuYFxuLm92ZXJsYXktZml4ZWQge1xuICAgICAgb3BhY2l0eTogICAgMC40O1xuICAgICAgYmFja2dyb3VuZDogIzAwMDtcbiAgICAgIHdpZHRoOiAgICAgIDEwMCU7XG4gICAgICBoZWlnaHQ6ICAgICAxMDAlO1xuICAgICAgei1pbmRleDogICAgMTAwMDtcbiAgICAgIHRvcDogICAgICAgIDA7XG4gICAgICBsZWZ0OiAgICAgICAwO1xuICAgICAgcG9zaXRpb246ICAgZml4ZWQ7XG4gICAgfVxuICAgIC5vdmVybGF5LWFic29sdXRlIHtcbiAgICAgIG9wYWNpdHk6ICAgIDAuNDtcbiAgICAgIGJhY2tncm91bmQ6ICMwMDA7XG4gICAgICB3aWR0aDogICAgICAxMDAlO1xuICAgICAgaGVpZ2h0OiAgICAgMTAwJTtcbiAgICAgIHotaW5kZXg6ICAgIDEwMDA7XG4gICAgICB0b3A6ICAgICAgICAwO1xuICAgICAgbGVmdDogICAgICAgMDtcbiAgICAgIHBvc2l0aW9uOiAgIGFic29sdXRlO1xuICAgIH1cblxuLnNwaW5uZXIge1xubWFyZ2luOiA1cHggYXV0byAwO1xud2lkdGg6IDcwcHg7XG50ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5zcGlubmVyID4gZGl2IHtcbndpZHRoOiAxNHB4O1xuaGVpZ2h0OiAxNHB4O1xuXG5cbmJvcmRlci1yYWRpdXM6IDEwMCU7XG5kaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4td2Via2l0LWFuaW1hdGlvbjogc2stYm91bmNlZGVsYXkgMS40cyBpbmZpbml0ZSBlYXNlLWluLW91dCBib3RoO1xuYW5pbWF0aW9uOiBzay1ib3VuY2VkZWxheSAxLjRzIGluZmluaXRlIGVhc2UtaW4tb3V0IGJvdGg7XG59XG5cbi5zcGlubmVyIC5ib3VuY2UxIHtcbmJhY2tncm91bmQtY29sb3I6IzAwN2UzZTtcbi13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiAtMC42MHM7XG5hbmltYXRpb24tZGVsYXk6IC0wLjYwcztcbn1cblxuLnNwaW5uZXIgLmJvdW5jZTIge1xuYmFja2dyb3VuZC1jb2xvcjogIzAxOGQ3OTtcbi13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiAtMC4zMHM7XG5hbmltYXRpb24tZGVsYXk6IC0wLjMwcztcbn1cblxuLnNwaW5uZXIgLmJvdW5jZTMge1xuYmFja2dyb3VuZC1jb2xvcjogIzBmNjY4NDtcbn1cblxuQC13ZWJraXQta2V5ZnJhbWVzIHNrLWJvdW5jZWRlbGF5IHtcbjAlLCA4MCUsIDEwMCUgeyAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCkgfVxuNDAlIHsgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMCkgfVxufVxuXG5Aa2V5ZnJhbWVzIHNrLWJvdW5jZWRlbGF5IHtcbjAlLCA4MCUsIDEwMCUge1xuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCk7XG59IDQwJSB7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjApO1xuICB0cmFuc2Zvcm06IHNjYWxlKDEuMCk7XG59XG59YFxuICAgIF1cblxuICB9KVxuXG4gIGV4cG9ydCBjbGFzcyBQcm9ncmVzc0NvbXBvbmVudCB7XG4gICAgICAgIEBJbnB1dCgpXG4gICAgICAgIHB1YmxpYyBsb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIEBJbnB1dCgpXG4gICAgICAgIHB1YmxpYyBwb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gIH1cblxuIl19