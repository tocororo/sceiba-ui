/**
 * @fileoverview added by tsickle
 * Generated from: lib/taxonomy/taxonomy.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { SharedModule } from '../shared/public-api';
import { ReactiveFormsModule } from '@angular/forms';
import { TocoFormsModule } from '../forms/public-api';
import { VocabulariesComponent, VocabularyDialogComponent } from './vocabularies/vocabularies.component';
import { TermsComponent } from './terms/terms.component';
import { TaxonomyComponent } from './taxonomy/taxonomy.component';
import { TermGenericComponent } from './term-generic/term-generic.component';
import { TermsViewerComponent } from './terms-viewer/terms-viewer.component';
export class TaxonomyModule {
}
TaxonomyModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    VocabulariesComponent,
                    VocabularyDialogComponent,
                    TermsComponent,
                    TaxonomyComponent,
                    TermGenericComponent,
                    TermsViewerComponent
                ],
                entryComponents: [
                    VocabularyDialogComponent,
                    TermGenericComponent
                ],
                imports: [
                    SharedModule,
                    ReactiveFormsModule,
                    TocoFormsModule
                ],
                exports: [
                    TaxonomyComponent,
                    VocabulariesComponent,
                    TermsViewerComponent
                ],
                providers: []
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGF4b25vbXkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvdGF4b25vbXkvdGF4b25vbXkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQWdDN0UsTUFBTSxPQUFPLGNBQWM7OztZQTlCMUIsUUFBUSxTQUFDO2dCQUNOLFlBQVksRUFBRTtvQkFDVixxQkFBcUI7b0JBQ3JCLHlCQUF5QjtvQkFDekIsY0FBYztvQkFDZCxpQkFBaUI7b0JBQ2pCLG9CQUFvQjtvQkFDcEIsb0JBQW9CO2lCQUN2QjtnQkFFRCxlQUFlLEVBQUU7b0JBQ2IseUJBQXlCO29CQUN6QixvQkFBb0I7aUJBQ3ZCO2dCQUVELE9BQU8sRUFBRTtvQkFDTCxZQUFZO29CQUNaLG1CQUFtQjtvQkFDbkIsZUFBZTtpQkFDbEI7Z0JBRUQsT0FBTyxFQUFFO29CQUNMLGlCQUFpQjtvQkFDakIscUJBQXFCO29CQUNyQixvQkFBb0I7aUJBQ3ZCO2dCQUVELFNBQVMsRUFBRSxFQUNWO2FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNoYXJlZE1vZHVsZSB9IGZyb20gJy4uL3NoYXJlZC9wdWJsaWMtYXBpJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFRvY29Gb3Jtc01vZHVsZSB9IGZyb20gJy4uL2Zvcm1zL3B1YmxpYy1hcGknO1xuXG5pbXBvcnQgeyBWb2NhYnVsYXJpZXNDb21wb25lbnQsIFZvY2FidWxhcnlEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL3ZvY2FidWxhcmllcy92b2NhYnVsYXJpZXMuY29tcG9uZW50JztcbmltcG9ydCB7IFRlcm1zQ29tcG9uZW50IH0gZnJvbSAnLi90ZXJtcy90ZXJtcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGF4b25vbXlDb21wb25lbnQgfSBmcm9tICcuL3RheG9ub215L3RheG9ub215LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUZXJtR2VuZXJpY0NvbXBvbmVudCB9IGZyb20gJy4vdGVybS1nZW5lcmljL3Rlcm0tZ2VuZXJpYy5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGVybXNWaWV3ZXJDb21wb25lbnQgfSBmcm9tICcuL3Rlcm1zLXZpZXdlci90ZXJtcy12aWV3ZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgVm9jYWJ1bGFyaWVzQ29tcG9uZW50LFxuICAgICAgICBWb2NhYnVsYXJ5RGlhbG9nQ29tcG9uZW50LFxuICAgICAgICBUZXJtc0NvbXBvbmVudCxcbiAgICAgICAgVGF4b25vbXlDb21wb25lbnQsXG4gICAgICAgIFRlcm1HZW5lcmljQ29tcG9uZW50LFxuICAgICAgICBUZXJtc1ZpZXdlckNvbXBvbmVudFxuICAgIF0sXG5cbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICAgICAgVm9jYWJ1bGFyeURpYWxvZ0NvbXBvbmVudCxcbiAgICAgICAgVGVybUdlbmVyaWNDb21wb25lbnRcbiAgICBdLFxuXG4gICAgaW1wb3J0czogW1xuICAgICAgICBTaGFyZWRNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIFRvY29Gb3Jtc01vZHVsZVxuICAgIF0sXG5cbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFRheG9ub215Q29tcG9uZW50LFxuICAgICAgICBWb2NhYnVsYXJpZXNDb21wb25lbnQsXG4gICAgICAgIFRlcm1zVmlld2VyQ29tcG9uZW50XG4gICAgXSxcblxuICAgIHByb3ZpZGVyczogW1xuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgVGF4b25vbXlNb2R1bGVcbnsgfVxuXG5cbiJdfQ==