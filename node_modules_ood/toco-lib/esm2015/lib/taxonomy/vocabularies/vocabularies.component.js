/**
 * @fileoverview added by tsickle
 * Generated from: lib/taxonomy/vocabularies/vocabularies.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, Output, EventEmitter } from '@angular/core';
import { of } from 'rxjs';
import { catchError, finalize, startWith, map } from 'rxjs/operators';
import { FormControl, FormBuilder } from '@angular/forms';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MessageHandler, StatusCode } from '../../core/public-api';
import { Vocabulary } from '../../entities/public-api';
import { FormFieldType, HintValue, HintPosition } from '../../forms/public-api';
import { TaxonomyService } from '../../backend/public-api';
import { OAuthStorage } from 'angular-oauth2-oidc';
export class VocabularyDialogComponent {
    /**
     * @param {?} service
     * @param {?} _formBuilder
     * @param {?} dialogRef
     * @param {?} _snackBar
     * @param {?} data
     */
    constructor(service, _formBuilder, dialogRef, _snackBar, data) {
        this.service = service;
        this._formBuilder = _formBuilder;
        this.dialogRef = dialogRef;
        this._snackBar = _snackBar;
        this.data = data;
        this.actionLabel = 'Aceptar';
        this.hasService = false;
        if (data.accept) {
            this.accept = data.accept;
            this.hasService = true;
            this.vocab = new Vocabulary();
            if (data.vocab === null) {
                this.vocab.isNew = true;
            }
            else {
                this.vocab.deepcopy(data.vocab);
                this.actionLabel = 'Actualizar';
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.hasService) {
            this.formGroup = this._formBuilder.group({});
            this.panels = [
                {
                    title: this.vocab.isNew ? 'Nuevo Vocabulario' : 'Editar Vocabulario',
                    description: '',
                    iconName: '',
                    formSection: this.formGroup,
                    formSectionContent: [
                        {
                            name: 'name',
                            label: 'Identificador',
                            type: FormFieldType.identifier,
                            required: true,
                            width: '100%',
                            value: this.vocab.name,
                            startHint: new HintValue(HintPosition.start, 'Un identificador es una secuencia de letras')
                        },
                        {
                            name: 'human_name',
                            label: 'Nombre',
                            type: FormFieldType.text,
                            required: false,
                            width: '100%',
                            value: this.vocab.human_name,
                            startHint: new HintValue(HintPosition.start, '')
                        },
                        {
                            name: 'description',
                            label: 'Descripción',
                            type: FormFieldType.textarea,
                            required: false,
                            width: '100%',
                            value: this.vocab.description,
                            startHint: new HintValue(HintPosition.start, '')
                        }
                    ]
                }
            ];
            this.action = {
                doit: (/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    if (this.formGroup.valid) {
                        this.vocab.name = this.formGroup.value['name'];
                        this.vocab.human_name = this.formGroup.value['human_name'];
                        this.vocab.description = this.formGroup.value['description'];
                        this.accept(this.vocab);
                    }
                    else {
                        /** @type {?} */
                        const m = new MessageHandler(this._snackBar);
                        m.showMessage(StatusCode.OK, 'El identificador no es válido.');
                    }
                })
            };
        }
    }
    /**
     * @return {?}
     */
    onNoClick() {
        this.dialogRef.close();
    }
    /**
     * @return {?}
     */
    acceptAction() {
    }
}
VocabularyDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-vocabulary-dialog',
                template: "<form *ngIf=\"hasService\">\n    <toco-form-container\n        [panelsContent]=\"panels\"\n        [formGroup]=\"formGroup\"\n        [useAccordion]=\"false\"\n        [action]=\"action\"\n        [actionLabel]=\"actionLabel\"\n    ></toco-form-container>\n\n\n    <!-- <div>\n        <button mat-raised-button color=\"primary\" (click)=\"acceptAction()\">{{actionLabel}}</button>\n    </div> -->\n</form>\n\n<h2 *ngIf=\"!hasService\"> No Service</h2>\n"
            }] }
];
/** @nocollapse */
VocabularyDialogComponent.ctorParameters = () => [
    { type: TaxonomyService },
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: MatSnackBar },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    VocabularyDialogComponent.prototype.panels;
    /** @type {?} */
    VocabularyDialogComponent.prototype.formGroup;
    /** @type {?} */
    VocabularyDialogComponent.prototype.action;
    /** @type {?} */
    VocabularyDialogComponent.prototype.actionLabel;
    /** @type {?} */
    VocabularyDialogComponent.prototype.hasService;
    /** @type {?} */
    VocabularyDialogComponent.prototype.vocab;
    /** @type {?} */
    VocabularyDialogComponent.prototype.accept;
    /**
     * @type {?}
     * @private
     */
    VocabularyDialogComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    VocabularyDialogComponent.prototype._formBuilder;
    /** @type {?} */
    VocabularyDialogComponent.prototype.dialogRef;
    /** @type {?} */
    VocabularyDialogComponent.prototype._snackBar;
    /** @type {?} */
    VocabularyDialogComponent.prototype.data;
}
export class VocabulariesComponent {
    /**
     * @param {?} service
     * @param {?} oautheStorage
     * @param {?} dialog
     * @param {?} _snackBar
     */
    constructor(service, oautheStorage, dialog, _snackBar) {
        this.service = service;
        this.oautheStorage = oautheStorage;
        this.dialog = dialog;
        this._snackBar = _snackBar;
        this.vocabulariesChangeObserver = {
            next: (/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                this.dialog.closeAll();
                this.loadVocabularies();
                /** @type {?} */
                const voc = new Vocabulary();
                voc.deepcopy(result.data.vocabulary);
                this.selectVocab(voc);
                /** @type {?} */
                const m = new MessageHandler(this._snackBar);
                m.showMessage(StatusCode.OK, result.message);
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.log('error: ' + err + '.');
            }),
            complete: (/**
             * @return {?}
             */
            () => {
                console.log('complete.');
            })
        };
        this.vocabCtrl = new FormControl();
        this.selectedVocab = new EventEmitter();
        this.currentVocab = null;
        this.vocabularies = [];
        this.loading = false;
        this.emiterShowTerms = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getAuthenticatedUserPermissions();
        this.loadVocabularies();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} item
     * @return {?}
     */
    selectVocab(item) {
        this.currentVocab = item;
    }
    /**
     * @return {?}
     */
    loadVocabularies() {
        this.loading = true;
        this.service.getVocabularies().pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            /** @type {?} */
            const m = new MessageHandler(this._snackBar);
            m.showMessage(StatusCode.serverError, err.message);
            // TODO: Maybe you must set a better return.
            return of(null);
        })), finalize((/**
         * @return {?}
         */
        () => this.loading = false)))
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response) {
                this.vocabularies = response.data.vocabularies;
                this.filteredVocabularies = this.vocabCtrl.valueChanges
                    .pipe(startWith(''), map((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    return this.vocabularies.filter((/**
                     * @param {?} vocab
                     * @return {?}
                     */
                    vocab => vocab.name.toLowerCase().includes(value.toLowerCase())));
                })));
            }
            else {
                this.vocabularies = [];
            }
        }));
    }
    /**
     * @return {?}
     */
    newVocab() {
        this.openVocabDialog(null);
    }
    /**
     * @param {?} vocab
     * @return {?}
     */
    editVocab(vocab) {
        this.openVocabDialog(vocab);
    }
    /**
     * @private
     * @param {?} vocab
     * @return {?}
     */
    openVocabDialog(vocab) {
        /** @type {?} */
        const dialogRef = this.dialog.open(VocabularyDialogComponent, {
            data: {
                vocab: vocab,
                accept: (/**
                 * @param {?} voc
                 * @return {?}
                 */
                (voc) => {
                    this.dialog.closeAll();
                    if (voc.isNew) {
                        this.service.newVocabulary(voc).pipe().subscribe(this.vocabulariesChangeObserver);
                    }
                    else {
                        this.service.editVocabulary(voc).pipe().subscribe(this.vocabulariesChangeObserver);
                    }
                })
            }
        });
        dialogRef.afterClosed().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            console.log('dialog closed');
        }));
    }
    /**
     * @param {?} vocab
     * @return {?}
     */
    deleteVocab(vocab) {
    }
    /**
     * @return {?}
     */
    onSelectionChange() {
        this.selectedVocab.emit(this.currentVocab);
    }
    /**
     * @return {?}
     */
    getAuthenticatedUserPermissions() {
        this.service.getCurrentUserPermissions().pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            /** @type {?} */
            const m = new MessageHandler(this._snackBar);
            m.showMessage(StatusCode.serverError, err.message);
            // TODO: Maybe you must set a better return.
            return of(null);
        })))
            .subscribe((/**
         * @param {?} request
         * @return {?}
         */
        request => {
            if (request.status == 'success') {
                /** @type {?} */
                var permJson = JSON.stringify(request.data.permissions.actions);
                this.oautheStorage.setItem('user_permissions', permJson);
            }
        }));
    }
    /**
     * @param {?} permission
     * @param {?=} id
     * @return {?}
     */
    hasPermission(permission, id) {
        /** @type {?} */
        const userPermission = JSON.parse(this.oautheStorage.getItem('user_permissions'));
        if (!userPermission) {
            return false;
        }
        switch (permission) {
            case 'add':
                if (userPermission.taxonomy_full_editor_actions === null)
                    return true;
                return false;
            case 'edit':
                if (userPermission.taxonomy_full_editor_actions === null)
                    return true;
                if (userPermission.vocabulary_editor_actions) {
                    /** @type {?} */
                    const arr = userPermission.vocabulary_editor_actions;
                    if (arr.includes(id)) {
                        return true;
                    }
                }
                else if (userPermission.taxonomy_full_editor_actions) {
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
}
VocabulariesComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-vocabularies',
                template: "<mat-card>\n  <mat-card-header>\n    <mat-card-title>\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between none\">\n        Vocabularios\n        <button *ngIf=\"hasPermission('add')\" mat-icon-button (click)=\"newVocab()\" matTooltip=\"Adicionar Vocabulario\">\n          <mat-icon>library_add</mat-icon>\n        </button>\n      </div>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-card-content [style.overflow]=\"'auto'\" [style.height]=\"'25em'\">\n    <mat-spinner *ngIf=\"loading; else elseTemplate\"></mat-spinner>\n    <ng-template #elseTemplate>\n\n\n      <mat-form-field [ngStyle]=\"{'width': '100%'}\">\n        <mat-label>Vocabularios</mat-label>\n        <mat-select\n          [(value)]=\"currentVocab\"\n          (selectionChange)=\"onSelectionChange()\"\n        >\n          <mat-option *ngFor=\"let option of vocabularies\" [value]=\"option\">\n            {{option.human_name}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      \n\n      <!-- <mat-form-field>\n        <input matInput placeholder=\"Vocabularios\" aria-label=\"Vocabularios\" [matAutocomplete]=\"auto\"\n          [formControl]=\"vocabCtrl\">\n        <mat-autocomplete #auto=\"matAutocomplete\">\n          <mat-option *ngFor=\"let item of filteredVocabularies | async\" [value]=\"item.human_name\" (click)=selectVocab(item) (keydown.enter)=selectVocab(item)>\n            {{item.human_name}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field> -->\n\n\n      <mat-card *ngIf=\"currentVocab\">\n        <mat-card-header>\n          <mat-card-title></mat-card-title>\n          <mat-card-subtitle>\n              <strong>Identificador: </strong> {{ currentVocab.name }}\n              </mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n            <strong>Nombre: </strong> {{ currentVocab.human_name }}\n          <p> <strong> Descripci\u00F3n: </strong> </p>\n          <div class=\"e2e-inner-html-bound  text-align-justify\" [innerHTML]=\"currentVocab.description\"></div>\n\n        </mat-card-content>\n        <mat-card-actions>\n          <button mat-flat-button *ngIf=\"hasPermission('edit', currentVocab.id)\" (click)=\"editVocab(currentVocab)\">Editar \n            <mat-icon>edit</mat-icon>\n          </button>\n        </mat-card-actions>\n      </mat-card>\n      \n    </ng-template>\n  </mat-card-content>\n</mat-card>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
VocabulariesComponent.ctorParameters = () => [
    { type: TaxonomyService },
    { type: OAuthStorage },
    { type: MatDialog },
    { type: MatSnackBar }
];
VocabulariesComponent.propDecorators = {
    selectedVocab: [{ type: Output }],
    emiterShowTerms: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    VocabulariesComponent.prototype.vocabulariesChangeObserver;
    /** @type {?} */
    VocabulariesComponent.prototype.vocabCtrl;
    /** @type {?} */
    VocabulariesComponent.prototype.filteredVocabularies;
    /** @type {?} */
    VocabulariesComponent.prototype.selectedVocab;
    /** @type {?} */
    VocabulariesComponent.prototype.currentVocab;
    /** @type {?} */
    VocabulariesComponent.prototype.vocabularies;
    /** @type {?} */
    VocabulariesComponent.prototype.loading;
    /** @type {?} */
    VocabulariesComponent.prototype.emiterShowTerms;
    /**
     * @type {?}
     * @private
     */
    VocabulariesComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    VocabulariesComponent.prototype.oautheStorage;
    /** @type {?} */
    VocabulariesComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VocabulariesComponent.prototype._snackBar;
}
//# sourceMappingURL=data:application/json;base64,