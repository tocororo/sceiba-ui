/**
 * @fileoverview added by tsickle
 * Generated from: lib/taxonomy/terms-viewer/terms-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { TaxonomyService } from '../../backend/public-api';
export class TermsViewerComponent {
    /**
     * @param {?} taxonomyService
     */
    constructor(taxonomyService) {
        this.taxonomyService = taxonomyService;
        /**
         * receive vocab_id and a list of terms ids.
         * show in a chiplist the terms of vocab_id
         */
        this.vocabulary_id = null;
        this.ids = null;
        this.terms = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.vocabulary_id) {
            console.log(this.ids);
            this.taxonomyService.getTermListByIDs(this.ids)
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                console.log(response);
                if (response.data.term) {
                    response.data.term.forEach((/**
                     * @param {?} term
                     * @return {?}
                     */
                    term => {
                        if (term.vocabulary_id == this.vocabulary_id) {
                            this.terms.push(term);
                        }
                    }));
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => { }), (/**
             * @return {?}
             */
            () => { }));
        }
    }
}
TermsViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-terms-viewer',
                template: "<mat-chip-list>\n  <mat-chip *ngFor=\"let term of terms\">{{ term.name }}</mat-chip>\n</mat-chip-list>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TermsViewerComponent.ctorParameters = () => [
    { type: TaxonomyService }
];
TermsViewerComponent.propDecorators = {
    vocabulary_id: [{ type: Input }],
    ids: [{ type: Input }]
};
if (false) {
    /**
     * receive vocab_id and a list of terms ids.
     * show in a chiplist the terms of vocab_id
     * @type {?}
     */
    TermsViewerComponent.prototype.vocabulary_id;
    /** @type {?} */
    TermsViewerComponent.prototype.ids;
    /** @type {?} */
    TermsViewerComponent.prototype.terms;
    /**
     * @type {?}
     * @private
     */
    TermsViewerComponent.prototype.taxonomyService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybXMtdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL3RheG9ub215L3Rlcm1zLXZpZXdlci90ZXJtcy12aWV3ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBUTNELE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFZL0IsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCOzs7OztRQUxwRCxrQkFBYSxHQUFHLElBQUksQ0FBQztRQUVyQixRQUFHLEdBQWEsSUFBSSxDQUFDO1FBRXJCLFVBQUssR0FBVyxFQUFFLENBQUE7SUFDc0MsQ0FBQzs7OztJQUV6RCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFDO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3JCLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztpQkFDOUMsU0FBUzs7OztZQUNSLENBQUMsUUFBUSxFQUFDLEVBQUU7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFFdEIsSUFBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQztvQkFDcEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTzs7OztvQkFBQyxJQUFJLENBQUMsRUFBRTt3QkFDaEMsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUM7NEJBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUN2QjtvQkFDSCxDQUFDLEVBQUMsQ0FBQztpQkFDSjtZQUNILENBQUM7Ozs7WUFDRCxDQUFDLEtBQUssRUFBQyxFQUFFLEdBQUMsQ0FBQzs7O1lBQ1gsR0FBRSxFQUFFLEdBQUMsQ0FBQyxFQUNQLENBQUM7U0FDSDtJQUNILENBQUM7OztZQXZDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0Isb0hBQTRDOzthQUU3Qzs7OztZQVBRLGVBQWU7Ozs0QkFjckIsS0FBSztrQkFFTCxLQUFLOzs7Ozs7OztJQUZOLDZDQUNxQjs7SUFDckIsbUNBQ3FCOztJQUVyQixxQ0FBa0I7Ozs7O0lBQ04sK0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUYXhvbm9teVNlcnZpY2UgfSBmcm9tICcuLi8uLi9iYWNrZW5kL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgVGVybSB9IGZyb20gJy4uLy4uL2VudGl0aWVzL3B1YmxpYy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0b2NvLXRlcm1zLXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90ZXJtcy12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90ZXJtcy12aWV3ZXIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBUZXJtc1ZpZXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiByZWNlaXZlIHZvY2FiX2lkIGFuZCBhIGxpc3Qgb2YgdGVybXMgaWRzLiBcbiAgICogc2hvdyBpbiBhIGNoaXBsaXN0IHRoZSB0ZXJtcyBvZiB2b2NhYl9pZFxuICAgKi9cblxuICBASW5wdXQoKVxuICB2b2NhYnVsYXJ5X2lkID0gbnVsbDtcbiAgQElucHV0KClcbiAgaWRzOiBudW1iZXJbXSA9IG51bGw7XG4gIFxuICB0ZXJtczogVGVybVtdID0gW11cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YXhvbm9teVNlcnZpY2U6IFRheG9ub215U2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudm9jYWJ1bGFyeV9pZCl7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmlkcylcbiAgICAgIHRoaXMudGF4b25vbXlTZXJ2aWNlLmdldFRlcm1MaXN0QnlJRHModGhpcy5pZHMpXG4gICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAocmVzcG9uc2UpPT57XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEudGVybSl7XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhLnRlcm0uZm9yRWFjaCh0ZXJtID0+IHtcbiAgICAgICAgICAgICAgaWYgKHRlcm0udm9jYWJ1bGFyeV9pZCA9PSB0aGlzLnZvY2FidWxhcnlfaWQpe1xuICAgICAgICAgICAgICAgIHRoaXMudGVybXMucHVzaCh0ZXJtKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAoZXJyb3IpPT57fSxcbiAgICAgICAgKCk9Pnt9XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=