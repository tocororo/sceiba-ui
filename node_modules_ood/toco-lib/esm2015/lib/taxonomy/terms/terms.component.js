/**
 * @fileoverview added by tsickle
 * Generated from: lib/taxonomy/terms/terms.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { of as observableOf, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatDialog } from '@angular/material/dialog';
import { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MessageHandler, StatusCode } from '../../core/public-api';
import { Vocabulary } from '../../entities/public-api';
import { TaxonomyService } from '../../backend/public-api';
import { TermGenericComponent } from '../term-generic/term-generic.component';
import { OAuthStorage } from 'angular-oauth2-oidc';
/**
 * Flattened tree node that has been created from a TermNode through the flattener. Flattened
 * nodes include level index and whether they can be expanded or not.
 * @record
 */
export function FlatTreeNode() { }
if (false) {
    /** @type {?} */
    FlatTreeNode.prototype.name;
    /** @type {?} */
    FlatTreeNode.prototype.level;
    /** @type {?} */
    FlatTreeNode.prototype.expandable;
}
export class TermsComponent {
    /**
     * @param {?} service
     * @param {?} oautheStorage
     * @param {?} dialog
     * @param {?} _snackBar
     */
    constructor(service, oautheStorage, dialog, _snackBar) {
        this.service = service;
        this.oautheStorage = oautheStorage;
        this.dialog = dialog;
        this._snackBar = _snackBar;
        this.loading = false;
        this.termsTreeObserver = {
            next: (/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.dataSource.data = response.data.tree.term_node;
                this.loading = !this.loading;
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.log('error: ' + err + '.');
            }),
            complete: (/**
             * @return {?}
             */
            () => {
                console.log('complete');
            })
        };
        this.termChangeObserver = {
            next: (/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.loading = !this.loading;
                this.service.getTermsTreeByVocab(this.currentVocab.id).subscribe(this.termsTreeObserver);
                this.dialog.closeAll();
                /** @type {?} */
                const m = new MessageHandler(this._snackBar);
                m.showMessage(StatusCode.OK, response.message);
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.log('error: ' + err + '.');
            }),
            complete: (/**
             * @return {?}
             */
            () => {
                console.log('complete');
            })
        };
        this.currentVocab = null;
        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.oautheStorage.getItem('user_permission')) {
            this.getAuthenticatedUserPermissions();
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.currentVocab != null) {
            this.loading = true;
            this.service.getTermsTreeByVocab(this.currentVocab.id)
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.dataSource.data = response.data.tree.term_node;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.log('error: ' + err + '.');
            }), (/**
             * @return {?}
             */
            () => {
                this.loading = false;
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * Transform the data to something the tree can read.
     * @param {?} node
     * @param {?} level
     * @return {?}
     */
    transformer(node, level) {
        return {
            name: node.term.identifier,
            term: node.term,
            level: level,
            expandable: (node.children.length > 0)
        };
    }
    /**
     * Get the level of the node
     * @param {?} node
     * @return {?}
     */
    getLevel(node) {
        return node.level;
    }
    /**
     * Get whether the node is expanded or not.
     * @param {?} node
     * @return {?}
     */
    isExpandable(node) {
        return node.expandable;
    }
    /**
     * Get whether the node has children or not.
     * @param {?} index
     * @param {?} node
     * @return {?}
     */
    hasChild(index, node) {
        return node.expandable;
    }
    /**
     * Get the children for the node.
     * @param {?} node
     * @return {?}
     */
    getChildren(node) {
        return observableOf(node.children);
    }
    /**
     * @return {?}
     */
    addTerm() {
        this.openTermDialog(null);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    editTerm(node) {
        this.openTermDialog(node.term);
    }
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    openTermDialog(term) {
        /** @type {?} */
        const dialogRef = this.dialog.open(TermGenericComponent, {
            data: {
                term: term,
                terms: this.dataSource.data,
                currentVocab: this.currentVocab,
                accept: (/**
                 * @param {?} term
                 * @return {?}
                 */
                (term) => {
                    this.dialog.closeAll();
                    if (term.isNew) {
                        this.service.newTerm(term).pipe().subscribe(this.termChangeObserver);
                    }
                    else {
                        this.service.editTerm(term).pipe().subscribe(this.termChangeObserver);
                    }
                })
            }
        });
        dialogRef.afterClosed().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            console.log('dialog closed');
        }));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    deleteTerm(node) {
        console.log(node);
    }
    /**
     * @return {?}
     */
    getAuthenticatedUserPermissions() {
        this.service.getCurrentUserPermissions().pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            /** @type {?} */
            const m = new MessageHandler(this._snackBar);
            m.showMessage(StatusCode.serverError, err.message);
            // TODO: Maybe you must set a better return.
            return of(null);
        })))
            .subscribe((/**
         * @param {?} request
         * @return {?}
         */
        request => {
            if (request.status == 'success') {
                /** @type {?} */
                var permJson = JSON.stringify(request.data.permissions.actions);
                this.oautheStorage.setItem('user_permissions', permJson);
            }
        }));
    }
    /**
     * @param {?} permission
     * @param {?=} id
     * @return {?}
     */
    hasPermission(permission, id) {
        /** @type {?} */
        const userPermission = JSON.parse(this.oautheStorage.getItem('user_permissions'));
        if (!userPermission) {
            return false;
        }
        switch (permission) {
            case 'add':
                if (userPermission.taxonomy_full_editor_actions === null)
                    return true;
                return false;
            case 'edit':
                if (userPermission.taxonomy_full_editor_actions === null)
                    return true;
                if (userPermission.vocabulary_editor_actions) {
                    /** @type {?} */
                    const arr = userPermission.vocabulary_editor_actions;
                    if (arr.includes(id)) {
                        return true;
                    }
                }
                else if (userPermission.taxonomy_full_editor_actions) {
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
}
TermsComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-terms',
                template: "<mat-card>\n    <mat-card-header>\n        <mat-card-title>\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between none\">\n                T\u00E9rminos\n                <ng-container *ngIf=\"currentVocab\"> de {{ currentVocab.human_name}} </ng-container>\n\n                <button mat-icon-button *ngIf=\"currentVocab && hasPermission('add')\" (click)=\"addTerm()\"\n                    matTooltip=\"Adicionar T\u00E9rmino\">\n                    <mat-icon>library_add</mat-icon>\n                </button>\n\n            </div>\n        </mat-card-title>\n    </mat-card-header>\n    <mat-card-content [style.overflow]=\"'auto'\" [style.height]=\"'25em'\">\n        <mat-spinner *ngIf=\"loading; else elseTemplate\"></mat-spinner>\n\n        <ng-template #elseTemplate>\n            <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"padd\">\n                <mat-tree-node class=\"hover\" *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding\n                    fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <button mat-icon-button disabled></button>\n                        {{ node.name }}\n                    </div> \n                    <button mat-icon-button *ngIf=\"currentVocab && hasPermission('edit', currentVocab.id)\" (click)=\"editTerm(node)\" matTooltip=\"Editar\">\n                    <mat-icon>edit</mat-icon>\n                    </button>\n                </mat-tree-node>\n\n                <mat-tree-node class=\"hover\" *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n                    <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'toggle ' + node.name\">\n                        <mat-icon class=\"mat-icon-rtl-mirror\">\n                            {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n                        </mat-icon>\n                    </button>\n                    <div class=\"item-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                        {{ node.name }}\n                        <div>\n                            <button mat-icon-button *ngIf=\"currentVocab && hasPermission('edit', currentVocab.id)\" (click)=\"editTerm(node)\" matTooltip=\"Editar\">\n                                <mat-icon>edit</mat-icon>\n                            </button>\n                            <!-- <button mat-icon-button (click)=\"deleteTerm(node)\" matTooltip=\"Eliminar\">\n                                <mat-icon>delete</mat-icon>\n                            </button> -->\n                        </div>\n                    </div>\n\n                </mat-tree-node>\n            </mat-tree>\n        </ng-template>\n    </mat-card-content>\n</mat-card>",
                styles: [".type-icon{color:#757575;margin-right:5px}.item-width{width:100%}.padd{padding:.7em}.hover:hover{transform:scale(1.02);box-shadow:0 0 10px 0 rgba(0,0,0,.4);border-radius:3px}"]
            }] }
];
/** @nocollapse */
TermsComponent.ctorParameters = () => [
    { type: TaxonomyService },
    { type: OAuthStorage },
    { type: MatDialog },
    { type: MatSnackBar }
];
TermsComponent.propDecorators = {
    currentVocab: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TermsComponent.prototype.loading;
    /**
     * The TreeControl controls the expand/collapse state of tree nodes.
     * @type {?}
     */
    TermsComponent.prototype.treeControl;
    /**
     * The TreeFlattener is used to generate the flat list of items from hierarchical data.
     * @type {?}
     */
    TermsComponent.prototype.treeFlattener;
    /**
     * The MatTreeFlatDataSource connects the control and flattener to provide data.
     * @type {?}
     */
    TermsComponent.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    TermsComponent.prototype.termsTreeObserver;
    /**
     * @type {?}
     * @private
     */
    TermsComponent.prototype.termChangeObserver;
    /** @type {?} */
    TermsComponent.prototype.currentVocab;
    /**
     * @type {?}
     * @private
     */
    TermsComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    TermsComponent.prototype.oautheStorage;
    /** @type {?} */
    TermsComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    TermsComponent.prototype._snackBar;
}
//# sourceMappingURL=data:application/json;base64,