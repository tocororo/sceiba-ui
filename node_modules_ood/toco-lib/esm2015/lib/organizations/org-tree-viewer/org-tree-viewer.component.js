/**
 * @fileoverview added by tsickle
 * Generated from: lib/organizations/org-tree-viewer/org-tree-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FlatTreeControl } from '@angular/cdk/tree';
import { Component, EventEmitter, Injectable, Input, Output } from '@angular/core';
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { OrganizationServiceNoAuth } from '../../backend/public-api';
/**
 * Flat node with expandable and level information
 */
export class OrganizationFlatNode {
    /**
     * @param {?} item
     * @param {?} parent
     * @param {?=} level
     * @param {?=} expandable
     * @param {?=} isLoading
     */
    constructor(item, parent, level = 1, expandable = false, isLoading = false) {
        this.item = item;
        this.parent = parent;
        this.level = level;
        this.expandable = expandable;
        this.isLoading = isLoading;
    }
}
if (false) {
    /** @type {?} */
    OrganizationFlatNode.prototype.item;
    /** @type {?} */
    OrganizationFlatNode.prototype.parent;
    /** @type {?} */
    OrganizationFlatNode.prototype.level;
    /** @type {?} */
    OrganizationFlatNode.prototype.expandable;
    /** @type {?} */
    OrganizationFlatNode.prototype.isLoading;
}
export class OrganizationDataSource {
    /**
     * @param {?} _treeControl
     * @param {?} orgService
     */
    constructor(_treeControl, orgService) {
        this._treeControl = _treeControl;
        this.orgService = orgService;
        this.dataChange = new BehaviorSubject([]);
        this.orgRelationshipType = null;
    }
    /**
     * @return {?}
     */
    get data() { return this.dataChange.value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    /**
     * @param {?} collectionViewer
     * @return {?}
     */
    connect(collectionViewer) {
        this._treeControl.expansionModel.onChange.subscribe((/**
         * @param {?} change
         * @return {?}
         */
        change => {
            if (((/** @type {?} */ (change))).added ||
                ((/** @type {?} */ (change))).removed) {
                this.handleTreeControl((/** @type {?} */ (change)));
            }
        }));
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map((/**
         * @return {?}
         */
        () => this.data)));
    }
    /**
     * Handle expand/collapse behaviors
     * @param {?} change
     * @return {?}
     */
    handleTreeControl(change) {
        if (change.added) {
            change.added.forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => this.toggleNode(node, true)));
        }
        if (change.removed) {
            change.removed.slice().reverse().forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => this.toggleNode(node, false)));
        }
    }
    /**
     * Toggle the node, remove from display list
     * @param {?} node
     * @param {?} expand
     * @return {?}
     */
    toggleNode(node, expand) {
        node.isLoading = true;
        /** @type {?} */
        const index = this.data.indexOf(node);
        if (node.item.metadata.relationships.length <= 0 || index < 0) { // If no children, or cannot find the node, no op
            return;
        }
        if (expand) {
            this.orgService.getOrganizationRelationships(node.item.metadata.id, this.orgRelationshipType).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                /** @type {?} */
                const nodes = response.map((/**
                 * @param {?} org
                 * @return {?}
                 */
                org => new OrganizationFlatNode(org, node, node.level + 1, org.metadata.relationships.length > 0)));
                this.data.splice(index + 1, 0, ...nodes);
                this.dataChange.next(this.data);
                node.isLoading = false;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => { }), (/**
             * @return {?}
             */
            () => { }));
        }
        else {
            /** @type {?} */
            let count = 0;
            for (let i = index + 1; i < this.data.length
                && this.data[i].level > node.level; i++) {
                count++;
            }
            this.data.splice(index + 1, count);
            this.dataChange.next(this.data);
            node.isLoading = false;
        }
    }
}
OrganizationDataSource.decorators = [
    { type: Injectable }
];
/** @nocollapse */
OrganizationDataSource.ctorParameters = () => [
    { type: FlatTreeControl },
    { type: OrganizationServiceNoAuth }
];
if (false) {
    /** @type {?} */
    OrganizationDataSource.prototype.dataChange;
    /** @type {?} */
    OrganizationDataSource.prototype.orgRelationshipType;
    /**
     * @type {?}
     * @private
     */
    OrganizationDataSource.prototype._treeControl;
    /**
     * @type {?}
     * @private
     */
    OrganizationDataSource.prototype.orgService;
}
export class OrgTreeViewerComponent {
    /**
     * @param {?} orgService
     */
    constructor(orgService) {
        this.orgService = orgService;
        this.organizations = new Array();
        this.orgRelationshipType = null;
        this.iconAction = 'visibility';
        this.labelAction = '';
        this.ngStyle = null;
        this.action = new EventEmitter();
        this.error = false;
        this.getLevel = (/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.level);
        this.isExpandable = (/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.expandable);
        this.hasChild = (/**
         * @param {?} _
         * @param {?} _nodeData
         * @return {?}
         */
        (_, _nodeData) => _nodeData.expandable);
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new OrganizationDataSource(this.treeControl, orgService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dataSource.orgRelationshipType = this.orgRelationshipType;
        this.dataSource.data = this.organizations.map((/**
         * @param {?} org
         * @return {?}
         */
        org => new OrganizationFlatNode(org, null, 1, org.metadata.relationships.length > 0)));
    }
    /**
     * @param {?} org
     * @return {?}
     */
    emitAction(org) {
        this.action.emit(org);
    }
}
OrgTreeViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-org-tree-viewer',
                template: "<mat-tree\n  [dataSource]=\"dataSource\"\n  [treeControl]=\"treeControl\"\n  [ngStyle]=\"ngStyle\"\n>\n  <mat-tree-node\n    *matTreeNodeDef=\"let node\"\n    matTreeNodePadding\n  >\n    <button mat-icon-button disabled></button>\n    {{ node.item.metadata.name }}\n    <button\n        mat-icon-button\n        matTooltip=\"labelAction\"\n        (click)=\"emitAction(node)\"\n      >\n        <mat-icon>{{iconAction}}</mat-icon>\n      </button>\n  </mat-tree-node>\n  <mat-tree-node\n    *matTreeNodeDef=\"let node; when: hasChild\"\n    matTreeNodePadding\n  >\n    <button\n      mat-icon-button\n      [attr.aria-label]=\"'toggle ' + node.filename\"\n      matTreeNodeToggle\n    >\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\n      </mat-icon>\n    </button>\n    {{ node.item.metadata.name }}\n    <button\n        mat-icon-button\n        matTooltip=\"labelAction\"\n        (click)=\"emitAction(node)\"\n      >\n        <mat-icon>{{iconAction}}</mat-icon>\n      </button>\n    <mat-progress-bar\n      *ngIf=\"node.isLoading\"\n      mode=\"indeterminate\"\n      class=\"example-tree-progress-bar\"\n    ></mat-progress-bar>\n  </mat-tree-node>\n</mat-tree>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
OrgTreeViewerComponent.ctorParameters = () => [
    { type: OrganizationServiceNoAuth }
];
OrgTreeViewerComponent.propDecorators = {
    organizations: [{ type: Input }],
    orgRelationshipType: [{ type: Input }],
    iconAction: [{ type: Input }],
    labelAction: [{ type: Input }],
    ngStyle: [{ type: Input }],
    action: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    OrgTreeViewerComponent.prototype.organizations;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.orgRelationshipType;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.iconAction;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.labelAction;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.ngStyle;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.action;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.error;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.treeControl;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.dataSource;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.getLevel;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.isExpandable;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.hasChild;
    /**
     * @type {?}
     * @private
     */
    OrgTreeViewerComponent.prototype.orgService;
}
//# sourceMappingURL=data:application/json;base64,