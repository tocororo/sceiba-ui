/**
 * @fileoverview added by tsickle
 * Generated from: lib/organizations/org-view/org-view-accordion/org-view-accordion.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
import { MatAccordion } from '@angular/material';
/** @enum {string} */
const OrgViewAccordionType = {
    /**
     * The `OrgViewAccordionComponent` is used to show relationships.
     */
    Relationships: "Relaci\u00F3n" /*'Relationship'*/,
    /**
     * The `OrgViewAccordionComponent` is used to show addresses.
     */
    Addresses: "Direcci\u00F3n" /*'Address'*/,
};
export { OrgViewAccordionType };
;
export class OrgViewAccordionComponent {
    constructor() {
        this.orgViewAccordion_Type = OrgViewAccordionType;
        this.appearance = 'outline';
        this.desc = undefined;
        this.value = [];
        this.orgViewAccordionType = OrgViewAccordionType.Relationships;
        this.panelsTitle = []; /* This array has the same length than the `value` field. */
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * Returns the `MatAccordion` control.
     * @return {?}
     */
    get getAccordion() {
        return this._accordion;
    }
    /**
     * Returns true if the panel has element; otherwise, false.
     * The panel always has element by default.
     * @param {?} pos The panel position.
     * @return {?}
     */
    panelHasElement(pos) {
        switch (this.orgViewAccordionType) {
            case this.orgViewAccordion_Type.Relationships:
                {
                    return this.value[pos].links.length;
                }
            default:
                {
                    /* The panel always has element by default. */
                    return true;
                }
        }
    }
}
OrgViewAccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-org-view-accordion',
                template: "\n<!-- TODO: En dependencia del valor de `appearance`, se aplican las clases CSS para lograr la apariencia deseada. \n     Actualmente, `appearance = 'outline'` es el \u00FAnico que est\u00E1 hecho. -->\n<fieldset class=\"static-accordion-fieldset\">\n\t<legend class=\"static-accordion-fieldset-legend\">{{ desc }}</legend>\n\n\t<div class=\"static-accordion-buttons\">\n\t\t<button mat-raised-button color=\"primary\" (click)=\"getAccordion.openAll()\">Expandir Todo</button>\n\t\t<button mat-raised-button color=\"primary\" (click)=\"getAccordion.closeAll()\">Colapsar Todo</button>\n\t</div>\n\n\t<mat-accordion class=\"static-mat-accordion\" multi [attr.aria-label]=\"desc\">\n\t\t<ng-container *ngFor=\"let panelTitle of panelsTitle; let pos = index\">\n\t\t\t<mat-expansion-panel *ngIf=\"panelHasElement(pos)\">\n\t\t\t\t<mat-expansion-panel-header>\n\t\t\t\t\t<mat-panel-title>\n\t\t\t\t\t\t{{ panelTitle }}\n\t\t\t\t\t</mat-panel-title>\n\t\t\t\t</mat-expansion-panel-header>\n\n\t\t\t\t<ng-container [ngSwitch]=\"orgViewAccordionType\">\n\t\t\t\t\t<toco-org-view-relationship *ngSwitchCase=\"orgViewAccordion_Type.Relationships\" [value]=\"value[pos]\"></toco-org-view-relationship>\n\t\t\t\t\t<toco-org-view-address *ngSwitchCase=\"orgViewAccordion_Type.Addresses\" [value]=\"value[pos]\"></toco-org-view-address>\n\t\t\t\t</ng-container>\n\t\t\t</mat-expansion-panel>\n\t\t</ng-container>\n\t</mat-accordion>\n</fieldset>\n",
                styles: [".static-accordion-fieldset{width:auto;margin:-4px 0 24px;padding:0 10px 14px;cursor:default;background-color:#fff;border:1px solid rgba(0,0,0,.12);border-radius:4px}.static-accordion-fieldset-legend{padding:0 4px;background-color:#fff;color:rgba(0,0,0,.6);font-size:10px}.static-accordion-buttons{margin:20px 0}button{margin-right:10px}.mat-expansion-panel{box-shadow:none;border:1px solid #eaeaea}.mat-expansion-panel:not(.mat-expansion-panel-spacing):not(:first-of-type){margin:-1px 0 0}::ng-deep div.mat-expansion-panel-body{padding:0}"]
            }] }
];
/** @nocollapse */
OrgViewAccordionComponent.ctorParameters = () => [];
OrgViewAccordionComponent.propDecorators = {
    appearance: [{ type: Input }],
    desc: [{ type: Input }],
    value: [{ type: Input }],
    orgViewAccordionType: [{ type: Input }],
    panelsTitle: [{ type: Input }],
    _accordion: [{ type: ViewChild, args: [MatAccordion, { static: true },] }]
};
if (false) {
    /**
     * Represents the `OrgViewAccordionType` enum for internal use.
     * @type {?}
     */
    OrgViewAccordionComponent.prototype.orgViewAccordion_Type;
    /**
     * The control's appearance.
     * By default, its value is `'outline'`.
     * @type {?}
     */
    OrgViewAccordionComponent.prototype.appearance;
    /**
     * The control's description.
     * By default, its value is `undefined` and it is not showed.
     * @type {?}
     */
    OrgViewAccordionComponent.prototype.desc;
    /**
     * The array of data that should be rendered by the accordion, where each object represents one row.
     * This array has the same length than the `panelsTitle` field.
     * By default, its value is `[]`.
     * @type {?}
     */
    OrgViewAccordionComponent.prototype.value;
    /**
     * The `OrgViewAccordionComponent` type.
     * By default, its value is `OrgViewAccordionType.Relationships`.
     * @type {?}
     */
    OrgViewAccordionComponent.prototype.orgViewAccordionType;
    /**
     * The panels title.
     * This array has the same length than the `value` field.
     * By default, its value is `[]`.
     * @type {?}
     */
    OrgViewAccordionComponent.prototype.panelsTitle;
    /**
     * @type {?}
     * @private
     */
    OrgViewAccordionComponent.prototype._accordion;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXZpZXctYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL29yZ2FuaXphdGlvbnMvb3JnLXZpZXcvb3JnLXZpZXctYWNjb3JkaW9uL29yZy12aWV3LWFjY29yZGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDOztBQUtqRCxNQUFZLG9CQUFvQjtJQUUvQjs7T0FFRztJQUNILGFBQWEsaUJBQWEsQ0FBQSxrQkFBa0I7SUFFNUM7O09BRUc7SUFDSCxTQUFTLGtCQUFjLENBQUEsYUFBYTtFQUNwQzs7QUFBQSxDQUFDO0FBT0YsTUFBTSxPQUFPLHlCQUF5QjtJQStDckM7UUFFQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsb0JBQW9CLENBQUM7UUFFbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztRQUMvRCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxDQUFFLDREQUE0RDtJQUNyRixDQUFDOzs7O0lBRU0sUUFBUTtJQUVmLENBQUM7Ozs7O0lBS0QsSUFBVyxZQUFZO1FBRXRCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN4QixDQUFDOzs7Ozs7O0lBT00sZUFBZSxDQUFDLEdBQVc7UUFFakMsUUFBTyxJQUFJLENBQUMsb0JBQW9CLEVBQ2hDO1lBQ0MsS0FBSyxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYTtnQkFDN0M7b0JBQ0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7aUJBQ3BDO1lBRUQ7Z0JBQ0E7b0JBQ0MsOENBQThDO29CQUM5QyxPQUFPLElBQUksQ0FBQztpQkFDWjtTQUNEO0lBQ0YsQ0FBQzs7O1lBL0ZELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyx1NkNBQWtEOzthQUVsRDs7Ozs7eUJBWUMsS0FBSzttQkFPTCxLQUFLO29CQVFMLEtBQUs7bUNBT0wsS0FBSzswQkFRTCxLQUFLO3lCQUdMLFNBQVMsU0FBQyxZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzs7Ozs7O0lBdkN6QywwREFBbUU7Ozs7OztJQU1uRSwrQ0FDMEI7Ozs7OztJQU0xQix5Q0FDb0I7Ozs7Ozs7SUFPcEIsMENBQ29COzs7Ozs7SUFNcEIseURBQ2tEOzs7Ozs7O0lBT2xELGdEQUM2Qjs7Ozs7SUFFN0IsK0NBQ2lDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0QWNjb3JkaW9uIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG4vKipcbiAqIFRoZSBgT3JnVmlld0FjY29yZGlvbkNvbXBvbmVudGAgdHlwZS4gXG4gKi9cbmV4cG9ydCBlbnVtIE9yZ1ZpZXdBY2NvcmRpb25UeXBlXG57XG5cdC8qKlxuXHQgKiBUaGUgYE9yZ1ZpZXdBY2NvcmRpb25Db21wb25lbnRgIGlzIHVzZWQgdG8gc2hvdyByZWxhdGlvbnNoaXBzLiBcblx0ICovXG5cdFJlbGF0aW9uc2hpcHMgPSAnUmVsYWNpw7NuJy8qJ1JlbGF0aW9uc2hpcCcqLyxcblxuXHQvKipcblx0ICogVGhlIGBPcmdWaWV3QWNjb3JkaW9uQ29tcG9uZW50YCBpcyB1c2VkIHRvIHNob3cgYWRkcmVzc2VzLiBcblx0ICovXG5cdEFkZHJlc3NlcyA9ICdEaXJlY2Npw7NuJy8qJ0FkZHJlc3MnKi9cbn07XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ3RvY28tb3JnLXZpZXctYWNjb3JkaW9uJyxcblx0dGVtcGxhdGVVcmw6ICcuL29yZy12aWV3LWFjY29yZGlvbi5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL29yZy12aWV3LWFjY29yZGlvbi5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE9yZ1ZpZXdBY2NvcmRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXRcbntcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBgT3JnVmlld0FjY29yZGlvblR5cGVgIGVudW0gZm9yIGludGVybmFsIHVzZS4gXG4gICAgICovXG5cdHB1YmxpYyByZWFkb25seSBvcmdWaWV3QWNjb3JkaW9uX1R5cGU6IHR5cGVvZiBPcmdWaWV3QWNjb3JkaW9uVHlwZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb250cm9sJ3MgYXBwZWFyYW5jZS4gXG4gICAgICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGAnb3V0bGluZSdgLiBcbiAgICAgKi9cblx0QElucHV0KClcblx0cHVibGljIGFwcGVhcmFuY2U6IHN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGNvbnRyb2wncyBkZXNjcmlwdGlvbi4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYCBhbmQgaXQgaXMgbm90IHNob3dlZC4gXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgZGVzYzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgYXJyYXkgb2YgZGF0YSB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBieSB0aGUgYWNjb3JkaW9uLCB3aGVyZSBlYWNoIG9iamVjdCByZXByZXNlbnRzIG9uZSByb3cuIFxuXHQgKiBUaGlzIGFycmF5IGhhcyB0aGUgc2FtZSBsZW5ndGggdGhhbiB0aGUgYHBhbmVsc1RpdGxlYCBmaWVsZC4gXG4gICAgICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIHZhbHVlOiBhbnlbXTtcblxuXHQvKipcblx0ICogVGhlIGBPcmdWaWV3QWNjb3JkaW9uQ29tcG9uZW50YCB0eXBlLiBcbiAgICAgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYE9yZ1ZpZXdBY2NvcmRpb25UeXBlLlJlbGF0aW9uc2hpcHNgLiBcblx0ICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBvcmdWaWV3QWNjb3JkaW9uVHlwZTogT3JnVmlld0FjY29yZGlvblR5cGU7XG5cblx0LyoqXG5cdCAqIFRoZSBwYW5lbHMgdGl0bGUuIFxuXHQgKiBUaGlzIGFycmF5IGhhcyB0aGUgc2FtZSBsZW5ndGggdGhhbiB0aGUgYHZhbHVlYCBmaWVsZC4gXG4gICAgICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBbXWAuIFxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIHBhbmVsc1RpdGxlOiBzdHJpbmdbXTtcblxuXHRAVmlld0NoaWxkKE1hdEFjY29yZGlvbiwgeyBzdGF0aWM6IHRydWUgfSlcblx0cHJpdmF0ZSBfYWNjb3JkaW9uOiBNYXRBY2NvcmRpb247XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHRoaXMub3JnVmlld0FjY29yZGlvbl9UeXBlID0gT3JnVmlld0FjY29yZGlvblR5cGU7XG5cblx0XHR0aGlzLmFwcGVhcmFuY2UgPSAnb3V0bGluZSc7XG5cdFx0dGhpcy5kZXNjID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMudmFsdWUgPSBbXTtcblx0XHR0aGlzLm9yZ1ZpZXdBY2NvcmRpb25UeXBlID0gT3JnVmlld0FjY29yZGlvblR5cGUuUmVsYXRpb25zaGlwcztcblx0XHR0aGlzLnBhbmVsc1RpdGxlID0gW107ICAvKiBUaGlzIGFycmF5IGhhcyB0aGUgc2FtZSBsZW5ndGggdGhhbiB0aGUgYHZhbHVlYCBmaWVsZC4gKi9cblx0fVxuXG5cdHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkXG5cdHtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBgTWF0QWNjb3JkaW9uYCBjb250cm9sLiBcblx0ICovXG5cdHB1YmxpYyBnZXQgZ2V0QWNjb3JkaW9uKCk6IE1hdEFjY29yZGlvblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2FjY29yZGlvbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhbmVsIGhhcyBlbGVtZW50OyBvdGhlcndpc2UsIGZhbHNlLiBcblx0ICogVGhlIHBhbmVsIGFsd2F5cyBoYXMgZWxlbWVudCBieSBkZWZhdWx0LiBcblx0ICogQHBhcmFtIHBvcyBUaGUgcGFuZWwgcG9zaXRpb24uIFxuXHQgKi9cblx0cHVibGljIHBhbmVsSGFzRWxlbWVudChwb3M6IG51bWJlcik6IGJvb2xlYW5cblx0e1xuXHRcdHN3aXRjaCh0aGlzLm9yZ1ZpZXdBY2NvcmRpb25UeXBlKVxuXHRcdHtcblx0XHRcdGNhc2UgdGhpcy5vcmdWaWV3QWNjb3JkaW9uX1R5cGUuUmVsYXRpb25zaGlwczpcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIHRoaXMudmFsdWVbcG9zXS5saW5rcy5sZW5ndGg7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHR7XG5cdFx0XHRcdC8qIFRoZSBwYW5lbCBhbHdheXMgaGFzIGVsZW1lbnQgYnkgZGVmYXVsdC4gKi9cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iXX0=