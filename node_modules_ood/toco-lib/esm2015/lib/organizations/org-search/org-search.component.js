/**
 * @fileoverview added by tsickle
 * Generated from: lib/organizations/org-search/org-search.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isArray } from 'util';
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { HitList } from '../../entities/public-api';
import { FormControl } from '@angular/forms';
import { OrganizationServiceNoAuth } from '../../backend/public-api';
import { HttpParams } from '@angular/common/http';
export class OrgSearchComponent {
    /**
     * @param {?} _orgService
     */
    constructor(_orgService) {
        this._orgService = _orgService;
        /**
         * Input `orgCtrl` is a FormControl
         */
        this.orgCtrl = new FormControl();
        this.filteredOrg = new HitList();
        this.params = new HttpParams();
        this.placeholder = "Escriba al menos 3 letras";
        this.label = "Busque una organizaciÃ³n";
        this.appearance = "outline";
        /**
         * Input `cleaning` is a boolen, if true then clean the search
         */
        this.cleaning = false;
        this.selectedOrg = new EventEmitter();
        this.toSearch = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.params = this.params.set('size', '10');
        this.params = this.params.set('page', '1');
        if (this.orgFilter != undefined) {
            if (isArray(this.orgFilter)) {
                /** @type {?} */
                const filter_array = ((/** @type {?} */ (this.orgFilter)));
                for (let filter of filter_array) {
                    this.params = this.params.set(filter.type, filter.value);
                }
            }
            else {
                /** @type {?} */
                const type = ((/** @type {?} */ (this.orgFilter))).type;
                /** @type {?} */
                const value = ((/** @type {?} */ (this.orgFilter))).value;
                this.params = this.params.set(type, value);
            }
        }
        this.orgCtrl.valueChanges
            .subscribe({
            next: (/**
             * @param {?} orgValueChanges
             * @return {?}
             */
            (orgValueChanges) => {
                this.toSearch++;
                // this condition check if the param is a `string` an if at least write 3 letters
                if (this.toSearch > 3 && typeof orgValueChanges === 'string') {
                    this.toSearch = 0;
                    this.params = this.params.set('q', orgValueChanges);
                    this._orgService.getOrganizations(this.params).subscribe({
                        next: (/**
                         * @param {?} response
                         * @return {?}
                         */
                        (response) => {
                            this.filteredOrg = response.hits;
                        })
                    });
                }
                else if (typeof orgValueChanges === 'object') {
                    this.toSearch = 0;
                    this.selectedOrg.emit(orgValueChanges);
                    if (this.cleaning) {
                        this.orgCtrl.setValue('');
                    }
                }
            })
        });
    }
    /* This function return the organization name
       * @param org the Organization object
       */
    /**
     * @param {?=} org
     * @return {?}
     */
    displayFn(org) {
        return org ? org.name : undefined;
    }
}
OrgSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-org-search',
                template: "\n<mat-form-field [ngStyle]=\"{'width': '100%'}\" appearance=\"{{appearance}}\">\n    <mat-label>{{label}}</mat-label>\n    <input matInput placeholder=\"{{placeholder}}\" aria-label=\"Buscar\" [matAutocomplete]=\"auto\" [formControl]=\"orgCtrl\">\n\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n\n        <mat-option *ngFor=\"let org of filteredOrg.hits\" [value]=\"org.metadata\">\n            <span title=\"{{org.metadata.name}}\">{{org.metadata.name}}</span>\n        </mat-option>\n\n    </mat-autocomplete>\n  </mat-form-field>",
                styles: [""]
            }] }
];
/** @nocollapse */
OrgSearchComponent.ctorParameters = () => [
    { type: OrganizationServiceNoAuth }
];
OrgSearchComponent.propDecorators = {
    orgCtrl: [{ type: Input }],
    orgFilter: [{ type: Input }],
    placeholder: [{ type: Input }],
    label: [{ type: Input }],
    appearance: [{ type: Input }],
    cleaning: [{ type: Input }],
    selectedOrg: [{ type: Output }]
};
if (false) {
    /**
     * Input `orgCtrl` is a FormControl
     * @type {?}
     */
    OrgSearchComponent.prototype.orgCtrl;
    /** @type {?} */
    OrgSearchComponent.prototype.filteredOrg;
    /** @type {?} */
    OrgSearchComponent.prototype.params;
    /**
     * Input `orgFilter` is a dict with `type` and `value` to filter the organizations,
     * \@Example { type: 'country' , value: 'Cuba" }
     * @type {?}
     */
    OrgSearchComponent.prototype.orgFilter;
    /** @type {?} */
    OrgSearchComponent.prototype.placeholder;
    /** @type {?} */
    OrgSearchComponent.prototype.label;
    /** @type {?} */
    OrgSearchComponent.prototype.appearance;
    /**
     * Input `cleaning` is a boolen, if true then clean the search
     * @type {?}
     */
    OrgSearchComponent.prototype.cleaning;
    /** @type {?} */
    OrgSearchComponent.prototype.selectedOrg;
    /** @type {?} */
    OrgSearchComponent.prototype.toSearch;
    /**
     * @type {?}
     * @private
     */
    OrgSearchComponent.prototype._orgService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9vcmdhbml6YXRpb25zL29yZy1zZWFyY2gvb3JnLXNlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFnQyxPQUFPLEVBQVEsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFpQix5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQU9sRCxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBc0M3QixZQUFxQixXQUFzQztRQUF0QyxnQkFBVyxHQUFYLFdBQVcsQ0FBMkI7Ozs7UUFoQzNELFlBQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBRTVCLGdCQUFXLEdBQUcsSUFBSyxPQUFPLEVBQWdCLENBQUM7UUFFM0MsV0FBTSxHQUFFLElBQUksVUFBVSxFQUFFLENBQUM7UUFVekIsZ0JBQVcsR0FBVywyQkFBMkIsQ0FBQztRQUdsRCxVQUFLLEdBQVcseUJBQXlCLENBQUM7UUFHMUMsZUFBVSxHQUFXLFNBQVMsQ0FBQzs7OztRQU0vQixhQUFRLEdBQVksS0FBSyxDQUFDO1FBRzFCLGdCQUFXLEdBQStCLElBQUksWUFBWSxFQUFnQixDQUFDO1FBRTNFLGFBQVEsR0FBQyxDQUFDLENBQUM7SUFDcUQsQ0FBQzs7OztJQUVqRSxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FB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OztJQUUxQix5Q0FDMkU7O0lBRTNFLHNDQUFXOzs7OztJQUNFLHlDQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICd1dGlsJztcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbiwgU2VhcmNoUmVzcG9uc2UsIEhpdExpc3QsIEFnZ3IgfSBmcm9tICcuLi8uLi9lbnRpdGllcy9wdWJsaWMtYXBpJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU2VhcmNoU2VydmljZSwgT3JnYW5pemF0aW9uU2VydmljZU5vQXV0aCB9IGZyb20gJy4uLy4uL2JhY2tlbmQvcHVibGljLWFwaSc7XG5pbXBvcnQgeyBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0b2NvLW9yZy1zZWFyY2gnLFxuICB0ZW1wbGF0ZVVybDogJy4vb3JnLXNlYXJjaC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL29yZy1zZWFyY2guY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBPcmdTZWFyY2hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIC8qKlxuICAgKiBJbnB1dCBgb3JnQ3RybGAgaXMgYSBGb3JtQ29udHJvbFxuICAgKi9cbiAgQElucHV0KClcbiAgb3JnQ3RybCA9IG5ldyBGb3JtQ29udHJvbCgpO1xuXG4gIGZpbHRlcmVkT3JnID0gbmV3ICBIaXRMaXN0PE9yZ2FuaXphdGlvbj4oKTtcblxuICBwYXJhbXM9IG5ldyBIdHRwUGFyYW1zKCk7XG5cbiAgLyoqXG4gICAqIElucHV0IGBvcmdGaWx0ZXJgIGlzIGEgZGljdCB3aXRoIGB0eXBlYCBhbmQgYHZhbHVlYCB0byBmaWx0ZXIgdGhlIG9yZ2FuaXphdGlvbnMsXG4gICAqIEBFeGFtcGxlIHsgdHlwZTogJ2NvdW50cnknICwgdmFsdWU6ICdDdWJhXCIgfVxuICAgKi9cbiAgQElucHV0KClcbiAgb3JnRmlsdGVyOiB7IHR5cGU6IHN0cmluZywgdmFsdWU6IHN0cmluZ30gfCBBcnJheTx7IHR5cGU6IHN0cmluZywgdmFsdWU6IHN0cmluZ30+O1xuXG4gIEBJbnB1dCgpXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSBcIkVzY3JpYmEgYWwgbWVub3MgMyBsZXRyYXNcIjtcblxuICBASW5wdXQoKVxuICBsYWJlbDogc3RyaW5nID0gXCJCdXNxdWUgdW5hIG9yZ2FuaXphY2nDs25cIjtcblxuICBASW5wdXQoKVxuICBhcHBlYXJhbmNlOiBzdHJpbmcgPSBcIm91dGxpbmVcIjtcblxuICAvKipcbiAgICogSW5wdXQgYGNsZWFuaW5nYCBpcyBhIGJvb2xlbiwgaWYgdHJ1ZSB0aGVuIGNsZWFuIHRoZSBzZWFyY2hcbiAgICovXG4gIEBJbnB1dCgpXG4gIGNsZWFuaW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQE91dHB1dCgpXG4gIHNlbGVjdGVkT3JnOiBFdmVudEVtaXR0ZXI8T3JnYW5pemF0aW9uPiA9IG5ldyBFdmVudEVtaXR0ZXI8T3JnYW5pemF0aW9uPigpO1xuXG4gIHRvU2VhcmNoPTA7XG4gIGNvbnN0cnVjdG9yKCBwcml2YXRlIF9vcmdTZXJ2aWNlOiBPcmdhbml6YXRpb25TZXJ2aWNlTm9BdXRoKSB7ICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5wYXJhbXMgPSB0aGlzLnBhcmFtcy5zZXQoJ3NpemUnLCAnMTAnKTtcbiAgICB0aGlzLnBhcmFtcyA9IHRoaXMucGFyYW1zLnNldCgncGFnZScsICcxJyk7XG4gICAgaWYgKHRoaXMub3JnRmlsdGVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGlzQXJyYXkodGhpcy5vcmdGaWx0ZXIgKSl7XG4gICAgICAgIGNvbnN0IGZpbHRlcl9hcnJheSA9ICh0aGlzLm9yZ0ZpbHRlciBhcyBBcnJheTx7IHR5cGU6IHN0cmluZywgdmFsdWU6IHN0cmluZ30+KTtcbiAgICAgICAgZm9yKGxldCBmaWx0ZXIgb2YgZmlsdGVyX2FycmF5KXtcbiAgICAgICAgICB0aGlzLnBhcmFtcyA9IHRoaXMucGFyYW1zLnNldChmaWx0ZXIudHlwZSwgZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSAodGhpcy5vcmdGaWx0ZXIgYXMgeyB0eXBlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9ICkudHlwZTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAodGhpcy5vcmdGaWx0ZXIgYXMgeyB0eXBlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9ICkudmFsdWU7XG4gICAgICAgIHRoaXMucGFyYW1zID0gdGhpcy5wYXJhbXMuc2V0KHR5cGUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5vcmdDdHJsLnZhbHVlQ2hhbmdlc1xuICAgIC5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKG9yZ1ZhbHVlQ2hhbmdlcykgPT4ge1xuICAgICAgICB0aGlzLnRvU2VhcmNoKys7XG4gICAgICAgIC8vIHRoaXMgY29uZGl0aW9uIGNoZWNrIGlmIHRoZSBwYXJhbSBpcyBhIGBzdHJpbmdgIGFuIGlmIGF0IGxlYXN0IHdyaXRlIDMgbGV0dGVyc1xuICAgICAgICBpZiAodGhpcy50b1NlYXJjaCA+IDMgJiYgdHlwZW9mIG9yZ1ZhbHVlQ2hhbmdlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLnRvU2VhcmNoID0gMDtcbiAgICAgICAgICB0aGlzLnBhcmFtcyA9IHRoaXMucGFyYW1zLnNldCgncScsIG9yZ1ZhbHVlQ2hhbmdlcylcbiAgICAgICAgICB0aGlzLl9vcmdTZXJ2aWNlLmdldE9yZ2FuaXphdGlvbnModGhpcy5wYXJhbXMpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgIG5leHQ6IChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRPcmcgPSByZXNwb25zZS5oaXRzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3JnVmFsdWVDaGFuZ2VzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHRoaXMudG9TZWFyY2ggPSAwO1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcmcuZW1pdChvcmdWYWx1ZUNoYW5nZXMpO1xuICAgICAgICAgIGlmICh0aGlzLmNsZWFuaW5nKXtcbiAgICAgICAgICAgIHRoaXMub3JnQ3RybC5zZXRWYWx1ZSgnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuICAvKiBUaGlzIGZ1bmN0aW9uIHJldHVybiB0aGUgb3JnYW5pemF0aW9uIG5hbWVcbiAgICogQHBhcmFtIG9yZyB0aGUgT3JnYW5pemF0aW9uIG9iamVjdFxuICAgKi9cbiAgZGlzcGxheUZuKG9yZz86IE9yZ2FuaXphdGlvbik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIG9yZyA/IG9yZy5uYW1lIDogdW5kZWZpbmVkO1xuICB9XG5cbn1cbiJdfQ==