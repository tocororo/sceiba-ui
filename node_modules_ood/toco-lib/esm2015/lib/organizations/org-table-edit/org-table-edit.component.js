/**
 * @fileoverview added by tsickle
 * Generated from: lib/organizations/org-table-edit/org-table-edit.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';
import { SortDirection } from '../../core/public-api';
import { ENDPOINT_APIS, OrganizationService } from '../../backend/public-api';
import { TableComponent, CellContentWrap, TextAlign, TextInputAppearance, IconValue, IconSource, HintPosition, HintValue, ContentPosition, InputTextComponent } from '../../forms/public-api';
export class OrgTableEditComponent {
    /**
     * @param {?} _router
     * @param {?} _activatedRoute
     * @param {?} _organizationService
     */
    constructor(_router, _activatedRoute, _organizationService) {
        this._router = _router;
        this._activatedRoute = _activatedRoute;
        this._organizationService = _organizationService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* Sets an initial search value. */
        //this._inputSearch.formControl.setValue('cl');
        /***************************/
        // this.searchContent = this._initSearchContent();
        this.tableContent = this._initTableContent();
        /***************************/
        // this._tableControl.page.subscribe((value) => console.log('page', value));
    }
    /**
     * @private
     * @return {?}
     */
    _initSearchContent() {
        return {
            'formControl': InputTextComponent.getFormControlByDefault(),
            'width': '65%',
            'label': 'Write a text to search',
            'controlType': InputTextComponent,
            'textAlign': TextAlign.left,
            'ariaLabel': 'Search',
            'appearance': TextInputAppearance.outline,
            'prefixIcon': new IconValue(IconSource.external, ContentPosition.prefix, 'search'),
            'startHint': new HintValue(HintPosition.start, 'Searches when typing stops.')
        };
    }
    /**
     * @private
     * @return {?}
     */
    _initTableContent() {
        return {
            'columnsObjectProperty': ['name', 'status', 'email_address'],
            //'columnsObjectProperty': ['id', 'name', 'registrationDate'],
            'columnsHeaderText': ['Nombre', 'Estatus', 'DirecciÃ³n de Correo'],
            //'columnsHeaderText': ['id', 'name', 'registrationDate'],
            'columnsWidth': ['60%', '22%', '18%'],
            'columnContentWrap': [CellContentWrap.ellipsis, CellContentWrap.ellipsis, CellContentWrap.responsible],
            'createCssClassesForRow': (/**
             * @param {?} rowData
             * @return {?}
             */
            (rowData) => {
                return {
                    //'new-release': rowData['email_address'],
                    'selected-row': (rowData[this.tableContent.propertyNameToIdentify]) == this._tableControl.selectedRow
                };
            }),
            'propertyNameToIdentify': 'id',
            //'propertyNameToIdentify': 'id',
            // 'filter': {
            //     'search': this._inputSearch,
            //     //'registration': undefined
            // },
            'sort': {
                'active': 'id',
                'direction': SortDirection.desc
            },
            'pageIndex': 0,
            'pageSize': 5,
            'pageSizeOptions': [5, 10, 20, 50],
            //'hidePageSize': true,
            'showFirstLastButtons': true,
            'endpoint': this._getMySources.bind(this),
            //'endpoint': this._userService.page.bind(this._userService),
            actions: [
                { icon: 'visibility', route: 'ver', tooltip: 'Ver' },
                { icon: 'edit', route: 'editar', tooltip: 'Editar' },
            ]
        };
    }
    /**
     * @private
     * @param {?} pageRequest
     * @return {?}
     */
    _getMySources(pageRequest) {
        return this._organizationService.get(ENDPOINT_APIS.organizations, []).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            console.log('Organizations Response: ', response);
            // if (response && response.status != ResponseStatus.ERROR){
            return {
                'data': response,
                'totalData': response.length,
                'pageIndex': pageRequest.paginator.pageIndex,
                'pageSize': pageRequest.paginator.pageSize
            };
            // }
        })));
    }
    /**
     * @return {?}
     */
    doOperation() {
        this._router.navigate(['organizaciones/adicionar']);
    }
}
OrgTableEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-org-table-edit',
                template: "\n<!-- <container-simple [content]=\"identifiersContent\"></container-simple> -->\n<!-- <container-simple [content]=\"identifiersContent_Complex\"></container-simple> -->\n\n<div [ngStyle]=\"{'margin': '1em 0 1em 0'}\">\n    <button mat-raised-button color=\"primary\" (click)=\"doOperation()\">Add Organization</button>\n    <!-- <input-text #input_search [content]=\"searchContent\"></input-text> -->\n  </div>\n  \n  <!-- <toco-table></toco-table> -->\n  <toco-table [content]=\"tableContent\"></toco-table>\n  ",
                styles: [""]
            }] }
];
/** @nocollapse */
OrgTableEditComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: OrganizationService }
];
OrgTableEditComponent.propDecorators = {
    _tableControl: [{ type: ViewChild, args: [TableComponent, { static: true },] }]
};
if (false) {
    /**
     * Contains the content of the identifiers section.
     * @type {?}
     */
    OrgTableEditComponent.prototype.identifiersContent;
    /**
     * The sources list.
     * Use this field to initialize only; to change value use the `_tableControl` field.
     * @type {?}
     */
    OrgTableEditComponent.prototype.tableContent;
    /**
     * @type {?}
     * @private
     */
    OrgTableEditComponent.prototype._tableControl;
    /**
     * @type {?}
     * @private
     */
    OrgTableEditComponent.prototype._router;
    /**
     * @type {?}
     * @private
     */
    OrgTableEditComponent.prototype._activatedRoute;
    /**
     * @type {?}
     * @private
     */
    OrgTableEditComponent.prototype._organizationService;
}
//# sourceMappingURL=data:application/json;base64,