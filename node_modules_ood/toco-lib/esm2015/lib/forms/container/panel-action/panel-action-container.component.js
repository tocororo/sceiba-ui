/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/panel-action/panel-action-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ContainerControl } from '../container.control';
/**
 * @record
 */
export function PanelAction() { }
if (false) {
    /**
     * @param {?} data
     * @return {?}
     */
    PanelAction.prototype.doit = function (data) { };
}
/**
 * An interface that represents the content of a panel control.
 * @record
 */
export function PanelActionContent() { }
if (false) {
    /**
     * Returns the panel's description.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    PanelActionContent.prototype.description;
    /**
     * Returns the panel's icon name.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    PanelActionContent.prototype.iconName;
    /**
     * Returns the action and action labels for each panel.
     * @type {?|undefined}
     */
    PanelActionContent.prototype.action;
    /** @type {?|undefined} */
    PanelActionContent.prototype.actionLabel;
}
/**
 * Represents a container control that is showed as a panel.
 * Usage notes:
 *  - It can be used as:
 * <container-panel [content]="panelContent"></container-panel>
 * Where `content.formSection` is created, for example, as this:
 * this.content.formSection = new FormGroup({ }, [ ]);
 */
export class ContainerPanelActionComponent extends ContainerControl {
    constructor() {
        super();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* Sets the default values. */
        this.init('');
    }
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @return {?}
     */
    init(label) {
        /* Sets the default values. */
        super.init(label);
        /* The `content.description`, and `content.iconName` fields
        have the `undefined` value by default. */
    }
    /**
     * @return {?}
     */
    doAction() {
        // const data = {};
        // this.content..formSectionContent.forEach(element => {
        //   element
        // });
        // this.panelsContent.forEach((panel) => {
        //   panel.formSectionContent.forEach((controlContent) => {
        //     data[controlContent.name] = controlContent.value;
        //   });
        // });
        if (this.content.action) {
            this.content.action.doit(this.content.value);
        }
    }
}
ContainerPanelActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'container-panel-action',
                template: "<mat-card\n  class=\"container-panel-mat-card\"\n  [formGroup]=\"content.formSection\"\n  [attr.aria-label]=\"content.ariaLabel\"\n>\n  <mat-card-header>\n    <mat-card-title *ngIf=\"content.label\">\n      {{ content.label }}\n    </mat-card-title>\n    <mat-card-subtitle *ngIf=\"content.description\">\n      {{ content.description }}\n      <mat-icon>{{ content.iconName }}</mat-icon>\n    </mat-card-subtitle>\n  </mat-card-header>\n\n  <mat-card-content\n    fxLayout=\"row wrap\"\n    fxLayout.xs=\"column\"\n    fxLayoutAlign=\"space-between end\"\n    fxLayoutAlign.xs=\"space-between center\"\n    fxLayoutGap=\"1em\"\n    class=\"form-field-component\"\n  >\n    <ng-template get-view-container></ng-template>\n  </mat-card-content>\n\n  <mat-card-actions *ngIf=\"content.actionLabel\">\n    <button\n      *ngIf=\"content.actionLabel\"\n      mat-button\n      color=\"accent\"\n      (click)=\"doAction()\"\n    >\n      {{ content.actionLabel }}\n    </button>\n  </mat-card-actions>\n\n  <mat-card-actions *ngIf=\"content.isDynamic\">\n    <button mat-raised-button color=\"primary\" (click)=\"addToFormArray()\">\n      <!-- <mat-icon>add box</mat-icon> -->\n      <mat-icon>add_circle</mat-icon>\n      Add new item\n    </button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"!canRemoveFromFormArray\"\n      (click)=\"clearFormArray()\"\n    >\n      <!-- <mat-icon>remove box</mat-icon> -->\n      <mat-icon>remove_circle</mat-icon>\n      Clear all\n    </button>\n  </mat-card-actions>\n</mat-card>\n",
                host: {
                    '[style.minWidth]': 'content.minWidth',
                    '[style.width]': 'content.width'
                },
                styles: [""]
            }] }
];
/** @nocollapse */
ContainerPanelActionComponent.ctorParameters = () => [];
ContainerPanelActionComponent.propDecorators = {
    content: [{ type: Input }]
};
if (false) {
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    ContainerPanelActionComponent.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtYWN0aW9uLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9jb250YWluZXIvcGFuZWwtYWN0aW9uL3BhbmVsLWFjdGlvbi1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFvQixnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBSTFFLGlDQUVDOzs7Ozs7SUFEQyxpREFBc0I7Ozs7OztBQVF4Qix3Q0F5QkM7Ozs7Ozs7SUFiRyx5Q0FBcUI7Ozs7OztJQU1yQixzQ0FBa0I7Ozs7O0lBS2xCLG9DQUFxQjs7SUFDckIseUNBQXFCOzs7Ozs7Ozs7O0FBb0J6QixNQUFNLE9BQU8sNkJBQThCLFNBQVEsZ0JBQWdCO0lBUWxFO1FBRU8sS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDOzs7O0lBRU0sUUFBUTtRQUVkLDhCQUE4QjtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Ozs7Ozs7SUFNUyxJQUFJLENBQUMsS0FBYTtRQUV4Qiw4QkFBOEI7UUFFOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsQjtpREFDeUM7SUFDN0MsQ0FBQzs7OztJQUNNLFFBQVE7UUFFYixtQkFBbUI7UUFDbkIsd0RBQXdEO1FBQ3hELFlBQVk7UUFDWixNQUFNO1FBQ04sMENBQTBDO1FBQzFDLDJEQUEyRDtRQUMzRCx3REFBd0Q7UUFDeEQsUUFBUTtRQUNSLE1BQU07UUFFTixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlDO0lBR0gsQ0FBQzs7O1lBMURKLFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxtaURBQXNEO2dCQUV0RCxJQUFJLEVBQUU7b0JBQ0wsa0JBQWtCLEVBQUUsa0JBQWtCO29CQUN0QyxlQUFlLEVBQUUsZUFBZTtpQkFDaEM7O2FBQ0Q7Ozs7O3NCQU1JLEtBQUs7Ozs7Ozs7SUFBTixnREFDZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb250YWluZXJDb250ZW50LCBDb250YWluZXJDb250cm9sIH0gZnJvbSAnLi4vY29udGFpbmVyLmNvbnRyb2wnO1xuXG5cblxuZXhwb3J0IGludGVyZmFjZSBQYW5lbEFjdGlvbiB7XG4gIGRvaXQoZGF0YTogYW55KTogdm9pZDtcbn1cblxuXG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgY29udGVudCBvZiBhIHBhbmVsIGNvbnRyb2wuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFuZWxBY3Rpb25Db250ZW50IGV4dGVuZHMgQ29udGFpbmVyQ29udGVudFxue1xuICAgIC8qKlxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGBsYWJlbD86IHN0cmluZ2AgZmllbGQgaW5oZXJpdGVkIGZyb20gYEZvcm1GaWVsZENvbnRlbnRgIGlzIGludGVycHJldGVkIGFzOlxuICAgICAqIFJldHVybnMgdGhlIGNvbnRyb2wncyB0aXRsZS5cbiAgICAgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCcnYC4gRWFjaCBjb250cm9sIHNldHMgaXRzIG93biBsYWJlbCAodGl0bGUpLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGFuZWwncyBkZXNjcmlwdGlvbi5cbiAgICAgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwYW5lbCdzIGljb24gbmFtZS5cbiAgICAgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgaWNvbk5hbWU/OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFjdGlvbiBhbmQgYWN0aW9uIGxhYmVscyBmb3IgZWFjaCBwYW5lbC5cbiAgICAgKi9cbiAgICBhY3Rpb24/OiBQYW5lbEFjdGlvbjtcbiAgICBhY3Rpb25MYWJlbD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29udGFpbmVyIGNvbnRyb2wgdGhhdCBpcyBzaG93ZWQgYXMgYSBwYW5lbC5cbiAqIFVzYWdlIG5vdGVzOlxuICogIC0gSXQgY2FuIGJlIHVzZWQgYXM6XG4gKiA8Y29udGFpbmVyLXBhbmVsIFtjb250ZW50XT1cInBhbmVsQ29udGVudFwiPjwvY29udGFpbmVyLXBhbmVsPlxuICogV2hlcmUgYGNvbnRlbnQuZm9ybVNlY3Rpb25gIGlzIGNyZWF0ZWQsIGZvciBleGFtcGxlLCBhcyB0aGlzOlxuICogdGhpcy5jb250ZW50LmZvcm1TZWN0aW9uID0gbmV3IEZvcm1Hcm91cCh7IH0sIFsgXSk7XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2NvbnRhaW5lci1wYW5lbC1hY3Rpb24nLFxuXHR0ZW1wbGF0ZVVybDogJy4vcGFuZWwtYWN0aW9uLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL3BhbmVsLWFjdGlvbi1jb250YWluZXIuY29tcG9uZW50LnNjc3MnXSxcblx0aG9zdDoge1xuXHRcdCdbc3R5bGUubWluV2lkdGhdJzogJ2NvbnRlbnQubWluV2lkdGgnLFxuXHRcdCdbc3R5bGUud2lkdGhdJzogJ2NvbnRlbnQud2lkdGgnXG5cdH1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyUGFuZWxBY3Rpb25Db21wb25lbnQgZXh0ZW5kcyBDb250YWluZXJDb250cm9sIGltcGxlbWVudHMgT25Jbml0XG57XG4gICAgLyoqXG4gICAgICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY29udGVudCBvZiB0aGlzIGNsYXNzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG5cdHB1YmxpYyBjb250ZW50OiBQYW5lbEFjdGlvbkNvbnRlbnQ7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKClcblx0e1xuICAgICAgICBzdXBlcigpO1xuXHR9XG5cblx0cHVibGljIG5nT25Jbml0KCk6IHZvaWRcblx0e1xuXHRcdC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuICAgICAgICB0aGlzLmluaXQoJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBgY29udGVudGAgaW5wdXQgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIGxhYmVsIFRoZSBkZWZhdWx0IGxhYmVsIHRvIHVzZS4gSXQgaXMgdXNlZCBpZiB0aGUgYGNvbnRlbnQubGFiZWxgIGlzIG5vdCBzcGVjaWZpZWQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGluaXQobGFiZWw6IHN0cmluZyk6IHZvaWRcbiAgICB7XG4gICAgICAgIC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuXG4gICAgICAgIHN1cGVyLmluaXQobGFiZWwpO1xuXG4gICAgICAgIC8qIFRoZSBgY29udGVudC5kZXNjcmlwdGlvbmAsIGFuZCBgY29udGVudC5pY29uTmFtZWAgZmllbGRzXG4gICAgICAgIGhhdmUgdGhlIGB1bmRlZmluZWRgIHZhbHVlIGJ5IGRlZmF1bHQuICovXG4gICAgfVxuICAgIHB1YmxpYyBkb0FjdGlvbigpOiB2b2lkIHtcblxuICAgICAgLy8gY29uc3QgZGF0YSA9IHt9O1xuICAgICAgLy8gdGhpcy5jb250ZW50Li5mb3JtU2VjdGlvbkNvbnRlbnQuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIC8vICAgZWxlbWVudFxuICAgICAgLy8gfSk7XG4gICAgICAvLyB0aGlzLnBhbmVsc0NvbnRlbnQuZm9yRWFjaCgocGFuZWwpID0+IHtcbiAgICAgIC8vICAgcGFuZWwuZm9ybVNlY3Rpb25Db250ZW50LmZvckVhY2goKGNvbnRyb2xDb250ZW50KSA9PiB7XG4gICAgICAvLyAgICAgZGF0YVtjb250cm9sQ29udGVudC5uYW1lXSA9IGNvbnRyb2xDb250ZW50LnZhbHVlO1xuICAgICAgLy8gICB9KTtcbiAgICAgIC8vIH0pO1xuXG4gICAgICBpZiAodGhpcy5jb250ZW50LmFjdGlvbikge1xuICAgICAgICB0aGlzLmNvbnRlbnQuYWN0aW9uLmRvaXQodGhpcy5jb250ZW50LnZhbHVlKTtcbiAgICAgIH1cblxuXG4gICAgfVxufVxuXG4iXX0=