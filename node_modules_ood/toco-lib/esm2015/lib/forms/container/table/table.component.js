/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/table/table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { MatTableDataSource, MatSort, MatPaginator } from '@angular/material';
import { Subscription, Subject, combineLatest } from 'rxjs';
import { startWith, switchMap, finalize, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { SortDirection } from '../../../core/public-api';
/** @enum {number} */
const CellContentWrap = {
    /**
     * The `break` wrap breaks the content when reaching the end of a line.
     */
    break: 0,
    /**
     * The `ellipsis` wrap clips the remaining content and renders an ellipsis ("...")
     * to represent the clipped content.
     */
    ellipsis: 1,
    /**
     * The `responsible` wrap is the default style. It only applies the responsible styles
     * that are defined in the table.
     */
    responsible: 2,
};
export { CellContentWrap };
CellContentWrap[CellContentWrap.break] = 'break';
CellContentWrap[CellContentWrap.ellipsis] = 'ellipsis';
CellContentWrap[CellContentWrap.responsible] = 'responsible';
/**
 * @record
 */
export function TableAction() { }
if (false) {
    /** @type {?} */
    TableAction.prototype.icon;
    /** @type {?} */
    TableAction.prototype.route;
    /** @type {?} */
    TableAction.prototype.tooltip;
}
/**
 * A interface that represents the content of a table control.
 * The generic parameter T always refers to the type of data that it is dealing with.
 * @record
 * @template T
 */
export function TableContent() { }
if (false) {
    /**
     * Returns the array of strings that indicates the object property name of the columns.
     * By default, its value is `[]`.
     * @type {?|undefined}
     */
    TableContent.prototype.columnsObjectProperty;
    /**
     * Returns the array of strings that indicates the header text of the columns.
     * By default, its value is `[]`.
     * @type {?|undefined}
     */
    TableContent.prototype.columnsHeaderText;
    /**
     * Returns the array of strings that indicates the width of the columns.
     * By default, its value is `[]`.
     * @type {?|undefined}
     */
    TableContent.prototype.columnsWidth;
    /**
     * Returns the array of `CellContentWrap` that indicates how to wrap the content of the columns.
     * By default, its value is `[]`.
     * @type {?|undefined}
     */
    TableContent.prototype.columnContentWrap;
    /**
     * Returns a function that creates the list of CSS classes to apply to the table rows.
     * In order to take effect these classes, the table CSS file must have defined these classes.
     * By default, its value is `undefined`.
     * \@param rowData The data that is contained in the row.
     * @type {?|undefined}
     */
    TableContent.prototype.createCssClassesForRow;
    /**
     * Returns the property name of the data contained in `page` that is used to identify that data.
     * By default, its value is `''`.
     * @type {?|undefined}
     */
    TableContent.prototype.propertyNameToIdentify;
    /**
     * The current filter state.
     * By default, its value is `{}`.
     * @type {?|undefined}
     */
    TableContent.prototype.filter;
    /**
     * The current sort state.
     * By default, its value is `{ 'active': propertyNameToIdentify, 'direction': SortDirection.asc }`.
     * @type {?|undefined}
     */
    TableContent.prototype.sort;
    /**
     * Returns the length of the total number of items that are being paginated.
     * By default, its value is `0`.
     * @type {?|undefined}
     */
    TableContent.prototype.length;
    /**
     * Returns the zero-based page index of the displayed list of items.
     * By default, its value is `0`.
     * @type {?|undefined}
     */
    TableContent.prototype.pageIndex;
    /**
     * Returns the number of items to display on a page.
     * By default, its value is `50`.
     * @type {?|undefined}
     */
    TableContent.prototype.pageSize;
    /**
     * Returns the set of provided page size options to display to the user.
     * By default, its value is `[10, 20, 50]`.
     * @type {?|undefined}
     */
    TableContent.prototype.pageSizeOptions;
    /**
     * Returns true if it hides the page size selection UI from the user; otherwise, false.
     * By default, its value is `false`.
     * @type {?|undefined}
     */
    TableContent.prototype.hidePageSize;
    /**
     * Returns true if it shows the first/last buttons UI to the user; otherwise, false.
     * By default, its value is `false`.
     * @type {?|undefined}
     */
    TableContent.prototype.showFirstLastButtons;
    /**
     * Returns the function that is used to get the data source from backend.
     * The generic parameter T always refers to the type of data that it is dealing with.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    TableContent.prototype.endpoint;
    /** @type {?|undefined} */
    TableContent.prototype.actions;
}
/**
 * Returns a new object that represents the default `TableContent`.
 * @return {?}
 */
export function defaultTableContent() {
    return {
        'columnsObjectProperty': [],
        'columnsHeaderText': [],
        'columnsWidth': [],
        'columnContentWrap': [],
        'createCssClassesForRow': undefined,
        'propertyNameToIdentify': '',
        'filter': {},
        'sort': {
            'active': this._content.propertyNameToIdentify,
            'direction': SortDirection.asc
        },
        'length': 0,
        'pageIndex': 0,
        'pageSize': 50,
        'pageSizeOptions': [10, 20, 50],
        'hidePageSize': false,
        'showFirstLastButtons': false,
        'endpoint': undefined
    };
}
/**
 * \@description
 * Represents a table control.
 */
export class TableComponent {
    /**
     * @param {?} _router
     * @param {?} _activatedRoute
     */
    constructor(_router, _activatedRoute) {
        this._router = _router;
        this._activatedRoute = _activatedRoute;
        /* By default, its value is `0`, means the component is NOT loading the data source. */
        this._countBackendSubscriptions = 0;
        this._page = new Subject();
        this._pageAsObservable = this._page.asObservable();
        this._dataSource = new MatTableDataSource();
        this._selectedRow = undefined;
        this._filterValuesChange = new Subject();
        this._filterValues = {};
        this._filterValuesSubscription = {};
        this._renderChangesSubscription = Subscription.EMPTY;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* Sets the default values only if the `_content` has not been set yet. */
        if (this._content == undefined) {
            this.init();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /* Disposes the resources held by the subscription. */
        Object.keys(this._filterValuesSubscription).forEach((/**
         * @param {?} name
         * @return {?}
         */
        (name) => {
            this._filterValuesSubscription[name].unsubscribe();
        }));
        /* Disposes the resources held by the subscription. */
        this._renderChangesSubscription.unsubscribe();
    }
    /**
     * Returns true if the data source is empty; otherwise, false.
     * @return {?}
     */
    get isEmpty() {
        return (this._dataSource.data.length == 0);
    }
    /**
     * Initializes the component.
     * @protected
     * @return {?}
     */
    init() {
        this._initContent();
        this._updateChangeSubscription();
    }
    /**
     * Initializes the `content` input property.
     * @private
     * @return {?}
     */
    _initContent() {
        /* Sets the default values. */
        if (this._content == undefined)
            this._content = {}; /* This code line must be here. */
        /**************************** `mat-cell` properties. ******************************/
        if (this._content.columnsObjectProperty == undefined)
            this._content.columnsObjectProperty = [];
        if (this._content.columnsHeaderText == undefined)
            this._content.columnsHeaderText = [];
        if (this._content.columnsWidth == undefined)
            this._content.columnsWidth = [];
        if (this._content.columnContentWrap == undefined)
            this._content.columnContentWrap = [];
        if (this._content.createCssClassesForRow == undefined)
            this._content.createCssClassesForRow = this.defaultCreateCssClassesForRow.bind(this);
        /**************************** `mat-row` properties. *******************************/
        if (this._content.propertyNameToIdentify == undefined)
            this._content.propertyNameToIdentify = '';
        /**************************** `filter` properties. ********************************/
        if (this._content.filter == undefined)
            this._content.filter = {};
        /***************************** `sort` properties. *********************************/
        if (this._content.sort == undefined)
            this._content.sort = {
                'active': this._content.propertyNameToIdentify,
                'direction': SortDirection.asc
            };
        /************************* `mat-paginator` properties. ****************************/
        if (this._content.length == undefined)
            this._content.length = 0;
        if (this._content.pageIndex == undefined)
            this._content.pageIndex = 0;
        if (this._content.pageSize == undefined)
            this._content.pageSize = 50;
        if (this._content.pageSizeOptions == undefined)
            this._content.pageSizeOptions = [10, 20, 50];
        if (this._content.hidePageSize == undefined)
            this._content.hidePageSize = false;
        if (this._content.showFirstLastButtons == undefined)
            this._content.showFirstLastButtons = false;
        /************************** Internal control properties. **************************/
        /******************************* Other properties. ********************************/
        /* The `_content.endpoint` field is `undefined` by default. */
        /************************ Must be the last initialization. ************************/
        this.checkColumn();
    }
    /**
     * Updates the fields related to the filter component.
     * @private
     * @return {?}
     */
    _updateFilter() {
        /* For each filter property. */
        Object.keys(this._content.filter).forEach((/**
         * @param {?} filterName
         * @return {?}
         */
        (filterName) => {
            /* Saves the initial values. */
            this._filterValues[filterName] = this._content.filter[filterName].content.formControl.value;
            /* Disposes the resources held by the subscription. */
            if (this._filterValuesSubscription[filterName] != undefined)
                this._filterValuesSubscription[filterName].unsubscribe();
            /* Subscribes to observe the changes in the control value when there is an external change. */
            this._filterValuesSubscription[filterName] = this._content.filter[filterName].content.formControl.valueChanges.pipe(
            /* Waits 500ms after each keystroke before considering the term. */
            debounceTime(500), 
            /* Ignores new term if same as previous term. */
            distinctUntilChanged())
                .subscribe((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                this.applyFilter(filterName, value);
            }));
        }));
    }
    /**
     * Updates the fields related to sorting.
     * @private
     * @param {?} sortEvent The new sorting to set.
     * @return {?}
     */
    _updateSort(sortEvent) {
        /* In this case, `_content` is updated with the new values; the `MatSort` already has them. */
        this._content.sort.active = sortEvent.active;
        this._content.sort.direction = sortEvent.direction;
    }
    /**
     * Sets the `MatSort` initial values.
     * The filter component and `MatPaginator` are initialized in a different way.
     * @private
     * @return {?}
     */
    _setMatSortInitialValue() {
        /* Saves the initial values. */
        this._sort.active = this._content.sort.active;
        this._sort.direction = this._content.sort.direction;
    }
    /**
     * Updates the fields related to pagination.
     * @private
     * @param {?} newPage The new page to set. Its type is `Page<any>` or `PageEvent`.
     * @return {?}
     */
    _updatePaginator(newPage) {
        /* In this case, `_content` is updated with the new values, then the `MatPaginator`
         * takes the values via property binding from `_content` (through the template). */
        this._content.length = (newPage.totalData || newPage.length);
        this._content.pageIndex = newPage.pageIndex;
        this._content.pageSize = newPage.pageSize;
    }
    /**
     * Sets the `MatSort` and `MatPaginator` disabled or not.
     * @private
     * @param {?} disabled Whether the `MatSort` and `MatPaginator` are disabled.
     * @return {?}
     */
    _disabledSortPaginator(disabled) {
        this._sort.disabled = disabled;
        this._paginator.disabled = disabled;
    }
    /**
     * Subscribes to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     * @private
     * @return {?}
     */
    _updateChangeSubscription() {
        if (this._content.endpoint == undefined)
            return;
        /* Disposes the resources held by the subscription. */
        this._renderChangesSubscription.unsubscribe();
        /* Updates the fields related to the filter component; the `MatSort` and `MatPaginator` are updated later. */
        this._updateFilter();
        /* Sets the `MatSort` initial values; the filter component and `MatPaginator` are initialized in a different way. */
        this._setMatSortInitialValue();
        /* The `_filterValuesChange` is always present; although the user decides if it is used or not.
         * Also, `MatSort` and `MatPaginator` are always present because they are managed by the component completely.
         * Subscribes to get the values when there is a change in the filtering, sorting, or pagination of the data. */
        this._renderChangesSubscription = combineLatest([
            this._filterValuesChange.pipe(
            /* Emits the first value. Filters using the initial values. The operators must be called in this order. */
            startWith(this._filterValues)),
            this._sort.sortChange.pipe(
            /* Emits the first value. Sorts using the initial values. The operators must be called in this order. */
            startWith(this._content.sort)),
            this._paginator.page.pipe(
            /* Emits the first value. Paginates using the initial values. */
            startWith({
                'pageIndex': this._content.pageIndex,
                'pageSize': this._content.pageSize,
                'length': 0 /* In the first value, it is not important. */
            }))
        ]).pipe(
        /* Switches to new search observable each time the term changes. */
        switchMap((/**
         * @param {?} __0
         * @return {?}
         */
        ([filterEvent, sortEvent, pageEvent]) => {
            /* Adds the new backend subscription. It begins/continues the loading of the data.
             * In this way, it shows the loading progress control. */
            this._countBackendSubscriptions++;
            console.log('Call _countBackendSubscriptions: ', this._countBackendSubscriptions);
            /* Erases the data from the table. */
            this._setDataBeforeCallEndpoint(sortEvent, pageEvent);
            return this._content.endpoint({
                'filter': filterEvent,
                'sort': sortEvent,
                'paginator': pageEvent
            }).pipe(finalize((/**
             * @return {?}
             */
            () => {
                /* Removes the last backend subscription. In this way, when its value is `0`,
                 * means the component is NOT loading the data source; it then hides the loading progress control. */
                this._countBackendSubscriptions--;
            })));
        }))).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            //console.log('Endpoint Response: ', response);
            /* Sets the new data on the table. */
            this._setDataAfterCallEndpoint(response);
            /* Emits the new page for someone that wants to know it. */
            this._page.next(response);
        }));
    }
    /**
     * Returns the list of CSS classes to apply to the table rows. This method must be only overwrite,
     * but must never be called for performance reason; it is called in the correct places internally.
     * In order to take effect these classes, the table CSS file must have defined these classes.
     * @protected
     * @param {?} rowData The data that is contained in the row.
     * @return {?}
     */
    defaultCreateCssClassesForRow(rowData) {
        return {
            'selected-row': (rowData[this._content.propertyNameToIdentify]) == this._selectedRow
        };
    }
    /**
     * Returns the list of CSS styles to apply to the table headers. This method must never be called
     * because it is for internal use only; it is called in the correct places internally.
     * @param {?} pos The column position.
     * @return {?}
     */
    _createCssStylesForHeader(pos) {
        /** @type {?} */
        let result = {};
        this._addCssStyles_CellWidth(result, pos);
        return result;
    }
    /**
     * Returns the list of CSS styles to apply to the table cells. This method must never be called
     * because it is for internal use only; it is called in the correct places internally.
     * @param {?} pos The column position.
     * @return {?}
     */
    _createCssStylesForCell(pos) {
        /** @type {?} */
        let result = {};
        this._addCssStyles_CellWidth(result, pos);
        this._addCssStyles_CellContentWrap(result, pos);
        return result;
    }
    /**
     * @private
     * @param {?} cssStyles
     * @param {?} pos
     * @return {?}
     */
    _addCssStyles_CellWidth(cssStyles, pos) {
        cssStyles['flex'] = '0 0 ' + this._content.columnsWidth[pos];
        cssStyles['width'] = this._content.columnsWidth[pos];
    }
    /**
     * @private
     * @param {?} cssStyles
     * @param {?} pos
     * @return {?}
     */
    _addCssStyles_CellContentWrap(cssStyles, pos) {
        switch (this._content.columnContentWrap[pos]) {
            case CellContentWrap.break:
                {
                    cssStyles['word-wrap'] = 'break-word' /*!important*/;
                    cssStyles['white-space'] = 'unset' /*!important*/;
                    cssStyles['overflow-wrap'] = 'break-word';
                    cssStyles['word-break'] = 'break-word';
                    cssStyles['-ms-hyphens'] = 'auto';
                    cssStyles['-moz-hyphens'] = 'auto';
                    cssStyles['-webkit-hyphens'] = 'auto';
                    cssStyles['hyphens'] = 'auto';
                    break;
                }
            case CellContentWrap.ellipsis:
                {
                    cssStyles['overflow'] = 'hidden';
                    cssStyles['text-overflow'] = 'ellipsis';
                    cssStyles['white-space'] = 'nowrap';
                    break;
                }
            default: /* CellContentWrap.responsible */
                {
                    /* The `responsible` wrap is the default style. It only applies the responsible styles
                     * that are defined in the table. */
                    break;
                }
        }
    }
    /**
     * Returns true if it is loading the data source; otherwise, false.
     * @return {?}
     */
    get isLoading() {
        /* When the `_countBackendSubscriptions` value is different of 0,
         * means the component is loading the data source. */
        return (this._countBackendSubscriptions != 0);
    }
    /**
     * Returns the selected row.
     * @return {?}
     */
    get selectedRow() {
        return this._selectedRow;
    }
    /**
     * Returns the input field that contains the content of this class (the table control content to show).
     * @return {?}
     */
    get content() {
        return this._content;
    }
    /**
     * Sets the input field that contains the content of this class (the table control content to show).
     * In this way, the component is updated correctly.
     * @param {?} newContent The new content to set.
     * If the value is null, sets to `defaultTableContent`.
     * @return {?}
     */
    set content(newContent) {
        this._content = newContent;
        this.init();
    }
    /**
     * Returns the stream that emits the page that should be rendered by the table,
     * when there is a change in the filtering, sorting, or pagination of the data. Each object
     * in the `data` field represents one row. This is made for someone that wants to know it.
     * @return {?}
     */
    get page() {
        return this._pageAsObservable;
    }
    /**
     * Sets the page that should be rendered by the table, it erases the data. For internal use only.
     * @private
     * @param {?} sortEvent The current sort state.
     * @param {?} pageEvent The current paginator state.
     * @return {?}
     */
    _setDataBeforeCallEndpoint(sortEvent, pageEvent) {
        /* Erases the data from the table. */
        this._dataSource.data = [];
        /* Updates the fields related to sorting and pagination; the filter component is updated in a different way. */
        this._updateSort(sortEvent);
        this._updatePaginator(pageEvent);
        /* The `MatSort` and `MatPaginator` are always enabled. */
        this._disabledSortPaginator(false);
    }
    /**
     * Sets the page that should be rendered by the table, where each object in the `newPage.data`
     * represents one row. For internal use only.
     * @private
     * @param {?} newPage The new page to set.
     * @return {?}
     */
    _setDataAfterCallEndpoint(newPage) {
        /* In `_dataSource`, needs to update the data only. */
        this._dataSource.data = newPage.data;
        /* Updates the fields related to pagination; the filter component and sorting do not need to update. */
        this._updatePaginator(newPage);
        /* The `MatSort` and `MatPaginator` are disabled if the table is empty. */
        this._disabledSortPaginator(this.isEmpty);
    }
    /**
     * Returns the data source to render. If the data source is empty, then returns the default data source
     * that contains only one empty element (it is used to show one row that contains the empty
     * table information). For internal use only.
     * @return {?}
     */
    get _getDataSource() {
        if (this.isEmpty)
            return TableComponent._defaultDataSource;
        return this._dataSource;
    }
    /**
     * Checks column. Logs a warn to the console is the array of columns is empty.
     * @return {?}
     */
    checkColumn() {
        /** @type {?} */
        const len = this._content.columnsObjectProperty.length;
        if ((len == 0)
            || (len != this._content.columnsHeaderText.length)
            || (len != this._content.columnsWidth.length)
            || (len != this._content.columnContentWrap.length)) {
            console.warn("The 'columnsObjectProperty', 'columnsHeaderText', 'columnsWidth' and 'columnContentWrap' arrays must be different of empty, and must have the same amount of elements.");
        }
    }
    /**
     * Navigates to the view that shows information about the specified `rowData`.
     * @param {?} relativeUrl The relative URL to navigate.
     * @param {?} rowData The data that is contained in the row.
     * @return {?}
     */
    navigateTo(relativeUrl, rowData) {
        /* Selects the specified row. */
        this.selectRow(rowData);
        /* Navigates to the specified view. */
        this._router.navigate([rowData[this._content.propertyNameToIdentify], relativeUrl], { relativeTo: this._activatedRoute });
    }
    /**
     * Selects the specified row.
     * @param {?} rowData The data that is contained in the row.
     * @return {?}
     */
    selectRow(rowData) {
        /* Saves the selected row. */
        this._selectedRow = rowData[this._content.propertyNameToIdentify];
    }
    /**
     * Applies the filter model that should be used to filter out objects from the data source.
     * Assumes that the backend will call the `trim()` method over its properties.
     * This method is accepting a partial representation of the filter model.
     * It combines the specified filter with the last one. This way old filter properties
     * won't be overridden when only one property is updated.
     * @param {?} filter The partial representation of the filter model to combine.
     * @return {?}
     */
    applyFilters(filter) {
        /* This method is accepting a partial representation of the filter model.
         * It combines the specified filter with the last one by merging both filters
         * via the spread operator. This way old filter properties won't be overridden
         * when only one property is updated.
         * It is not necessary to call the `trim()` method over its properties because it is called
         * in the backend internally. */
        this._filterValues = Object.assign({}, this._filterValues, filter);
        this._filterValuesChange.next(this._filterValues);
    }
    /**
     * Applies the filter model that should be used to filter out objects from the data source.
     * Assumes that the backend will call the `trim()` method over its properties.
     * It combines the specified filter property with the last one. This way old filter properties
     * won't be overridden when only one property is updated.
     * @param {?} name The filter name.
     * @param {?} value The filter value.
     * @return {?}
     */
    applyFilter(name, value) {
        /* It combines the specified filter property with the last one by merging both filters
         * via the spread operator. This way old filter properties won't be overridden
         * when only one property is updated.
         * It is not necessary to call the `trim()` method over its properties because it is called
         * in the backend internally. */
        this._filterValues = Object.assign({}, this._filterValues);
        this._filterValues[name] = value;
        this._filterValuesChange.next(this._filterValues);
    }
}
/* Returns a data source with only one empty element. */
TableComponent._defaultDataSource = new MatTableDataSource([{}]);
TableComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-table',
                template: "\n<table mat-table matSort class=\"mat-elevation-z8\" [dataSource]=\"_getDataSource\" multiTemplateDataRows>\n\n    <!-- The content that is showed when the `dataSource` is not empty. -->\n    <ng-container *ngFor=\"let column of content.columnsObjectProperty; let pos = index\" [matColumnDef]=\"column\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header [ngStyle]=\"_createCssStylesForHeader(pos)\">\n            {{ content.columnsHeaderText[pos] }}\n        </th>\n\n        <td mat-cell [ngClass]=\"content.createCssClassesForRow(element)\" *matCellDef=\"let element\" [ngStyle]=\"_createCssStylesForCell(pos)\">\n            <!-- Adds the notification icon in the first column if there is 'version to review'. -->\n            <mat-icon *ngIf=\"pos == 0 && element[content.columnsObjectProperty[2]]\" class=\"mat-cell-mat-icon\">new_releases</mat-icon>\n            <!-- Adds the cell text if is not the third column. -->\n            <ng-container *ngIf=\"pos != 2\">{{ element[column] }}</ng-container>\n            <!-- Adds the view and edit buttons in the third column. -->\n            <div *ngIf=\"pos == 2\" class=\"div-mat-button-actions\">\n                <ng-container *ngIf=\"content.actions\">\n                    <button \n                        *ngFor=\"let action of content.actions\"\n                        mat-icon-button class=\"div-mat-button\" \n                        [attr.aria-label]=\"action.tooltip\" \n                        (click)=\"navigateTo(action.route, element)\"\n                        matTooltip=\"{{ action.tooltip }}\"\n                    >\n                        <mat-icon>{{ action.icon }}</mat-icon>\n                    </button>\n                </ng-container>\n                 \n                <!-- <button mat-icon-button class=\"div-mat-button\" [attr.aria-label]=\"'Show the data'\" (click)=\"navigateTo(element[content.propertyNameToIdentify], element)\">\n                    <mat-icon>description</mat-icon>\n                </button>\n                <button mat-icon-button class=\"div-mat-button\" [attr.aria-label]=\"'Edit the data'\" (click)=\"navigateTo('edit', element)\">\n                    <mat-icon>edit</mat-icon>\n                </button> -->\n\n            </div>\n        </td>\n    </ng-container>\n\n    <!-- The `otherInformation` represents the content that is showed when the `dataSource` is empty \n         or the `dataSource` is loading. The information row is made up of this one column that spans \n         across all columns. -->\n    <ng-container [matColumnDef]=\"'otherInformation'\">\n        <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"content.columnsObjectProperty.length\">\n            <ng-container *ngIf=\"isLoading; then thenTemplate_IsLoading; else elseTemplate_IsEmpty\"></ng-container>\n            \n            <ng-template #thenTemplate_IsLoading>\n                <mat-progress-spinner class=\"loading-table-information\" mode=\"indeterminate\"></mat-progress-spinner>\n            </ng-template>\n\n            <ng-template #elseTemplate_IsEmpty>\n                <div class=\"empty-table-information\">There is not any data source!</div>\n            </ng-template>\n        </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"content.columnsObjectProperty; sticky: true\"></tr>\n    <!-- When it is `loading`, it is `empty`, too. -->\n    <ng-container *ngIf=\"isEmpty; then thenTemplate_OtherInformation; else elseTemplate_IsNotEmpty\"></ng-container>\n\n    <ng-template #thenTemplate_OtherInformation>\n        <tr mat-row class=\"row-other-information\" *matRowDef=\"let row; columns: ['otherInformation']\"></tr>\n    </ng-template>\n\n    <ng-template #elseTemplate_IsNotEmpty>\n        <tr mat-row class=\"row-data\" *matRowDef=\"let row; columns: content.columnsObjectProperty;\" (click)=\"selectRow(row)\"></tr>\n    </ng-template>\n\n</table>\n\n<mat-paginator\n    [length]=\"content.length\"\n    [pageIndex]=\"content.pageIndex\"\n    [pageSize]=\"content.pageSize\"\n    [pageSizeOptions]=\"content.pageSizeOptions\"\n    [hidePageSize]=\"content.hidePageSize\"\n    [showFirstLastButtons]=\"content.showFirstLastButtons\">\n</mat-paginator>\n",
                styles: ["table{table-layout:fixed;width:100%;padding:2em 1em 0}tr.mat-header-row{height:54px}tr.mat-footer-row,tr.mat-row{height:46px}.div-mat-button-actions{display:inline-block;margin-bottom:5px}.div-mat-button{margin-top:5px;margin-right:5px;vertical-align:middle;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-cell-mat-icon{margin-top:5px;margin-right:5px;margin-bottom:5px;vertical-align:middle}th{padding-right:10px!important;padding-left:10px!important;background-color:#f5f7f7!important;border-top:1px solid #bdc3c7;border-bottom:1px solid transparent}td:first-of-type,th:first-of-type{border-left:1px solid #bdc3c7}td:last-of-type,th:last-of-type{border-right:1px solid #bdc3c7}th:not(:last-of-type)::before{content:\" \";position:absolute;top:0;right:0;height:28px;margin-top:12px;text-indent:-2000px;border-right:1px solid #bdc3c7;outline:0}td{padding-right:10px!important;padding-left:10px!important;border-top:1px solid transparent;border-right:1px solid transparent;border-left:1px solid transparent;border-bottom:1px solid #d9dcde;transition:.3s ease-out}tr:first-of-type td{border-top:1px solid #bdc3c7}tr:last-of-type td{border-bottom:1px solid #bdc3c7}td.new-release{color:#f83821}td.selected-row{background-color:#d7d7d7!important;color:#10f!important;border-top:1px solid #10f!important;border-right:1px solid #10f!important;border-bottom:1px solid #10f!important}td.selected-row:first-of-type{border-left:1px solid #10f!important}.loading-table-information{margin:3em auto;cursor:default}.empty-table-information{margin:6em 0;text-align:center;cursor:default}tr.row-data{cursor:pointer}tr.row-data:hover td{background-color:#eee;border-top:1px solid #10f;border-right:1px solid #10f;border-bottom:1px solid #10f}tr.row-data:hover td:first-of-type{border-left:1px solid #10f}tr.row-data:active{background-color:#eee}:host ::ng-deep .mat-sort-header-container{justify-content:center}th.mat-sort-header-sorted{color:#f01}"]
            }] }
];
/** @nocollapse */
TableComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute }
];
TableComponent.propDecorators = {
    _sort: [{ type: ViewChild, args: [MatSort, { static: true },] }],
    _paginator: [{ type: ViewChild, args: [MatPaginator, { static: true },] }],
    content: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    TableComponent._defaultDataSource;
    /**
     * Returns the amount of backend subscriptions.
     * When its value is different of 0, means the component is loading the data source.
     * In this way, it shows/hides the loading progress control.
     * By default, its value is `0`.
     * @type {?}
     * @private
     */
    TableComponent.prototype._countBackendSubscriptions;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._content;
    /**
     * Returns the stream that emits the page that should be rendered by the table,
     * when there is a change in the filtering, sorting, or pagination of the data. Each object
     * in the `data` field represents one row. This is made for someone that wants to know it.
     * @type {?}
     * @private
     */
    TableComponent.prototype._page;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._pageAsObservable;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._dataSource;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._selectedRow;
    /**
     * Stream that emits when a new filter is set on the data source.
     * Because of the behavior and appearance of the component, it is necessary to use
     * `Subject` instead of `BehaviorSubject` to represent the `_filterValuesChange`.
     * @type {?}
     * @private
     */
    TableComponent.prototype._filterValuesChange;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._filterValues;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._filterValuesSubscription;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._paginator;
    /**
     * Subscription to the changes that should trigger an update to the table's rendered rows, such
     * as filtering, sorting, or pagination.
     * @type {?}
     * @private
     */
    TableComponent.prototype._renderChangesSubscription;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._router;
    /**
     * @type {?}
     * @private
     */
    TableComponent.prototype._activatedRoute;
}
//# sourceMappingURL=data:application/json;base64,