/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/vocabulary/vocabulary.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component } from "@angular/core";
import { FormControl } from "@angular/forms";
import { startWith, map } from "rxjs/operators";
import { TaxonomyService } from '../../../backend/public-api';
import { InputControl } from '../../input/input.control';
/**
 * @record
 */
function VocabularyComponentExtraContent() { }
if (false) {
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.multiple;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.selectedTermsIds;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.excludeTermsIds;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.level;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.vocab;
}
/**
 * A control to select a term or terms in a vocabulary.
 */
export class VocabularyComponent extends InputControl {
    /**
     * @param {?} service
     */
    constructor(service) {
        super();
        this.service = service;
        // internalControl = new FormControl();
        //this control is used by the chips,not necessary to expose it
        this.chipsFormControl = new FormControl();
        this.chipsList = [];
        this.selectOptions = [];
        this.terms = [];
        this.loading = true;
        // selectedTermsIds = [];
        this.searchText = "Seleccione las opciones";
        this.termsTreeObserver = {
            next: (/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                console.log("VOCABULARY COMPONENT RESPONSE ", response);
                console.log(response.data.tree);
                this.terms = response.data.tree.term_node;
                this.terms.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.selectOptions = this.selectOptions.concat(this._get_terms(element));
                }));
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.log("The observable got an error notification: " + err + ".");
            }),
            complete: (/**
             * @return {?}
             */
            () => {
                console.log("The observable got a complete notification.");
                this.loading = !this.loading;
            })
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init('', '', false, true);
        // (this.content.parentFormSection as FormGroup).addControl(
        //   this.content.name,
        //   this.internalControl
        // );
        if (this.content.required) {
            this.content.formControl.setValidators((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                return !this.content.value || this.content.value.length == 0
                    ? { requiredTerms: "No Terms Selected" }
                    : null;
            }));
        }
        this.inputId = this.content.label.trim().toLowerCase();
        if (this.content.extraContent) {
            this.extraContent = this.content.extraContent;
            // if (this.extraContent.multiple !== null) {
            //   this.multiple = this.extraContent.multiple;
            // }
            // if (this.extraContent.selectedTermsIds) {
            //   this.content.value = this.extraContent.selectedTermsIds;
            // } else {
            //   this.content.value = [];
            // }
            // already selected terms
            if (!this.extraContent.selectedTermsIds) {
                this.extraContent.selectedTermsIds = [];
            }
            // terms ids to exclude of the possible options.
            if (!this.extraContent.excludeTermsIds) {
                this.extraContent.excludeTermsIds = [];
            }
            this.content.value = [];
            if (this.extraContent.level == undefined) {
                this.extraContent.level = 10;
            }
            if (this.extraContent.vocab) {
                // this.vocab = this.extraContent.vocab;
                this.service
                    .getTermsTreeByVocab(this.extraContent.vocab, this.extraContent.level)
                    .subscribe(this.termsTreeObserver);
            }
            //   else if(this.extraContent.termID){
            //     this.service.getTermByUUID(this.extraContent.termID, this.extraContent.level)
            //     .subscribe(this.termsTreeObserver);
            // }
            this._updateFilteredOptions();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setValidation() {
        if (this.content.formControl.valid) {
            this.chipsFormControl.setErrors(null);
        }
        else {
            this.chipsFormControl.setErrors({ requiered: true });
        }
    }
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    addTermToValue(term) {
        if (this.extraContent.multiple) {
            this.content.value.unshift(term);
        }
        else {
            this.content.value = [term];
        }
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
    }
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    removeTermFromValue(term) {
        this.content.value = ((/** @type {?} */ (this.content.value))).filter((/**
         * @param {?} e
         * @return {?}
         */
        (e) => e.id !== term.id));
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
    }
    /**
     * @private
     * @return {?}
     */
    _updateFilteredOptions() {
        this.filteredOptions = this.chipsFormControl.valueChanges.pipe(startWith(""), map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const filterValue = value ? value.toLowerCase() : "";
            console.log('************************************');
            console.log(this.selectOptions);
            console.log('************************************');
            return this.selectOptions.filter((/**
             * @param {?} option
             * @return {?}
             */
            option => option.term.identifier.toLowerCase().includes(filterValue)));
        })));
    }
    /**
     * @private
     * @param {?} node
     * @param {?=} parent
     * @return {?}
     */
    _get_terms(node, parent = null) {
        /** @type {?} */
        let result = [];
        node.parent = parent;
        // if is in selected terms ids list, then is part of the value
        if (((/** @type {?} */ (this.extraContent.selectedTermsIds))).some((/**
         * @param {?} id
         * @return {?}
         */
        id => id === node.term.uuid))) {
            this.addTermToValue(node.term);
            this.chipsList.push(node);
        }
        else {
            // if is not in any of the exclude term ids, then push
            if (!((/** @type {?} */ (this.extraContent.excludeTermsIds))).some((/**
             * @param {?} id
             * @return {?}
             */
            id => id === node.term.uuid))) {
                result.push(node);
            }
        }
        if (node.children) {
            node.children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                result = result.concat(this._get_terms(child, node));
            }));
        }
        return result;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    addChips(value) {
        if (this.extraContent.multiple) {
            this.chipsList.unshift(value);
        }
        else {
            // if not is multiple, then the element in the chipsList goes back to the options
            if (this.chipsList.length > 0) {
                this.selectOptions.push(this.chipsList[0]);
            }
            this.chipsList = [value];
        }
        this.addTermToValue(value.term);
        this.selectOptions = this.selectOptions.filter((/**
         * @param {?} option
         * @return {?}
         */
        option => option.term.id !== value.term.id));
        this.chipsFormControl.setValue("");
        // document.getElementById(this.inputId).blur();
        this._updateFilteredOptions();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeChip(index) {
        this.selectOptions.push(this.chipsList[index]);
        this.removeTermFromValue(this.chipsList[index].term);
        this.chipsList.splice(index, 1);
        this._updateFilteredOptions();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getTermNameInATree(node) {
        if (node.parent != null) {
            return this.getTermNameInATree(node.parent) + " / " + node.term.description;
        }
        else {
            return node.term.description;
        }
    }
}
VocabularyComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-vocabulary",
                template: "<mat-card>\n\n  <mat-progress-bar *ngIf=\"loading\"\n    mode=\"indeterminate\">\n  </mat-progress-bar>\n\n    <mat-card-subtitle *ngIf=\"!loading\">\n    <mat-form-field style=\"width: 100%;\">\n\n      <mat-label> {{content.label}} <span *ngIf=\"content.required\">*</span></mat-label>\n      <input\n        matInput\n        id=\"'inputId-'{{content.name}}\"\n        type=\"text\"\n        [formControl]=\"chipsFormControl\"\n        [matAutocomplete]=\"auto\"\n          aria-label=\"Number\"\n      />\n\n      <mat-hint *ngIf=\"content.startHint\" [align]=\"'start'\">{{ content.startHint.label }}</mat-hint>\n      <mat-hint *ngIf=\"!content.startHint\" [align]=\"'start'\">{{ searchText }}</mat-hint>\n\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option.term.description\" (click)=\"addChips(option)\"\n          [title]=\"option.term.description\">\n          {{ option.term.description }}\n        </mat-option>\n      </mat-autocomplete>\n\n      <!-- <button mat-icon-button color=\"accent\" class=\"delete-filter\" (click)=\"remove_component()\">\n      <mat-icon>close</mat-icon>\n    </button> -->\n    </mat-form-field>\n  </mat-card-subtitle>\n  <mat-card-content *ngIf=\"!loading\">\n    <mat-chip-list class=\"mat-chip-list-stacked\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: .5em\"\n      id=\"chiplist-{{extraContent.vocab}}\">\n      <mat-chip *ngFor=\"let item of chipsList; let i=index\" (removed)=\"removeChip(i)\" [removable]=\"true\" style=\"width: 100%;height: 100%;\">\n        {{ getTermNameInATree(item) }}\n        <mat-icon matChipRemove>cancel</mat-icon>\n      </mat-chip>\n    </mat-chip-list>\n  </mat-card-content>\n\n</mat-card>\n",
                host: {
                    "[style.minWidth]": "content.minWidth",
                    "[style.width]": "content.width"
                },
                styles: [""]
            }] }
];
/** @nocollapse */
VocabularyComponent.ctorParameters = () => [
    { type: TaxonomyService }
];
if (false) {
    /** @type {?} */
    VocabularyComponent.prototype.chipsFormControl;
    /** @type {?} */
    VocabularyComponent.prototype.inputId;
    /** @type {?} */
    VocabularyComponent.prototype.filteredOptions;
    /** @type {?} */
    VocabularyComponent.prototype.chipsList;
    /** @type {?} */
    VocabularyComponent.prototype.selectOptions;
    /** @type {?} */
    VocabularyComponent.prototype.terms;
    /** @type {?} */
    VocabularyComponent.prototype.loading;
    /** @type {?} */
    VocabularyComponent.prototype.extraContent;
    /** @type {?} */
    VocabularyComponent.prototype.searchText;
    /**
     * @type {?}
     * @private
     */
    VocabularyComponent.prototype.termsTreeObserver;
    /**
     * @type {?}
     * @private
     */
    VocabularyComponent.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,