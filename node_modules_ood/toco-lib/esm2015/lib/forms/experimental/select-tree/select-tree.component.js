/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/select-tree/select-tree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component } from "@angular/core";
import { FlatTreeControl } from "@angular/cdk/tree";
import { MatTreeFlattener, MatTreeFlatDataSource } from "@angular/material";
import { SelectionModel } from "@angular/cdk/collections";
import { of } from "rxjs";
import { InputControl } from '../../input/input.control';
/**
 * @record
 */
export function SelectOptionNode() { }
if (false) {
    /** @type {?} */
    SelectOptionNode.prototype.element;
    /** @type {?|undefined} */
    SelectOptionNode.prototype.parent;
    /** @type {?|undefined} */
    SelectOptionNode.prototype.children;
}
/**
 * @record
 */
export function FlatTreeNode() { }
if (false) {
    /** @type {?} */
    FlatTreeNode.prototype.name;
    /** @type {?} */
    FlatTreeNode.prototype.level;
    /** @type {?} */
    FlatTreeNode.prototype.expandable;
    /** @type {?} */
    FlatTreeNode.prototype.element;
}
/**
 * @record
 */
function TreeFilterData() { }
if (false) {
    /** @type {?} */
    TreeFilterData.prototype.selectOptions;
    /** @type {?} */
    TreeFilterData.prototype.type;
    /** @type {?} */
    TreeFilterData.prototype.placeholder;
    /** @type {?} */
    TreeFilterData.prototype.text;
    /** @type {?} */
    TreeFilterData.prototype.field;
    /** @type {?} */
    TreeFilterData.prototype.index;
    /** @type {?} */
    TreeFilterData.prototype.value;
    /** @type {?} */
    TreeFilterData.prototype.idVocab;
}
export class SelectTreeComponent extends InputControl {
    constructor() {
        super();
        this.checklistSelection = new SelectionModel(true /* multiple */);
        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // (this.content.parentFormSection as FormGroup).addControl(
        //   this.content.name,
        //   this.internalControl
        // );
        this.init('', '', false, true);
        if (this.content.extraContent) {
            if (this.content.extraContent.observable) {
                this.content.extraContent.observable.subscribe((
                // next
                /**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    console.log(response);
                    this.data = this.content.extraContent.getOptions(response);
                    console.log(this.data);
                    this.dataSource.data = this.data;
                    console.log(this.dataSource);
                    this.content.extraContent.selectedTermsIds.forEach((/**
                     * @param {?} uuid
                     * @return {?}
                     */
                    (uuid) => {
                        console.log(uuid);
                        this.treeControl.dataNodes.forEach((/**
                         * @param {?} node
                         * @return {?}
                         */
                        node => {
                            if (node.element.value == uuid) {
                                console.log(node);
                                if (node.expandable) {
                                    this.itemSelectionToggle(node);
                                }
                                else {
                                    this.leafItemSelectionToggle(node);
                                }
                            }
                        }));
                    }));
                }), (
                // error
                /**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    console.log(error);
                }), (
                // complete
                /**
                 * @return {?}
                 */
                () => { }));
            }
            else {
                this.data = this.content.extraContent.getOptions();
                this.dataSource.data = this.data;
            }
            if (!this.content.extraContent.selectedTermsIds) {
                this.content.extraContent.selectedTermsIds = [];
            }
        }
        this.content.value = "";
    }
    /**
     * @return {?}
     */
    remove_component() { }
    /**
     * @return {?}
     */
    onChange() {
        console.log("ttree change");
    }
    /**
     * @return {?}
     */
    emitSelection() {
        this.content.formControl.setValue(this.checklistSelection.selected);
        // this.content.extraContent.selectionChange(this.checklistSelection.selected)
        // var valueEmiter = "OR";
        // this.checklistSelection.selected.forEach(node => {
        //   valueEmiter = valueEmiter + "," + node.element.value;
        // });
        // if (this.content.extraContent.selectionChange) {
        //   this.content.extraContent.selectionChange(this.content.value);
        // }
    }
    /**
     * Transform the data to something the tree can read.
     * @param {?} node
     * @param {?} level
     * @return {?}
     */
    transformer(node, level) {
        /** @type {?} */
        const result = {
            name: node.element.label,
            level: level,
            expandable: node.children.length > 0,
            element: node.element
        };
        return result;
    }
    /**
     * Get the level of the node
     * @param {?} node
     * @return {?}
     */
    getLevel(node) {
        return node.level;
    }
    /**
     * Get whether the node is expanded or not.
     * @param {?} node
     * @return {?}
     */
    isExpandable(node) {
        return node.expandable;
    }
    /**
     * Get whether the node has children or not.
     * @param {?} index
     * @param {?} node
     * @return {?}
     */
    hasChild(index, node) {
        return node.expandable;
    }
    /**
     * Get the children for the node.
     * @param {?} node
     * @return {?}
     */
    getChildren(node) {
        return of(node.children);
    }
    /**
     * Whether all the descendants of the node are selected.
     * @param {?} node
     * @return {?}
     */
    descendantsAllSelected(node) {
        if (this.treeControl.dataNodes != undefined) {
            /** @type {?} */
            const descendants = this.treeControl.getDescendants(node);
            /** @type {?} */
            const descAllSelected = descendants.every((/**
             * @param {?} child
             * @return {?}
             */
            child => this.checklistSelection.isSelected(child)));
            return descAllSelected;
        }
        return false;
    }
    /**
     * Whether part of the descendants are selected
     * @param {?} node
     * @return {?}
     */
    descendantsPartiallySelected(node) {
        if (this.treeControl.dataNodes != undefined) {
            /** @type {?} */
            const descendants = this.treeControl.getDescendants(node);
            /** @type {?} */
            const result = descendants.some((/**
             * @param {?} child
             * @return {?}
             */
            child => this.checklistSelection.isSelected(child)));
            return result && !this.descendantsAllSelected(node);
        }
        return false;
    }
    /**
     * Select/deselect all the descendants node
     * @param {?} node
     * @return {?}
     */
    itemSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        /** @type {?} */
        const descendants = this.treeControl.getDescendants(node);
        this.checklistSelection.isSelected(node)
            ? this.checklistSelection.select(...descendants)
            : this.checklistSelection.deselect(...descendants);
        // Force update for the parent
        descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        child => this.checklistSelection.isSelected(child)));
        this.checkAllParentsSelection(node);
        this.emitSelection();
    }
    /**
     * Check all the parents to see if they changed
     * @param {?} node
     * @return {?}
     */
    leafItemSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        this.checkAllParentsSelection(node);
        this.emitSelection();
    }
    /* Checks all the parents when a leaf node is selected/unselected */
    /**
     * @param {?} node
     * @return {?}
     */
    checkAllParentsSelection(node) {
        /** @type {?} */
        let parent = this.getParentNode(node);
        while (parent) {
            this.checkRootNodeSelection(parent);
            parent = this.getParentNode(parent);
        }
    }
    /**
     * Check root node checked state and change it accordingly
     * @param {?} node
     * @return {?}
     */
    checkRootNodeSelection(node) {
        /** @type {?} */
        const nodeSelected = this.checklistSelection.isSelected(node);
        /** @type {?} */
        const descendants = this.treeControl.getDescendants(node);
        /** @type {?} */
        const descAllSelected = descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        child => this.checklistSelection.isSelected(child)));
        if (nodeSelected && !descAllSelected) {
            this.checklistSelection.deselect(node);
        }
        else if (!nodeSelected && descAllSelected) {
            this.checklistSelection.select(node);
        }
    }
    /* Get the parent node of a node */
    /**
     * @param {?} node
     * @return {?}
     */
    getParentNode(node) {
        /** @type {?} */
        const currentLevel = this.getLevel(node);
        if (currentLevel < 1) {
            return null;
        }
        /** @type {?} */
        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;
        for (let i = startIndex; i >= 0; i--) {
            /** @type {?} */
            const currentNode = this.treeControl.dataNodes[i];
            if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
            }
        }
        return null;
    }
}
SelectTreeComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-select-tree",
                template: "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"scrolleable\">\n  <mat-tree-node\n    class=\"hover\"\n    *matTreeNodeDef=\"let node\"\n    matTreeNodeToggle\n    matTreeNodePadding\n    fxLayout=\"row\"\n    fxLayoutAlign=\"space-between center\"\n    [ngStyle]=\"{ 'white-space': 'normal !important' }\"\n  >\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n      <button mat-icon-button disabled></button>\n      <mat-checkbox\n        class=\"checklist-leaf-node\"\n        [checked]=\"checklistSelection.isSelected(node)\"\n        (change)=\"leafItemSelectionToggle(node)\"\n        matTooltip=\"{{ node.name }}\"\n        [ngStyle]=\"{ 'white-space': 'normal !important' }\"\n      >\n          {{ node.name }}\n      </mat-checkbox>\n    </div>\n  </mat-tree-node>\n\n  <mat-tree-node\n    class=\"hover\"\n    *matTreeNodeDef=\"let node; when: hasChild\"\n    matTreeNodePadding\n    [ngStyle]=\"{ 'white-space': 'normal !important' }\"\n  >\n    <button\n      mat-icon-button\n      matTreeNodeToggle\n      [attr.aria-label]=\"'toggle ' + node.name\"\n    >\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\n      </mat-icon>\n    </button>\n    <div class=\"item-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <mat-checkbox\n        [checked]=\"descendantsAllSelected(node)\"\n        [indeterminate]=\"descendantsPartiallySelected(node)\"\n        (change)=\"itemSelectionToggle(node)\"\n        matTooltip=\"{{ node.name }}\"\n        [ngStyle]=\"{ 'white-space': 'normal !important' }\"\n        >{{ node.name }}</mat-checkbox\n      >\n    </div>\n  </mat-tree-node>\n</mat-tree>\n",
                styles: [".scrolleable{max-height:20em;min-width:15em;overflow:auto}"]
            }] }
];
/** @nocollapse */
SelectTreeComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SelectTreeComponent.prototype.data;
    /** @type {?} */
    SelectTreeComponent.prototype.treeControl;
    /** @type {?} */
    SelectTreeComponent.prototype.treeFlattener;
    /** @type {?} */
    SelectTreeComponent.prototype.dataSource;
    /** @type {?} */
    SelectTreeComponent.prototype.checklistSelection;
}
//# sourceMappingURL=data:application/json;base64,