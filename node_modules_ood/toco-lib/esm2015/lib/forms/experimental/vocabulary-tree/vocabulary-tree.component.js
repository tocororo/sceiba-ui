/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/vocabulary-tree/vocabulary-tree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component } from "@angular/core";
import { FormControl, } from "@angular/forms";
import { startWith, map } from "rxjs/operators";
import { TaxonomyService } from '../../../backend/public-api';
import { InputControl } from '../../input/input.control';
/**
 * @record
 */
function VocabularyComponentExtraContent() { }
if (false) {
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.multiple;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.selectedTermsIds;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.excludeTermsIds;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.level;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.vocab;
}
/**
 * A control to select a term or terms in a vocabulary.
 */
export class VocabularyTreeComponent extends InputControl {
    /**
     * @param {?} service
     */
    constructor(service) {
        super();
        this.service = service;
        // internalControl = new FormControl();
        //this control is used by the chips,not necessary to expose it
        this.chipsFormControl = new FormControl();
        this.levelsOptions = null;
        this.levelsSelection = new Array();
        this.lastLevelTerm = null;
        this.chipsList = [];
        this.leafsOptions = null;
        this.terms = [];
        this.loading = true;
        // selectedTermsIds = [];
        this.searchText = "Seleccione las opciones";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init('', '', false, true);
        // (this.content.parentFormSection as FormGroup).addControl(
        //   this.content.name,
        //   this.content.formControl
        // );
        if (this.content.required) {
            this.content.formControl.setValidators((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                return !this.content.value || this.content.value.length == 0
                    ? { requiredTerms: "No Terms Selected" }
                    : null;
            }));
        }
        this.inputId = this.content.label.trim().toLowerCase();
        if (this.content.extraContent) {
            this.extraContent = this.content.extraContent;
            // already selected terms
            if (!this.extraContent.selectedTermsIds) {
                this.extraContent.selectedTermsIds = [];
            }
            // terms ids to exclude of the possible options.
            if (!this.extraContent.excludeTermsIds) {
                this.extraContent.excludeTermsIds = [];
            }
            this.content.value = [];
            this.content.formControl.setValue(this.content.value);
            if (this.extraContent.level == undefined) {
                this.extraContent.level = 10;
            }
            if (this.extraContent.vocab) {
                this.loading = true;
                this.service.getTermsTreeByVocab(this.extraContent.vocab, 0).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    this.loading = false;
                    /** @type {?} */
                    const nextLevel = response.data.tree.term_node;
                    if (this.extraContent.level > 0) {
                        this.levelsOptions = new Array();
                        // this.levelsSelection = new Array<TermNode>();
                        this._setLevelsOptions(nextLevel, 0);
                    }
                    else {
                        this.leafsOptions = this._get_terms(nextLevel);
                        this._updateFilteredOptions();
                    }
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    console.log("The observable got an error notification: " + err + ".");
                }), (/**
                 * @return {?}
                 */
                () => {
                    console.log("The observable got a complete notification.");
                    this.loading = !this.loading;
                }));
            }
            //   else if(this.extraContent.termID){
            //     this.service.getTermByUUID(this.extraContent.termID, this.extraContent.level)
            //     .subscribe(this.termsTreeObserver);
            // }
        }
    }
    /**
     * @private
     * @param {?} nextLevel
     * @param {?} level
     * @return {?}
     */
    _setLevelsOptions(nextLevel, level) {
        console.log('VOCABULARY TREE *****');
        console.log(this.extraContent.selectedTermsIds, nextLevel);
        /** @type {?} */
        let result = [];
        nextLevel.forEach((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            if (!((/** @type {?} */ (this.extraContent.excludeTermsIds))).some((/**
             * @param {?} id
             * @return {?}
             */
            (id) => id === node.term.uuid))) {
                result.push(node);
            }
            if (((/** @type {?} */ (this.extraContent.selectedTermsIds))).some((/**
             * @param {?} id
             * @return {?}
             */
            (id) => id === node.term.uuid))) {
                this.onSelectionChange(level, node.term);
                // this.addTermToValue(node.term);
                // this.levelsSelection[level] = node.term;
            }
        }));
        this.levelsOptions.push(result);
    }
    /**
     * @param {?} level
     * @param {?} item
     * @return {?}
     */
    onSelectionChange(level, item) {
        console.log(level, item);
        this.leafsOptions = null;
        this.chipsList = [];
        this.loading = true;
        this.lastLevelTerm = item;
        this.levelsOptions = this.levelsOptions.slice(0, level + 1);
        // this.removeTermFromValue(this.levelsSelection[level]);
        // this.levelsSelection[level] = item;
        // this.addTermToValue(this.levelsSelection[level]);
        this.content.value = [];
        this.levelsSelection = this.levelsSelection.slice(0, level);
        this.levelsSelection.push(item);
        this.levelsSelection.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.addTermToValue(element, false);
        }));
        this.service.getTermByUUID(item.uuid, 1).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            console.log(response);
            this.loading = false;
            /** @type {?} */
            const nextLevel = response.data.term_node.children;
            if (this.extraContent.level > level + 1) {
                this._setLevelsOptions(nextLevel, level);
            }
            else {
                this.leafsOptions = this._get_terms(nextLevel);
                this._updateFilteredOptions();
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.log("The observable got an error notification: " + err + ".");
        }), (/**
         * @return {?}
         */
        () => {
            console.log("The observable got a complete notification.");
            this.loading = !this.loading;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setValidation() {
        if (this.content.formControl.valid) {
            this.chipsFormControl.setErrors(null);
        }
        else {
            this.chipsFormControl.setErrors({ requiered: true });
        }
    }
    /**
     * @private
     * @param {?} term
     * @param {?=} isLeaf
     * @return {?}
     */
    addTermToValue(term, isLeaf = true) {
        if (this.extraContent.multiple) {
            this.content.value.unshift(term);
        }
        else {
            this.content.value = [];
            this.levelsSelection.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                this.content.value.unshift(element);
            }));
            this.content.value.unshift(term);
        }
        console.log(this.content.value);
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
        console.log(this.content.formControl);
    }
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    removeTermFromValue(term) {
        this.content.value = ((/** @type {?} */ (this.content.value))).filter((/**
         * @param {?} e
         * @return {?}
         */
        (e) => e.id !== term.id));
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
        console.log(this.content.formControl);
    }
    /**
     * @private
     * @return {?}
     */
    _updateFilteredOptions() {
        this.filteredOptions = this.chipsFormControl.valueChanges.pipe(startWith(""), map((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            /** @type {?} */
            const filterValue = value ? value.toLowerCase() : "";
            return this.leafsOptions.filter((/**
             * @param {?} option
             * @return {?}
             */
            (option) => option.term.description.toLowerCase().includes(filterValue)));
        })));
    }
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    _get_terms(nodes) {
        this.chipsList = [];
        /** @type {?} */
        let result = [];
        nodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            if (((/** @type {?} */ (this.extraContent.selectedTermsIds))).some((/**
             * @param {?} id
             * @return {?}
             */
            (id) => id === node.term.uuid))) {
                this.addTermToValue(node.term);
                this.chipsList.push(node);
            }
            else {
                // if is not in any of the exclude term ids, then push
                if (!((/** @type {?} */ (this.extraContent.excludeTermsIds))).some((/**
                 * @param {?} id
                 * @return {?}
                 */
                (id) => id === node.term.uuid))) {
                    result.push(node);
                }
            }
        }));
        return result;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    addChips(value) {
        if (this.extraContent.multiple) {
            this.chipsList.unshift(value);
        }
        else {
            // if not is multiple, then the element in the chipsList goes back to the options
            if (this.chipsList.length > 0) {
                this.leafsOptions.push(this.chipsList[0]);
            }
            this.chipsList = [value];
        }
        console.log(value, this.chipsList);
        this.addTermToValue(value.term);
        this.leafsOptions = this.leafsOptions.filter((/**
         * @param {?} option
         * @return {?}
         */
        (option) => option.term.id !== value.term.id));
        this.chipsFormControl.setValue("");
        // document.getElementById(this.inputId).blur();
        this._updateFilteredOptions();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeChip(index) {
        this.leafsOptions.push(this.chipsList[index]);
        this.removeTermFromValue(this.chipsList[index].term);
        this.chipsList.splice(index, 1);
        this._updateFilteredOptions();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getTermNameInATree(node) {
        if (node.parent != null) {
            return (this.getTermNameInATree(node.parent) + " / " + node.term.description);
        }
        else {
            return node.term.description;
        }
    }
}
VocabularyTreeComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-vocabulary-tree",
                template: "<mat-card>\n  <mat-card-header>\n\n    <mat-progress-bar *ngIf=\"!levelsOptions\" mode=\"indeterminate\"></mat-progress-bar>\n\n    <ng-template *ngIf=\"levelsOptions\" >\n\n      <mat-form-field\n      *ngFor=\"let level of levelsOptions; let i = index\"\n      class=\"select-mat-form-field\"\n      [appearance]=\"content.appearance\"\n      style=\"width: 100%;\"\n    >\n      <mat-label>{{ content.label }}</mat-label>\n      <mat-select\n        name=\"item\"\n        [required]=\"content.required\"\n        [multiple]=\"false\"\n        [(value)]=\"levelsSelection[i]\"\n        (selectionChange)=\"onSelectionChange(i, levelsSelection[i])\"\n      >\n        <mat-option *ngFor=\"let item of level\" [value]=\"item.term\">\n          {{ item.term.description }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    </ng-template>\n  </mat-card-header>\n\n  <mat-card-content *ngIf=\"lastLevelTerm\">\n    <mat-progress-bar *ngIf=\"!leafsOptions\" mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-form-field *ngIf=\"leafsOptions\" style=\"width: 100%;\">\n      <mat-label>\n        {{ lastLevelTerm.description }}\n        <span *ngIf=\"content.required\">*</span></mat-label\n      >\n      <input\n        matInput\n        id=\"'inputId-'{{ content.name }}\"\n        type=\"text\"\n        [formControl]=\"chipsFormControl\"\n        [matAutocomplete]=\"auto\"\n        aria-label=\"Number\"\n      />\n\n      <mat-hint *ngIf=\"content.startHint\" [align]=\"'start'\">{{\n        content.startHint.label\n      }}</mat-hint>\n      <mat-hint *ngIf=\"!content.startHint\" [align]=\"'start'\">{{\n        searchText\n      }}</mat-hint>\n\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option\n          *ngFor=\"let option of filteredOptions | async\"\n          [value]=\"option.term.description\"\n          (click)=\"addChips(option)\"\n          [title]=\"option.term.description\"\n        >\n          {{ option.term.description }}\n        </mat-option>\n      </mat-autocomplete>\n\n      <!-- <button mat-icon-button color=\"accent\" class=\"delete-filter\" (click)=\"remove_component()\">\n      <mat-icon>close</mat-icon>\n    </button> -->\n    </mat-form-field>\n\n    <mat-chip-list\n      class=\"mat-chip-list-stacked\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start center\"\n      style=\"margin-bottom: 0.5em;\"\n      id=\"chiplist-{{ extraContent.vocab }}\"\n    >\n      <mat-chip\n        *ngFor=\"let item of chipsList; let i = index\"\n        (removed)=\"removeChip(i)\"\n        [removable]=\"true\"\n      >\n        {{ getTermNameInATree(item) }}\n        <mat-icon matChipRemove>cancel</mat-icon>\n      </mat-chip>\n    </mat-chip-list>\n  </mat-card-content>\n</mat-card>\n",
                host: {
                    "[style.minWidth]": "content.minWidth",
                    "[style.width]": "content.width",
                },
                styles: [""]
            }] }
];
/** @nocollapse */
VocabularyTreeComponent.ctorParameters = () => [
    { type: TaxonomyService }
];
if (false) {
    /** @type {?} */
    VocabularyTreeComponent.prototype.chipsFormControl;
    /** @type {?} */
    VocabularyTreeComponent.prototype.levelsOptions;
    /** @type {?} */
    VocabularyTreeComponent.prototype.levelsSelection;
    /** @type {?} */
    VocabularyTreeComponent.prototype.lastLevelTerm;
    /** @type {?} */
    VocabularyTreeComponent.prototype.inputId;
    /** @type {?} */
    VocabularyTreeComponent.prototype.filteredOptions;
    /** @type {?} */
    VocabularyTreeComponent.prototype.chipsList;
    /** @type {?} */
    VocabularyTreeComponent.prototype.leafsOptions;
    /** @type {?} */
    VocabularyTreeComponent.prototype.terms;
    /** @type {?} */
    VocabularyTreeComponent.prototype.loading;
    /** @type {?} */
    VocabularyTreeComponent.prototype.extraContent;
    /** @type {?} */
    VocabularyTreeComponent.prototype.searchText;
    /**
     * @type {?}
     * @private
     */
    VocabularyTreeComponent.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,