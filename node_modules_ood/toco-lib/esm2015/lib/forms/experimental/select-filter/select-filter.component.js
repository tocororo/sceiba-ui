/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/select-filter/select-filter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component } from "@angular/core";
import { FormControl } from "@angular/forms";
import { map, startWith } from "rxjs/operators";
import { isArray } from "util";
import { InputControl } from '../../input/input.control';
/**
 * @record
 */
function SelectFilterComponentExtraContent() { }
if (false) {
    /** @type {?} */
    SelectFilterComponentExtraContent.prototype.multiple;
    /** @type {?} */
    SelectFilterComponentExtraContent.prototype.selectedTermsIds;
    /** @type {?} */
    SelectFilterComponentExtraContent.prototype.excludeTermsIds;
}
export class SelectFilterComponent extends InputControl {
    constructor() {
        super();
        //   internalControl = new FormControl();
        // internalControl = new FormControl();
        //this control is used by the chips,not necessary to expose it
        this.chipsFormControl = new FormControl();
        this.chipsList = [];
        this.selectOptions = [];
        this.terms = [];
        this.loading = true;
        // selectedTermsIds = [];
        this.searchText = "Seleccione las opciones";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init('', '', false, true);
        // (this.content.parentFormSection as FormGroup).addControl(
        //   this.content.name,
        //   this.internalControl
        // );
        if (this.content.required) {
            this.content.formControl.setValidators((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                return !this.content.value || this.content.value.length == 0
                    ? { requiredTerms: "No Terms Selected" }
                    : null;
            }));
        }
        this.inputId = this.content.label.trim().toLowerCase();
        if (this.content.extraContent) {
            this.extraContent = this.content.extraContent;
            // if (this.extraContent.multiple !== null) {
            //   this.multiple = this.extraContent.multiple;
            // }
            // if (this.extraContent.selectedTermsIds) {
            //   this.content.value = this.extraContent.selectedTermsIds;
            // } else {
            //   this.content.value = [];
            // }
            // already selected terms
            if (!this.extraContent.selectedTermsIds) {
                this.extraContent.selectedTermsIds = [];
            }
            // terms ids to exclude of the possible options.
            if (!this.extraContent.excludeTermsIds) {
                this.extraContent.excludeTermsIds = [];
            }
            this.content.value = [];
            if (this.content.extraContent.observable) {
                this.content.extraContent.observable.subscribe((
                // next
                /**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    this.selectOptions = this.content.extraContent.getOptions(response);
                    this.selectOptionsLoaded();
                }), (
                // error
                /**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    console.log(error);
                }), (
                // complete
                /**
                 * @return {?}
                 */
                () => { }));
            }
            else {
                this.selectOptions = this.content.extraContent.getOptions();
                this.selectOptionsLoaded();
            }
            //   else if(this.extraContent.termID){
            //     this.service.getTermByUUID(this.extraContent.termID, this.extraContent.level)
            //     .subscribe(this.termsTreeObserver);
            // }
            // this._updateFilteredOptions();
        }
    }
    /**
     * @private
     * @return {?}
     */
    selectOptionsLoaded() {
        this.selectOptions.forEach((/**
         * @param {?} option
         * @return {?}
         */
        (option) => {
            if (((/** @type {?} */ (this.extraContent.selectedTermsIds))).some((/**
             * @param {?} val
             * @return {?}
             */
            val => val === option.value))) {
                this.addChips(option);
            }
            // if (this.extraContent.multiple) {
            //   try {
            //     const index = this.content.value.indexOf(option.value);
            //     if (index >= 0) {
            //       this.addChips(option);
            //     }
            //   } catch (error) {}
            // } else {
            //   if (option.value == this.content.value) {
            //     this.addChips(option);
            //   }
            // }
        }));
        if (this.extraContent.multiple &&
            (this.content.value == null ||
                this.content.value == undefined ||
                !isArray(this.content.value))) {
            this.content.value = [];
        }
        this._updateFilteredOptions();
        this.loading = false;
    }
    /**
     * @private
     * @return {?}
     */
    setValidation() {
        if (this.content.formControl.valid) {
            this.chipsFormControl.setErrors(null);
        }
        else {
            this.chipsFormControl.setErrors({ requiered: true });
        }
    }
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    addTermToValue(term) {
        if (this.extraContent.multiple) {
            this.content.value.unshift(term);
        }
        else {
            this.content.value = [term];
        }
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
    }
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    removeTermFromValue(term) {
        this.content.value = ((/** @type {?} */ (this.content.value))).filter((/**
         * @param {?} e
         * @return {?}
         */
        (e) => e.value !== term.value));
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
    }
    /**
     * @private
     * @return {?}
     */
    _updateFilteredOptions() {
        this.filteredOptions = this.chipsFormControl.valueChanges.pipe(startWith(""), map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const filterValue = value ? value.toLowerCase() : "";
            console.log('************************************');
            console.log(this.selectOptions);
            console.log('************************************');
            return this.selectOptions.filter((/**
             * @param {?} option
             * @return {?}
             */
            option => option.label.toLowerCase().includes(filterValue)));
        })));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    addChips(value) {
        if (this.extraContent.multiple) {
            this.chipsList.unshift(value);
        }
        else {
            // if not is multiple, then the element in the chipsList goes back to the options
            if (this.chipsList.length > 0) {
                this.selectOptions.push(this.chipsList[0]);
            }
            this.chipsList = [value];
        }
        this.addTermToValue(value);
        // console.log(this.selectOptions);
        this.selectOptions = this.selectOptions.filter((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value !== value.value));
        // console.log(this.selectOptions);
        this.chipsFormControl.setValue("");
        // document.getElementById(this.inputId).blur();
        this._updateFilteredOptions();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeChip(index) {
        // console.log(this.selectOptions);
        this.selectOptions.push(this.chipsList[index]);
        // console.log(this.selectOptions);
        this.removeTermFromValue(this.chipsList[index]);
        this.chipsList.splice(index, 1);
        this._updateFilteredOptions();
    }
}
SelectFilterComponent.decorators = [
    { type: Component, args: [{
                selector: "toco-select-filter",
                template: "\n<mat-card>\n\n  <mat-progress-bar\n    mode=\"indeterminate\"\n    *ngIf=\"!selectOptions\">\n  </mat-progress-bar>\n\n  <mat-card-subtitle *ngIf=\"selectOptions\">\n    <mat-form-field style=\"width: 100%;\">\n\n      <mat-label> {{content.label}} <span *ngIf=\"content.required\">*</span></mat-label>\n      <input\n        matInput\n        id=\"'inputId-'{{content.name}}\"\n        type=\"text\"\n        [formControl]=\"chipsFormControl\"\n        [matAutocomplete]=\"auto\"\n          aria-label=\"Number\"\n      />\n\n      <mat-hint *ngIf=\"content.startHint\" [align]=\"'start'\">{{ content.startHint.label }}</mat-hint>\n      <mat-hint *ngIf=\"!content.startHint\" [align]=\"'start'\">{{ searchText }}</mat-hint>\n\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option.label\" (click)=\"addChips(option)\"\n          [title]=\"option.label\">\n          {{ option.label }}\n        </mat-option>\n      </mat-autocomplete>\n\n      <!-- <button mat-icon-button color=\"accent\" class=\"delete-filter\" (click)=\"remove_component()\">\n        <mat-icon>close</mat-icon>\n      </button> -->\n    </mat-form-field>\n  </mat-card-subtitle>\n\n  <mat-card-content *ngIf=\"!loading\">\n    <mat-chip-list class=\"mat-chip-list-stacked\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: .5em\"\n      id=\"chiplist-{{content.name}}\">\n      <mat-chip *ngFor=\"let item of chipsList; let i=index\" (removed)=\"removeChip(i)\" [removable]=\"true\" style=\"width: 100%;height: 100%;\">\n        {{ item.label }}\n        <mat-icon matChipRemove>cancel</mat-icon>\n      </mat-chip>\n    </mat-chip-list>\n  </mat-card-content>\n\n</mat-card>\n",
                host: {
                    "[style.minWidth]": "content.minWidth",
                    "[style.width]": "content.width",
                },
                styles: [""]
            }] }
];
/** @nocollapse */
SelectFilterComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SelectFilterComponent.prototype.chipsFormControl;
    /** @type {?} */
    SelectFilterComponent.prototype.inputId;
    /** @type {?} */
    SelectFilterComponent.prototype.filteredOptions;
    /** @type {?} */
    SelectFilterComponent.prototype.chipsList;
    /** @type {?} */
    SelectFilterComponent.prototype.selectOptions;
    /** @type {?} */
    SelectFilterComponent.prototype.terms;
    /** @type {?} */
    SelectFilterComponent.prototype.loading;
    /** @type {?} */
    SelectFilterComponent.prototype.extraContent;
    /** @type {?} */
    SelectFilterComponent.prototype.searchText;
}
//# sourceMappingURL=data:application/json;base64,