/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/datepicker-year/datepicker-year.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InputControl } from '../../input/input.control';
import { Component, Input, forwardRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatDatepicker } from '@angular/material';
import { MomentDateAdapter } from '@angular/material-moment-adapter';
import moment from 'moment';
// const moment = _rollupMoment || _moment;
/** @type {?} */
export const YEAR_MODE_FORMATS = {
    parse: {
        dateInput: 'YYYY',
    },
    display: {
        dateInput: 'YYYY',
        monthYearLabel: 'MMM YYYY',
        dateA11yLabel: 'LL',
        monthYearA11yLabel: 'MMMM YYYY',
    },
};
export class DatepickerYearComponent extends InputControl {
    constructor() {
        super();
        /**
         * Component label
         */
        this.label = '';
        this.touchUi = false;
        // _inputCtrl: FormControl = new FormControl();
        // Function to call when the date changes.
        this.onChange = (/**
         * @param {?} year
         * @return {?}
         */
        (year) => { });
        // Function to call when the input is touched (when a star is clicked).
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max ? this._max.year() : undefined;
    }
    /**
     * @param {?} max
     * @return {?}
     */
    set max(max) {
        if (max) {
            /** @type {?} */
            const momentDate = typeof max === 'number' ? moment([max, 0, 1]) : moment(max);
            this._max = momentDate.isValid() ? momentDate : undefined;
        }
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min ? this._min.year() : undefined;
    }
    /**
     * @param {?} min
     * @return {?}
     */
    set min(min) {
        if (min) {
            /** @type {?} */
            const momentDate = typeof min === 'number' ? moment([min, 0, 1]) : moment(min);
            this._min = momentDate.isValid() ? momentDate : undefined;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init('', '', false, true);
        // this.value = moment(this.value.toString()).format("YYYY")
        if (this.label == '') {
            this.label = this.content.label;
        }
        this.min = this.content.extraContent.minYear;
        this.max = this.content.extraContent.maxYear;
        console.log(this.content.extraContent, 'DATEPICKER YEAR EXTRA CONTENT....', this._min, this._max);
        this.writeValue(new Date(this.content.value));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    writeValue(date) {
        if (date && this._isYearEnabled(date.getFullYear())) {
            /** @type {?} */
            const momentDate = moment(date);
            if (momentDate.isValid()) {
                this.content.formControl.setValue(moment(date), { emitEvent: false });
                this.content.value = moment(date).year;
                // this.content.formControl.setValue(this.content.value);
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Allows Angular to disable the input.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        isDisabled ? this._picker.disabled = true : this._picker.disabled = false;
        isDisabled ? this.content.formControl.disable() : this.content.formControl.enable();
    }
    /**
     * @param {?} chosenDate
     * @param {?} datepicker
     * @return {?}
     */
    _yearSelectedHandler(chosenDate, datepicker) {
        if (!this._isYearEnabled(chosenDate.year())) {
            datepicker.close();
            return;
        }
        this.content.formControl.setValue(chosenDate, { emitEvent: false });
        this.content.value = chosenDate.year;
        // this.content.formControl.setValue(this.content.value);
        this.onChange(chosenDate.toDate());
        this.onTouched();
        datepicker.close();
    }
    /**
     * @param {?} datepicker
     * @return {?}
     */
    _openDatepickerOnClick(datepicker) {
        if (!datepicker.opened) {
            datepicker.open();
        }
    }
    /**
     * @param {?} datepicker
     * @return {?}
     */
    _openDatepickerOnFocus(datepicker) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (!datepicker.opened) {
                datepicker.open();
            }
        }));
    }
    /**
     * Whether the given year is enabled.
     * @private
     * @param {?} year
     * @return {?}
     */
    _isYearEnabled(year) {
        // disable if the year is greater than maxDate lower than minDate
        if (year === undefined || year === null ||
            (this._max && year > this._max.year()) ||
            (this._min && year < this._min.year())) {
            return false;
        }
        return true;
    }
}
DatepickerYearComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-datepicker-year',
                template: "<mat-form-field style=\"width: 100%\">\n  <!-- <mat-label>{{ label }}</mat-label> -->\n  <input\n    matInput\n    [matDatepicker]=\"datepicker\"\n    [max]=\"_max\"\n    [min]=\"_min\"\n    [formControl]=\"content.formControl\"\n    (click)=\"_openDatepickerOnClick(datepicker)\"\n    (focus)=\"_openDatepickerOnFocus(datepicker)\"\n    readonly\n    placeholder=\"{{ content.label }}\"\n    required=\"{{ content.required }}\"\n  />\n\n  <mat-datepicker\n    #datepicker\n    [touchUi]=\"touchUi\"\n    startView=\"multi-year\"\n    (yearSelected)=\"_yearSelectedHandler($event, datepicker)\"\n    panelClass=\"year-picker\"\n  >\n  </mat-datepicker>\n</mat-form-field>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                    { provide: MAT_DATE_FORMATS, useValue: YEAR_MODE_FORMATS },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DatepickerYearComponent)),
                        multi: true,
                    },
                ],
                host: {
                    "[style.minWidth]": "content.minWidth",
                    "[style.width]": "content.width",
                },
                styles: [""]
            }] }
];
/** @nocollapse */
DatepickerYearComponent.ctorParameters = () => [];
DatepickerYearComponent.propDecorators = {
    label: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    touchUi: [{ type: Input }],
    _picker: [{ type: ViewChild, args: [MatDatepicker, { static: true },] }]
};
if (false) {
    /**
     * Component label
     * @type {?}
     */
    DatepickerYearComponent.prototype.label;
    /** @type {?} */
    DatepickerYearComponent.prototype._max;
    /** @type {?} */
    DatepickerYearComponent.prototype._min;
    /** @type {?} */
    DatepickerYearComponent.prototype.touchUi;
    /** @type {?} */
    DatepickerYearComponent.prototype._picker;
    /** @type {?} */
    DatepickerYearComponent.prototype.onChange;
    /** @type {?} */
    DatepickerYearComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,