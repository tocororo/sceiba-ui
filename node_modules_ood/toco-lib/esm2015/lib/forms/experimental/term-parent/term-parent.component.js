/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/term-parent/term-parent.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { startWith, map } from 'rxjs/operators';
import { InputControl } from '../../input/input.control';
export class TermParentComponent extends InputControl {
    constructor() {
        super();
        // internalControl = new FormControl();
        this.formControl = new FormControl();
        this.selectOptions = [];
        this.currentTerm = null;
        this.parentTerm = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init('', '', false, true);
        // (this.content.parentFormSection as FormGroup).addControl(
        //     this.content.name,
        //     this.internalControl
        //   );
        console.log(this.content.value);
        console.log(this.content.required);
        console.log(this.content.required && (this.content.value == 0 || this.content.value == null || this.content.value == undefined));
        if (this.content.required) {
            this.content.formControl.setValidators((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                return (control.value == 0 || control.value == null || control.value == undefined)
                    ? { 'requiredTerms': 'No Terms Selected' }
                    : null;
            }));
        }
        this.setValueToInternalControl();
        this.inputId = this.content.label.trim().toLowerCase();
        if (this.content.extraContent && this.content.extraContent.terms) {
            if (this.content.extraContent.currentTerm) {
                this.currentTerm = this.content.extraContent.currentTerm;
            }
            ((/** @type {?} */ (this.content.extraContent.terms))).forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                this.selectOptions = this.selectOptions.concat(this._get_terms(element));
            }));
            this._updateFilteredOptions();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _updateFilteredOptions() {
        this.filteredOptions = this.formControl.valueChanges.pipe(startWith(''), map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const filterValue = value.toLowerCase();
            return this.selectOptions.filter((/**
             * @param {?} option
             * @return {?}
             */
            option => option.identifier.toLowerCase().includes(filterValue)));
        })));
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    _get_terms(node) {
        /** @type {?} */
        let result = [];
        if (!this.currentTerm) {
            result.push(node.term);
        }
        else {
            if (this.currentTerm.id !== node.term.id) {
                if (this.currentTerm.parent_id && this.currentTerm.parent_id === node.term.id) {
                    this.parentTerm = node.term;
                }
                else {
                    result.push(node.term);
                }
            }
        }
        node.children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        child => {
            result = result.concat(this._get_terms(child));
        }));
        return result;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    addParent(value) {
        this.parentTerm = value;
        this.selectOptions = this.selectOptions.filter((/**
         * @param {?} option
         * @return {?}
         */
        option => option.id !== value.id));
        this.formControl.setValue('');
        this._updateFilteredOptions();
        // document.getElementById(this.inputId).blur();
        (this.currentTerm) ? this.currentTerm.parent_id = this.parentTerm.id : this.parentTerm.id;
        this.setValueToInternalControl();
    }
    /**
     * @return {?}
     */
    removeParent() {
        this.selectOptions.push(this.parentTerm);
        this._updateFilteredOptions();
        this.parentTerm = null;
        this.setValueToInternalControl();
    }
    /**
     * @private
     * @return {?}
     */
    setValueToInternalControl() {
        if (this.parentTerm == null) {
            this.content.value = null;
            this.content.formControl.setValue(null);
        }
        else {
            this.content.value = this.parentTerm.id;
            this.content.formControl.setValue(this.content.value);
        }
        if (this.content.formControl.valid) {
            this.formControl.setErrors(null);
        }
        else {
            this.formControl.setErrors({ requiered: true });
        }
    }
}
TermParentComponent.decorators = [
    { type: Component, args: [{
                selector: 'toco-term-parent',
                template: "<div class=\"card-filter\" *ngIf=\"content.extraContent\">\n\n  <mat-form-field style=\"width: 100%;\">\n\n      <mat-label> {{content.label}} <span *ngIf=\"content.required\">*</span></mat-label>\n    <input \n        matInput \n        id=\"'inputId-'{{content.name}}\" \n        type=\"text\" \n        [formControl]=\"formControl\"\n        [placeholder]=\"content.label\"\n        [matAutocomplete]=\"auto\" \n        aria-label=\"Number\" \n      />\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option.identifier\" (click)=\"addParent(option)\"\n        [title]=\"option.description\">\n        {{ option.description }}\n      </mat-option>\n    </mat-autocomplete>\n\n  </mat-form-field>\n\n  <mat-chip-list fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: .5em\" id=\"chiplist\">\n    <mat-chip (click)=\"removeParent()\" *ngIf=\"parentTerm\">{{ parentTerm.description }}</mat-chip>\n  </mat-chip-list>\n\n</div>",
                host: {
                    '[style.minWidth]': 'content.minWidth',
                    '[style.width]': 'content.width'
                },
                styles: [""]
            }] }
];
/** @nocollapse */
TermParentComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    TermParentComponent.prototype.formControl;
    /** @type {?} */
    TermParentComponent.prototype.inputId;
    /** @type {?} */
    TermParentComponent.prototype.filteredOptions;
    /** @type {?} */
    TermParentComponent.prototype.selectOptions;
    /** @type {?} */
    TermParentComponent.prototype.currentTerm;
    /** @type {?} */
    TermParentComponent.prototype.parentTerm;
}
//# sourceMappingURL=data:application/json;base64,