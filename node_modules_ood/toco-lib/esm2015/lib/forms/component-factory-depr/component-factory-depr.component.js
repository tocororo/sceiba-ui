/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/component-factory-depr/component-factory-depr.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component, Input } from '@angular/core';
import { FormFieldType } from '../form-field.control';
/**
 * This component represents a components' factory.
 * This component is deprecated.
 */
export class ComponentFactory_Depr {
    constructor() {
        this.formFieldType = FormFieldType;
        this.componentsContent = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log('ComponentFactory_Depr componentsContent: ', this.componentsContent);
    }
}
ComponentFactory_Depr.decorators = [
    { type: Component, args: [{
                selector: 'component-factory-depr',
                template: "\n<div fxLayout=\"row wrap\" fxLayout.xs=\"column\"\nfxLayoutAlign=\"space-between end\" fxLayoutAlign.xs=\"space-between center\"\nfxLayoutGap=\"1em\" class=\"form-field-component\"\n>\n\n    <ng-container *ngFor=\"let componentContent of componentsContent\" [ngSwitch]=\"componentContent.type\">\n\n        <!-- <ng-container \n            *ngSwitchCase=\"formFieldType.checkbox\"\n            [formGroup]=\"componentContent.formGroup\"\n        >\n            <mat-checkbox\n                [style.width]=\"componentContent.width\"\n                [style.minWidth]=\"componentContent.minWidth\"\n                [value]=\"componentContent.value\"\n                (input)=\"$event.target.value\"\n                name=\"{{ componentContent.name }}\"\n                required=\"{{ componentContent.required }}\"\n                [formControlName]=\"componentContent.name\"\n            >\n                {{ componentContent.label }}\n            </mat-checkbox>\n        </ng-container> -->\n<!-- \n        <mat-form-field \n            *ngSwitchCase=\"formFieldType.textarea\"\n            [style.width]=\"componentContent.width\"\n            [style.minWidth]=\"componentContent.minWidth\"\n            [formGroup]=\"componentContent.formGroup\"\n        >\n            <textarea \n                matInput [value]=\"componentContent.value\"\n                (input)=\"$event.target.value\"\n                name=\"{{ componentContent.name }}\"\n                placeholder=\"{{ componentContent.label }}\"\n                required=\"{{ componentContent.required }}\"\n                [formControlName]=\"componentContent.name\"\n                minRows=\"20\"\n            ></textarea>\n        </mat-form-field> -->\n\n\n        <!-- <mat-form-field \n            *ngSwitchCase=\"formFieldType.datepicker\"\n            [style.width]=\"componentContent.width\"\n            [formGroup]=\"componentContent.formGroup\"\n        >\n            <input \n                matInput\n                [value]=\"componentContent.value\"\n                (input)=\"$event.target.value\"\n                [matDatepicker]=\"picker\"\n                name=\"{{ componentContent.name }}\"\n                placeholder=\"{{ componentContent.label }}\"\n                required=\"{{ componentContent.required }}\"\n                [formControlName]=\"componentContent.name\"\n            >\n            <mat-datepicker-toggle\n                matSuffix [for]=\"picker\"\n            ></mat-datepicker-toggle>\n            <mat-datepicker \n                #picker\n                startView=\"multi-year\"\n            ></mat-datepicker>\n        </mat-form-field> -->\n        <toco-checkbox *ngSwitchCase=\"formFieldType.datepicker\" [content]=\"componentContent\"></toco-checkbox>\n        <toco-datepicker *ngSwitchCase=\"formFieldType.datepicker\" [content]=\"componentContent\"></toco-datepicker>\n\n\n        <action-button *ngSwitchCase=\"formFieldType.action_button\" [content]=\"componentContent\"></action-button>\n\n\n        <container-panel *ngSwitchCase=\"formFieldType.container_panel\" [content]=\"componentContent\"></container-panel>\n\n        <container-simple *ngSwitchCase=\"formFieldType.container_simple\" [content]=\"componentContent\"></container-simple>\n\n\n        <container-label-diff-lang *ngSwitchCase=\"formFieldType.container_label_diff_lang\" [content]=\"componentContent\"></container-label-diff-lang>\n\n\n        <input-url *ngSwitchCase=\"formFieldType.url\" [content]=\"componentContent\"></input-url>\n        \n        <input-email *ngSwitchCase=\"formFieldType.email\" [content]=\"componentContent\"></input-email>\n\n        <input-identifier *ngSwitchCase=\"formFieldType.identifier\" [content]=\"componentContent\"></input-identifier>\n\n        <input-issn *ngSwitchCase=\"formFieldType.issn\" [content]=\"componentContent\"></input-issn>\n\n        <input-rnps *ngSwitchCase=\"formFieldType.rnps\" [content]=\"componentContent\"></input-rnps>\n\n        <input-select *ngSwitchCase=\"formFieldType.select\" [content]=\"componentContent\"></input-select>\n\n        <toco-vocabulary *ngSwitchCase=\"formFieldType.vocabulary\" [content]=\"componentContent\"></toco-vocabulary>\n\n        <toco-vocabulary-tree *ngSwitchCase=\"formFieldType.vocabulary_tree\" [content]=\"componentContent\"></toco-vocabulary-tree>\n        \n        <toco-term-parent *ngSwitchCase=\"formFieldType.term_parent\" [content]=\"componentContent\"></toco-term-parent>\n\n        <toco-textarea *ngSwitchCase=\"formFieldType.textarea\" [content]=\"componentContent\"></toco-textarea>\n\n        <toco-select *ngSwitchCase=\"formFieldType.select_expr\" [content]=\"componentContent\"></toco-select>\n\n        <toco-select-filter *ngSwitchCase=\"formFieldType.select_filter\" [content]=\"componentContent\"></toco-select-filter>\n\n        <toco-select-tree *ngSwitchCase=\"formFieldType.select_tree\" [content]=\"componentContent\"></toco-select-tree>\n\n        <input-text *ngSwitchDefault [content]=\"componentContent\"></input-text>\n\n    </ng-container>\n\n</div>\n",
                styles: [".form-field-component{margin:5px}"]
            }] }
];
/** @nocollapse */
ComponentFactory_Depr.ctorParameters = () => [];
ComponentFactory_Depr.propDecorators = {
    componentsContent: [{ type: Input }]
};
if (false) {
    /**
     * Represents the `FormFieldType` enum for internal use.
     * @type {?}
     */
    ComponentFactory_Depr.prototype.formFieldType;
    /**
     * Input field that represents an array of types which types inherit from `FormFieldContent` interface.
     * This array contains the content of the components that the factory is going to create.
     * @type {?}
     */
    ComponentFactory_Depr.prototype.componentsContent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWZhY3RvcnktZGVwci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9jb21wb25lbnQtZmFjdG9yeS1kZXByL2NvbXBvbmVudC1mYWN0b3J5LWRlcHIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1BLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7QUFXdEQsTUFBTSxPQUFPLHFCQUFxQjtJQWM5QjtRQUVJLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBRW5DLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVNLFFBQVE7UUFFWCxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7OztZQTdCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsNitKQUFzRDs7YUFFekQ7Ozs7O2dDQVlJLEtBQUs7Ozs7Ozs7SUFOTiw4Q0FBb0Q7Ozs7OztJQU1wRCxrREFDZ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMjAgVW5pdmVyc2lkYWQgZGUgUGluYXIgZGVsIFLDrW8gXCJIZXJtYW5vcyBTYcOteiBNb250ZXMgZGUgT2NhXCJcbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5cbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb3JtRmllbGRUeXBlIH0gZnJvbSAnLi4vZm9ybS1maWVsZC5jb250cm9sJztcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCByZXByZXNlbnRzIGEgY29tcG9uZW50cycgZmFjdG9yeS4gXG4gKiBUaGlzIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkLiBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjb21wb25lbnQtZmFjdG9yeS1kZXByJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29tcG9uZW50LWZhY3RvcnktZGVwci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vY29tcG9uZW50LWZhY3RvcnktZGVwci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIENvbXBvbmVudEZhY3RvcnlfRGVwciBpbXBsZW1lbnRzIE9uSW5pdFxue1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIGBGb3JtRmllbGRUeXBlYCBlbnVtIGZvciBpbnRlcm5hbCB1c2UuIFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBmb3JtRmllbGRUeXBlOiB0eXBlb2YgRm9ybUZpZWxkVHlwZTtcblxuICAgIC8qKlxuICAgICAqIElucHV0IGZpZWxkIHRoYXQgcmVwcmVzZW50cyBhbiBhcnJheSBvZiB0eXBlcyB3aGljaCB0eXBlcyBpbmhlcml0IGZyb20gYEZvcm1GaWVsZENvbnRlbnRgIGludGVyZmFjZS4gXG4gICAgICogVGhpcyBhcnJheSBjb250YWlucyB0aGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50cyB0aGF0IHRoZSBmYWN0b3J5IGlzIGdvaW5nIHRvIGNyZWF0ZS4gXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29tcG9uZW50c0NvbnRlbnQ6IGFueVtdO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHRoaXMuZm9ybUZpZWxkVHlwZSA9IEZvcm1GaWVsZFR5cGU7XG5cbiAgICAgICAgdGhpcy5jb21wb25lbnRzQ29udGVudCA9IFtdO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkXG4gICAge1xuICAgICAgICBjb25zb2xlLmxvZygnQ29tcG9uZW50RmFjdG9yeV9EZXByIGNvbXBvbmVudHNDb250ZW50OiAnLCB0aGlzLmNvbXBvbmVudHNDb250ZW50KTtcbiAgICB9XG59XG4iXX0=