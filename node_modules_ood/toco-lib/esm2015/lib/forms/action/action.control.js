/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/action/action.control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { HintValue, FormFieldControl, ContentPosition, HintPosition } from '../form-field.control';
/** @enum {string} */
const OperationAction = {
    back: "back",
    cancel: "cancel",
    reset: "reset",
    delete: "delete",
    submit: "submit",
};
export { OperationAction };
/**
 * Returns true if the control is disabled; otherwise, false.
 * This function returns false by definition, that is, the control is enabled.
 * @param {?} sender Control that wants to know its disabled state.
 * @return {?}
 */
export function isDisabledDefault(sender) {
    /* This function returns false by definition, that is, the control is enabled. */
    return false;
}
/**
 * This function does nothing by definition.
 * @param {?} sender Control that was clicked.
 * @return {?}
 */
export function clickDefault(sender) {
    /* This function does nothing by definition. */
}
/**
 * A base interface that represents the content of an `ActionControl`.
 * @record
 */
export function ActionContent() { }
if (false) {
    /**
     * Returns the control's icon.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    ActionContent.prototype.icon;
    /**
     * Returns the control's tooltip.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    ActionContent.prototype.tooltip;
    /**
     * Returns the function that is executed for knowing if the control is or is not disabled.
     * By default, its value is `isDisabledDefault`.
     * @type {?|undefined}
     */
    ActionContent.prototype.isDisabled;
    /**
     * Returns the function that is executed when the user clicks the control.
     * By default, its value is `clickDefault`.
     * @type {?|undefined}
     */
    ActionContent.prototype.click;
}
/**
 * Represents the base abstract class for a control that executes actions.
 * @abstract
 */
export class ActionControl extends FormFieldControl {
    /**
     * Constructs a new instance of this class.
     */
    constructor() {
        super();
    }
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder It is NOT used here. Fix that.
     * @param {?=} alwaysHint If it is true then there is always a hint start-aligned.
     * @return {?}
     */
    init(label, placeholder = '', alwaysHint = true) {
        /* Sets the default values. */
        super.init(label, placeholder);
        /***************************** `mat-icon` properties. *****************************/
        if (this.content.icon != undefined)
            this.content.icon.setDefaultValueIfUndefined_setPosition(ContentPosition.prefix);
        /************************** `mat-form-field` properties. **************************/
        // if (this.content.appearance == undefined) this.content.appearance = TextInputAppearance.standard;
        /**************************** `matTooltip` properties. ****************************/
        if (alwaysHint && (this.content.tooltip == undefined)) {
            this.content.tooltip = new HintValue(HintPosition.start, this.content.label);
        }
        if (this.content.isDisabled == undefined)
            this.content.isDisabled = isDisabledDefault;
        if (this.content.click == undefined)
            this.content.click = clickDefault;
    }
    /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     * @protected
     * @return {?}
     */
    initValue() {
        /* It does not need to do something because the child controls are already initialized. */
        // /* In this way, checks if the specified `content.value` is correct. */
        // this.content.formControl.setValue(this.content.value);
        // /* Marks the control as `touched`. */
        // this.content.formControl.markAsTouched({
        //     onlySelf: true
        // });
    }
    /**
     * Returns this instance.
     * @return {?}
     */
    get getInstance() {
        return this;
    }
}
ActionControl.propDecorators = {
    content: [{ type: Input }]
};
if (false) {
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    ActionControl.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmNvbnRyb2wuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9hY3Rpb24vYWN0aW9uLmNvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBYSxTQUFTLEVBQW9CLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFLaEksTUFBWSxlQUFlO0lBRXZCLElBQUksUUFBUztJQUNiLE1BQU0sVUFBVztJQUNqQixLQUFLLFNBQVU7SUFDZixNQUFNLFVBQVc7SUFDakIsTUFBTSxVQUFXO0VBQ3BCOzs7Ozs7OztBQU9ELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxNQUFXO0lBRXpDLGlGQUFpRjtJQUNqRixPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDOzs7Ozs7QUFNRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQVc7SUFFcEMsK0NBQStDO0FBQ25ELENBQUM7Ozs7O0FBS0QsbUNBeUJDOzs7Ozs7O0lBbkJHLDZCQUFpQjs7Ozs7O0lBTWpCLGdDQUFvQjs7Ozs7O0lBTXBCLG1DQUFzQzs7Ozs7O0lBTXRDLDhCQUE4Qjs7Ozs7O0FBTWxDLE1BQU0sT0FBZ0IsYUFBYyxTQUFRLGdCQUFnQjs7OztJQVd4RDtRQUVJLEtBQUssRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7Ozs7O0lBUVMsSUFBSSxDQUFDLEtBQWEsRUFBRSxjQUFzQixFQUFFLEVBQUUsYUFBc0IsSUFBSTtRQUU5RSw4QkFBOEI7UUFFOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFL0Isb0ZBQW9GO1FBQ3BGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksU0FBUztZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVySCxvRkFBb0Y7UUFDcEYsb0dBQW9HO1FBRXBHLG9GQUFvRjtRQUNwRixJQUFJLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxFQUNyRDtZQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRjtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksU0FBUztZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDO1FBQ3RGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksU0FBUztZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQztJQUMzRSxDQUFDOzs7Ozs7O0lBTU0sU0FBUztRQUVaLDBGQUEwRjtRQUUxRix5RUFBeUU7UUFDekUseURBQXlEO1FBRXpELHdDQUF3QztRQUN4QywyQ0FBMkM7UUFDM0MscUJBQXFCO1FBQ3JCLE1BQU07SUFDVixDQUFDOzs7OztJQUtELElBQVcsV0FBVztRQUVsQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7c0JBOURBLEtBQUs7Ozs7Ozs7SUFBTixnQ0FDOEIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEljb25WYWx1ZSwgSGludFZhbHVlLCBGb3JtRmllbGRDb250ZW50LCBGb3JtRmllbGRDb250cm9sLCBDb250ZW50UG9zaXRpb24sIEhpbnRQb3NpdGlvbiB9IGZyb20gJy4uL2Zvcm0tZmllbGQuY29udHJvbCc7XG5cbi8qKlxuICogQW4gZW51bSB0aGF0IHJlcHJlc2VudHMgdGhlIG9wZXJhdGlvbiBhY3Rpb24uIFxuICovXG5leHBvcnQgZW51bSBPcGVyYXRpb25BY3Rpb25cbntcbiAgICBiYWNrID0gJ2JhY2snLFxuICAgIGNhbmNlbCA9ICdjYW5jZWwnLFxuICAgIHJlc2V0ID0gJ3Jlc2V0JyxcbiAgICBkZWxldGUgPSAnZGVsZXRlJyxcbiAgICBzdWJtaXQgPSAnc3VibWl0J1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29udHJvbCBpcyBkaXNhYmxlZDsgb3RoZXJ3aXNlLCBmYWxzZS4gXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgZmFsc2UgYnkgZGVmaW5pdGlvbiwgdGhhdCBpcywgdGhlIGNvbnRyb2wgaXMgZW5hYmxlZC4gXG4gKiBAcGFyYW0gc2VuZGVyIENvbnRyb2wgdGhhdCB3YW50cyB0byBrbm93IGl0cyBkaXNhYmxlZCBzdGF0ZS4gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Rpc2FibGVkRGVmYXVsdChzZW5kZXI6IGFueSk6IGJvb2xlYW5cbntcbiAgICAvKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgZmFsc2UgYnkgZGVmaW5pdGlvbiwgdGhhdCBpcywgdGhlIGNvbnRyb2wgaXMgZW5hYmxlZC4gKi9cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcgYnkgZGVmaW5pdGlvbi4gXG4gKiBAcGFyYW0gc2VuZGVyIENvbnRyb2wgdGhhdCB3YXMgY2xpY2tlZC4gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGlja0RlZmF1bHQoc2VuZGVyOiBhbnkpOiB2b2lkXG57XG4gICAgLyogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcgYnkgZGVmaW5pdGlvbi4gKi9cbn1cblxuLyoqXG4gKiBBIGJhc2UgaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgY29udGVudCBvZiBhbiBgQWN0aW9uQ29udHJvbGAuIFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNvbnRlbnQgZXh0ZW5kcyBGb3JtRmllbGRDb250ZW50XG57XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29udHJvbCdzIGljb24uIFxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC4gXG4gICAgICovXG4gICAgaWNvbj86IEljb25WYWx1ZTtcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY29udHJvbCdzIHRvb2x0aXAuIFxuXHQgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuIFxuXHQgKi9cbiAgICB0b29sdGlwPzogSGludFZhbHVlO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBmb3Iga25vd2luZyBpZiB0aGUgY29udHJvbCBpcyBvciBpcyBub3QgZGlzYWJsZWQuIFxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgaXNEaXNhYmxlZERlZmF1bHRgLiBcbiAgICAgKi9cbiAgICBpc0Rpc2FibGVkPzogKHNlbmRlcjogYW55KSA9PiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgY29udHJvbC4gXG4gICAgICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBjbGlja0RlZmF1bHRgLiBcbiAgICAgKi9cbiAgICBjbGljaz86IChzZW5kZXI6IGFueSkgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBiYXNlIGFic3RyYWN0IGNsYXNzIGZvciBhIGNvbnRyb2wgdGhhdCBleGVjdXRlcyBhY3Rpb25zLiBcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFjdGlvbkNvbnRyb2wgZXh0ZW5kcyBGb3JtRmllbGRDb250cm9sXG57XG4gICAgLyoqXG4gICAgICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY29udGVudCBvZiB0aGlzIGNsYXNzLiBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb250ZW50OiBBY3Rpb25Db250ZW50O1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYGNvbnRlbnRgIGlucHV0IHByb3BlcnR5LiBcbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGRlZmF1bHQgbGFiZWwgdG8gdXNlLiBJdCBpcyB1c2VkIGlmIHRoZSBgY29udGVudC5sYWJlbGAgaXMgbm90IHNwZWNpZmllZC4gXG4gICAgICogQHBhcmFtIHBsYWNlaG9sZGVyIEl0IGlzIE5PVCB1c2VkIGhlcmUuIEZpeCB0aGF0LiBcbiAgICAgKiBAcGFyYW0gYWx3YXlzSGludCBJZiBpdCBpcyB0cnVlIHRoZW4gdGhlcmUgaXMgYWx3YXlzIGEgaGludCBzdGFydC1hbGlnbmVkLiBcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaW5pdChsYWJlbDogc3RyaW5nLCBwbGFjZWhvbGRlcjogc3RyaW5nID0gJycsIGFsd2F5c0hpbnQ6IGJvb2xlYW4gPSB0cnVlKTogdm9pZFxuICAgIHtcbiAgICAgICAgLyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG5cbiAgICAgICAgc3VwZXIuaW5pdChsYWJlbCwgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBgbWF0LWljb25gIHByb3BlcnRpZXMuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICBpZiAodGhpcy5jb250ZW50Lmljb24gIT0gdW5kZWZpbmVkKSB0aGlzLmNvbnRlbnQuaWNvbi5zZXREZWZhdWx0VmFsdWVJZlVuZGVmaW5lZF9zZXRQb3NpdGlvbihDb250ZW50UG9zaXRpb24ucHJlZml4KTtcblxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKiogYG1hdC1mb3JtLWZpZWxkYCBwcm9wZXJ0aWVzLiAqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAgICAgLy8gaWYgKHRoaXMuY29udGVudC5hcHBlYXJhbmNlID09IHVuZGVmaW5lZCkgdGhpcy5jb250ZW50LmFwcGVhcmFuY2UgPSBUZXh0SW5wdXRBcHBlYXJhbmNlLnN0YW5kYXJkO1xuXG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqIGBtYXRUb29sdGlwYCBwcm9wZXJ0aWVzLiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICBpZiAoYWx3YXlzSGludCAmJiAodGhpcy5jb250ZW50LnRvb2x0aXAgPT0gdW5kZWZpbmVkKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LnRvb2x0aXAgPSBuZXcgSGludFZhbHVlKEhpbnRQb3NpdGlvbi5zdGFydCwgdGhpcy5jb250ZW50LmxhYmVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnQuaXNEaXNhYmxlZCA9PSB1bmRlZmluZWQpIHRoaXMuY29udGVudC5pc0Rpc2FibGVkID0gaXNEaXNhYmxlZERlZmF1bHQ7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnQuY2xpY2sgPT0gdW5kZWZpbmVkKSB0aGlzLmNvbnRlbnQuY2xpY2sgPSBjbGlja0RlZmF1bHQ7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyB0aGUgY29udHJvbCdzIHZhbHVlLiBJdCB1c2VzIHRoZSBgY29udGVudC52YWx1ZWAgYW5kIGl0IGlzIGFscmVhZHkgZGlmZmVyZW50IG9mIGB1bmRlZmluZWRgLiBcbiAgICAgKiBJdCBhbHNvIGNoZWNrcyBpZiB0aGUgc3BlY2lmaWVkIGBjb250ZW50LnZhbHVlYCBpcyBjb3JyZWN0LiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuIFxuXHQgKi9cblx0cHJvdGVjdGVkIGluaXRWYWx1ZSgpOiB2b2lkXG5cdHtcbiAgICAgICAgLyogSXQgZG9lcyBub3QgbmVlZCB0byBkbyBzb21ldGhpbmcgYmVjYXVzZSB0aGUgY2hpbGQgY29udHJvbHMgYXJlIGFscmVhZHkgaW5pdGlhbGl6ZWQuICovXG5cbiAgICAgICAgLy8gLyogSW4gdGhpcyB3YXksIGNoZWNrcyBpZiB0aGUgc3BlY2lmaWVkIGBjb250ZW50LnZhbHVlYCBpcyBjb3JyZWN0LiAqL1xuICAgICAgICAvLyB0aGlzLmNvbnRlbnQuZm9ybUNvbnRyb2wuc2V0VmFsdWUodGhpcy5jb250ZW50LnZhbHVlKTtcblxuICAgICAgICAvLyAvKiBNYXJrcyB0aGUgY29udHJvbCBhcyBgdG91Y2hlZGAuICovXG4gICAgICAgIC8vIHRoaXMuY29udGVudC5mb3JtQ29udHJvbC5tYXJrQXNUb3VjaGVkKHtcbiAgICAgICAgLy8gICAgIG9ubHlTZWxmOiB0cnVlXG4gICAgICAgIC8vIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhpcyBpbnN0YW5jZS4gXG4gICAgICovXG4gICAgcHVibGljIGdldCBnZXRJbnN0YW5jZSgpOiBBY3Rpb25Db250cm9sXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXX0=