/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/select/select-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { isArray } from 'util';
import { InputControl } from '../input.control';
import { HintPosition, HintValue } from '../../form-field.control';
/**
 * An interface that represents a selectable option.
 * @record
 */
export function SelectOption() { }
if (false) {
    /**
     * Returns the label that is showed.
     * @type {?}
     */
    SelectOption.prototype.label;
    /**
     * Returns the value that is stored internally.
     * @type {?}
     */
    SelectOption.prototype.value;
}
/**
 * An interface that represents the content of a select control.
 * @record
 */
export function SelectContent() { }
if (false) {
    /**
     * Returns the options list that can be selected.
     * This field can be set using three ways:
     *  - Its value is `undefined`, then it takes the options from the `content.value` field.
     *  - Its value is a `SelectOption[]`, then it already contains the options.
     *  - Its value is an `Observable<SelectOption[]>`, then it takes the options when the observable emits values.
     * By default, its value is `[]`.
     * @type {?|undefined}
     */
    SelectContent.prototype.selectOptions;
    /**
     * Returns true if the selection can be multiple; otherwise, false.
     * By default, its value is `false`.
     * @type {?|undefined}
     */
    SelectContent.prototype.multiple;
    /**
     * Returns true if the tooltip is showed; otherwise, false.
     * By default, its value is `false`.
     * @type {?|undefined}
     */
    SelectContent.prototype.showTooltip;
    /**
     * Returns a value that allows the user to define the position of the tooltip for the select control.
     * It is used if the `showTooltip` field value is `true`.
     * By default, its value is `'below'`.
     * Its value can be one of these values: 'left', 'right', 'above', 'below', 'after', 'before'
     * @type {?|undefined}
     */
    SelectContent.prototype.selectTooltipPosition;
    /**
     * Returns a value that allows the user to define the position of the tooltip for the select control's options.
     * It is used if the `showTooltip` field value is `true`.
     * By default, its value is `'right'`.
     * Its value can be one of these values: 'left', 'right', 'above', 'below', 'after', 'before'
     * @type {?|undefined}
     */
    SelectContent.prototype.optionsTooltipPosition;
}
/**
 * Represents a control that allows to select one value or multiple values.
 * Implementation notes:
 * The `extraContent` recibe una funcion llamada getOptions() que se encarga de contruir un SelectOption[].
 * Si es multiple, entonces el `value` es un array de valores.
 */
export class InputSelectComponent extends InputControl {
    /**
     * @param {?} _transServ
     */
    constructor(_transServ) {
        super();
        this._transServ = _transServ;
        this._selectOptionsSubscription = null;
        this.selectTooltip = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* Sets the default values. */
        this.init('', '', false, true);
        /* The `selectTooltip` value is set in `onSelectionChange` method when happening initialization or selection change. */
        this.onSelectionChange();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /* Disposes the resources held by the subscription. */
        this._selectOptions_Unsubscription();
    }
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @param {?=} isAbbreviation If it is true then the `label` argument represents an abbreviation; otherwise, false.
     * @param {?=} alwaysHint If it is true then there is always at leat one hint start-aligned.
     * @return {?}
     */
    init(label, placeholder = '', isAbbreviation, alwaysHint) {
        /* Changes the translation when the language changes. */
        this._transServ.onLangChange.subscribe((/**
         * @param {?} params
         * @return {?}
         */
        (params) => {
            this._setSelectTooltip();
        }));
        /* Sets the default values. */
        super.init(label, placeholder, isAbbreviation, alwaysHint);
        if (this.content.startHint != undefined) {
            if (this.content.startHint.label == 'TOCO_NG_HINT_TEXTO_POR_DEFECTO')
                this.content.startHint.label = 'TOCO_NG_HINT_TEXTO_SELECC_POR_DEFECTO';
        }
        else
            this.content.startHint = new HintValue(HintPosition.start, 'TOCO_NG_HINT_TEXTO_SELECC_POR_DEFECTO');
        if (this.content.multiple == undefined)
            this.content.multiple = false;
        if (this.content.showTooltip == undefined)
            this.content.showTooltip = false;
        if (this.content.selectTooltipPosition == undefined)
            this.content.selectTooltipPosition = 'below';
        if (this.content.optionsTooltipPosition == undefined)
            this.content.optionsTooltipPosition = 'right';
        if (this.content.selectOptions == undefined) {
            if (this.content.value == undefined) {
                this.content.selectOptions = [];
            }
            else {
                /* Gets the `content.selectOptions` from the `content.value` field. */
                if (isArray(this.content.value)) {
                    this.content.multiple = true; /* The control must be multiple. */
                    this.content.selectOptions = [];
                    this.content.value.forEach((/**
                     * @param {?} option
                     * @return {?}
                     */
                    (option) => {
                        ((/** @type {?} */ (this.content.selectOptions))).push({
                            'label': option,
                            'value': option.toUpperCase()
                        });
                    }));
                }
                else {
                    this.content.selectOptions = [
                        {
                            'label': this.content.value,
                            'value': this.content.value.toUpperCase()
                        }
                    ];
                }
            }
        }
        else if (isArray(this.content.selectOptions)) {
            /* Nothing to do here, but this case must be here. */
        }
        else if (this.content.selectOptions instanceof Observable) {
            /* Gets the `content.selectOptions` from an `Observable` when it emits values. */
            this._selectOptions_Unsubscription();
            this._selectOptionsSubscription = this.content.selectOptions.subscribe((/**
             * @param {?} selectOptions
             * @return {?}
             */
            (selectOptions) => {
                this.content.selectOptions = selectOptions;
            }));
        }
        else {
            throw new Error(`For the '${InputSelectComponent.name}' control, the 'content.selectOptions' type value has a configuration error because the programme does not know what to do with it!`);
        }
        /* The `selectTooltip` value is set in `onSelectionChange` method when happening initialization or selection change. */
    }
    /**
     * @private
     * @return {?}
     */
    _selectOptions_Unsubscription() {
        /* Disposes the resources held by the subscription. */
        if (this._selectOptionsSubscription) {
            this._selectOptionsSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    onSelectionChange() {
        // console.log('Call `onSelectionChange` - ', 'Select value: ', this.content.formControl.value);
        this._setSelectTooltip();
        if ((this.content.extraContent) && (this.content.extraContent.selectionChange)) {
            this.content.extraContent.selectionChange(this.content.formControl.value);
        }
    }
    /**
     * Does the translation for a key (or an array of keys).
     * @private
     * @param {?} key The key (or an array of keys) to translate.
     * @return {?}
     */
    _doTranslation(key) {
        if (key.length == 0) {
            this.selectTooltip = '';
            return;
        }
        this._transServ.get(key).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            // console.log(key, ' --> ', res);
            if (this.content.multiple) {
                /* `res` is an object of translated keys. */
                /** @type {?} */
                let translationKeys = Object.keys(res);
                /** @type {?} */
                let len = translationKeys.length;
                /** @type {?} */
                let translationRes = res[translationKeys[0]];
                for (let i = 1; i < len; ++i) {
                    translationRes += '\n' + res[translationKeys[i]];
                }
                this.selectTooltip = translationRes;
            }
            else {
                /* `res` is a translated key. */
                this.selectTooltip = res;
            }
        }));
    }
    /**
     * Finds the label for a value (or an array of values).
     * @private
     * @param {?} value The value (or an array of values) to find the label.
     * @return {?} Returns a label (or an array of labels).
     */
    _findLabel(value) {
        if (this.content.multiple) {
            /** @type {?} */
            let label = [];
            for (let val of value) {
                for (let opt of ((/** @type {?} */ (this.content.selectOptions)))) {
                    if (opt.value == val) {
                        label.push(opt.label);
                        break;
                    }
                }
            }
            return label;
        }
        else {
            /** @type {?} */
            let label = '';
            for (let opt of ((/** @type {?} */ (this.content.selectOptions)))) {
                if (opt.value == value) {
                    label = opt.label;
                    break;
                }
            }
            return label;
        }
    }
    /**
     * Sets the `selectTooltip` field value.
     * @private
     * @return {?}
     */
    _setSelectTooltip() {
        if (this.content.formControl.value != undefined) {
            this._doTranslation(this._findLabel(this.content.formControl.value));
        }
        else {
            this.selectTooltip = '';
        }
    }
}
InputSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-select',
                template: "\n<mat-form-field\n\tclass=\"select-mat-form-field\"\n\t[appearance]=\"content.appearance\"\n>\n\n\t<mat-label>\n\t\t{{ content.label | translate }}\n\t</mat-label>\n\n\t<ng-container *ngIf=\"content.showTooltip; then thenTemplate_Tooltip; else elseTemplate_WithoutTooltip\"></ng-container>\n\n\t<ng-template #thenTemplate_Tooltip>\n\t\t<mat-select \n\t\t\t[formControl]=\"content.formControl\"\n\t\t\t[required]=\"content.required\"\n\t\t\t[style.textAlign]=\"content.textAlign\"\n\t\t\t[attr.aria-label]=\"content.ariaLabel | translate\"\n\t\t\t[(value)]=\"content.value\"\n\t\t\t[multiple]=\"content.multiple\"\n\t\t\t(selectionChange)=\"onSelectionChange()\"\n\t\t\t[matTooltip]=\"selectTooltip\" [matTooltipPosition]=\"content.selectTooltipPosition\" [matTooltipClass]=\"'tooltip-multiple-lines'\"\n\t\t>\n\t\t\t<mat-option \n\t\t\t\t*ngFor=\"let option of content.selectOptions\" \n\t\t\t\t[value]=\"option.value\"\n\t\t\t\t[matTooltip]=\"option.label | translate\" [matTooltipPosition]=\"content.optionsTooltipPosition\"\n\t\t\t>\n\t\t\t\t{{ option.label | translate }}\n\t\t\t</mat-option>\n\t\t</mat-select>\n\t</ng-template>\n\n\t<ng-template #elseTemplate_WithoutTooltip>\n\t\t<mat-select \n\t\t\t[formControl]=\"content.formControl\"\n\t\t\t[required]=\"content.required\"\n\t\t\t[style.textAlign]=\"content.textAlign\"\n\t\t\t[attr.aria-label]=\"content.ariaLabel | translate\"\n\t\t\t[(value)]=\"content.value\"\n\t\t\t[multiple]=\"content.multiple\"\n\t\t\t(selectionChange)=\"onSelectionChange()\"\n\t\t>\n\t\t\t<mat-option \n\t\t\t\t*ngFor=\"let option of content.selectOptions\" \n\t\t\t\t[value]=\"option.value\"\n\t\t\t>\n\t\t\t\t{{ option.label | translate }}\n\t\t\t</mat-option>\n\t\t</mat-select>\n\t</ng-template>\n\n\t<mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                host: {
                    '[style.minWidth]': 'content.minWidth',
                    '[style.width]': 'content.width'
                },
                styles: [".select-mat-form-field{width:100%}::ng-deep .tooltip-multiple-lines{white-space:pre-line!important}"]
            }] }
];
/** @nocollapse */
InputSelectComponent.ctorParameters = () => [
    { type: TranslateService }
];
InputSelectComponent.propDecorators = {
    content: [{ type: Input }]
};
if (false) {
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    InputSelectComponent.prototype.content;
    /**
     * Returns the current selected option tooltip.
     * If nothing is selected, then its value is `''`.
     * @type {?}
     */
    InputSelectComponent.prototype.selectTooltip;
    /**
     * @type {?}
     * @private
     */
    InputSelectComponent.prototype._selectOptionsSubscription;
    /**
     * @type {?}
     * @private
     */
    InputSelectComponent.prototype._transServ;
}
//# sourceMappingURL=data:application/json;base64,