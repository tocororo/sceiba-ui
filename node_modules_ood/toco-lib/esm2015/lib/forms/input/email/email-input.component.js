/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/email/email-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { InputControl } from '../input.control';
import { EmailValue } from './email-value';
/**
 * Represents a control that allows the writing of an email.
 * It uses the `EmailValue.email_Label` as a label if the `content.label` is not specified.
 * It uses the `EmailValue.email_Placeholder` as a placeholder if the `content.placeholder` is not specified.
 */
export class InputEmailComponent extends InputControl {
    constructor() {
        super();
    }
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputEmailComponent`'s `content.formControl` value by default.
     * In this case, the `validatorArguments` argument is always `undefined`.
     * @param {?=} validatorArguments
     * @return {?}
     */
    static getFormControlByDefault(validatorArguments = undefined) {
        return new FormControl('', [
            Validators.email
        ]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* Sets the default values. */
        this.init(EmailValue.email_Label, EmailValue.email_Placeholder, false, true);
    }
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    getErrorMessage() {
        /** @type {?} */
        let validationErrors = this.content.formControl.errors;
        /* Shows the email errors. */
        if (validationErrors) {
            if (validationErrors[Validators.required.name]) {
                return this.validationError_required;
            }
            else {
                /* It is `validationErrors[Validators.email.name]`. */
                return 'TOCO_NG_ERROR_MSG_CORREO_INVAL';
            }
        }
        return '';
    }
}
InputEmailComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-email',
                template: "\n<mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\">\n<!-- <mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\" [formGroup]=\"content.parentFormSection\"> -->\n\n    <mat-label>{{ content.label | translate }}</mat-label>\n\n    <input matInput [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" />\n    <!-- <input matInput id=\"inputId-{{ content.name }}\" class=\"input-text-element\" [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" [formControlName]=\"content.name\" /> -->\n\n    <!-- At the moment of writing this code (2019-08-03), I think that there is an error in `ng-container` or \n        `mat-icon` or something related because I can not put the `mat-icon` tag within an `ng-container` tag \n        because the normal layout of `mat-icon` is modified. This is a contradiction because the `ng-container` \n        does not interfere with styles or layout. -->\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.internal)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix [svgIcon]=\"content.prefixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.external)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix>{{ content.prefixIcon.name }}</mat-icon>\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.internal)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix [svgIcon]=\"content.suffixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.external)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix>{{ content.suffixIcon.name }}</mat-icon>\n\n    <span *ngIf=\"content.prefixText\" matPrefix><pre class=\"content.appearance\">{{ content.prefixText }}</pre></span>\n    <span *ngIf=\"content.suffixText\" matSuffix><pre class=\"content.appearance\">{{ content.suffixText }}</pre></span>\n\n    <mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                host: {
                    '[style.minWidth]': 'content.minWidth',
                    '[style.width]': 'content.width'
                },
                styles: [".text-mat-form-field{width:100%;cursor:text}.text-mat-icon-prefix{margin-right:8px}.text-mat-icon-prefix.standard{position:relative;top:4px}.text-mat-icon-suffix{margin-left:8px}.text-mat-icon-suffix.standard{position:relative;top:4px}pre{margin:0}pre.outline{position:relative;bottom:4px}"]
            }] }
];
/** @nocollapse */
InputEmailComponent.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwtaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvZm9ybXMvaW5wdXQvZW1haWwvZW1haWwtaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0FBZ0IzQyxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsWUFBWTtJQWNqRDtRQUVJLEtBQUssRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7Ozs7SUFWTSxNQUFNLENBQUMsdUJBQXVCLENBQUMscUJBQXlDLFNBQVM7UUFFcEYsT0FBTyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDdkIsVUFBVSxDQUFDLEtBQUs7U0FDbkIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQU9NLFFBQVE7UUFFWCw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakYsQ0FBQzs7Ozs7SUFLTSxlQUFlOztZQUVkLGdCQUFnQixHQUFxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNO1FBRXhFLDZCQUE2QjtRQUM3QixJQUFJLGdCQUFnQixFQUNwQjtZQUNJLElBQUksZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFDOUM7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUM7YUFDeEM7aUJBRUQ7Z0JBQ0ksc0RBQXNEO2dCQUN0RCxPQUFPLGdDQUFnQyxDQUFDO2FBQzNDO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7OztZQXhESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLHl3R0FBZ0Q7Z0JBRWhELElBQUksRUFBRTtvQkFDRixrQkFBa0IsRUFBRSxrQkFBa0I7b0JBQ3RDLGVBQWUsRUFBRSxlQUFlO2lCQUNuQzs7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBWYWxpZGF0b3JzLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnRyb2wgfSBmcm9tICcuLi9pbnB1dC5jb250cm9sJztcbmltcG9ydCB7IFZhbGlkYXRvckFyZ3VtZW50cyB9IGZyb20gJy4uLy4uL2Zvcm0tZmllbGQuY29udHJvbCc7XG5pbXBvcnQgeyBFbWFpbFZhbHVlIH0gZnJvbSAnLi9lbWFpbC12YWx1ZSc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbnRyb2wgdGhhdCBhbGxvd3MgdGhlIHdyaXRpbmcgb2YgYW4gZW1haWwuIFxuICogSXQgdXNlcyB0aGUgYEVtYWlsVmFsdWUuZW1haWxfTGFiZWxgIGFzIGEgbGFiZWwgaWYgdGhlIGBjb250ZW50LmxhYmVsYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAqIEl0IHVzZXMgdGhlIGBFbWFpbFZhbHVlLmVtYWlsX1BsYWNlaG9sZGVyYCBhcyBhIHBsYWNlaG9sZGVyIGlmIHRoZSBgY29udGVudC5wbGFjZWhvbGRlcmAgaXMgbm90IHNwZWNpZmllZC4gXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaW5wdXQtZW1haWwnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi4vdGV4dC90ZXh0LWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi4vdGV4dC90ZXh0LWlucHV0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgaG9zdDoge1xuICAgICAgICAnW3N0eWxlLm1pbldpZHRoXSc6ICdjb250ZW50Lm1pbldpZHRoJyxcbiAgICAgICAgJ1tzdHlsZS53aWR0aF0nOiAnY29udGVudC53aWR0aCdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIElucHV0RW1haWxDb21wb25lbnQgZXh0ZW5kcyBJbnB1dENvbnRyb2wgaW1wbGVtZW50cyBPbkluaXRcbntcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgYEZvcm1Db250cm9sYCBieSBkZWZhdWx0LiBcbiAgICAgKiBJdCBpcyB1c2VkIHRvIGluaXRpYWxpemVkIHRoZSBgSW5wdXRFbWFpbENvbXBvbmVudGAncyBgY29udGVudC5mb3JtQ29udHJvbGAgdmFsdWUgYnkgZGVmYXVsdC4gXG4gICAgICogSW4gdGhpcyBjYXNlLCB0aGUgYHZhbGlkYXRvckFyZ3VtZW50c2AgYXJndW1lbnQgaXMgYWx3YXlzIGB1bmRlZmluZWRgLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldEZvcm1Db250cm9sQnlEZWZhdWx0KHZhbGlkYXRvckFyZ3VtZW50czogVmFsaWRhdG9yQXJndW1lbnRzID0gdW5kZWZpbmVkKTogRm9ybUNvbnRyb2xcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgRm9ybUNvbnRyb2woJycsIFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMuZW1haWxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG5nT25Jbml0KCk6IHZvaWRcbiAgICB7XG4gICAgICAgIC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuICAgICAgICB0aGlzLmluaXQoRW1haWxWYWx1ZS5lbWFpbF9MYWJlbCwgRW1haWxWYWx1ZS5lbWFpbF9QbGFjZWhvbGRlciwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZXJyb3Igc3RyaW5nIGlmIHRoZSBjb250cm9sIGlzIGluIGFuIGVycm9yIHN0YXRlOyBvdGhlcndpc2UsIGVtcHR5IHN0cmluZy4gXG4gICAgICovXG4gICAgcHVibGljIGdldEVycm9yTWVzc2FnZSgpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCB2YWxpZGF0aW9uRXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzID0gdGhpcy5jb250ZW50LmZvcm1Db250cm9sLmVycm9ycztcblxuICAgICAgICAvKiBTaG93cyB0aGUgZW1haWwgZXJyb3JzLiAqL1xuICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9ycylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcnNbVmFsaWRhdG9ycy5yZXF1aXJlZC5uYW1lXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uRXJyb3JfcmVxdWlyZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLyogSXQgaXMgYHZhbGlkYXRpb25FcnJvcnNbVmFsaWRhdG9ycy5lbWFpbC5uYW1lXWAuICovXG4gICAgICAgICAgICAgICAgcmV0dXJuICdUT0NPX05HX0VSUk9SX01TR19DT1JSRU9fSU5WQUwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbiJdfQ==