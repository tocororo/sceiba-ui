/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/identifier/identifier-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { InputControl } from '../input.control';
import { IdentifierValue } from './identifier-value';
/**
 * Represents a control that allows the writing of an identifier.
 * It uses the `IdentifierValue.identifier_Label` as a label if the `content.label` is not specified.
 */
export class InputIdentifierComponent extends InputControl {
    constructor() {
        super();
    }
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputIdentifierComponent`'s `content.formControl` value by default.
     * @param {?=} validatorArguments An object that has only one field of `pattern` name and its value is a string.
     * The `pattern` name is the validator name and the value is the value that the validator needs to check.
     * For example, you can call the `getFormControlByDefault` method in this way:
     * InputIdentifierComponent.getFormControlByDefault({ 'pattern': '^[a-zA-Z\_][a-zA-Z\-\_0-9]*$' });
     * If this argument is not specified, by default its value is { 'pattern': '^[a-zA-Z\-\_]*$' }.
     * @return {?}
     */
    static getFormControlByDefault(validatorArguments = undefined) {
        return new FormControl('', [
            (((validatorArguments) && (validatorArguments.pattern)) ? Validators.pattern(validatorArguments.pattern) : Validators.pattern('^[a-zA-Z\-\_]*$'))
            // Validators.pattern(/((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/i)
        ]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* Sets the default values. */
        this.init(IdentifierValue.identifier_Label, '', false, true);
    }
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    getErrorMessage() {
        /** @type {?} */
        let validationErrors = this.content.formControl.errors;
        /* Shows the identifier errors. */
        if (validationErrors) {
            if (validationErrors[Validators.required.name]) {
                return this.validationError_required;
            }
            else {
                /* It is `validationErrors[Validators.pattern.name]`. */
                return 'TOCO_NG_ERROR_MSG_ID_INVAL';
            }
        }
        return '';
    }
}
InputIdentifierComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-identifier',
                template: "\n<mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\">\n<!-- <mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\" [formGroup]=\"content.parentFormSection\"> -->\n\n    <mat-label>{{ content.label | translate }}</mat-label>\n\n    <input matInput [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" />\n    <!-- <input matInput id=\"inputId-{{ content.name }}\" class=\"input-text-element\" [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" [formControlName]=\"content.name\" /> -->\n\n    <!-- At the moment of writing this code (2019-08-03), I think that there is an error in `ng-container` or \n        `mat-icon` or something related because I can not put the `mat-icon` tag within an `ng-container` tag \n        because the normal layout of `mat-icon` is modified. This is a contradiction because the `ng-container` \n        does not interfere with styles or layout. -->\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.internal)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix [svgIcon]=\"content.prefixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.external)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix>{{ content.prefixIcon.name }}</mat-icon>\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.internal)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix [svgIcon]=\"content.suffixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.external)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix>{{ content.suffixIcon.name }}</mat-icon>\n\n    <span *ngIf=\"content.prefixText\" matPrefix><pre class=\"content.appearance\">{{ content.prefixText }}</pre></span>\n    <span *ngIf=\"content.suffixText\" matSuffix><pre class=\"content.appearance\">{{ content.suffixText }}</pre></span>\n\n    <mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                host: {
                    '[style.minWidth]': 'content.minWidth',
                    '[style.width]': 'content.width'
                },
                styles: [".text-mat-form-field{width:100%;cursor:text}.text-mat-icon-prefix{margin-right:8px}.text-mat-icon-prefix.standard{position:relative;top:4px}.text-mat-icon-suffix{margin-left:8px}.text-mat-icon-suffix.standard{position:relative;top:4px}pre{margin:0}pre.outline{position:relative;bottom:4px}"]
            }] }
];
/** @nocollapse */
InputIdentifierComponent.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllci1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9pbnB1dC9pZGVudGlmaWVyL2lkZW50aWZpZXItaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7OztBQWVyRCxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsWUFBWTtJQW1CdEQ7UUFFSSxLQUFLLEVBQUUsQ0FBQztJQUNaLENBQUM7Ozs7Ozs7Ozs7O0lBWE0sTUFBTSxDQUFDLHVCQUF1QixDQUFDLHFCQUF5QyxTQUFTO1FBRXBGLE9BQU8sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDakosOE1BQThNO1NBQ2pOLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFPTSxRQUFRO1FBRVgsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQzs7Ozs7SUFLTSxlQUFlOztZQUVkLGdCQUFnQixHQUFxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNO1FBRXhFLGtDQUFrQztRQUNsQyxJQUFJLGdCQUFnQixFQUNwQjtZQUNJLElBQUksZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFDOUM7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUM7YUFDeEM7aUJBRUQ7Z0JBQ0ksd0RBQXdEO2dCQUN4RCxPQUFPLDRCQUE0QixDQUFDO2FBQ3ZDO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7OztZQTdESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIseXdHQUFnRDtnQkFFaEQsSUFBSSxFQUFFO29CQUNGLGtCQUFrQixFQUFFLGtCQUFrQjtvQkFDdEMsZUFBZSxFQUFFLGVBQWU7aUJBQ25DOzthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFZhbGlkYXRvcnMsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IElucHV0Q29udHJvbCB9IGZyb20gJy4uL2lucHV0LmNvbnRyb2wnO1xuaW1wb3J0IHsgVmFsaWRhdG9yQXJndW1lbnRzIH0gZnJvbSAnLi4vLi4vZm9ybS1maWVsZC5jb250cm9sJztcbmltcG9ydCB7IElkZW50aWZpZXJWYWx1ZSB9IGZyb20gJy4vaWRlbnRpZmllci12YWx1ZSc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbnRyb2wgdGhhdCBhbGxvd3MgdGhlIHdyaXRpbmcgb2YgYW4gaWRlbnRpZmllci4gXG4gKiBJdCB1c2VzIHRoZSBgSWRlbnRpZmllclZhbHVlLmlkZW50aWZpZXJfTGFiZWxgIGFzIGEgbGFiZWwgaWYgdGhlIGBjb250ZW50LmxhYmVsYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpbnB1dC1pZGVudGlmaWVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4uL3RleHQvdGV4dC1pbnB1dC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4uL3RleHQvdGV4dC1pbnB1dC5jb21wb25lbnQuc2NzcyddLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1tzdHlsZS5taW5XaWR0aF0nOiAnY29udGVudC5taW5XaWR0aCcsXG4gICAgICAgICdbc3R5bGUud2lkdGhdJzogJ2NvbnRlbnQud2lkdGgnXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dElkZW50aWZpZXJDb21wb25lbnQgZXh0ZW5kcyBJbnB1dENvbnRyb2wgaW1wbGVtZW50cyBPbkluaXRcbntcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgYEZvcm1Db250cm9sYCBieSBkZWZhdWx0LiBcbiAgICAgKiBJdCBpcyB1c2VkIHRvIGluaXRpYWxpemVkIHRoZSBgSW5wdXRJZGVudGlmaWVyQ29tcG9uZW50YCdzIGBjb250ZW50LmZvcm1Db250cm9sYCB2YWx1ZSBieSBkZWZhdWx0LiBcbiAgICAgKiBAcGFyYW0gdmFsaWRhdG9yQXJndW1lbnRzIEFuIG9iamVjdCB0aGF0IGhhcyBvbmx5IG9uZSBmaWVsZCBvZiBgcGF0dGVybmAgbmFtZSBhbmQgaXRzIHZhbHVlIGlzIGEgc3RyaW5nLiBcbiAgICAgKiBUaGUgYHBhdHRlcm5gIG5hbWUgaXMgdGhlIHZhbGlkYXRvciBuYW1lIGFuZCB0aGUgdmFsdWUgaXMgdGhlIHZhbHVlIHRoYXQgdGhlIHZhbGlkYXRvciBuZWVkcyB0byBjaGVjay4gXG4gICAgICogRm9yIGV4YW1wbGUsIHlvdSBjYW4gY2FsbCB0aGUgYGdldEZvcm1Db250cm9sQnlEZWZhdWx0YCBtZXRob2QgaW4gdGhpcyB3YXk6IFxuICAgICAqIElucHV0SWRlbnRpZmllckNvbXBvbmVudC5nZXRGb3JtQ29udHJvbEJ5RGVmYXVsdCh7ICdwYXR0ZXJuJzogJ15bYS16QS1aXFxfXVthLXpBLVpcXC1cXF8wLTldKiQnIH0pO1xuICAgICAqIElmIHRoaXMgYXJndW1lbnQgaXMgbm90IHNwZWNpZmllZCwgYnkgZGVmYXVsdCBpdHMgdmFsdWUgaXMgeyAncGF0dGVybic6ICdeW2EtekEtWlxcLVxcX10qJCcgfS4gXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRGb3JtQ29udHJvbEJ5RGVmYXVsdCh2YWxpZGF0b3JBcmd1bWVudHM6IFZhbGlkYXRvckFyZ3VtZW50cyA9IHVuZGVmaW5lZCk6IEZvcm1Db250cm9sXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IEZvcm1Db250cm9sKCcnLCBbXG4gICAgICAgICAgICAoKCh2YWxpZGF0b3JBcmd1bWVudHMpICYmICh2YWxpZGF0b3JBcmd1bWVudHMucGF0dGVybikpID8gVmFsaWRhdG9ycy5wYXR0ZXJuKHZhbGlkYXRvckFyZ3VtZW50cy5wYXR0ZXJuKSA6IFZhbGlkYXRvcnMucGF0dGVybignXlthLXpBLVpcXC1cXF9dKiQnKSlcbiAgICAgICAgICAgIC8vIFZhbGlkYXRvcnMucGF0dGVybigvKCgoW0EtWmEtel17Myw5fTooPzpcXC9cXC8pPykoPzpbXFwtOzomPVxcK1xcJCxcXHddK0ApP1tBLVphLXowLTlcXC5cXC1dK3woPzp3d3dcXC58W1xcLTs6Jj1cXCtcXCQsXFx3XStAKVtBLVphLXowLTlcXC5cXC1dKykoKD86XFwvW1xcK34lXFwvXFwuXFx3XFwtX10qKT9cXD8/KD86W1xcLVxcKz0mOyVAXFwuXFx3X10qKSM/KD86W1xcLlxcIVxcL1xcXFxcXHddKikpPykvaSlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG5nT25Jbml0KCk6IHZvaWRcbiAgICB7XG4gICAgICAgIC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuICAgICAgICB0aGlzLmluaXQoSWRlbnRpZmllclZhbHVlLmlkZW50aWZpZXJfTGFiZWwsICcnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlcnJvciBzdHJpbmcgaWYgdGhlIGNvbnRyb2wgaXMgaW4gYW4gZXJyb3Igc3RhdGU7IG90aGVyd2lzZSwgZW1wdHkgc3RyaW5nLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXJyb3JNZXNzYWdlKCk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgbGV0IHZhbGlkYXRpb25FcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMgPSB0aGlzLmNvbnRlbnQuZm9ybUNvbnRyb2wuZXJyb3JzO1xuXG4gICAgICAgIC8qIFNob3dzIHRoZSBpZGVudGlmaWVyIGVycm9ycy4gKi9cbiAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3JzW1ZhbGlkYXRvcnMucmVxdWlyZWQubmFtZV0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkVycm9yX3JlcXVpcmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8qIEl0IGlzIGB2YWxpZGF0aW9uRXJyb3JzW1ZhbGlkYXRvcnMucGF0dGVybi5uYW1lXWAuICovXG4gICAgICAgICAgICAgICAgcmV0dXJuICdUT0NPX05HX0VSUk9SX01TR19JRF9JTlZBTCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuIl19