/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/url/url-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { UrlValue } from './url-value';
import { InputControl } from '../input.control';
/**
 * Represents a control that allows the writing of a url.
 * It uses the `UrlValue.url_Label` as a label if the `content.label` is not specified.
 * It uses the `UrlValue.url_Placeholder` as a placeholder if the `content.placeholder` is not specified.
 */
export class InputUrlComponent extends InputControl {
    constructor() {
        super();
    }
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputUrlComponent`'s `content.formControl` value by default.
     * In this case, the `validatorArguments` argument is always `undefined`.
     * @param {?=} validatorArguments
     * @return {?}
     */
    static getFormControlByDefault(validatorArguments = undefined) {
        // const reg = '/(^|\s)((https?:\/\/)?[\w-]+(\.[\w-]+)+\.?(:\d+)?(\/\S*)?)/gi';
        // const reg2 = '[a-z.]*';
        /** @type {?} */
        const reg3 = '(https?://)?([\\da-z.-]+)\\.([a-z.]{2,6})[/\\w .-]*/?';
        return new FormControl('', [
            Validators.pattern(reg3)
            // Validators.pattern('/(^|\s)((https?:\/\/)?[\w-]+(\.[\w-]+)+\.?(:\d+)?(\/\S*)?)/i')
            // Validators.pattern(/((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/i)
        ]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* Sets the default values. */
        this.init(UrlValue.url_Label, UrlValue.url_Placeholder, false, true);
    }
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    getErrorMessage() {
        /** @type {?} */
        let validationErrors = this.content.formControl.errors;
        /* Shows the url errors. */
        if (validationErrors) {
            if (validationErrors[Validators.required.name]) {
                return this.validationError_required;
            }
            else {
                /* It is `validationErrors[Validators.pattern.name]`. */
                return 'TOCO_NG_ERROR_MSG_URL_INVAL';
            }
        }
        return '';
    }
}
InputUrlComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-url',
                template: "\n<mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\">\n<!-- <mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\" [formGroup]=\"content.parentFormSection\"> -->\n\n    <mat-label>{{ content.label | translate }}</mat-label>\n\n    <input matInput [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" />\n    <!-- <input matInput id=\"inputId-{{ content.name }}\" class=\"input-text-element\" [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" [formControlName]=\"content.name\" /> -->\n\n    <!-- At the moment of writing this code (2019-08-03), I think that there is an error in `ng-container` or \n        `mat-icon` or something related because I can not put the `mat-icon` tag within an `ng-container` tag \n        because the normal layout of `mat-icon` is modified. This is a contradiction because the `ng-container` \n        does not interfere with styles or layout. -->\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.internal)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix [svgIcon]=\"content.prefixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.external)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix>{{ content.prefixIcon.name }}</mat-icon>\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.internal)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix [svgIcon]=\"content.suffixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.external)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix>{{ content.suffixIcon.name }}</mat-icon>\n\n    <span *ngIf=\"content.prefixText\" matPrefix><pre class=\"content.appearance\">{{ content.prefixText }}</pre></span>\n    <span *ngIf=\"content.suffixText\" matSuffix><pre class=\"content.appearance\">{{ content.suffixText }}</pre></span>\n\n    <mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                host: {
                    '[style.minWidth]': 'content.minWidth',
                    '[style.width]': 'content.width'
                },
                styles: [".text-mat-form-field{width:100%;cursor:text}.text-mat-icon-prefix{margin-right:8px}.text-mat-icon-prefix.standard{position:relative;top:4px}.text-mat-icon-suffix{margin-left:8px}.text-mat-icon-suffix.standard{position:relative;top:4px}pre{margin:0}pre.outline{position:relative;bottom:4px}"]
            }] }
];
/** @nocollapse */
InputUrlComponent.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2Zvcm1zL2lucHV0L3VybC91cmwtaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7O0FBaUJoRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsWUFBWTtJQW1CL0M7UUFFSSxLQUFLLEVBQUUsQ0FBQztJQUNaLENBQUM7Ozs7Ozs7O0lBZk0sTUFBTSxDQUFDLHVCQUF1QixDQUFDLHFCQUF5QyxTQUFTOzs7O2NBSTlFLElBQUksR0FBRyx1REFBdUQ7UUFDcEUsT0FBTyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDdkIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDeEIscUZBQXFGO1lBQ3JGLDhNQUE4TTtTQUNqTixDQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBT00sUUFBUTtRQUVYLDhCQUE4QjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekUsQ0FBQzs7Ozs7SUFLTSxlQUFlOztZQUVkLGdCQUFnQixHQUFxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNO1FBRXhFLDJCQUEyQjtRQUMzQixJQUFJLGdCQUFnQixFQUNwQjtZQUNJLElBQUksZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFDOUM7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUM7YUFDeEM7aUJBRUQ7Z0JBQ0ksd0RBQXdEO2dCQUN4RCxPQUFPLDZCQUE2QixDQUFDO2FBQ3hDO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7OztZQTdESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLHl3R0FBZ0Q7Z0JBRWhELElBQUksRUFBRTtvQkFDRixrQkFBa0IsRUFBRSxrQkFBa0I7b0JBQ3RDLGVBQWUsRUFBRSxlQUFlO2lCQUNuQzs7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBWYWxpZGF0b3JzLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBVcmxWYWx1ZSB9IGZyb20gJy4vdXJsLXZhbHVlJztcbmltcG9ydCB7IElucHV0Q29udHJvbCB9IGZyb20gJy4uL2lucHV0LmNvbnRyb2wnO1xuaW1wb3J0IHsgVmFsaWRhdG9yQXJndW1lbnRzIH0gZnJvbSAnLi4vLi4vZm9ybS1maWVsZC5jb250cm9sJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29udHJvbCB0aGF0IGFsbG93cyB0aGUgd3JpdGluZyBvZiBhIHVybC5cbiAqIEl0IHVzZXMgdGhlIGBVcmxWYWx1ZS51cmxfTGFiZWxgIGFzIGEgbGFiZWwgaWYgdGhlIGBjb250ZW50LmxhYmVsYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAqIEl0IHVzZXMgdGhlIGBVcmxWYWx1ZS51cmxfUGxhY2Vob2xkZXJgIGFzIGEgcGxhY2Vob2xkZXIgaWYgdGhlIGBjb250ZW50LnBsYWNlaG9sZGVyYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpbnB1dC11cmwnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi4vdGV4dC90ZXh0LWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi4vdGV4dC90ZXh0LWlucHV0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgaG9zdDoge1xuICAgICAgICAnW3N0eWxlLm1pbldpZHRoXSc6ICdjb250ZW50Lm1pbldpZHRoJyxcbiAgICAgICAgJ1tzdHlsZS53aWR0aF0nOiAnY29udGVudC53aWR0aCdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIElucHV0VXJsQ29tcG9uZW50IGV4dGVuZHMgSW5wdXRDb250cm9sIGltcGxlbWVudHMgT25Jbml0XG57XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGBGb3JtQ29udHJvbGAgYnkgZGVmYXVsdC4gXG4gICAgICogSXQgaXMgdXNlZCB0byBpbml0aWFsaXplZCB0aGUgYElucHV0VXJsQ29tcG9uZW50YCdzIGBjb250ZW50LmZvcm1Db250cm9sYCB2YWx1ZSBieSBkZWZhdWx0LiBcbiAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBgdmFsaWRhdG9yQXJndW1lbnRzYCBhcmd1bWVudCBpcyBhbHdheXMgYHVuZGVmaW5lZGAuIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Rm9ybUNvbnRyb2xCeURlZmF1bHQodmFsaWRhdG9yQXJndW1lbnRzOiBWYWxpZGF0b3JBcmd1bWVudHMgPSB1bmRlZmluZWQpOiBGb3JtQ29udHJvbFxuICAgIHtcbiAgICAgICAgLy8gY29uc3QgcmVnID0gJy8oXnxcXHMpKChodHRwcz86XFwvXFwvKT9bXFx3LV0rKFxcLltcXHctXSspK1xcLj8oOlxcZCspPyhcXC9cXFMqKT8pL2dpJztcbiAgICAgICAgLy8gY29uc3QgcmVnMiA9ICdbYS16Ll0qJztcbiAgICAgICAgY29uc3QgcmVnMyA9ICcoaHR0cHM/Oi8vKT8oW1xcXFxkYS16Li1dKylcXFxcLihbYS16Ll17Miw2fSlbL1xcXFx3IC4tXSovPyc7XG4gICAgICAgIHJldHVybiBuZXcgRm9ybUNvbnRyb2woJycsIFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucGF0dGVybihyZWczKVxuICAgICAgICAgICAgLy8gVmFsaWRhdG9ycy5wYXR0ZXJuKCcvKF58XFxzKSgoaHR0cHM/OlxcL1xcLyk/W1xcdy1dKyhcXC5bXFx3LV0rKStcXC4/KDpcXGQrKT8oXFwvXFxTKik/KS9pJylcbiAgICAgICAgICAgIC8vIFZhbGlkYXRvcnMucGF0dGVybigvKCgoW0EtWmEtel17Myw5fTooPzpcXC9cXC8pPykoPzpbXFwtOzomPVxcK1xcJCxcXHddK0ApP1tBLVphLXowLTlcXC5cXC1dK3woPzp3d3dcXC58W1xcLTs6Jj1cXCtcXCQsXFx3XStAKVtBLVphLXowLTlcXC5cXC1dKykoKD86XFwvW1xcK34lXFwvXFwuXFx3XFwtX10qKT9cXD8/KD86W1xcLVxcKz0mOyVAXFwuXFx3X10qKSM/KD86W1xcLlxcIVxcL1xcXFxcXHddKikpPykvaSlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG5nT25Jbml0KCk6IHZvaWRcbiAgICB7XG4gICAgICAgIC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuICAgICAgICB0aGlzLmluaXQoVXJsVmFsdWUudXJsX0xhYmVsLCBVcmxWYWx1ZS51cmxfUGxhY2Vob2xkZXIsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGVycm9yIHN0cmluZyBpZiB0aGUgY29udHJvbCBpcyBpbiBhbiBlcnJvciBzdGF0ZTsgb3RoZXJ3aXNlLCBlbXB0eSBzdHJpbmcuXG4gICAgICovXG4gICAgcHVibGljIGdldEVycm9yTWVzc2FnZSgpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIGxldCB2YWxpZGF0aW9uRXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzID0gdGhpcy5jb250ZW50LmZvcm1Db250cm9sLmVycm9ycztcblxuICAgICAgICAvKiBTaG93cyB0aGUgdXJsIGVycm9ycy4gKi9cbiAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3JzW1ZhbGlkYXRvcnMucmVxdWlyZWQubmFtZV0pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkVycm9yX3JlcXVpcmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8qIEl0IGlzIGB2YWxpZGF0aW9uRXJyb3JzW1ZhbGlkYXRvcnMucGF0dGVybi5uYW1lXWAuICovXG4gICAgICAgICAgICAgICAgcmV0dXJuICdUT0NPX05HX0VSUk9SX01TR19VUkxfSU5WQUwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbiJdfQ==