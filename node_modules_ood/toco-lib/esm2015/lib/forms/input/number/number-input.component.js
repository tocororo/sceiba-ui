/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/number/number-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { InputControl } from '../input.control';
/**
 * Represents a control that allows the writing of a number.
 */
export class InputNumberComponent extends InputControl {
    /**
     * @param {?} _transServ
     */
    constructor(_transServ) {
        super();
        this._transServ = _transServ;
        /* The translation is built by the control. */
        this.isTranslationBuiltByControl = true;
    }
    // TODO: Puedo hacer que este control sea más general, que permita la entrada de valores 
    // enteros y doubles haciendo las siguientes modificaciones: 
    //  * Inicializar el `Validators.pattern('----')` con un patrón para double values según valor que recibe en 
    //    `validatorArguments` que dice si integer o double. 
    //  * Hacer tratamiento de error correctamente em método `getErrorMessage()`. 
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputNumberComponent`'s `content.formControl` value by default.
     * @param {?=} validatorArguments A collection of key/value elements, where the key is the validator name
     * and the value is the value that the validator needs to check.
     * In the `validatorArguments` argument, you can specify an object with the minimum and maximum possible
     * values for the number that holds the control.
     * For example: If the minimum possible value is 0 and maximum is 50, you can call the `getFormControlByDefault`
     * method in this way:
     * InputNumberComponent.getFormControlByDefault({ 'min': 0, 'max': 50 });
     * @return {?}
     */
    static getFormControlByDefault(validatorArguments = undefined) {
        return new FormControl(0, [
            Validators.pattern('^-?[0-9]+$'),
            Validators.min(((validatorArguments) && (validatorArguments.min != undefined)) ? validatorArguments.min : Number.MIN_SAFE_INTEGER),
            Validators.max(((validatorArguments) && (validatorArguments.max != undefined)) ? validatorArguments.max : Number.MAX_SAFE_INTEGER),
        ]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* This needs to be called at first. */
        this.setNewLanguage(this._transServ);
        /* Sets the default values. */
        this.init('', '', false, false);
        /* Changes the translation when the language changes. */
        this._transServ.onLangChange.subscribe((/**
         * @param {?} params
         * @return {?}
         */
        (params) => {
            this.setNewLanguage(this._transServ);
        }));
    }
    /**
     * Sets the new language.
     * @protected
     * @param {?} transServ The `TranslateService` instance injected.
     * @return {?}
     */
    setNewLanguage(transServ) {
        /* First, do this test for optimization. */
        if (InputNumberComponent.currentLang != transServ.currentLang) {
            super.setNewLanguage(transServ);
            /* The `InputNumberComponent.currentLang` value is updated correctly in the parent class. */
            transServ.get(['TOCO_NG_ERROR_MSG_NUM_INVAL', 'TOCO_NG_ERROR_MSG_NUM_MINIMO', 'TOCO_NG_ERROR_MSG_NUM_MAXIMO']).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                InputNumberComponent.toco_ng_Error_Msg_Num_Inval = res.TOCO_NG_ERROR_MSG_NUM_INVAL;
                InputNumberComponent.toco_ng_Error_Msg_Num_Minimo = res.TOCO_NG_ERROR_MSG_NUM_MINIMO;
                InputNumberComponent.toco_ng_Error_Msg_Num_Maximo = res.TOCO_NG_ERROR_MSG_NUM_MAXIMO;
            }));
        }
    }
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    getErrorMessage() {
        /** @type {?} */
        let validationErrors = this.content.formControl.errors;
        /* Shows the code errors. */
        if (validationErrors) {
            if (validationErrors[Validators.required.name]) {
                return InputNumberComponent.toco_ng_Error_Msg_Requerido;
            }
            if (validationErrors[Validators.pattern.name]) {
                return InputNumberComponent.toco_ng_Error_Msg_Num_Inval;
            }
            if (validationErrors[Validators.min.name]) {
                return InputNumberComponent.toco_ng_Error_Msg_Num_Minimo + validationErrors[Validators.min.name].min + '.';
            }
            if (validationErrors[Validators.max.name]) {
                return InputNumberComponent.toco_ng_Error_Msg_Num_Maximo + validationErrors[Validators.max.name].max + '.';
            }
        }
        return '';
    }
}
InputNumberComponent.toco_ng_Error_Msg_Num_Inval = '';
InputNumberComponent.toco_ng_Error_Msg_Num_Minimo = '';
InputNumberComponent.toco_ng_Error_Msg_Num_Maximo = '';
InputNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-number',
                template: "\n<mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\">\n<!-- <mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\" [formGroup]=\"content.parentFormSection\"> -->\n\n    <mat-label>{{ content.label | translate }}</mat-label>\n\n    <input matInput [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" />\n    <!-- <input matInput id=\"inputId-{{ content.name }}\" class=\"input-text-element\" [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" [formControlName]=\"content.name\" /> -->\n\n    <!-- At the moment of writing this code (2019-08-03), I think that there is an error in `ng-container` or \n        `mat-icon` or something related because I can not put the `mat-icon` tag within an `ng-container` tag \n        because the normal layout of `mat-icon` is modified. This is a contradiction because the `ng-container` \n        does not interfere with styles or layout. -->\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.internal)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix [svgIcon]=\"content.prefixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.external)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix>{{ content.prefixIcon.name }}</mat-icon>\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.internal)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix [svgIcon]=\"content.suffixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.external)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix>{{ content.suffixIcon.name }}</mat-icon>\n\n    <span *ngIf=\"content.prefixText\" matPrefix><pre class=\"content.appearance\">{{ content.prefixText }}</pre></span>\n    <span *ngIf=\"content.suffixText\" matSuffix><pre class=\"content.appearance\">{{ content.suffixText }}</pre></span>\n\n    <mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                host: {
                    '[style.minWidth]': 'content.minWidth',
                    '[style.width]': 'content.width'
                },
                styles: [".text-mat-form-field{width:100%;cursor:text}.text-mat-icon-prefix{margin-right:8px}.text-mat-icon-prefix.standard{position:relative;top:4px}.text-mat-icon-suffix{margin-left:8px}.text-mat-icon-suffix.standard{position:relative;top:4px}pre{margin:0}pre.outline{position:relative;bottom:4px}"]
            }] }
];
/** @nocollapse */
InputNumberComponent.ctorParameters = () => [
    { type: TranslateService }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    InputNumberComponent.toco_ng_Error_Msg_Num_Inval;
    /**
     * @type {?}
     * @protected
     */
    InputNumberComponent.toco_ng_Error_Msg_Num_Minimo;
    /**
     * @type {?}
     * @protected
     */
    InputNumberComponent.toco_ng_Error_Msg_Num_Maximo;
    /**
     * @type {?}
     * @private
     */
    InputNumberComponent.prototype._transServ;
}
//# sourceMappingURL=data:application/json;base64,