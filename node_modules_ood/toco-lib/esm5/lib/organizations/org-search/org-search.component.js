/**
 * @fileoverview added by tsickle
 * Generated from: lib/organizations/org-search/org-search.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isArray } from 'util';
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { HitList } from '../../entities/public-api';
import { FormControl } from '@angular/forms';
import { OrganizationServiceNoAuth } from '../../backend/public-api';
import { HttpParams } from '@angular/common/http';
var OrgSearchComponent = /** @class */ (function () {
    function OrgSearchComponent(_orgService) {
        this._orgService = _orgService;
        /**
         * Input `orgCtrl` is a FormControl
         */
        this.orgCtrl = new FormControl();
        this.filteredOrg = new HitList();
        this.params = new HttpParams();
        this.placeholder = "Escriba al menos 3 letras";
        this.label = "Busque una organizaciÃ³n";
        this.appearance = "outline";
        /**
         * Input `cleaning` is a boolen, if true then clean the search
         */
        this.cleaning = false;
        this.selectedOrg = new EventEmitter();
        this.toSearch = 0;
    }
    /**
     * @return {?}
     */
    OrgSearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        var _this = this;
        this.params = this.params.set('size', '10');
        this.params = this.params.set('page', '1');
        if (this.orgFilter != undefined) {
            if (isArray(this.orgFilter)) {
                /** @type {?} */
                var filter_array = ((/** @type {?} */ (this.orgFilter)));
                try {
                    for (var filter_array_1 = tslib_1.__values(filter_array), filter_array_1_1 = filter_array_1.next(); !filter_array_1_1.done; filter_array_1_1 = filter_array_1.next()) {
                        var filter = filter_array_1_1.value;
                        this.params = this.params.set(filter.type, filter.value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (filter_array_1_1 && !filter_array_1_1.done && (_a = filter_array_1.return)) _a.call(filter_array_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                /** @type {?} */
                var type = ((/** @type {?} */ (this.orgFilter))).type;
                /** @type {?} */
                var value = ((/** @type {?} */ (this.orgFilter))).value;
                this.params = this.params.set(type, value);
            }
        }
        this.orgCtrl.valueChanges
            .subscribe({
            next: (/**
             * @param {?} orgValueChanges
             * @return {?}
             */
            function (orgValueChanges) {
                _this.toSearch++;
                // this condition check if the param is a `string` an if at least write 3 letters
                if (_this.toSearch > 3 && typeof orgValueChanges === 'string') {
                    _this.toSearch = 0;
                    _this.params = _this.params.set('q', orgValueChanges);
                    _this._orgService.getOrganizations(_this.params).subscribe({
                        next: (/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) {
                            _this.filteredOrg = response.hits;
                        })
                    });
                }
                else if (typeof orgValueChanges === 'object') {
                    _this.toSearch = 0;
                    _this.selectedOrg.emit(orgValueChanges);
                    if (_this.cleaning) {
                        _this.orgCtrl.setValue('');
                    }
                }
            })
        });
    };
    /* This function return the organization name
     * @param org the Organization object
     */
    /* This function return the organization name
       * @param org the Organization object
       */
    /**
     * @param {?=} org
     * @return {?}
     */
    OrgSearchComponent.prototype.displayFn = /* This function return the organization name
       * @param org the Organization object
       */
    /**
     * @param {?=} org
     * @return {?}
     */
    function (org) {
        return org ? org.name : undefined;
    };
    OrgSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-org-search',
                    template: "\n<mat-form-field [ngStyle]=\"{'width': '100%'}\" appearance=\"{{appearance}}\">\n    <mat-label>{{label}}</mat-label>\n    <input matInput placeholder=\"{{placeholder}}\" aria-label=\"Buscar\" [matAutocomplete]=\"auto\" [formControl]=\"orgCtrl\">\n\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n\n        <mat-option *ngFor=\"let org of filteredOrg.hits\" [value]=\"org.metadata\">\n            <span title=\"{{org.metadata.name}}\">{{org.metadata.name}}</span>\n        </mat-option>\n\n    </mat-autocomplete>\n  </mat-form-field>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    OrgSearchComponent.ctorParameters = function () { return [
        { type: OrganizationServiceNoAuth }
    ]; };
    OrgSearchComponent.propDecorators = {
        orgCtrl: [{ type: Input }],
        orgFilter: [{ type: Input }],
        placeholder: [{ type: Input }],
        label: [{ type: Input }],
        appearance: [{ type: Input }],
        cleaning: [{ type: Input }],
        selectedOrg: [{ type: Output }]
    };
    return OrgSearchComponent;
}());
export { OrgSearchComponent };
if (false) {
    /**
     * Input `orgCtrl` is a FormControl
     * @type {?}
     */
    OrgSearchComponent.prototype.orgCtrl;
    /** @type {?} */
    OrgSearchComponent.prototype.filteredOrg;
    /** @type {?} */
    OrgSearchComponent.prototype.params;
    /**
     * Input `orgFilter` is a dict with `type` and `value` to filter the organizations,
     * \@Example { type: 'country' , value: 'Cuba" }
     * @type {?}
     */
    OrgSearchComponent.prototype.orgFilter;
    /** @type {?} */
    OrgSearchComponent.prototype.placeholder;
    /** @type {?} */
    OrgSearchComponent.prototype.label;
    /** @type {?} */
    OrgSearchComponent.prototype.appearance;
    /**
     * Input `cleaning` is a boolen, if true then clean the search
     * @type {?}
     */
    OrgSearchComponent.prototype.cleaning;
    /** @type {?} */
    OrgSearchComponent.prototype.selectedOrg;
    /** @type {?} */
    OrgSearchComponent.prototype.toSearch;
    /**
     * @type {?}
     * @private
     */
    OrgSearchComponent.prototype._orgService;
}
//# sourceMappingURL=data:application/json;base64,