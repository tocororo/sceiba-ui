/**
 * @fileoverview added by tsickle
 * Generated from: lib/organizations/org-tree-viewer/org-tree-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FlatTreeControl } from '@angular/cdk/tree';
import { Component, EventEmitter, Injectable, Input, Output } from '@angular/core';
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { OrganizationServiceNoAuth } from '../../backend/public-api';
/**
 * Flat node with expandable and level information
 */
var /**
 * Flat node with expandable and level information
 */
OrganizationFlatNode = /** @class */ (function () {
    function OrganizationFlatNode(item, parent, level, expandable, isLoading) {
        if (level === void 0) { level = 1; }
        if (expandable === void 0) { expandable = false; }
        if (isLoading === void 0) { isLoading = false; }
        this.item = item;
        this.parent = parent;
        this.level = level;
        this.expandable = expandable;
        this.isLoading = isLoading;
    }
    return OrganizationFlatNode;
}());
/**
 * Flat node with expandable and level information
 */
export { OrganizationFlatNode };
if (false) {
    /** @type {?} */
    OrganizationFlatNode.prototype.item;
    /** @type {?} */
    OrganizationFlatNode.prototype.parent;
    /** @type {?} */
    OrganizationFlatNode.prototype.level;
    /** @type {?} */
    OrganizationFlatNode.prototype.expandable;
    /** @type {?} */
    OrganizationFlatNode.prototype.isLoading;
}
var OrganizationDataSource = /** @class */ (function () {
    function OrganizationDataSource(_treeControl, orgService) {
        this._treeControl = _treeControl;
        this.orgService = orgService;
        this.dataChange = new BehaviorSubject([]);
        this.orgRelationshipType = null;
    }
    Object.defineProperty(OrganizationDataSource.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () { return this.dataChange.value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._treeControl.dataNodes = value;
            this.dataChange.next(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} collectionViewer
     * @return {?}
     */
    OrganizationDataSource.prototype.connect = /**
     * @param {?} collectionViewer
     * @return {?}
     */
    function (collectionViewer) {
        var _this = this;
        this._treeControl.expansionModel.onChange.subscribe((/**
         * @param {?} change
         * @return {?}
         */
        function (change) {
            if (((/** @type {?} */ (change))).added ||
                ((/** @type {?} */ (change))).removed) {
                _this.handleTreeControl((/** @type {?} */ (change)));
            }
        }));
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map((/**
         * @return {?}
         */
        function () { return _this.data; })));
    };
    /** Handle expand/collapse behaviors */
    /**
     * Handle expand/collapse behaviors
     * @param {?} change
     * @return {?}
     */
    OrganizationDataSource.prototype.handleTreeControl = /**
     * Handle expand/collapse behaviors
     * @param {?} change
     * @return {?}
     */
    function (change) {
        var _this = this;
        if (change.added) {
            change.added.forEach((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return _this.toggleNode(node, true); }));
        }
        if (change.removed) {
            change.removed.slice().reverse().forEach((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return _this.toggleNode(node, false); }));
        }
    };
    /**
     * Toggle the node, remove from display list
     */
    /**
     * Toggle the node, remove from display list
     * @param {?} node
     * @param {?} expand
     * @return {?}
     */
    OrganizationDataSource.prototype.toggleNode = /**
     * Toggle the node, remove from display list
     * @param {?} node
     * @param {?} expand
     * @return {?}
     */
    function (node, expand) {
        var _this = this;
        node.isLoading = true;
        /** @type {?} */
        var index = this.data.indexOf(node);
        if (node.item.metadata.relationships.length <= 0 || index < 0) { // If no children, or cannot find the node, no op
            return;
        }
        if (expand) {
            this.orgService.getOrganizationRelationships(node.item.metadata.id, this.orgRelationshipType).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                var _a;
                /** @type {?} */
                var nodes = response.map((/**
                 * @param {?} org
                 * @return {?}
                 */
                function (org) {
                    return new OrganizationFlatNode(org, node, node.level + 1, org.metadata.relationships.length > 0);
                }));
                (_a = _this.data).splice.apply(_a, tslib_1.__spread([index + 1, 0], nodes));
                _this.dataChange.next(_this.data);
                node.isLoading = false;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { }), (/**
             * @return {?}
             */
            function () { }));
        }
        else {
            /** @type {?} */
            var count = 0;
            for (var i = index + 1; i < this.data.length
                && this.data[i].level > node.level; i++) {
                count++;
            }
            this.data.splice(index + 1, count);
            this.dataChange.next(this.data);
            node.isLoading = false;
        }
    };
    OrganizationDataSource.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OrganizationDataSource.ctorParameters = function () { return [
        { type: FlatTreeControl },
        { type: OrganizationServiceNoAuth }
    ]; };
    return OrganizationDataSource;
}());
export { OrganizationDataSource };
if (false) {
    /** @type {?} */
    OrganizationDataSource.prototype.dataChange;
    /** @type {?} */
    OrganizationDataSource.prototype.orgRelationshipType;
    /**
     * @type {?}
     * @private
     */
    OrganizationDataSource.prototype._treeControl;
    /**
     * @type {?}
     * @private
     */
    OrganizationDataSource.prototype.orgService;
}
var OrgTreeViewerComponent = /** @class */ (function () {
    function OrgTreeViewerComponent(orgService) {
        this.orgService = orgService;
        this.organizations = new Array();
        this.orgRelationshipType = null;
        this.iconAction = 'visibility';
        this.labelAction = '';
        this.ngStyle = null;
        this.action = new EventEmitter();
        this.error = false;
        this.getLevel = (/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.level; });
        this.isExpandable = (/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.expandable; });
        this.hasChild = (/**
         * @param {?} _
         * @param {?} _nodeData
         * @return {?}
         */
        function (_, _nodeData) { return _nodeData.expandable; });
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new OrganizationDataSource(this.treeControl, orgService);
    }
    /**
     * @return {?}
     */
    OrgTreeViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.dataSource.orgRelationshipType = this.orgRelationshipType;
        this.dataSource.data = this.organizations.map((/**
         * @param {?} org
         * @return {?}
         */
        function (org) {
            return new OrganizationFlatNode(org, null, 1, org.metadata.relationships.length > 0);
        }));
    };
    /**
     * @param {?} org
     * @return {?}
     */
    OrgTreeViewerComponent.prototype.emitAction = /**
     * @param {?} org
     * @return {?}
     */
    function (org) {
        this.action.emit(org);
    };
    OrgTreeViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-org-tree-viewer',
                    template: "<mat-tree\n  [dataSource]=\"dataSource\"\n  [treeControl]=\"treeControl\"\n  [ngStyle]=\"ngStyle\"\n>\n  <mat-tree-node\n    *matTreeNodeDef=\"let node\"\n    matTreeNodePadding\n  >\n    <button mat-icon-button disabled></button>\n    {{ node.item.metadata.name }}\n    <button\n        mat-icon-button\n        matTooltip=\"labelAction\"\n        (click)=\"emitAction(node)\"\n      >\n        <mat-icon>{{iconAction}}</mat-icon>\n      </button>\n  </mat-tree-node>\n  <mat-tree-node\n    *matTreeNodeDef=\"let node; when: hasChild\"\n    matTreeNodePadding\n  >\n    <button\n      mat-icon-button\n      [attr.aria-label]=\"'toggle ' + node.filename\"\n      matTreeNodeToggle\n    >\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\n      </mat-icon>\n    </button>\n    {{ node.item.metadata.name }}\n    <button\n        mat-icon-button\n        matTooltip=\"labelAction\"\n        (click)=\"emitAction(node)\"\n      >\n        <mat-icon>{{iconAction}}</mat-icon>\n      </button>\n    <mat-progress-bar\n      *ngIf=\"node.isLoading\"\n      mode=\"indeterminate\"\n      class=\"example-tree-progress-bar\"\n    ></mat-progress-bar>\n  </mat-tree-node>\n</mat-tree>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    OrgTreeViewerComponent.ctorParameters = function () { return [
        { type: OrganizationServiceNoAuth }
    ]; };
    OrgTreeViewerComponent.propDecorators = {
        organizations: [{ type: Input }],
        orgRelationshipType: [{ type: Input }],
        iconAction: [{ type: Input }],
        labelAction: [{ type: Input }],
        ngStyle: [{ type: Input }],
        action: [{ type: Output }]
    };
    return OrgTreeViewerComponent;
}());
export { OrgTreeViewerComponent };
if (false) {
    /** @type {?} */
    OrgTreeViewerComponent.prototype.organizations;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.orgRelationshipType;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.iconAction;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.labelAction;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.ngStyle;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.action;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.error;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.treeControl;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.dataSource;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.getLevel;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.isExpandable;
    /** @type {?} */
    OrgTreeViewerComponent.prototype.hasChild;
    /**
     * @type {?}
     * @private
     */
    OrgTreeViewerComponent.prototype.orgService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXRyZWUtdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL29yZ2FuaXphdGlvbnMvb3JnLXRyZWUtdmlld2VyL29yZy10cmVlLXZpZXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxlQUFlLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQU9yRTs7OztJQUNFLDhCQUFtQixJQUF1QixFQUN2QixNQUE0QixFQUM1QixLQUFTLEVBQ1QsVUFBa0IsRUFDbEIsU0FBaUI7UUFGakIsc0JBQUEsRUFBQSxTQUFTO1FBQ1QsMkJBQUEsRUFBQSxrQkFBa0I7UUFDbEIsMEJBQUEsRUFBQSxpQkFBaUI7UUFKakIsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFDdkIsV0FBTSxHQUFOLE1BQU0sQ0FBc0I7UUFDNUIsVUFBSyxHQUFMLEtBQUssQ0FBSTtRQUNULGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsY0FBUyxHQUFULFNBQVMsQ0FBUTtJQUFJLENBQUM7SUFDM0MsMkJBQUM7QUFBRCxDQUFDLEFBTkQsSUFNQzs7Ozs7OztJQUxhLG9DQUE4Qjs7SUFDOUIsc0NBQW1DOztJQUNuQyxxQ0FBZ0I7O0lBQ2hCLDBDQUF5Qjs7SUFDekIseUNBQXdCOztBQUd0QztJQU9FLGdDQUFvQixZQUFtRCxFQUNuRCxVQUFxQztRQURyQyxpQkFBWSxHQUFaLFlBQVks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QUFDOzs7OztJQUVELDJDQUFVOzs7O0lBQVYsVUFBVyxHQUFHO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7Z0JBakRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyx1dkNBQStDOztpQkFFaEQ7Ozs7Z0JBakdRLHlCQUF5Qjs7O2dDQW9HL0IsS0FBSztzQ0FFTCxLQUFLOzZCQUVMLEtBQUs7OEJBRUwsS0FBSzswQkFFTCxLQUFLO3lCQUVMLE1BQU07O0lBaUNULDZCQUFDO0NBQUEsQUFsREQsSUFrREM7U0E3Q1ksc0JBQXNCOzs7SUFFakMsK0NBQStEOztJQUUvRCxxREFBNEM7O0lBRTVDLDRDQUFtQzs7SUFFbkMsNkNBQTBCOztJQUUxQix5Q0FBd0I7O0lBRXhCLHdDQUNrRDs7SUFFbEQsdUNBQXFCOztJQUVyQiw2Q0FBbUQ7O0lBRW5ELDRDQUFtQzs7SUFFbkMsMENBQXNEOztJQUV0RCw4Q0FBK0Q7O0lBRS9ELDBDQUFnRjs7Ozs7SUFHOUUsNENBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sbGVjdGlvblZpZXdlciwgU2VsZWN0aW9uQ2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvbGxlY3Rpb25zJztcbmltcG9ydCB7IEZsYXRUcmVlQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay90cmVlJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblNlcnZpY2VOb0F1dGggfSBmcm9tICcuLi8uLi9iYWNrZW5kL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgSGl0IH0gZnJvbSAnLi4vLi4vZW50aXRpZXMvY29tbW9uJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbiwgT3JnYW5pemF0aW9uUmVsYXRpb25zaGlwcyB9IGZyb20gJy4uLy4uL2VudGl0aWVzL3B1YmxpYy1hcGknO1xuXG5cblxuLyoqIEZsYXQgbm9kZSB3aXRoIGV4cGFuZGFibGUgYW5kIGxldmVsIGluZm9ybWF0aW9uICovXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uRmxhdE5vZGUge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgaXRlbTogSGl0PE9yZ2FuaXphdGlvbj4sXG4gICAgICAgICAgICAgIHB1YmxpYyBwYXJlbnQ6IE9yZ2FuaXphdGlvbkZsYXROb2RlLFxuICAgICAgICAgICAgICBwdWJsaWMgbGV2ZWwgPSAxLFxuICAgICAgICAgICAgICBwdWJsaWMgZXhwYW5kYWJsZSA9IGZhbHNlLFxuICAgICAgICAgICAgICBwdWJsaWMgaXNMb2FkaW5nID0gZmFsc2UpIHsgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uRGF0YVNvdXJjZSB7XG5cblxuICBkYXRhQ2hhbmdlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxPcmdhbml6YXRpb25GbGF0Tm9kZVtdPihbXSk7XG4gIG9yZ1JlbGF0aW9uc2hpcFR5cGU6IHN0cmluZyA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfdHJlZUNvbnRyb2w6IEZsYXRUcmVlQ29udHJvbDxPcmdhbml6YXRpb25GbGF0Tm9kZT4sXG4gICAgICAgICAgICAgIHByaXZhdGUgb3JnU2VydmljZTogT3JnYW5pemF0aW9uU2VydmljZU5vQXV0aCkgeyB9XG5cblxuICBnZXQgZGF0YSgpOiBPcmdhbml6YXRpb25GbGF0Tm9kZVtdIHsgcmV0dXJuIHRoaXMuZGF0YUNoYW5nZS52YWx1ZTsgfVxuICBzZXQgZGF0YSh2YWx1ZTogT3JnYW5pemF0aW9uRmxhdE5vZGVbXSkge1xuICAgIHRoaXMuX3RyZWVDb250cm9sLmRhdGFOb2RlcyA9IHZhbHVlO1xuICAgIHRoaXMuZGF0YUNoYW5nZS5uZXh0KHZhbHVlKTtcbiAgfVxuXG5cbiAgY29ubmVjdChjb2xsZWN0aW9uVmlld2VyOiBDb2xsZWN0aW9uVmlld2VyKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25GbGF0Tm9kZVtdPiB7XG4gICAgdGhpcy5fdHJlZUNvbnRyb2wuZXhwYW5zaW9uTW9kZWwub25DaGFuZ2Uuc3Vic2NyaWJlKGNoYW5nZSA9PiB7XG4gICAgICBpZiAoKGNoYW5nZSBhcyBTZWxlY3Rpb25DaGFuZ2U8T3JnYW5pemF0aW9uRmxhdE5vZGU+KS5hZGRlZCB8fFxuICAgICAgICAoY2hhbmdlIGFzIFNlbGVjdGlvbkNoYW5nZTxPcmdhbml6YXRpb25GbGF0Tm9kZT4pLnJlbW92ZWQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVUcmVlQ29udHJvbChjaGFuZ2UgYXMgU2VsZWN0aW9uQ2hhbmdlPE9yZ2FuaXphdGlvbkZsYXROb2RlPik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWVyZ2UoY29sbGVjdGlvblZpZXdlci52aWV3Q2hhbmdlLCB0aGlzLmRhdGFDaGFuZ2UpLnBpcGUobWFwKCgpID0+IHRoaXMuZGF0YSkpO1xuICB9XG5cbiAgLyoqIEhhbmRsZSBleHBhbmQvY29sbGFwc2UgYmVoYXZpb3JzICovXG4gIGhhbmRsZVRyZWVDb250cm9sKGNoYW5nZTogU2VsZWN0aW9uQ2hhbmdlPE9yZ2FuaXphdGlvbkZsYXROb2RlPikge1xuICAgIGlmIChjaGFuZ2UuYWRkZWQpIHtcbiAgICAgIGNoYW5nZS5hZGRlZC5mb3JFYWNoKG5vZGUgPT4gdGhpcy50b2dnbGVOb2RlKG5vZGUsIHRydWUpKTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZS5yZW1vdmVkKSB7XG4gICAgICBjaGFuZ2UucmVtb3ZlZC5zbGljZSgpLnJldmVyc2UoKS5mb3JFYWNoKG5vZGUgPT4gdGhpcy50b2dnbGVOb2RlKG5vZGUsIGZhbHNlKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSB0aGUgbm9kZSwgcmVtb3ZlIGZyb20gZGlzcGxheSBsaXN0XG4gICAqL1xuICB0b2dnbGVOb2RlKG5vZGU6IE9yZ2FuaXphdGlvbkZsYXROb2RlLCBleHBhbmQ6IGJvb2xlYW4pIHtcbiAgICBub2RlLmlzTG9hZGluZyA9IHRydWU7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmRhdGEuaW5kZXhPZihub2RlKTtcbiAgICBpZiAobm9kZS5pdGVtLm1ldGFkYXRhLnJlbGF0aW9uc2hpcHMubGVuZ3RoIDw9IDAgfHwgaW5kZXggPCAwKSB7IC8vIElmIG5vIGNoaWxkcmVuLCBvciBjYW5ub3QgZmluZCB0aGUgbm9kZSwgbm8gb3BcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV4cGFuZCkge1xuICAgICAgdGhpcy5vcmdTZXJ2aWNlLmdldE9yZ2FuaXphdGlvblJlbGF0aW9uc2hpcHMobm9kZS5pdGVtLm1ldGFkYXRhLmlkLCB0aGlzLm9yZ1JlbGF0aW9uc2hpcFR5cGUpLnN1YnNjcmliZShcbiAgICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgY29uc3Qgbm9kZXMgPSByZXNwb25zZS5tYXAoXG4gICAgICAgICAgICBvcmcgPT5cbiAgICAgICAgICAgICAgbmV3IE9yZ2FuaXphdGlvbkZsYXROb2RlKG9yZywgbm9kZSwgbm9kZS5sZXZlbCArIDEsIG9yZy5tZXRhZGF0YS5yZWxhdGlvbnNoaXBzLmxlbmd0aCA+IDApXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXggKyAxLCAwLCAuLi5ub2Rlcyk7XG5cbiAgICAgICAgICB0aGlzLmRhdGFDaGFuZ2UubmV4dCh0aGlzLmRhdGEpO1xuICAgICAgICAgIG5vZGUuaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgfSxcbiAgICAgICAgKGVycm9yKSA9PiB7IH0sXG4gICAgICAgICgpID0+IHsgfVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSBpbmRleCArIDE7IGkgPCB0aGlzLmRhdGEubGVuZ3RoXG4gICAgICAgICYmIHRoaXMuZGF0YVtpXS5sZXZlbCA+IG5vZGUubGV2ZWw7IGkrKykge1xuICAgICAgICBjb3VudCsrXG4gICAgICB9XG4gICAgICB0aGlzLmRhdGEuc3BsaWNlKGluZGV4ICsgMSwgY291bnQpO1xuICAgICAgdGhpcy5kYXRhQ2hhbmdlLm5leHQodGhpcy5kYXRhKTtcbiAgICAgIG5vZGUuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RvY28tb3JnLXRyZWUtdmlld2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL29yZy10cmVlLXZpZXdlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL29yZy10cmVlLXZpZXdlci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE9yZ1RyZWVWaWV3ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIG9yZ2FuaXphdGlvbnM6IEFycmF5PEhpdDxPcmdhbml6YXRpb24+PiA9IG5ldyBBcnJheSgpO1xuXG4gIEBJbnB1dCgpIG9yZ1JlbGF0aW9uc2hpcFR5cGU6IHN0cmluZyA9IG51bGw7XG5cbiAgQElucHV0KCkgaWNvbkFjdGlvbiA9ICd2aXNpYmlsaXR5JztcblxuICBASW5wdXQoKSBsYWJlbEFjdGlvbiA9ICcnO1xuXG4gIEBJbnB1dCgpIG5nU3R5bGUgPSBudWxsO1xuXG4gIEBPdXRwdXQoKVxuICBhY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPE9yZ2FuaXphdGlvbkZsYXROb2RlPigpO1xuXG4gIHB1YmxpYyBlcnJvciA9IGZhbHNlO1xuXG4gIHRyZWVDb250cm9sOiBGbGF0VHJlZUNvbnRyb2w8T3JnYW5pemF0aW9uRmxhdE5vZGU+O1xuXG4gIGRhdGFTb3VyY2U6IE9yZ2FuaXphdGlvbkRhdGFTb3VyY2U7XG5cbiAgZ2V0TGV2ZWwgPSAobm9kZTogT3JnYW5pemF0aW9uRmxhdE5vZGUpID0+IG5vZGUubGV2ZWw7XG5cbiAgaXNFeHBhbmRhYmxlID0gKG5vZGU6IE9yZ2FuaXphdGlvbkZsYXROb2RlKSA9PiBub2RlLmV4cGFuZGFibGU7XG5cbiAgaGFzQ2hpbGQgPSAoXzogbnVtYmVyLCBfbm9kZURhdGE6IE9yZ2FuaXphdGlvbkZsYXROb2RlKSA9PiBfbm9kZURhdGEuZXhwYW5kYWJsZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG9yZ1NlcnZpY2U6IE9yZ2FuaXphdGlvblNlcnZpY2VOb0F1dGgpIHtcbiAgICB0aGlzLnRyZWVDb250cm9sID0gbmV3IEZsYXRUcmVlQ29udHJvbDxPcmdhbml6YXRpb25GbGF0Tm9kZT4odGhpcy5nZXRMZXZlbCwgdGhpcy5pc0V4cGFuZGFibGUpO1xuICAgIHRoaXMuZGF0YVNvdXJjZSA9IG5ldyBPcmdhbml6YXRpb25EYXRhU291cmNlKHRoaXMudHJlZUNvbnRyb2wsIG9yZ1NlcnZpY2UpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5kYXRhU291cmNlLm9yZ1JlbGF0aW9uc2hpcFR5cGUgPSB0aGlzLm9yZ1JlbGF0aW9uc2hpcFR5cGU7XG5cbiAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IHRoaXMub3JnYW5pemF0aW9ucy5tYXAoXG4gICAgICBvcmcgPT5cbiAgICAgICAgbmV3IE9yZ2FuaXphdGlvbkZsYXROb2RlKG9yZywgbnVsbCwgIDEsIG9yZy5tZXRhZGF0YS5yZWxhdGlvbnNoaXBzLmxlbmd0aCA+IDApXG4gICAgKTtcbiAgfVxuXG4gIGVtaXRBY3Rpb24ob3JnKSB7XG4gICAgdGhpcy5hY3Rpb24uZW1pdChvcmcpO1xuICB9XG59XG4iXX0=