/**
 * @fileoverview added by tsickle
 * Generated from: lib/filters/filter-container/filter-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component, ComponentFactoryResolver, ViewChild, Output, EventEmitter } from '@angular/core';
import { FilterItem } from '../filter-item';
import { FilterDirective } from '../filter.directive';
import { TitleFilterComponent } from '../title-filter/title-filter.component';
import { BooleanFilterComponent } from '../boolean-filter/boolean-filter.component';
import { SelectFilterOldComponent } from '../select-filter/select-filter.component';
import { SelectAutocompleteFilterComponent } from '../select-autocomplete-filter/select-autocomplete-filter.component';
import { FilterContainerService } from '../filter-container.service';
import { TreeFilterComponent } from '../tree-filter/tree-filter.component';
var FilterContainerComponent = /** @class */ (function () {
    function FilterContainerComponent(componentFactoryResolver, childrenService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.childrenService = childrenService;
        this.filter_url = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FilterContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.filters_data = [];
        this.childrenService.emitter.subscribe((/**
         * @param {?} filterIndex
         * @return {?}
         */
        function (filterIndex) {
            _this.deleteFilter(filterIndex);
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterContainerComponent.prototype.addFilter = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var data = this.filters_data[index];
        /** @type {?} */
        var viewContainerRef = this.adHost.viewContainerRef;
        data.pos = viewContainerRef.length;
        /** @type {?} */
        var f = this.newFilter(data);
        // this.current_filters.push(f);
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(f.component);
        /** @type {?} */
        var componentRef = viewContainerRef.createComponent(componentFactory);
        ((/** @type {?} */ (componentRef.instance))).data = f.data;
        //this.delete_item_of_filters(pos);
        this.filters_data[index].is_enabled = false;
    };
    /**
     * @param {?} data_filter
     * @return {?}
     */
    FilterContainerComponent.prototype.newFilter = /**
     * @param {?} data_filter
     * @return {?}
     */
    function (data_filter) {
        data_filter.viewContainerRef = this.adHost.viewContainerRef;
        /** @type {?} */
        var f = null;
        switch (data_filter.type) {
            case 'select': {
                f = new FilterItem(SelectFilterOldComponent, data_filter);
                break;
            }
            case 'boolean': {
                f = new FilterItem(BooleanFilterComponent, data_filter);
                break;
            }
            case 'select-autocomplete': {
                f = new FilterItem(SelectAutocompleteFilterComponent, data_filter);
                break;
            }
            case 'tree': {
                f = new FilterItem(TreeFilterComponent, data_filter);
                break;
            }
            default: f = new FilterItem(TitleFilterComponent, data_filter);
        }
        return f;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterContainerComponent.prototype.deleteFilter = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var last_pos = this.filters_data[index].pos;
        this.adHost.viewContainerRef.remove(this.filters_data[index].pos);
        this.filters_data[index].pos = -1;
        this.filters_data[index].is_enabled = true;
        for (var i = 0; i < this.filters_data.length; i++) {
            if (!this.filters_data[i].is_enabled && this.filters_data[i].pos > last_pos) {
                this.filters_data[i].pos = this.filters_data[i].pos - 1;
            }
        }
    };
    FilterContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-filter-container',
                    template: "<!-- <div fxLayout=\"row wrap\" fxLayoutAlign=\"start center\" fxLayoutAlign.xs=\"center center\" fxLayoutGap=\"1em\" fxLayoutGap.xs=\"0\"> -->\n\n  <ng-template toco-Filter></ng-template>\n\n<!-- </div> -->\n\n<button mat-icon-button [matMenuTriggerFor]=\"menu\">\n    <mat-icon>add</mat-icon>\n</button>\n  <mat-menu #menu=\"matMenu\" >\n    <ng-container *ngFor=\"let item of filters_data,let i=index\">\n        <ng-container *ngIf=\"item.is_enabled\">\n          <button mat-menu-item (click)=\"addFilter(i)\">\n            {{item.name}}\n          </button>\n        </ng-container>\n    </ng-container>\n    \n\n    \n  </mat-menu>",
                    styles: [".width-100{width:100%}.mat-menu-item{height:37px}"]
                }] }
    ];
    /** @nocollapse */
    FilterContainerComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: FilterContainerService }
    ]; };
    FilterContainerComponent.propDecorators = {
        filter_url: [{ type: Output }],
        adHost: [{ type: ViewChild, args: [FilterDirective, { static: true },] }]
    };
    return FilterContainerComponent;
}());
export { FilterContainerComponent };
if (false) {
    /** @type {?} */
    FilterContainerComponent.prototype.filters_data;
    /** @type {?} */
    FilterContainerComponent.prototype.filter_url;
    /** @type {?} */
    FilterContainerComponent.prototype.adHost;
    /**
     * @type {?}
     * @protected
     */
    FilterContainerComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @protected
     */
    FilterContainerComponent.prototype.childrenService;
}
//# sourceMappingURL=data:application/json;base64,