/**
 * @fileoverview added by tsickle
 * Generated from: lib/filters/filters.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Injectable, Output, EventEmitter } from '@angular/core';
import { FilterHttpMap } from './filter-item';
var FiltersService = /** @class */ (function () {
    function FiltersService() {
        this.params = new Array();
        // httpParams: HttpParams = new HttpParams();
        this.autocompleteFilter = new Array();
        this.paramsChanged = new EventEmitter();
    }
    /**
     *
     * @param field el nombre del campo que se esta filtrando (title, etc...)
     * @param value el valor del filtro
     * @param emitEvent si se emite o no el evento de cambio de parametros, para los que estan suscritos.
     */
    /**
     *
     * @param {?=} field el nombre del campo que se esta filtrando (title, etc...)
     * @param {?=} value el valor del filtro
     * @param {?=} emitEvent si se emite o no el evento de cambio de parametros, para los que estan suscritos.
     * @return {?}
     */
    FiltersService.prototype.changeFilter = /**
     *
     * @param {?=} field el nombre del campo que se esta filtrando (title, etc...)
     * @param {?=} value el valor del filtro
     * @param {?=} emitEvent si se emite o no el evento de cambio de parametros, para los que estan suscritos.
     * @return {?}
     */
    function (field, value, emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        if (this.params.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.field == field; }))) {
            this.params.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.field == field; })).value = value;
        }
        else if (field && value) {
            this.params.push(new FilterHttpMap(field, value));
        }
        /*
        crear el httpParams... a partir del params...
        */
        // this.httpParams.set(field, value);
        if (emitEvent)
            this.paramsChanged.emit(this.params);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FiltersService.prototype.deleteParameter = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var paramToDelete = this.params.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.field == field; }));
        if (paramToDelete) {
            this.params.splice(this.params.indexOf(this.params.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.field == field; }))), 1);
            this.paramsChanged.emit(this.params);
        }
    };
    /**
     * Especifico para el filtro de terminos.
     * @param termValue identificador del termino por el cual se esta filtrando
     * @param isdelete especifica si se va a eliminar o adicionar el @param termValue
     */
    /**
     * Especifico para el filtro de terminos.
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    FiltersService.prototype.changeAutocompleteFilter = /**
     * Especifico para el filtro de terminos.
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        /** @type {?} */
        var isexist = false;
        this.autocompleteFilter.forEach((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            if (filter.name == name) {
                filter.value = value;
                isexist = true;
            }
        }));
        if (!isexist) {
            this.autocompleteFilter.push(new AutocompleteFilter(name, value));
        }
        this.createAutocompleteFilterValue();
    };
    /**
     * @param {?} name
     * @return {?}
     */
    FiltersService.prototype.deleteAutocompleteFilter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.autocompleteFilter.splice(this.autocompleteFilter.indexOf(this.autocompleteFilter.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.name == name; }))), 1);
        this.createAutocompleteFilterValue();
    };
    /**
     * @return {?}
     */
    FiltersService.prototype.createAutocompleteFilterValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var emitValue = this.autocompleteFilter[0].value;
        for (var index = 1; index < this.autocompleteFilter.length; index++) {
            emitValue = emitValue + ',' + this.autocompleteFilter[index].value;
        }
        this.changeFilter('terms', emitValue, true);
    };
    FiltersService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FiltersService.ctorParameters = function () { return []; };
    FiltersService.propDecorators = {
        paramsChanged: [{ type: Output }]
    };
    return FiltersService;
}());
export { FiltersService };
if (false) {
    /** @type {?} */
    FiltersService.prototype.params;
    /** @type {?} */
    FiltersService.prototype.autocompleteFilter;
    /** @type {?} */
    FiltersService.prototype.paramsChanged;
}
var AutocompleteFilter = /** @class */ (function () {
    function AutocompleteFilter(name, value) {
        this.name = name;
        this.value = value;
    }
    return AutocompleteFilter;
}());
export { AutocompleteFilter };
if (false) {
    /** @type {?} */
    AutocompleteFilter.prototype.name;
    /** @type {?} */
    AutocompleteFilter.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvZmlsdGVycy9maWx0ZXJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUM7SUFTSTtRQU5BLFdBQU0sR0FBeUIsSUFBSSxLQUFLLEVBQUUsQ0FBQzs7UUFFM0MsdUJBQWtCLEdBQThCLElBQUksS0FBSyxFQUFFLENBQUM7UUFFbEQsa0JBQWEsR0FBdUMsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUcvRSxDQUFDO0lBRUg7Ozs7O09BS0c7Ozs7Ozs7O0lBQ0gscUNBQVk7Ozs7Ozs7SUFBWixVQUFhLEtBQWUsRUFBRSxLQUFXLEVBQUUsU0FBd0I7UUFBeEIsMEJBQUEsRUFBQSxnQkFBd0I7UUFDL0QsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxFQUFoQixDQUFnQixFQUFDLEVBQUM7WUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssRUFBaEIsQ0FBZ0IsRUFBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDekQ7YUFDSSxJQUFHLEtBQUssSUFBSSxLQUFLLEVBQUM7WUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDckQ7UUFDRDs7VUFFRTtRQUNGLHFDQUFxQztRQUVyQyxJQUFHLFNBQVM7WUFDUixJQUFJLENBQUMsYUFB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b3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMjAgVW5pdmVyc2lkYWQgZGUgUGluYXIgZGVsIFLDrW8gXCJIZXJtYW5vcyBTYcOteiBNb250ZXMgZGUgT2NhXCJcbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5cbmltcG9ydCB7IEluamVjdGFibGUsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEZpbHRlckh0dHBNYXAgfSBmcm9tICcuL2ZpbHRlci1pdGVtJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpbHRlcnNTZXJ2aWNlIHtcblxuICAgIHBhcmFtczogQXJyYXk8RmlsdGVySHR0cE1hcD4gPSBuZXcgQXJyYXkoKTtcbiAgICAvLyBodHRwUGFyYW1zOiBIdHRwUGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICBhdXRvY29tcGxldGVGaWx0ZXI6IEFycmF5PEF1dG9jb21wbGV0ZUZpbHRlcj4gPSBuZXcgQXJyYXkoKTtcblxuICAgIEBPdXRwdXQoKSBwYXJhbXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QXJyYXk8RmlsdGVySHR0cE1hcD4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3RydWN0b3IoKVxuICAgIHsgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGZpZWxkIGVsIG5vbWJyZSBkZWwgY2FtcG8gcXVlIHNlIGVzdGEgZmlsdHJhbmRvICh0aXRsZSwgZXRjLi4uKVxuICAgICAqIEBwYXJhbSB2YWx1ZSBlbCB2YWxvciBkZWwgZmlsdHJvXG4gICAgICogQHBhcmFtIGVtaXRFdmVudCBzaSBzZSBlbWl0ZSBvIG5vIGVsIGV2ZW50byBkZSBjYW1iaW8gZGUgcGFyYW1ldHJvcywgcGFyYSBsb3MgcXVlIGVzdGFuIHN1c2NyaXRvcy4gIFxuICAgICAqL1xuICAgIGNoYW5nZUZpbHRlcihmaWVsZD8gOiBzdHJpbmcsIHZhbHVlPzogYW55LCBlbWl0RXZlbnQ6Ym9vbGVhbiA9IHRydWUpOiB2b2lke1xuICAgICAgICBpZih0aGlzLnBhcmFtcy5maW5kKHggPT4geC5maWVsZCA9PSBmaWVsZCkpe1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMuZmluZCh4ID0+IHguZmllbGQgPT0gZmllbGQpLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihmaWVsZCAmJiB2YWx1ZSl7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5wdXNoKG5ldyBGaWx0ZXJIdHRwTWFwKGZpZWxkLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIGNyZWFyIGVsIGh0dHBQYXJhbXMuLi4gYSBwYXJ0aXIgZGVsIHBhcmFtcy4uLiBcbiAgICAgICAgKi9cbiAgICAgICAgLy8gdGhpcy5odHRwUGFyYW1zLnNldChmaWVsZCwgdmFsdWUpO1xuICAgICAgICBcbiAgICAgICAgaWYoZW1pdEV2ZW50KSBcbiAgICAgICAgICAgIHRoaXMucGFyYW1zQ2hhbmdlZC5lbWl0KHRoaXMucGFyYW1zKTtcbiAgICB9XG5cbiAgICBkZWxldGVQYXJhbWV0ZXIoZmllbGQ6c3RyaW5nKTp2b2lke1xuICAgICAgICB2YXIgcGFyYW1Ub0RlbGV0ZSA9IHRoaXMucGFyYW1zLmZpbmQoeCA9PiB4LmZpZWxkID09IGZpZWxkKTtcbiAgICAgICAgaWYocGFyYW1Ub0RlbGV0ZSl7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5zcGxpY2UodGhpcy5wYXJhbXMuaW5kZXhPZih0aGlzLnBhcmFtcy5maW5kKHggPT4geC5maWVsZCA9PSBmaWVsZCkpLCAxKVxuICAgICAgICAgICAgdGhpcy5wYXJhbXNDaGFuZ2VkLmVtaXQodGhpcy5wYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBFc3BlY2lmaWNvIHBhcmEgZWwgZmlsdHJvIGRlIHRlcm1pbm9zLlxuICAgICAqIEBwYXJhbSB0ZXJtVmFsdWUgaWRlbnRpZmljYWRvciBkZWwgdGVybWlubyBwb3IgZWwgY3VhbCBzZSBlc3RhIGZpbHRyYW5kb1xuICAgICAqIEBwYXJhbSBpc2RlbGV0ZSBlc3BlY2lmaWNhIHNpIHNlIHZhIGEgZWxpbWluYXIgbyBhZGljaW9uYXIgZWwgQHBhcmFtIHRlcm1WYWx1ZVxuICAgICAqL1xuICAgIGNoYW5nZUF1dG9jb21wbGV0ZUZpbHRlcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpe1xuICAgICAgICBsZXQgaXNleGlzdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZUZpbHRlci5mb3JFYWNoKGZpbHRlciA9PntcbiAgICAgICAgICAgIGlmKGZpbHRlci5uYW1lID09IG5hbWUpe1xuICAgICAgICAgICAgICAgIGZpbHRlci52YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgaXNleGlzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZighaXNleGlzdCl7XG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZUZpbHRlci5wdXNoKG5ldyBBdXRvY29tcGxldGVGaWx0ZXIobmFtZSx2YWx1ZSkpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVBdXRvY29tcGxldGVGaWx0ZXJWYWx1ZSgpO1xuICAgIH1cblxuICAgIGRlbGV0ZUF1dG9jb21wbGV0ZUZpbHRlcihuYW1lOiBzdHJpbmcpe1xuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZUZpbHRlci5zcGxpY2UodGhpcy5hdXRvY29tcGxldGVGaWx0ZXIuaW5kZXhPZih0aGlzLmF1dG9jb21wbGV0ZUZpbHRlci5maW5kKHggPT4geC5uYW1lID09IG5hbWUpKSwgMSlcbiAgICAgICAgdGhpcy5jcmVhdGVBdXRvY29tcGxldGVGaWx0ZXJWYWx1ZSgpO1xuICAgIH1cbiAgICBcbiAgICBjcmVhdGVBdXRvY29tcGxldGVGaWx0ZXJWYWx1ZSgpe1xuICAgICAgICBsZXQgZW1pdFZhbHVlID0gdGhpcy5hdXRvY29tcGxldGVGaWx0ZXJbMF0udmFsdWU7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCB0aGlzLmF1dG9jb21wbGV0ZUZpbHRlci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGVtaXRWYWx1ZSA9IGVtaXRWYWx1ZSArICcsJysgdGhpcy5hdXRvY29tcGxldGVGaWx0ZXJbaW5kZXhdLnZhbHVlO1xuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNoYW5nZUZpbHRlcigndGVybXMnLCBlbWl0VmFsdWUsIHRydWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF1dG9jb21wbGV0ZUZpbHRlclxue1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbn0iXX0=