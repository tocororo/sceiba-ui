/**
 * @fileoverview added by tsickle
 * Generated from: lib/filters/filters.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { SharedModule } from '../shared/public-api';
import { ReactiveFormsModule } from '@angular/forms';
import { BooleanFilterComponent } from './boolean-filter/boolean-filter.component';
import { FilterContainerComponent } from './filter-container/filter-container.component';
import { SelectAutocompleteFilterComponent } from './select-autocomplete-filter/select-autocomplete-filter.component';
import { SelectFilterOldComponent } from './select-filter/select-filter.component';
import { TitleFilterComponent } from './title-filter/title-filter.component';
import { FilterContainerService } from './filter-container.service';
import { FiltersService } from './filters.service';
import { FilterDirective } from './filter.directive';
import { TreeFilterComponent } from './tree-filter/tree-filter.component';
var FiltersModule = /** @class */ (function () {
    function FiltersModule() {
    }
    FiltersModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        BooleanFilterComponent,
                        FilterContainerComponent,
                        SelectAutocompleteFilterComponent,
                        SelectFilterOldComponent,
                        TitleFilterComponent,
                        FilterDirective,
                        TreeFilterComponent
                    ],
                    entryComponents: [
                        BooleanFilterComponent,
                        SelectAutocompleteFilterComponent,
                        SelectFilterOldComponent,
                        TitleFilterComponent,
                        TreeFilterComponent
                    ],
                    imports: [
                        SharedModule,
                        // InfiniteScrollModule,
                        ReactiveFormsModule
                    ],
                    exports: [
                        BooleanFilterComponent,
                        FilterContainerComponent,
                        SelectAutocompleteFilterComponent,
                        SelectFilterOldComponent,
                        TitleFilterComponent,
                        FilterDirective,
                        TreeFilterComponent
                    ],
                    providers: [
                        FiltersService,
                        FilterContainerService
                    ]
                },] }
    ];
    return FiltersModule;
}());
export { FiltersModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXJzL2ZpbHRlcnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbkYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDekYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sbUVBQW1FLENBQUM7QUFDdEgsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbkYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUUxRTtJQUFBO0lBeUNFLENBQUM7O2dCQXpDRixRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFO3dCQUNWLHNCQUFzQjt3QkFDdEIsd0JBQXdCO3dCQUN4QixpQ0FBaUM7d0JBQ2pDLHdCQUF3Qjt3QkFDeEIsb0JBQW9CO3dCQUNwQixlQUFlO3dCQUNmLG1CQUFtQjtxQkFDdEI7b0JBRUQsZUFBZSxFQUFDO3dCQUNaLHNCQUFzQjt3QkFDdEIsaUNBQWlDO3dCQUNqQyx3QkFBd0I7d0JBQ3hCLG9CQUFvQjt3QkFDcEIsbUJBQW1CO3FCQUN0QjtvQkFFRCxPQUFPLEVBQUU7d0JBQ0wsWUFBWTt3QkFDWix3QkFBd0I7d0JBQ3hCLG1CQUFtQjtxQkFDdEI7b0JBRUQsT0FBTyxFQUFFO3dCQUNMLHNCQUFzQjt3QkFDdEIsd0JBQXdCO3dCQUN4QixpQ0FBaUM7d0JBQ2pDLHdCQUF3Qjt3QkFDeEIsb0JBQW9CO3dCQUNwQixlQUFlO3dCQUNmLG1CQUFtQjtxQkFDdEI7b0JBRUQsU0FBUyxFQUFFO3dCQUNQLGNBQWM7d0JBQ2Qsc0JBQXNCO3FCQUN6QjtpQkFDSjs7SUFFQyxvQkFBQztDQUFBLEFBekNILElBeUNHO1NBRFUsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNoYXJlZE1vZHVsZSB9IGZyb20gJy4uL3NoYXJlZC9wdWJsaWMtYXBpJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IEJvb2xlYW5GaWx0ZXJDb21wb25lbnQgfSBmcm9tICcuL2Jvb2xlYW4tZmlsdGVyL2Jvb2xlYW4tZmlsdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWx0ZXJDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1jb250YWluZXIvZmlsdGVyLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0QXV0b2NvbXBsZXRlRmlsdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9zZWxlY3QtYXV0b2NvbXBsZXRlLWZpbHRlci9zZWxlY3QtYXV0b2NvbXBsZXRlLWZpbHRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0RmlsdGVyT2xkQ29tcG9uZW50IH0gZnJvbSAnLi9zZWxlY3QtZmlsdGVyL3NlbGVjdC1maWx0ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRpdGxlRmlsdGVyQ29tcG9uZW50IH0gZnJvbSAnLi90aXRsZS1maWx0ZXIvdGl0bGUtZmlsdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWx0ZXJDb250YWluZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWx0ZXItY29udGFpbmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmlsdGVyc1NlcnZpY2UgfSBmcm9tICcuL2ZpbHRlcnMuc2VydmljZSc7XG5pbXBvcnQgeyBGaWx0ZXJEaXJlY3RpdmUgfSBmcm9tICcuL2ZpbHRlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVHJlZUZpbHRlckNvbXBvbmVudCB9IGZyb20gJy4vdHJlZS1maWx0ZXIvdHJlZS1maWx0ZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgQm9vbGVhbkZpbHRlckNvbXBvbmVudCxcbiAgICAgICAgRmlsdGVyQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgICBTZWxlY3RBdXRvY29tcGxldGVGaWx0ZXJDb21wb25lbnQsXG4gICAgICAgIFNlbGVjdEZpbHRlck9sZENvbXBvbmVudCxcbiAgICAgICAgVGl0bGVGaWx0ZXJDb21wb25lbnQsXG4gICAgICAgIEZpbHRlckRpcmVjdGl2ZSxcbiAgICAgICAgVHJlZUZpbHRlckNvbXBvbmVudFxuICAgIF0sXG5cbiAgICBlbnRyeUNvbXBvbmVudHM6W1xuICAgICAgICBCb29sZWFuRmlsdGVyQ29tcG9uZW50LFxuICAgICAgICBTZWxlY3RBdXRvY29tcGxldGVGaWx0ZXJDb21wb25lbnQsXG4gICAgICAgIFNlbGVjdEZpbHRlck9sZENvbXBvbmVudCxcbiAgICAgICAgVGl0bGVGaWx0ZXJDb21wb25lbnQsXG4gICAgICAgIFRyZWVGaWx0ZXJDb21wb25lbnRcbiAgICBdLFxuXG4gICAgaW1wb3J0czogW1xuICAgICAgICBTaGFyZWRNb2R1bGUsXG4gICAgICAgIC8vIEluZmluaXRlU2Nyb2xsTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlXG4gICAgXSxcblxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgQm9vbGVhbkZpbHRlckNvbXBvbmVudCxcbiAgICAgICAgRmlsdGVyQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgICBTZWxlY3RBdXRvY29tcGxldGVGaWx0ZXJDb21wb25lbnQsXG4gICAgICAgIFNlbGVjdEZpbHRlck9sZENvbXBvbmVudCxcbiAgICAgICAgVGl0bGVGaWx0ZXJDb21wb25lbnQsXG4gICAgICAgIEZpbHRlckRpcmVjdGl2ZSxcbiAgICAgICAgVHJlZUZpbHRlckNvbXBvbmVudFxuICAgIF0sXG5cbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgRmlsdGVyc1NlcnZpY2UsXG4gICAgICAgIEZpbHRlckNvbnRhaW5lclNlcnZpY2VcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIEZpbHRlcnNNb2R1bGVcbnsgfVxuIl19