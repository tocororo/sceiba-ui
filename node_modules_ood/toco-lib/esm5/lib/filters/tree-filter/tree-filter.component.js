/**
 * @fileoverview added by tsickle
 * Generated from: lib/filters/tree-filter/tree-filter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component, Input } from '@angular/core';
import { FiltersService } from '../filters.service';
import { FilterContainerService } from '../filter-container.service';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material';
import { of } from 'rxjs';
import { SelectionModel } from '@angular/cdk/collections';
import { FormControl } from '@angular/forms';
/**
 * @record
 */
export function FlatTreeNodeFilter() { }
if (false) {
    /** @type {?} */
    FlatTreeNodeFilter.prototype.name;
    /** @type {?} */
    FlatTreeNodeFilter.prototype.level;
    /** @type {?} */
    FlatTreeNodeFilter.prototype.expandable;
    /** @type {?} */
    FlatTreeNodeFilter.prototype.term;
}
/**
 * @record
 */
function TreeFilterData() { }
if (false) {
    /** @type {?} */
    TreeFilterData.prototype.selectOptions;
    /** @type {?} */
    TreeFilterData.prototype.type;
    /** @type {?} */
    TreeFilterData.prototype.placeholder;
    /** @type {?} */
    TreeFilterData.prototype.text;
    /** @type {?} */
    TreeFilterData.prototype.field;
    /** @type {?} */
    TreeFilterData.prototype.index;
    /** @type {?} */
    TreeFilterData.prototype.value;
    /** @type {?} */
    TreeFilterData.prototype.idVocab;
}
var TreeFilterComponent = /** @class */ (function () {
    function TreeFilterComponent(filterService, filterContainerService) {
        this.filterService = filterService;
        this.filterContainerService = filterContainerService;
        this.checklistSelection = new SelectionModel(true /* multiple */);
        this.myControl = new FormControl();
        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);
    }
    /**
     * @return {?}
     */
    TreeFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data.value = '';
        this.dataSource.data = this.data.selectOptions;
        this.myControl.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this._filter(value);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { }), (/**
         * @return {?}
         */
        function () {
        }));
        this.inputId = this.data.placeholder.trim().toLowerCase();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    TreeFilterComponent.prototype._filter = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var filterValue = value.toLowerCase();
        console.log(filterValue);
        /** @type {?} */
        var newData = this.data.selectOptions.filter((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return _this._include_node(filterValue, node); }));
        this.dataSource.data = newData;
        this._fix_selection();
    };
    /** return true if any children is include, false otherwise */
    /**
     * return true if any children is include, false otherwise
     * @private
     * @param {?} filter
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype._include_node = /**
     * return true if any children is include, false otherwise
     * @private
     * @param {?} filter
     * @param {?} node
     * @return {?}
     */
    function (filter, node) {
        var e_1, _a;
        if (node.term.identifier.toLowerCase().includes(filter)) {
            return true;
        }
        else if (node.children) {
            try {
                for (var _b = tslib_1.__values(node.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    if (this._include_node(filter, child)) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            return false;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    TreeFilterComponent.prototype._fix_selection = /**
     * @private
     * @return {?}
     */
    function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.treeControl.dataNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var node = _c.value;
                console.log(node);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // if (this.checklistSelection.selected) {
        //   const old = this.checklistSelection.selected.find(
        //     (value: FlatTreeNode, index: number, obj: FlatTreeNode[]) => value.term.id === node.term.id
        //   );
        //   if (old !== undefined) {
        //     this.checklistSelection.deselect(old);
        //     this.checklistSelection.select(result);
        //   }
        // }
    };
    /**
     * @return {?}
     */
    TreeFilterComponent.prototype.remove_component = /**
     * @return {?}
     */
    function () {
        this.filterService.deleteParameter(this.data.field);
        this.filterContainerService.filterDeleted(this.data.index);
    };
    /**
     * @return {?}
     */
    TreeFilterComponent.prototype.onChange = /**
     * @return {?}
     */
    function () {
        this.filterService.changeFilter(this.data.field, this.data.value);
    };
    /**
     * @return {?}
     */
    TreeFilterComponent.prototype.emitSelection = /**
     * @return {?}
     */
    function () {
        console.log(this.checklistSelection.selected);
        /** @type {?} */
        var valueEmiter = 'OR';
        this.checklistSelection.selected.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            valueEmiter = valueEmiter + ',' + node.term.id;
        }));
        this.filterService.changeAutocompleteFilter(this.data.idVocab.toString(10), valueEmiter);
    };
    /** Transform the data to something the tree can read. */
    /**
     * Transform the data to something the tree can read.
     * @param {?} node
     * @param {?} level
     * @return {?}
     */
    TreeFilterComponent.prototype.transformer = /**
     * Transform the data to something the tree can read.
     * @param {?} node
     * @param {?} level
     * @return {?}
     */
    function (node, level) {
        /** @type {?} */
        var result = {
            name: node.term.identifier,
            level: level,
            expandable: (node.children.length > 0),
            term: node.term,
        };
        return result;
    };
    /** Get the level of the node */
    /**
     * Get the level of the node
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.getLevel = /**
     * Get the level of the node
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.level;
    };
    /** Get whether the node is expanded or not. */
    /**
     * Get whether the node is expanded or not.
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.isExpandable = /**
     * Get whether the node is expanded or not.
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.expandable;
    };
    /** Get whether the node has children or not. */
    /**
     * Get whether the node has children or not.
     * @param {?} index
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.hasChild = /**
     * Get whether the node has children or not.
     * @param {?} index
     * @param {?} node
     * @return {?}
     */
    function (index, node) {
        return node.expandable;
    };
    /** Get the children for the node. */
    /**
     * Get the children for the node.
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.getChildren = /**
     * Get the children for the node.
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return of(node.children);
    };
    /** Whether all the descendants of the node are selected. */
    /**
     * Whether all the descendants of the node are selected.
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.descendantsAllSelected = /**
     * Whether all the descendants of the node are selected.
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var descendants = this.treeControl.getDescendants(node);
        /** @type {?} */
        var descAllSelected = descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        function (child) {
            return _this.checklistSelection.isSelected(child);
        }));
        return descAllSelected;
    };
    /** Whether part of the descendants are selected */
    /**
     * Whether part of the descendants are selected
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.descendantsPartiallySelected = /**
     * Whether part of the descendants are selected
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var descendants = this.treeControl.getDescendants(node);
        /** @type {?} */
        var result = descendants.some((/**
         * @param {?} child
         * @return {?}
         */
        function (child) { return _this.checklistSelection.isSelected(child); }));
        return result && !this.descendantsAllSelected(node);
    };
    /** Select/deselect all the descendants node */
    /**
     * Select/deselect all the descendants node
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.itemSelectionToggle = /**
     * Select/deselect all the descendants node
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _a, _b;
        var _this = this;
        this.checklistSelection.toggle(node);
        /** @type {?} */
        var descendants = this.treeControl.getDescendants(node);
        this.checklistSelection.isSelected(node)
            ? (_a = this.checklistSelection).select.apply(_a, tslib_1.__spread(descendants)) : (_b = this.checklistSelection).deselect.apply(_b, tslib_1.__spread(descendants));
        // Force update for the parent
        descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        function (child) {
            return _this.checklistSelection.isSelected(child);
        }));
        this.checkAllParentsSelection(node);
        this.emitSelection();
    };
    /** Check all the parents to see if they changed */
    /**
     * Check all the parents to see if they changed
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.leafItemSelectionToggle = /**
     * Check all the parents to see if they changed
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.checklistSelection.toggle(node);
        this.checkAllParentsSelection(node);
        this.emitSelection();
    };
    /* Checks all the parents when a leaf node is selected/unselected */
    /* Checks all the parents when a leaf node is selected/unselected */
    /**
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.checkAllParentsSelection = /* Checks all the parents when a leaf node is selected/unselected */
    /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var parent = this.getParentNode(node);
        while (parent) {
            this.checkRootNodeSelection(parent);
            parent = this.getParentNode(parent);
        }
    };
    /** Check root node checked state and change it accordingly */
    /**
     * Check root node checked state and change it accordingly
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.checkRootNodeSelection = /**
     * Check root node checked state and change it accordingly
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var nodeSelected = this.checklistSelection.isSelected(node);
        /** @type {?} */
        var descendants = this.treeControl.getDescendants(node);
        /** @type {?} */
        var descAllSelected = descendants.every((/**
         * @param {?} child
         * @return {?}
         */
        function (child) {
            return _this.checklistSelection.isSelected(child);
        }));
        if (nodeSelected && !descAllSelected) {
            this.checklistSelection.deselect(node);
        }
        else if (!nodeSelected && descAllSelected) {
            this.checklistSelection.select(node);
        }
    };
    /* Get the parent node of a node */
    /* Get the parent node of a node */
    /**
     * @param {?} node
     * @return {?}
     */
    TreeFilterComponent.prototype.getParentNode = /* Get the parent node of a node */
    /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var currentLevel = this.getLevel(node);
        if (currentLevel < 1) {
            return null;
        }
        /** @type {?} */
        var startIndex = this.treeControl.dataNodes.indexOf(node) - 1;
        for (var i = startIndex; i >= 0; i--) {
            /** @type {?} */
            var currentNode = this.treeControl.dataNodes[i];
            if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
            }
        }
        return null;
    };
    /**
     * @param {?} i
     * @return {?}
     */
    TreeFilterComponent.prototype.removeChip = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        console.log(i);
    };
    TreeFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-tree-filter',
                    template: "<div class=\"card-filter\">\n  <input\n    type=\"text\"\n    placeholder=\"{{ data.placeholder }}\"\n    aria-label=\"Number\"\n    matInput\n    [formControl]=\"myControl\"\n    id=\"{{ inputId }}\"\n  />\n\n  <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"padd\">\n    <mat-tree-node\n      class=\"hover\"\n      *matTreeNodeDef=\"let node\"\n      matTreeNodeToggle\n      matTreeNodePadding\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n    >\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <button mat-icon-button disabled></button>\n        <mat-checkbox\n          class=\"checklist-leaf-node\"\n          [checked]=\"checklistSelection.isSelected(node)\"\n          (change)=\"leafItemSelectionToggle(node)\"\n          matTooltip=\"{{ node.name }}\"\n          >{{ node.name }}</mat-checkbox\n        >\n      </div>\n    </mat-tree-node>\n\n    <mat-tree-node\n      class=\"hover\"\n      *matTreeNodeDef=\"let node; when: hasChild\"\n      matTreeNodePadding\n    >\n      <button\n        mat-icon-button\n        matTreeNodeToggle\n        [attr.aria-label]=\"'toggle ' + node.name\"\n      >\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\n        </mat-icon>\n      </button>\n      <div\n        class=\"item-width\"\n        fxLayout=\"row\"\n        fxLayoutAlign=\"space-between center\"\n      >\n        <mat-checkbox\n          [checked]=\"descendantsAllSelected(node)\"\n          [indeterminate]=\"descendantsPartiallySelected(node)\"\n          (change)=\"itemSelectionToggle(node)\"\n          matTooltip=\"{{ node.name }}\"\n          >{{ node.name }}</mat-checkbox\n        >\n      </div>\n    </mat-tree-node>\n  </mat-tree>\n\n  <button\n    mat-icon-button\n    color=\"accent\"\n    class=\"delete-filter\"\n    (click)=\"remove_component()\"\n  >\n    <mat-icon>close</mat-icon>\n  </button>\n\n  <mat-chip-list\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n    style=\"margin-bottom: .5em\"\n    id=\"chiplist\"\n  >\n    <mat-chip\n      *ngFor=\"let item of chipsList; let i = index\"\n      (click)=\"removeChip(i)\"\n      >{{ item.name }}</mat-chip\n    >\n  </mat-chip-list>\n</div>\n",
                    styles: [".card-filter{border:2px solid #e4e4e4;border-radius:5px;padding:5px .5em 0;position:relative;box-shadow:2px 3px 10px RGB(0,0,0,.053);width:15em;margin:.4em 0}.delete-filter{position:absolute;top:-1.9em;right:-1.4em;width:2em;height:2em}.delete-filter mat-icon{font-size:medium}"]
                }] }
    ];
    /** @nocollapse */
    TreeFilterComponent.ctorParameters = function () { return [
        { type: FiltersService },
        { type: FilterContainerService }
    ]; };
    TreeFilterComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return TreeFilterComponent;
}());
export { TreeFilterComponent };
if (false) {
    /** @type {?} */
    TreeFilterComponent.prototype.data;
    /** @type {?} */
    TreeFilterComponent.prototype.chipsList;
    /** @type {?} */
    TreeFilterComponent.prototype.treeControl;
    /** @type {?} */
    TreeFilterComponent.prototype.treeFlattener;
    /** @type {?} */
    TreeFilterComponent.prototype.dataSource;
    /** @type {?} */
    TreeFilterComponent.prototype.checklistSelection;
    /** @type {?} */
    TreeFilterComponent.prototype.myControl;
    /** @type {?} */
    TreeFilterComponent.prototype.inputId;
    /**
     * @type {?}
     * @private
     */
    TreeFilterComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    TreeFilterComponent.prototype.filterContainerService;
}
//# sourceMappingURL=data:application/json;base64,