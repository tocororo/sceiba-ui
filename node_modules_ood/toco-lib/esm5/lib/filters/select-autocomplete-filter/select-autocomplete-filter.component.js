/**
 * @fileoverview added by tsickle
 * Generated from: lib/filters/select-autocomplete-filter/select-autocomplete-filter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { FormControl } from '@angular/forms';
import { startWith, map } from 'rxjs/operators';
import { FiltersService } from '../filters.service';
import { FilterContainerService } from '../filter-container.service';
var SelectAutocompleteFilterComponent = /** @class */ (function () {
    function SelectAutocompleteFilterComponent(filterService, filterContainerService) {
        this.filterService = filterService;
        this.filterContainerService = filterContainerService;
        this.type = '';
        this.placeholder = '';
        this.text = '';
        this.multiple = false;
        this.selectOptions = [];
        this.myControl = new FormControl();
        this.chipsList = [];
    }
    /**
     * @return {?}
     */
    SelectAutocompleteFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.data.type)
            this.type = this.data.type;
        if (this.data.placeholder)
            this.placeholder = this.data.placeholder;
        if (this.multiple)
            this.multiple = true;
        if (this.data.selectOptions)
            this.selectOptions = this.data.selectOptions;
        this.data.value = '';
        this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this._filter(value); })));
        this.inputId = this.placeholder.trim().toLowerCase();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    SelectAutocompleteFilterComponent.prototype._filter = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var filterValue = value.toLowerCase();
        return this.selectOptions.filter((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.name.toLowerCase().includes(filterValue); }));
    };
    /**
     * @return {?}
     */
    SelectAutocompleteFilterComponent.prototype.remove_component = /**
     * @return {?}
     */
    function () {
        this.filterService.deleteParameter(this.data.field);
        this.filterContainerService.filterDeleted(this.data.index);
        this.filterService.changeAutocompleteFilter(this.data.idVocab, 'OR');
    };
    /**
     * @return {?}
     */
    SelectAutocompleteFilterComponent.prototype.optionSelect = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var valueEmiter = 'OR';
        this.chipsList.forEach((/**
         * @param {?} chip
         * @return {?}
         */
        function (chip) {
            valueEmiter = valueEmiter + ',' + chip.id;
        }));
        this.filterService.changeAutocompleteFilter(this.data.idVocab, valueEmiter);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SelectAutocompleteFilterComponent.prototype.addChips = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.chipsList.unshift(value);
        this.myControl.setValue('');
        this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this._filter(value); })));
        document.getElementById(this.inputId).blur();
        this.optionSelect();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SelectAutocompleteFilterComponent.prototype.removeChip = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.chipsList.splice(index, 1);
        this.optionSelect();
    };
    SelectAutocompleteFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-select-autocomplete-filter',
                    template: "<div class=\"card-filter\" >\n  <mat-form-field style=\"width: 100%;\">\n    \n    <input type=\"text\" placeholder=\"{{placeholder}}\" aria-label=\"Number\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\" id=\"{{inputId}}\">\n    <mat-autocomplete #auto=\"matAutocomplete\" >\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option.name\" (click)=\"addChips(option)\" title=\"{{option.name}}\">\n        {{option.name}}\n      </mat-option>\n    </mat-autocomplete>\n\n    <button mat-icon-button color=\"accent\" class=\"delete-filter\" (click)=\"remove_component()\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </mat-form-field>\n  <mat-chip-list fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: .5em\" id=\"chiplist\">\n    <mat-chip *ngFor=\"let item of chipsList; let i=index\" (click)=\"removeChip(i)\">{{item.name}}</mat-chip>\n  </mat-chip-list>\n</div>",
                    styles: [".card-filter{border:2px solid #e4e4e4;border-radius:5px;padding:5px .5em 0;position:relative;box-shadow:2px 3px 10px RGB(0,0,0,.053);width:15em;margin:.4em 0}.delete-filter{position:absolute;top:-1.9em;right:-1.4em;width:2em;height:2em}.delete-filter mat-icon{font-size:medium}.mat-option{line-height:35px;font-size:small;height:35px}#mat-chip-list-0>.mat-chip-list-wrapper{max-height:6em;overflow:auto}mat-chip{cursor:pointer}"]
                }] }
    ];
    /** @nocollapse */
    SelectAutocompleteFilterComponent.ctorParameters = function () { return [
        { type: FiltersService },
        { type: FilterContainerService }
    ]; };
    SelectAutocompleteFilterComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return SelectAutocompleteFilterComponent;
}());
export { SelectAutocompleteFilterComponent };
if (false) {
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.data;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.type;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.placeholder;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.text;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.multiple;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.selectValue;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.selectOptions;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.myControl;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.filteredOptions;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.chipsList;
    /** @type {?} */
    SelectAutocompleteFilterComponent.prototype.inputId;
    /**
     * @type {?}
     * @private
     */
    SelectAutocompleteFilterComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    SelectAutocompleteFilterComponent.prototype.filterContainerService;
}
/**
 * @record
 */
export function ValueInformation() { }
if (false) {
    /** @type {?} */
    ValueInformation.prototype.id;
    /** @type {?} */
    ValueInformation.prototype.name;
}
//# sourceMappingURL=data:application/json;base64,