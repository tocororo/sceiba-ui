/**
 * @fileoverview added by tsickle
 * Generated from: lib/authentication/authentication.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { JwksValidationHandler, OAuthModuleConfig, OAuthResourceServerErrorHandler, OAuthService, OAuthStorage } from 'angular-oauth2-oidc';
import { Subject, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Environment } from '../core/public-api';
import * as i0 from "@angular/core";
import * as i1 from "angular-oauth2-oidc";
import * as i2 from "@angular/common/http";
import * as i3 from "@angular/router";
import * as i4 from "../core/env";
/** @enum {string} */
var AuthBackend = {
    /**
     * `sceiba` represent the Sceiba's backend
     */
    sceiba: "sceiba",
    /**
     * `cuor` represent the Cuor's backend, The Organizations System
     */
    cuor: "cuor",
};
export { AuthBackend };
/**
 * This service handles the behavior when a user authentications and
 * gives information about it.
 */
var OauthAuthenticationService = /** @class */ (function () {
    function OauthAuthenticationService(oauthStorage, http, _router, oauthService, errorHandler, moduleConfig) {
        this.oauthStorage = oauthStorage;
        this.http = http;
        this._router = _router;
        this.oauthService = oauthService;
        this.errorHandler = errorHandler;
        this.moduleConfig = moduleConfig;
        // TODO: this object is `any` because we have two backends with two difrent userprofiles...
        this.authenticationSubject = new Subject();
        /**
         * Observer to handles the behavior when a user authenticates
         */
        this.authenticationSubjectObservable = this.authenticationSubject.asObservable();
    }
    /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param islogged 'true' is loggued or 'false' other way
     */
    /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param {?} user
     * @return {?}
     */
    OauthAuthenticationService.prototype.login = /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param {?} user
     * @return {?}
     */
    function (user) {
        console.log('autentication service user:', user);
        this.authenticationSubject.next(user);
    };
    /**
     * @return {?}
     */
    OauthAuthenticationService.prototype.logout = /**
     * @return {?}
     */
    function () {
        this.authenticationSubject.next(null);
    };
    /**
     * gives information about an user authenticated
     */
    /**
     * gives information about an user authenticated
     * @return {?}
     */
    OauthAuthenticationService.prototype.getUserInfo = /**
     * gives information about an user authenticated
     * @return {?}
     */
    function () {
        return this.http.get(this.userInfoEndpoint);
        // if (this.authBackend == AuthBackend.sceiba) {
        //     return this.http.get<any>(this.env.sceibaApi + 'me');
        // } else if (this.authBackend == AuthBackend.cuor){
        //     return this.http.get<any>(this.env.cuorApi + 'me');
        // }
    };
    /**
     * @param {?} next
     * @param {?} state
     * @return {?}
     */
    OauthAuthenticationService.prototype.canActivate = /**
     * @param {?} next
     * @param {?} state
     * @return {?}
     */
    function (next, state) {
        /** @type {?} */
        var user = this.oauthStorage.getItem('user');
        if (user) {
            return true;
        }
        else {
            this._router.navigate(['/']);
            return false;
        }
    };
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    OauthAuthenticationService.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        /** @type {?} */
        var token = this.oauthStorage.getItem('access_token');
        if (token) {
            /** @type {?} */
            var headers = req.headers.set('Authorization', 'Bearer ' + token);
            if (req.method != 'GET') {
                headers = headers.set('Content-Type', 'application/json');
                headers = headers.set('Access-Control-Allow-Origin', '*');
            }
            req = req.clone({ headers: headers });
        }
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            /* 401 means the user is not authorized. */
            if (err.status === 401) {
                _this.oauthService.initImplicitFlow();
                // this._router.navigateByUrl('/');
            }
            return throwError(err);
        })));
    };
    /**
     * Configure, this function is necessary if you will implement your own logic
     * @param authConfig: is the auth configuration.
     * you have to call `oauthService.initImplicitFlow()` in you login function
     * and `oauthService.logOut()` in you logout function
     */
    /**
     * Configure, this function is necessary if you will implement your own logic
     * @param {?} authConfig
     * @return {?}
     */
    OauthAuthenticationService.prototype.configure = /**
     * Configure, this function is necessary if you will implement your own logic
     * @param {?} authConfig
     * @return {?}
     */
    function (authConfig) {
        this.oauthService.configure(authConfig);
        this.oauthService.tokenValidationHandler = new JwksValidationHandler();
        this.oauthService.loadDiscoveryDocumentAndTryLogin();
    };
    OauthAuthenticationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    OauthAuthenticationService.ctorParameters = function () { return [
        { type: OAuthStorage },
        { type: HttpClient },
        { type: Router },
        { type: OAuthService },
        { type: OAuthResourceServerErrorHandler },
        { type: OAuthModuleConfig, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ OauthAuthenticationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OauthAuthenticationService_Factory() { return new OauthAuthenticationService(i0.ɵɵinject(i1.OAuthStorage), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i1.OAuthService), i0.ɵɵinject(i1.OAuthResourceServerErrorHandler), i0.ɵɵinject(i1.OAuthModuleConfig, 8)); }, token: OauthAuthenticationService, providedIn: "root" });
    return OauthAuthenticationService;
}());
export { OauthAuthenticationService };
if (false) {
    /** @type {?} */
    OauthAuthenticationService.prototype.userInfoEndpoint;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.authenticationSubject;
    /**
     * Observer to handles the behavior when a user authenticates
     * @type {?}
     */
    OauthAuthenticationService.prototype.authenticationSubjectObservable;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.oauthStorage;
    /**
     * @type {?}
     * @protected
     */
    OauthAuthenticationService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype._router;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.oauthService;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.errorHandler;
    /**
     * @type {?}
     * @private
     */
    OauthAuthenticationService.prototype.moduleConfig;
}
var SimpleAuthenticationService = /** @class */ (function () {
    function SimpleAuthenticationService(env, http, _router) {
        this.env = env;
        this.http = http;
        this._router = _router;
        //implements CanActivate {
        this.authBackend = AuthBackend.sceiba;
        this.authenticationSubject = new Subject();
        /**
         * Observer to handles the behavior when a user authenticates
         */
        this.authenticationSubjectObservable = this.authenticationSubject.asObservable();
    }
    /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param islogged 'true' is loggued or 'false' other way
     */
    /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param {?} islogged 'true' is loggued or 'false' other way
     * @return {?}
     */
    SimpleAuthenticationService.prototype.logguedChange = /**
     * notifies by an observable if the user is authenticated
     * for the knowledge of who uses it
     * @param {?} islogged 'true' is loggued or 'false' other way
     * @return {?}
     */
    function (islogged) {
        this.authenticationSubject.next(islogged);
    };
    /**
     * gives information about an user authenticated
     */
    /**
     * gives information about an user authenticated
     * @return {?}
     */
    SimpleAuthenticationService.prototype.getUserInfo = /**
     * gives information about an user authenticated
     * @return {?}
     */
    function () {
        if (this.authBackend == AuthBackend.sceiba) {
            return this.http.get(this.env.sceibaApi + 'me');
        }
        else if (this.authBackend == AuthBackend.cuor) {
            return this.http.get(this.env.cuorApi + 'me');
        }
    };
    SimpleAuthenticationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SimpleAuthenticationService.ctorParameters = function () { return [
        { type: Environment },
        { type: HttpClient },
        { type: Router }
    ]; };
    /** @nocollapse */ SimpleAuthenticationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SimpleAuthenticationService_Factory() { return new SimpleAuthenticationService(i0.ɵɵinject(i4.Environment), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router)); }, token: SimpleAuthenticationService, providedIn: "root" });
    return SimpleAuthenticationService;
}());
export { SimpleAuthenticationService };
if (false) {
    /** @type {?} */
    SimpleAuthenticationService.prototype.authBackend;
    /**
     * @type {?}
     * @private
     */
    SimpleAuthenticationService.prototype.authenticationSubject;
    /**
     * Observer to handles the behavior when a user authenticates
     * @type {?}
     */
    SimpleAuthenticationService.prototype.authenticationSubjectObservable;
    /**
     * @type {?}
     * @private
     */
    SimpleAuthenticationService.prototype.env;
    /**
     * @type {?}
     * @protected
     */
    SimpleAuthenticationService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SimpleAuthenticationService.prototype._router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLFVBQVUsRUFBMkUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzSCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQXVDLE1BQU0sRUFBdUIsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRyxPQUFPLEVBQWMscUJBQXFCLEVBQUUsaUJBQWlCLEVBQUUsK0JBQStCLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hKLE9BQU8sRUFBYyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7QUFLakQsSUFBWSxXQUFXO0lBQ25COztPQUVHO0lBQ0gsTUFBTSxVQUFXO0lBQ2pCOztPQUVHO0lBQ0gsSUFBSSxRQUFTO0VBQ2hCOzs7Ozs7QUFLRDtJQVFJLG9DQUVZLFlBQTBCLEVBQ3hCLElBQWdCLEVBQ2xCLE9BQWUsRUFDZixZQUEwQixFQUMxQixZQUE2QyxFQUNqQyxZQUErQjtRQUwzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN4QixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2xCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBaUM7UUFDakMsaUJBQVksR0FBWixZQUFZLENBQW1COztRQUcvQywwQkFBcUIsR0FBaUIsSUFBSSxPQUFPLEVBQUUsQ0FB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LE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQztTQUN0RDtJQUNMLENBQUM7O2dCQW5DRixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQTdIUSxXQUFXO2dCQVBYLFVBQVU7Z0JBRTJCLE1BQU07OztzQ0FQcEQ7Q0FzTEMsQUEvQ0QsSUErQ0M7U0E1Q1ksMkJBQTJCOzs7SUFFdEMsa0RBQXFEOzs7OztJQU9yRCw0REFBZ0U7Ozs7O0lBSWhFLHNFQUFtRjs7Ozs7SUFSL0UsMENBQXdCOzs7OztJQUN4QiwyQ0FBMEI7Ozs7O0lBQzFCLDhDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgIENvcHlyaWdodCAoYykgMjAyMCBVbml2ZXJzaWRhZCBkZSBQaW5hciBkZWwgUsOtbyBcIkhlcm1hbm9zIFNhw616IE1vbnRlcyBkZSBPY2FcIlxuICogICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBSb3V0ZXIsIFJvdXRlclN0YXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQXV0aENvbmZpZywgSndrc1ZhbGlkYXRpb25IYW5kbGVyLCBPQXV0aE1vZHVsZUNvbmZpZywgT0F1dGhSZXNvdXJjZVNlcnZlckVycm9ySGFuZGxlciwgT0F1dGhTZXJ2aWNlLCBPQXV0aFN0b3JhZ2UgfSBmcm9tICdhbmd1bGFyLW9hdXRoMi1vaWRjJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBVc2VyUHJvZmlsZSB9IGZyb20gJy4uLy4uL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuLi9jb3JlL3B1YmxpYy1hcGknO1xuXG4vKipcbiAqIFRoaXMgZW51bSBoYW5kbGVzIHRoZSBzZWxlY3RlZCBiYWNrZW5kXG4gKi9cbmV4cG9ydCBlbnVtIEF1dGhCYWNrZW5ke1xuICAgIC8qKlxuICAgICAqIGBzY2VpYmFgIHJlcHJlc2VudCB0aGUgU2NlaWJhJ3MgYmFja2VuZFxuICAgICAqL1xuICAgIHNjZWliYSA9ICdzY2VpYmEnLFxuICAgIC8qKlxuICAgICAqIGBjdW9yYCByZXByZXNlbnQgdGhlIEN1b3IncyBiYWNrZW5kLCBUaGUgT3JnYW5pemF0aW9ucyBTeXN0ZW1cbiAgICAgKi9cbiAgICBjdW9yID0gJ2N1b3InXG59XG4vKipcbiAqIFRoaXMgc2VydmljZSBoYW5kbGVzIHRoZSBiZWhhdmlvciB3aGVuIGEgdXNlciBhdXRoZW50aWNhdGlvbnMgYW5kXG4gKiBnaXZlcyBpbmZvcm1hdGlvbiBhYm91dCBpdC5cbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBPYXV0aEF1dGhlbnRpY2F0aW9uU2VydmljZSBpbXBsZW1lbnRzIENhbkFjdGl2YXRlLCBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gICAgLy8gcHVibGljIGF1dGhCYWNrZW5kOiBBdXRoQmFja2VuZCA9ICBBdXRoQmFja2VuZC5zY2VpYmFcbiAgICBwdWJsaWMgdXNlckluZm9FbmRwb2ludDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIC8vIHByaXZhdGUgZW52OiBFbnZpcm9ubWVudCxcbiAgICAgICAgcHJpdmF0ZSBvYXV0aFN0b3JhZ2U6IE9BdXRoU3RvcmFnZSxcbiAgICAgICAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgICAgIHByaXZhdGUgX3JvdXRlcjogUm91dGVyLFxuICAgICAgICBwcml2YXRlIG9hdXRoU2VydmljZTogT0F1dGhTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGVycm9ySGFuZGxlcjogT0F1dGhSZXNvdXJjZVNlcnZlckVycm9ySGFuZGxlcixcbiAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBtb2R1bGVDb25maWc6IE9BdXRoTW9kdWxlQ29uZmlnKSB7IH1cblxuICAgIC8vIFRPRE86IHRoaXMgb2JqZWN0IGlzIGBhbnlgIGJlY2F1c2Ugd2UgaGF2ZSB0d28gYmFja2VuZHMgd2l0aCB0d28gZGlmcmVudCB1c2VycHJvZmlsZXMuLi5cbiAgICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uU3ViamVjdDogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3QoKTtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZlciB0byBoYW5kbGVzIHRoZSBiZWhhdmlvciB3aGVuIGEgdXNlciBhdXRoZW50aWNhdGVzXG4gICAgICovXG4gICAgcHVibGljIGF1dGhlbnRpY2F0aW9uU3ViamVjdE9ic2VydmFibGUgPSB0aGlzLmF1dGhlbnRpY2F0aW9uU3ViamVjdC5hc09ic2VydmFibGUoKTtcblxuICAgIC8qKlxuICAgICAqIG5vdGlmaWVzIGJ5IGFuIG9ic2VydmFibGUgaWYgdGhlIHVzZXIgaXMgYXV0aGVudGljYXRlZFxuICAgICAqIGZvciB0aGUga25vd2xlZGdlIG9mIHdobyB1c2VzIGl0XG4gICAgICogQHBhcmFtIGlzbG9nZ2VkICd0cnVlJyBpcyBsb2dndWVkIG9yICdmYWxzZScgb3RoZXIgd2F5XG4gICAgICovXG4gICAgbG9naW4odXNlcikge1xuICAgICAgY29uc29sZS5sb2coJ2F1dGVudGljYXRpb24gc2VydmljZSB1c2VyOicsIHVzZXIpXG4gICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uU3ViamVjdC5uZXh0KHVzZXIpO1xuICAgIH1cbiAgICBsb2dvdXQoKSB7XG4gICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uU3ViamVjdC5uZXh0KG51bGwpO1xuICB9XG4gICAgLyoqXG4gICAgICogZ2l2ZXMgaW5mb3JtYXRpb24gYWJvdXQgYW4gdXNlciBhdXRoZW50aWNhdGVkXG4gICAgICovXG4gICAgZ2V0VXNlckluZm8oKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PGFueT4odGhpcy51c2VySW5mb0VuZHBvaW50KTtcbiAgICAgICAgLy8gaWYgKHRoaXMuYXV0aEJhY2tlbmQgPT0gQXV0aEJhY2tlbmQuc2NlaWJhKSB7XG4gICAgICAgIC8vICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnk+KHRoaXMuZW52LnNjZWliYUFwaSArICdtZScpO1xuICAgICAgICAvLyB9IGVsc2UgaWYgKHRoaXMuYXV0aEJhY2tlbmQgPT0gQXV0aEJhY2tlbmQuY3Vvcil7XG4gICAgICAgIC8vICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnk+KHRoaXMuZW52LmN1b3JBcGkgKyAnbWUnKTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIGNhbkFjdGl2YXRlKG5leHQ6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxib29sZWFuPiB8IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuIHtcbiAgICAgICAgY29uc3QgdXNlciA9IHRoaXMub2F1dGhTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKVxuXG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFsnLyddKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICBwdWJsaWMgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG5cbiAgICAgICAgbGV0IHRva2VuID0gdGhpcy5vYXV0aFN0b3JhZ2UuZ2V0SXRlbSgnYWNjZXNzX3Rva2VuJyk7XG5cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHJlcS5oZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHRva2VuKTtcblxuICAgICAgICAgICAgaWYgKHJlcS5tZXRob2QgIT0gJ0dFVCcpe1xuICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcSA9IHJlcS5jbG9uZSh7IGhlYWRlcnMgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgLyogNDAxIG1lYW5zIHRoZSB1c2VyIGlzIG5vdCBhdXRob3JpemVkLiAqL1xuICAgICAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYXV0aFNlcnZpY2UuaW5pdEltcGxpY2l0RmxvdygpO1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLl9yb3V0ZXIubmF2aWdhdGVCeVVybCgnLycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycik7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZSwgdGhpcyBmdW5jdGlvbiBpcyBuZWNlc3NhcnkgaWYgeW91IHdpbGwgaW1wbGVtZW50IHlvdXIgb3duIGxvZ2ljXG4gICAgICogQHBhcmFtIGF1dGhDb25maWc6IGlzIHRoZSBhdXRoIGNvbmZpZ3VyYXRpb24uXG4gICAgICogeW91IGhhdmUgdG8gY2FsbCBgb2F1dGhTZXJ2aWNlLmluaXRJbXBsaWNpdEZsb3coKWAgaW4geW91IGxvZ2luIGZ1bmN0aW9uXG4gICAgICogYW5kIGBvYXV0aFNlcnZpY2UubG9nT3V0KClgIGluIHlvdSBsb2dvdXQgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uZmlndXJlKGF1dGhDb25maWc6IEF1dGhDb25maWcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vYXV0aFNlcnZpY2UuY29uZmlndXJlKGF1dGhDb25maWcpO1xuICAgICAgICB0aGlzLm9hdXRoU2VydmljZS50b2tlblZhbGlkYXRpb25IYW5kbGVyID0gbmV3IEp3a3NWYWxpZGF0aW9uSGFuZGxlcigpO1xuICAgICAgICB0aGlzLm9hdXRoU2VydmljZS5sb2FkRGlzY292ZXJ5RG9jdW1lbnRBbmRUcnlMb2dpbigpO1xuICAgIH1cbn1cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTaW1wbGVBdXRoZW50aWNhdGlvblNlcnZpY2UgeyAvL2ltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuXG4gIHB1YmxpYyBhdXRoQmFja2VuZDogQXV0aEJhY2tlbmQgPSAgQXV0aEJhY2tlbmQuc2NlaWJhXG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIGVudjogRW52aXJvbm1lbnQsXG4gICAgICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCxcbiAgICAgIHByaXZhdGUgX3JvdXRlcjogUm91dGVyKSB7IH1cblxuICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uU3ViamVjdDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG4gIC8qKlxuICAgKiBPYnNlcnZlciB0byBoYW5kbGVzIHRoZSBiZWhhdmlvciB3aGVuIGEgdXNlciBhdXRoZW50aWNhdGVzXG4gICAqL1xuICBwdWJsaWMgYXV0aGVudGljYXRpb25TdWJqZWN0T2JzZXJ2YWJsZSA9IHRoaXMuYXV0aGVudGljYXRpb25TdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gIC8qKlxuICAgKiBub3RpZmllcyBieSBhbiBvYnNlcnZhYmxlIGlmIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0ZWRcbiAgICogZm9yIHRoZSBrbm93bGVkZ2Ugb2Ygd2hvIHVzZXMgaXRcbiAgICogQHBhcmFtIGlzbG9nZ2VkICd0cnVlJyBpcyBsb2dndWVkIG9yICdmYWxzZScgb3RoZXIgd2F5XG4gICAqL1xuICBsb2dndWVkQ2hhbmdlKGlzbG9nZ2VkOiBib29sZWFuKSB7XG4gICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uU3ViamVjdC5uZXh0KGlzbG9nZ2VkKTtcbiAgfVxuICAvKipcbiAgICogZ2l2ZXMgaW5mb3JtYXRpb24gYWJvdXQgYW4gdXNlciBhdXRoZW50aWNhdGVkXG4gICAqL1xuICBnZXRVc2VySW5mbygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgaWYgKHRoaXMuYXV0aEJhY2tlbmQgPT0gQXV0aEJhY2tlbmQuc2NlaWJhKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8YW55Pih0aGlzLmVudi5zY2VpYmFBcGkgKyAnbWUnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hdXRoQmFja2VuZCA9PSBBdXRoQmFja2VuZC5jdW9yKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnk+KHRoaXMuZW52LmN1b3JBcGkgKyAnbWUnKTtcbiAgICAgIH1cbiAgfVxuXG4gIC8vIGNhbkFjdGl2YXRlKG5leHQ6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxib29sZWFuPiB8IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuIHtcbiAgLy8gICBpZih0aGlzLmVudi51c2VyICE9IG51bGwpe1xuICAvLyAgICAgcmV0dXJuIHRydWU7XG4gIC8vICAgfVxuICAvLyAgIGVsc2V7XG4gIC8vICAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShbJy8nXSk7XG4gIC8vICAgICAgIHJldHVybiBmYWxzZTtcbiAgLy8gICB9XG5cbiAgLy8gfVxufVxuIl19