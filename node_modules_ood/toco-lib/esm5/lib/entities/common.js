/**
 * @fileoverview added by tsickle
 * Generated from: lib/entities/common.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
/**
 * La idea de esta clase es tener un deserializador.
 */
var /**
 * La idea de esta clase es tener un deserializador.
 */
EntityBase = /** @class */ (function (_super) {
    tslib_1.__extends(EntityBase, _super);
    function EntityBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} data
     * @param {?=} exclude
     * @return {?}
     */
    EntityBase.prototype.deepcopy = /**
     * @param {?} data
     * @param {?=} exclude
     * @return {?}
     */
    function (data, exclude) {
        var e_1, _a;
        if (exclude === void 0) { exclude = []; }
        /** @type {?} */
        var keys = Object.keys(this);
        try {
            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                if (data[key] && !exclude.includes(key)) {
                    // console.log('DEEEPCOPY OF : ', key, data[key])
                    // if(this.toBoolean(data[key])){
                    //   console.log('TO BOOLEAN IS TRUE !!!!!! ');
                    //   this[key] = data[key].toLowerCase() === 'true';
                    // } else {
                    // if (this[key] instanceof EntityBaseList) {
                    //   console.log('RECUSIVE CALL ON EntityBaseList',  this[key]);
                    //   this[key].deepcopy(data[key], exclude);
                    // } else{
                    if (this[key] instanceof EntityBase) {
                        console.log('RECUSIVE CALL ON EntityBase', this[key]);
                        this[key].deepcopy(data[key], exclude);
                    }
                    else {
                        this[key] = data[key];
                    }
                    // }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    EntityBase.prototype.toBoolean = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (typeof value === 'string' || value instanceof String) {
            console.log('DEEPCOPY ----------  TO BOOLEAN ------------ VAL=', value);
            console.log(value.toLowerCase() === 'true' || value.toLowerCase() === 'false');
            return value.toLowerCase() === 'true' || value.toLowerCase() === 'false';
        }
        return false;
    };
    return EntityBase;
}(Object));
/**
 * La idea de esta clase es tener un deserializador.
 */
export { EntityBase };
// export class EntityBaseList<T extends EntityBase> extends Array<T> {
//   constructor(private entityType: new () => T ){
//     super();
//   }
//   getNew() : T {
//     return new this.entityType();
//   }
//   public deepcopy(data: any[]): void {
//     for (let i = 0; i < data.length; i++) {
//       const element = data[i];
//       let e  = this.getNew();
//       e.deepcopy(element);
//       this.push(e);
//     }
//   }
//   public concat(list: EntityBaseList<T>){
//     this.concat(list);
//     return this;
//   }
// }
/**
 * Created by Edel on 02/04/2018.
 */
var 
// export class EntityBaseList<T extends EntityBase> extends Array<T> {
//   constructor(private entityType: new () => T ){
//     super();
//   }
//   getNew() : T {
//     return new this.entityType();
//   }
//   public deepcopy(data: any[]): void {
//     for (let i = 0; i < data.length; i++) {
//       const element = data[i];
//       let e  = this.getNew();
//       e.deepcopy(element);
//       this.push(e);
//     }
//   }
//   public concat(list: EntityBaseList<T>){
//     this.concat(list);
//     return this;
//   }
// }
/**
 * Created by Edel on 02/04/2018.
 */
Entity = /** @class */ (function (_super) {
    tslib_1.__extends(Entity, _super);
    function Entity() {
        var _this = _super.call(this) || this;
        _this.id = '';
        /**
         * By default is FALSE. If TRUE, means that the entity does not have valid identifiers or has not been saved to the backend.
         */
        _this.isNew = false;
        // raw_data: String;
        // created_at: String;
        // updated_at: String;
        _this.identifiers = new Array();
        return _this;
    }
    /**
     * @param {?} idtype
     * @return {?}
     */
    Entity.prototype.getIdentifierValue = /**
     * @param {?} idtype
     * @return {?}
     */
    function (idtype) {
        /** @type {?} */
        var id = this.identifiers.find((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value.idtype == idtype; }));
        return id != undefined ? id.value : '';
    };
    /**
     * @param {?} idtype
     * @param {?} value
     * @return {?}
     */
    Entity.prototype.setIdentifierValue = /**
     * @param {?} idtype
     * @param {?} value
     * @return {?}
     */
    function (idtype, value) {
        if (value != '') {
            /** @type {?} */
            var added = false;
            for (var index = 0; index < this.identifiers.length; index++) {
                if (this.identifiers[index].idtype == idtype) {
                    this.identifiers[index].value = value;
                    added = true;
                }
            }
            if (!added) {
                /** @type {?} */
                var id = new Identifier();
                id.idtype = idtype;
                id.value = value;
                this.identifiers.push(id);
            }
        }
    };
    /**
     * return JSON.stringify, using a function to exclude object fields id and uuid
     */
    /**
     * return JSON.stringify, using a function to exclude object fields id and uuid
     * @return {?}
     */
    Entity.prototype.entitystringify = /**
     * return JSON.stringify, using a function to exclude object fields id and uuid
     * @return {?}
     */
    function () {
        return JSON.stringify(this, (/**
         * @param {?} k
         * @param {?} v
         * @return {?}
         */
        function (k, v) {
            // if (k !== "id" && k !== "uuid" && k !== "isNew") {
            if (k !== "isNew" && k !== "entityType" && (v != null && v != '' && v != undefined && v != [])) {
                return v;
            }
        }));
    };
    return Entity;
}(EntityBase));
// export class EntityBaseList<T extends EntityBase> extends Array<T> {
//   constructor(private entityType: new () => T ){
//     super();
//   }
//   getNew() : T {
//     return new this.entityType();
//   }
//   public deepcopy(data: any[]): void {
//     for (let i = 0; i < data.length; i++) {
//       const element = data[i];
//       let e  = this.getNew();
//       e.deepcopy(element);
//       this.push(e);
//     }
//   }
//   public concat(list: EntityBaseList<T>){
//     this.concat(list);
//     return this;
//   }
// }
/**
 * Created by Edel on 02/04/2018.
 */
export { Entity };
if (false) {
    /** @type {?} */
    Entity.prototype.id;
    /**
     * By default is FALSE. If TRUE, means that the entity does not have valid identifiers or has not been saved to the backend.
     * @type {?}
     */
    Entity.prototype.isNew;
    /** @type {?} */
    Entity.prototype.identifiers;
}
/**
 * Entity for `Identifier` based on schema `organization-v1.0.0.json`.
 * Organization Identifier, different from GRID mapping.
 */
var /**
 * Entity for `Identifier` based on schema `organization-v1.0.0.json`.
 * Organization Identifier, different from GRID mapping.
 */
Identifier = /** @class */ (function (_super) {
    tslib_1.__extends(Identifier, _super);
    function Identifier() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Identifier value.
         */
        _this.value = "";
        return _this;
    }
    return Identifier;
}(EntityBase));
/**
 * Entity for `Identifier` based on schema `organization-v1.0.0.json`.
 * Organization Identifier, different from GRID mapping.
 */
export { Identifier };
if (false) {
    /**
     * Identifier type.
     * @type {?}
     */
    Identifier.prototype.idtype;
    /**
     * Identifier value.
     * @type {?}
     */
    Identifier.prototype.value;
}
/** @enum {string} */
var IdentifierSchemas = {
    ark: "ark",
    arxiv: "arxiv",
    doi: "doi",
    bibcode: "bibcode",
    ean8: "ean8",
    ean13: "ean13",
    handle: "handle",
    isbn: "isbn",
    issn_p: "issn_p",
    issn_l: "issn_l",
    issn_e: "issn_e",
    issn_c: "issn_c",
    issn_o: "issn_o",
    istc: "istc",
    lsid: "lsid",
    pmid: "pmid",
    pmcid: "pmcid",
    purl: "purl",
    upc: "upc",
    url: "url",
    urn: "urn",
    orcid: "orcid",
    gnd: "gnd",
    ads: "ads",
    oai: "oai",
    prnps: "prnps",
    ernps: "ernps",
    oaiurl: "oaiurl",
    grid: "grid",
    wkdata: "wkdata",
    ror: "ror",
    isni: "isni",
    fudref: "fudref",
    orgref: "orgref",
    reup: "reup",
};
export { IdentifierSchemas };
var Links = /** @class */ (function (_super) {
    tslib_1.__extends(Links, _super);
    function Links() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.self = "";
        _this.next = "";
        _this.prev = "";
        return _this;
    }
    return Links;
}(EntityBase));
export { Links };
if (false) {
    /** @type {?} */
    Links.prototype.self;
    /** @type {?} */
    Links.prototype.next;
    /** @type {?} */
    Links.prototype.prev;
}
var AggrBucket = /** @class */ (function (_super) {
    tslib_1.__extends(AggrBucket, _super);
    function AggrBucket() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.doc_count = 0;
        _this.key = "";
        return _this;
    }
    return AggrBucket;
}(EntityBase));
export { AggrBucket };
if (false) {
    /** @type {?} */
    AggrBucket.prototype.doc_count;
    /** @type {?} */
    AggrBucket.prototype.key;
}
var AggrMeta = /** @class */ (function (_super) {
    tslib_1.__extends(AggrMeta, _super);
    function AggrMeta() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.order = 0;
        _this.title = "";
        return _this;
    }
    return AggrMeta;
}(EntityBase));
if (false) {
    /** @type {?} */
    AggrMeta.prototype.order;
    /** @type {?} */
    AggrMeta.prototype.title;
}
var Aggr = /** @class */ (function (_super) {
    tslib_1.__extends(Aggr, _super);
    function Aggr() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buckets = new Array();
        _this.meta = new AggrMeta();
        _this.doc_count_error_upper_bound = 0;
        _this.sum_other_doc_count = 0;
        return _this;
    }
    return Aggr;
}(EntityBase));
export { Aggr };
if (false) {
    /** @type {?} */
    Aggr.prototype.buckets;
    /** @type {?} */
    Aggr.prototype.meta;
    /** @type {?} */
    Aggr.prototype.doc_count_error_upper_bound;
    /** @type {?} */
    Aggr.prototype.sum_other_doc_count;
}
/**
 * @template T
 */
var /**
 * @template T
 */
Hit = /** @class */ (function (_super) {
    tslib_1.__extends(Hit, _super);
    function Hit() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = "";
        _this.created = "";
        _this.updated = "";
        _this.links = new Links();
        _this.revision = 0;
        return _this;
    }
    return Hit;
}(EntityBase));
/**
 * @template T
 */
export { Hit };
if (false) {
    /** @type {?} */
    Hit.prototype.id;
    /** @type {?} */
    Hit.prototype.created;
    /** @type {?} */
    Hit.prototype.updated;
    /** @type {?} */
    Hit.prototype.links;
    /** @type {?} */
    Hit.prototype.metadata;
    /** @type {?} */
    Hit.prototype.revision;
    /** @type {?} */
    Hit.prototype.revisions;
}
/**
 * @template T
 */
var /**
 * @template T
 */
HitList = /** @class */ (function (_super) {
    tslib_1.__extends(HitList, _super);
    function HitList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hits = new Array();
        return _this;
    }
    return HitList;
}(EntityBase));
/**
 * @template T
 */
export { HitList };
if (false) {
    /** @type {?} */
    HitList.prototype.hits;
    /** @type {?} */
    HitList.prototype.total;
}
/**
 * @template T
 */
var /**
 * @template T
 */
SearchResponse = /** @class */ (function (_super) {
    tslib_1.__extends(SearchResponse, _super);
    function SearchResponse() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.aggregations = {};
        _this.hits = new HitList();
        _this.links = new Links();
        return _this;
    }
    return SearchResponse;
}(EntityBase));
/**
 * @template T
 */
export { SearchResponse };
if (false) {
    /** @type {?} */
    SearchResponse.prototype.aggregations;
    /** @type {?} */
    SearchResponse.prototype.hits;
    /** @type {?} */
    SearchResponse.prototype.links;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvZW50aXRpZXMvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFNQTs7OztJQUFnQyxzQ0FBTTtJQUF0Qzs7SUFrQ0EsQ0FBQzs7Ozs7O0lBakNRLDZCQUFROzs7OztJQUFmLFVBQWdCLElBQVMsRUFBRSxPQUFzQjs7UUFBdEIsd0JBQUEsRUFBQSxZQUFzQjs7WUFDekMsSUFBSSxHQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOztZQUV4QyxLQUFrQixJQUFBLFNBQUEsaUJBQUEsSUFBSSxDQUFBLDBCQUFBLDRDQUFFO2dCQUFuQixJQUFNLEdBQUcsaUJBQUE7Z0JBQ1osSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUN2QyxpREFBaUQ7b0JBQ2pELGlDQUFpQztvQkFDakMsK0NBQStDO29CQUMvQyxvREFBb0Q7b0JBQ3BELFdBQVc7b0JBQ1QsNkNBQTZDO29CQUM3QyxnRUFBZ0U7b0JBQ2hFLDRDQUE0QztvQkFDNUMsVUFBVTtvQkFDUixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxVQUFVLEVBQUU7d0JBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO3FCQUN4Qzt5QkFBTzt3QkFDTixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN2QjtvQkFDSCxJQUFJO2lCQUVQO2FBQ0Y7Ozs7Ozs7OztJQUNILENBQUM7Ozs7OztJQUNPLDhCQUFTOzs7OztJQUFq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Q1Isc0JBQWE7O0lBQ2Isc0JBQWE7O0lBQ2Isb0JBQW9COztJQUNwQix1QkFBWTs7SUFDWix1QkFBYTs7SUFFYix3QkFBMkI7Ozs7O0FBRzdCOzs7O0lBQWdDLG1DQUFVO0lBQTFDO1FBQUEscUVBR0M7UUFGQyxVQUFJLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQzs7SUFFN0IsQ0FBQztJQUFELGNBQUM7QUFBRCxDQUFDLEFBSEQsQ0FBZ0MsVUFBVSxHQUd6Qzs7Ozs7OztJQUZDLHVCQUEyQjs7SUFDM0Isd0JBQVM7Ozs7O0FBR1g7Ozs7SUFBdUMsMENBQVU7SUFBakQ7UUFBQSxxRUFJQztRQUhDLGtCQUFZLEdBQTJCLEVBQUUsQ0FBQztRQUMxQyxVQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUssQ0FBQztRQUN4QixXQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQzs7SUFDdEIsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FBQyxBQUpELENBQXVDLFVBQVUsR0FJaEQ7Ozs7Ozs7SUFIQyxzQ0FBMEM7O0lBQzFDLDhCQUF3Qjs7SUFDeEIsK0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICAgQ29weXJpZ2h0IChjKSAyMDIwIFVuaXZlcnNpZGFkIGRlIFBpbmFyIGRlbCBSw61vIFwiSGVybWFub3MgU2HDrXogTW9udGVzIGRlIE9jYVwiXG4gKiAgIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuLyoqKiBMYSBpZGVhIGRlIGVzdGEgY2xhc2UgZXMgdGVuZXIgdW4gZGVzZXJpYWxpemFkb3IuICovXG5leHBvcnQgY2xhc3MgRW50aXR5QmFzZSBleHRlbmRzIE9iamVjdCB7XG4gIHB1YmxpYyBkZWVwY29weShkYXRhOiBhbnksIGV4Y2x1ZGU6IHN0cmluZ1tdID0gW10pOiB2b2lkIHtcbiAgICBjb25zdCBrZXlzOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHRoaXMpO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgaWYgKGRhdGFba2V5XSAmJiAhZXhjbHVkZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdERUVFUENPUFkgT0YgOiAnLCBrZXksIGRhdGFba2V5XSlcbiAgICAgICAgLy8gaWYodGhpcy50b0Jvb2xlYW4oZGF0YVtrZXldKSl7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2coJ1RPIEJPT0xFQU4gSVMgVFJVRSAhISEhISEgJyk7XG4gICAgICAgIC8vICAgdGhpc1trZXldID0gZGF0YVtrZXldLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiAodGhpc1trZXldIGluc3RhbmNlb2YgRW50aXR5QmFzZUxpc3QpIHtcbiAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKCdSRUNVU0lWRSBDQUxMIE9OIEVudGl0eUJhc2VMaXN0JywgIHRoaXNba2V5XSk7XG4gICAgICAgICAgLy8gICB0aGlzW2tleV0uZGVlcGNvcHkoZGF0YVtrZXldLCBleGNsdWRlKTtcbiAgICAgICAgICAvLyB9IGVsc2V7XG4gICAgICAgICAgICBpZiAodGhpc1trZXldIGluc3RhbmNlb2YgRW50aXR5QmFzZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUkVDVVNJVkUgQ0FMTCBPTiBFbnRpdHlCYXNlJywgIHRoaXNba2V5XSk7XG4gICAgICAgICAgICAgIHRoaXNba2V5XS5kZWVwY29weShkYXRhW2tleV0sIGV4Y2x1ZGUpO1xuICAgICAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXNba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyB9XG5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSB0b0Jvb2xlYW4odmFsdWUpe1xuICAgIGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcpe1xuICAgICAgY29uc29sZS5sb2coJ0RFRVBDT1BZIC0tLS0tLS0tLS0gIFRPIEJPT0xFQU4gLS0tLS0tLS0tLS0tIFZBTD0nLHZhbHVlKVxuICAgICAgY29uc29sZS5sb2codmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnIHx8IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZScpXG4gICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnIHx8IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZSc7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBleHBvcnQgY2xhc3MgRW50aXR5QmFzZUxpc3Q8VCBleHRlbmRzIEVudGl0eUJhc2U+IGV4dGVuZHMgQXJyYXk8VD4ge1xuXG4vLyAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZW50aXR5VHlwZTogbmV3ICgpID0+IFQgKXtcbi8vICAgICBzdXBlcigpO1xuLy8gICB9XG5cbi8vICAgZ2V0TmV3KCkgOiBUIHtcbi8vICAgICByZXR1cm4gbmV3IHRoaXMuZW50aXR5VHlwZSgpO1xuLy8gICB9XG5cbi8vICAgcHVibGljIGRlZXBjb3B5KGRhdGE6IGFueVtdKTogdm9pZCB7XG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICBjb25zdCBlbGVtZW50ID0gZGF0YVtpXTtcbi8vICAgICAgIGxldCBlICA9IHRoaXMuZ2V0TmV3KCk7XG4vLyAgICAgICBlLmRlZXBjb3B5KGVsZW1lbnQpO1xuLy8gICAgICAgdGhpcy5wdXNoKGUpO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICBwdWJsaWMgY29uY2F0KGxpc3Q6IEVudGl0eUJhc2VMaXN0PFQ+KXtcbi8vICAgICB0aGlzLmNvbmNhdChsaXN0KTtcbi8vICAgICByZXR1cm4gdGhpcztcbi8vICAgfVxuLy8gfVxuXG4vKipcbiAqIENyZWF0ZWQgYnkgRWRlbCBvbiAwMi8wNC8yMDE4LlxuICovXG5leHBvcnQgY2xhc3MgRW50aXR5IGV4dGVuZHMgRW50aXR5QmFzZSB7XG4gIGlkOiBzdHJpbmcgPSAnJztcblxuICAvKiogQnkgZGVmYXVsdCBpcyBGQUxTRS4gSWYgVFJVRSwgbWVhbnMgdGhhdCB0aGUgZW50aXR5IGRvZXMgbm90IGhhdmUgdmFsaWQgaWRlbnRpZmllcnMgb3IgaGFzIG5vdCBiZWVuIHNhdmVkIHRvIHRoZSBiYWNrZW5kLiAgKi9cbiAgaXNOZXcgPSBmYWxzZTtcbiAgLy8gcmF3X2RhdGE6IFN0cmluZztcbiAgLy8gY3JlYXRlZF9hdDogU3RyaW5nO1xuICAvLyB1cGRhdGVkX2F0OiBTdHJpbmc7XG5cbiAgaWRlbnRpZmllcnM6QXJyYXk8SWRlbnRpZmllcj4gPSBuZXcgQXJyYXk8SWRlbnRpZmllcj4oKTtcbiAgZ2V0SWRlbnRpZmllclZhbHVlKGlkdHlwZTogSWRlbnRpZmllclNjaGVtYXMpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlkID0gdGhpcy5pZGVudGlmaWVycy5maW5kKCh2YWx1ZSkgPT4gdmFsdWUuaWR0eXBlID09IGlkdHlwZSk7XG4gICAgcmV0dXJuIGlkICE9IHVuZGVmaW5lZCA/IGlkLnZhbHVlIDogJyc7XG4gIH1cblxuICBzZXRJZGVudGlmaWVyVmFsdWUoaWR0eXBlOiBJZGVudGlmaWVyU2NoZW1hcywgdmFsdWU6IHN0cmluZykge1xuICAgIGlmKHZhbHVlICE9ICcnKXtcbiAgICAgIGxldCBhZGRlZCA9IGZhbHNlO1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaWRlbnRpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGlmKHRoaXMuaWRlbnRpZmllcnNbaW5kZXhdLmlkdHlwZSA9PSBpZHR5cGUpe1xuICAgICAgICAgIHRoaXMuaWRlbnRpZmllcnNbaW5kZXhdLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgYWRkZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWFkZGVkKSB7XG4gICAgICAgIGNvbnN0IGlkID0gbmV3IElkZW50aWZpZXIoKTtcbiAgICAgICAgaWQuaWR0eXBlID0gaWR0eXBlO1xuICAgICAgICBpZC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmlkZW50aWZpZXJzLnB1c2goaWQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIHJldHVybiBKU09OLnN0cmluZ2lmeSwgdXNpbmcgYSBmdW5jdGlvbiB0byBleGNsdWRlIG9iamVjdCBmaWVsZHMgaWQgYW5kIHV1aWRcbiAgICovXG4gIGVudGl0eXN0cmluZ2lmeSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLCAoaywgdikgPT4ge1xuICAgICAgLy8gaWYgKGsgIT09IFwiaWRcIiAmJiBrICE9PSBcInV1aWRcIiAmJiBrICE9PSBcImlzTmV3XCIpIHtcbiAgICAgIGlmIChrICE9PSBcImlzTmV3XCIgJiYgayAhPT0gXCJlbnRpdHlUeXBlXCIgJiYgKHYgIT0gbnVsbCAmJiB2ICE9ICcnICYmIHYgIT0gdW5kZWZpbmVkICYmIHYgIT0gW10pKSB7XG4gICAgICAgIHJldHVybiB2O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogRW50aXR5IGZvciBgSWRlbnRpZmllcmAgYmFzZWQgb24gc2NoZW1hIGBvcmdhbml6YXRpb24tdjEuMC4wLmpzb25gLlxuICogT3JnYW5pemF0aW9uIElkZW50aWZpZXIsIGRpZmZlcmVudCBmcm9tIEdSSUQgbWFwcGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIElkZW50aWZpZXIgZXh0ZW5kcyBFbnRpdHlCYXNlIHtcbiAgLyoqXG4gICAqIElkZW50aWZpZXIgdHlwZS5cbiAgICovXG4gIGlkdHlwZTogSWRlbnRpZmllclNjaGVtYXM7XG5cbiAgLyoqXG4gICAqIElkZW50aWZpZXIgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogc3RyaW5nID0gXCJcIjtcbn1cblxuXG5leHBvcnQgZW51bSBJZGVudGlmaWVyU2NoZW1hcyB7XG4gIGFyayA9IFwiYXJrXCIsXG4gIGFyeGl2ID0gXCJhcnhpdlwiLFxuICBkb2kgPSBcImRvaVwiLFxuICBiaWJjb2RlID0gXCJiaWJjb2RlXCIsXG4gIGVhbjggPSBcImVhbjhcIixcbiAgZWFuMTMgPSBcImVhbjEzXCIsXG4gIGhhbmRsZSA9IFwiaGFuZGxlXCIsXG4gIGlzYm4gPSBcImlzYm5cIixcbiAgaXNzbl9wID0gXCJpc3NuX3BcIixcbiAgaXNzbl9sID0gXCJpc3NuX2xcIixcbiAgaXNzbl9lID0gXCJpc3NuX2VcIixcbiAgaXNzbl9jID0gXCJpc3NuX2NcIixcbiAgaXNzbl9vID0gXCJpc3NuX29cIixcbiAgaXN0YyA9IFwiaXN0Y1wiLFxuICBsc2lkID0gXCJsc2lkXCIsXG4gIHBtaWQgPSBcInBtaWRcIixcbiAgcG1jaWQgPSBcInBtY2lkXCIsXG4gIHB1cmwgPSBcInB1cmxcIixcbiAgdXBjID0gXCJ1cGNcIixcbiAgdXJsID0gXCJ1cmxcIixcbiAgdXJuID0gXCJ1cm5cIixcbiAgb3JjaWQgPSBcIm9yY2lkXCIsXG4gIGduZCA9IFwiZ25kXCIsXG4gIGFkcyA9IFwiYWRzXCIsXG4gIG9haSA9IFwib2FpXCIsXG4gIHBybnBzID0gXCJwcm5wc1wiLFxuICBlcm5wcyA9IFwiZXJucHNcIixcbiAgb2FpdXJsID0gXCJvYWl1cmxcIixcbiAgZ3JpZCA9IFwiZ3JpZFwiLFxuICB3a2RhdGEgPSBcIndrZGF0YVwiLFxuICByb3IgPSBcInJvclwiLFxuICBpc25pID0gXCJpc25pXCIsXG4gIGZ1ZHJlZiA9IFwiZnVkcmVmXCIsXG4gIG9yZ3JlZiA9IFwib3JncmVmXCIsXG4gIHJldXAgPSBcInJldXBcIixcbn1cblxuZXhwb3J0IGNsYXNzIExpbmtzIGV4dGVuZHMgRW50aXR5QmFzZSB7XG4gIHNlbGYgPSBcIlwiO1xuICBuZXh0ID0gXCJcIjtcbiAgcHJldiA9IFwiXCI7XG59XG5cbmV4cG9ydCBjbGFzcyBBZ2dyQnVja2V0IGV4dGVuZHMgRW50aXR5QmFzZSB7XG4gIGRvY19jb3VudCA9IDA7XG4gIGtleSA9IFwiXCI7XG59XG5jbGFzcyBBZ2dyTWV0YSBleHRlbmRzIEVudGl0eUJhc2Uge1xuICBvcmRlciA9IDA7XG4gIHRpdGxlID0gXCJcIjtcbn1cblxuZXhwb3J0IGNsYXNzIEFnZ3IgZXh0ZW5kcyBFbnRpdHlCYXNlIHtcbiAgYnVja2V0czogQXJyYXk8QWdnckJ1Y2tldD4gPSBuZXcgQXJyYXk8QWdnckJ1Y2tldD4oKTtcbiAgbWV0YT8gPSBuZXcgQWdnck1ldGEoKTtcbiAgZG9jX2NvdW50X2Vycm9yX3VwcGVyX2JvdW5kID0gMDtcbiAgc3VtX290aGVyX2RvY19jb3VudCA9IDA7XG59XG5cbmV4cG9ydCBjbGFzcyBIaXQ8VD4gZXh0ZW5kcyBFbnRpdHlCYXNlIHtcbiAgaWQgPSBcIlwiO1xuICBjcmVhdGVkID0gXCJcIjtcbiAgdXBkYXRlZCA9IFwiXCI7XG4gIGxpbmtzID0gbmV3IExpbmtzKCk7XG4gIG1ldGFkYXRhOiBUO1xuICByZXZpc2lvbiA9IDA7XG5cbiAgcmV2aXNpb25zPyA6IEFycmF5PEhpdDxUPj47XG59XG5cbmV4cG9ydCBjbGFzcyBIaXRMaXN0PFQ+IGV4dGVuZHMgRW50aXR5QmFzZSB7XG4gIGhpdHMgPSBuZXcgQXJyYXk8SGl0PFQ+PigpO1xuICB0b3RhbDogMDtcbn1cblxuZXhwb3J0IGNsYXNzIFNlYXJjaFJlc3BvbnNlPFQ+IGV4dGVuZHMgRW50aXR5QmFzZSB7XG4gIGFnZ3JlZ2F0aW9uczogeyBbaWQ6IHN0cmluZ106IEFnZ3IgfSA9IHt9O1xuICBoaXRzID0gbmV3IEhpdExpc3Q8VD4oKTtcbiAgbGlua3MgPSBuZXcgTGlua3MoKTtcbn1cbiJdfQ==