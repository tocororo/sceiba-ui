/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/form-container/form-container.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { Environment } from '../../../core/env';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../../core/env";
/**
 * This service is deprecated.
 */
var FormContainerService = /** @class */ (function () {
    function FormContainerService(httpClient, env) {
        this.httpClient = httpClient;
        this.env = env;
        this.httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
                'Authorization': 'Bearer '
            })
        };
    }
    /**
     * Sends data to the server.
     * @param endPoint The data end point. For example, `/add_new`.
     * @param token The autorization token.
     * @param data The data to send, must be parsed.
     */
    /**
     * Sends data to the server.
     * @param {?} endPoint The data end point. For example, `/add_new`.
     * @param {?} token The autorization token.
     * @param {?} data The data to send, must be parsed.
     * @return {?}
     */
    FormContainerService.prototype.sendPostData = /**
     * Sends data to the server.
     * @param {?} endPoint The data end point. For example, `/add_new`.
     * @param {?} token The autorization token.
     * @param {?} data The data to send, must be parsed.
     * @return {?}
     */
    function (endPoint, token, data) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + token);
        return this.httpClient.post(this.env.sceibaApi + endPoint, data, this.httpOptions);
    };
    FormContainerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FormContainerService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Environment }
    ]; };
    /** @nocollapse */ FormContainerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FormContainerService_Factory() { return new FormContainerService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Environment)); }, token: FormContainerService, providedIn: "root" });
    return FormContainerService;
}());
export { FormContainerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormContainerService.prototype.httpOptions;
    /**
     * @type {?}
     * @private
     */
    FormContainerService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    FormContainerService.prototype.env;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250YWluZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2Zvcm1zL2NvbnRhaW5lci9mb3JtLWNvbnRhaW5lci9mb3JtLWNvbnRhaW5lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRy9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7OztBQU9oRDtJQWFDLDhCQUEyQixVQUFzQixFQUFVLEdBQWdCO1FBQWhELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFhO1FBUm5FLGdCQUFXLEdBQUc7WUFDckIsT0FBTyxFQUFFLElBQUksV0FBVyxDQUN2QjtnQkFDQyxjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxlQUFlLEVBQUUsU0FBUzthQUMxQixDQUFDO1NBQ0gsQ0FBQztJQUdBLENBQUM7SUFFSDs7Ozs7T0FLRzs7Ozs7Ozs7SUFDSSwyQ0FBWTs7Ozs7OztJQUFuQixVQUFvQixRQUFnQixFQUFFLEtBQWEsRUFBRSxJQUFTO1FBRTdELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBRTVGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQWlCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBRSxDQUFDO0lBQ25HLENBQUM7O2dCQTNCRCxVQUFVLFNBQUM7b0JBQ1gsVUFBVSxFQUFFLE1BQU07aUJBQ2xCOzs7O2dCQVpxQixVQUFVO2dCQUd2QixXQUFXOzs7K0JBTHBCO0NBd0NDLEFBNUJELElBNEJDO1NBekJZLG9CQUFvQjs7Ozs7O0lBRWhDLDJDQU1FOzs7OztJQUVpQiwwQ0FBOEI7Ozs7O0lBQUUsbUNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwSGVhZGVycywgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Vudic7XG5cbmltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9wdWJsaWMtYXBpJztcblxuLyoqXG4gKiBUaGlzIHNlcnZpY2UgaXMgZGVwcmVjYXRlZC5cbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUNvbnRhaW5lclNlcnZpY2Uge1xuXG5cdHByaXZhdGUgaHR0cE9wdGlvbnMgPSB7XG5cdFx0aGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKFxuXHRcdFx0e1xuXHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdFx0XHQnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJ1xuXHRcdFx0fSlcblx0fTtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBwcml2YXRlIGVudjogRW52aXJvbm1lbnQpXG5cdHsgfVxuXG5cdC8qKlxuXHQgKiBTZW5kcyBkYXRhIHRvIHRoZSBzZXJ2ZXIuXG5cdCAqIEBwYXJhbSBlbmRQb2ludCBUaGUgZGF0YSBlbmQgcG9pbnQuIEZvciBleGFtcGxlLCBgL2FkZF9uZXdgLlxuXHQgKiBAcGFyYW0gdG9rZW4gVGhlIGF1dG9yaXphdGlvbiB0b2tlbi5cblx0ICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gc2VuZCwgbXVzdCBiZSBwYXJzZWQuXG5cdCAqL1xuXHRwdWJsaWMgc2VuZFBvc3REYXRhKGVuZFBvaW50OiBzdHJpbmcsIHRva2VuOiBzdHJpbmcsIGRhdGE6IGFueSApOiBPYnNlcnZhYmxlPFJlc3BvbnNlPGFueT4+IHtcblxuXHRcdHRoaXMuaHR0cE9wdGlvbnMuaGVhZGVycyA9IHRoaXMuaHR0cE9wdGlvbnMuaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyICcgKyB0b2tlbik7XG5cblx0XHRyZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8UmVzcG9uc2U8YW55Pj4oIHRoaXMuZW52LnNjZWliYUFwaStlbmRQb2ludCwgZGF0YSwgdGhpcy5odHRwT3B0aW9ucyApO1xuXHR9XG59XG4iXX0=