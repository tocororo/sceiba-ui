/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/form-container/form-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from "@angular/core";
import { ContainerControl } from "../container.control";
/**
 * This interface is deprecated.
 * @record
 */
export function FormContainerAction() { }
if (false) {
    /**
     * @param {?} data
     * @return {?}
     */
    FormContainerAction.prototype.doit = function (data) { };
}
/**
 * This interface is deprecated.
 * An interface that represents the content of an expansion control.
 * @record
 */
export function PanelContent_Depr() { }
if (false) {
    /**
     * Returns the panel's title.
     * @type {?}
     */
    PanelContent_Depr.prototype.title;
    /**
     * Returns the panel's description.
     * @type {?}
     */
    PanelContent_Depr.prototype.description;
    /**
     * Returns the panel's icon name.
     * @type {?}
     */
    PanelContent_Depr.prototype.iconName;
    /**
     * Returns the action and action labels for each panel.
     * @type {?|undefined}
     */
    PanelContent_Depr.prototype.action;
    /** @type {?|undefined} */
    PanelContent_Depr.prototype.actionLabel;
    /**
     * Returns true is the panel is open; otherwise, false.
     * @type {?|undefined}
     */
    PanelContent_Depr.prototype.open;
}
/**
 * This component is deprecated.
 * Represents a control that contains a list of panels and sends that information to the server.
 */
var FormContainerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FormContainerComponent, _super);
    function FormContainerComponent() {
        var _this = _super.call(this) || this;
        _this.useAccordion = true;
        _this.useContainer = true;
        _this.actionButtonIsStepperNext = false;
        _this.deleteValuesAfterAction = true;
        /* By default, the first panel is expanded. */
        _this.step = 0;
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    FormContainerComponent.prototype.setFormGroupToPanels = /**
     * @private
     * @return {?}
     */
    function () {
        this.panelsContent.forEach((/**
         * @param {?} panel
         * @return {?}
         */
        function (panel) {
            panel.formSection = panel.formSection;
        }));
    };
    /**
     * @return {?}
     */
    FormContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log("on INIT call", this.panelsContent);
        /* Sets the default values. */
        if (this.panelsContent.length > 0) {
            this.content = {
                formSection: this.panelsContent[0].formSection,
                name: "FormContainerComponent",
                label: "FormContainerComponent_Label",
                type: undefined,
                value: "FormContainerComponent",
                //            'width': '100%',
                ariaLabel: "FormContainerComponent",
                formSectionContent: this.panelsContent[0].formSectionContent,
            };
        }
        this.init(undefined);
        // if actionLabel is undefined, means that there is no actionLabel, the user must decide!!!
        // if (this.actionLabel == undefined) this.actionLabel = 'Adicionar';
        this.setFormGroupToPanels();
    };
    /**
     * @return {?}
     */
    FormContainerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        console.log("on CHANGES call", this.panelsContent);
        this.ngOnInit();
        // this.init(this.content.label, false, false);
        // this.setFormGroupToPanels();
    };
    /**
     * Sets the new expanded panel position.
     * @param newStep The new position.
     */
    /**
     * Sets the new expanded panel position.
     * @param {?} newStep The new position.
     * @return {?}
     */
    FormContainerComponent.prototype.setStep = /**
     * Sets the new expanded panel position.
     * @param {?} newStep The new position.
     * @return {?}
     */
    function (newStep) {
        this.step = newStep;
    };
    /**
     * Sets the expanded panel position to the next position.
     */
    /**
     * Sets the expanded panel position to the next position.
     * @return {?}
     */
    FormContainerComponent.prototype.nextStep = /**
     * Sets the expanded panel position to the next position.
     * @return {?}
     */
    function () {
        this.step++;
    };
    /**
     * Sets the expanded panel position to the previous position.
     */
    /**
     * Sets the expanded panel position to the previous position.
     * @return {?}
     */
    FormContainerComponent.prototype.prevStep = /**
     * Sets the expanded panel position to the previous position.
     * @return {?}
     */
    function () {
        this.step--;
    };
    /**
     * Sends data to the server. Collects all added information from the component.
     * Creates a JSON object based on `form.name` and `form.value` fields.
     */
    /**
     * Sends data to the server. Collects all added information from the component.
     * Creates a JSON object based on `form.name` and `form.value` fields.
     * @return {?}
     */
    FormContainerComponent.prototype.doAction = /**
     * Sends data to the server. Collects all added information from the component.
     * Creates a JSON object based on `form.name` and `form.value` fields.
     * @return {?}
     */
    function () {
        //TODO: poner este method in `ContainerControl`.
        //TODO: poner este method in `ContainerControl`.
        /* Prepares all data. */
        /** @type {?} */
        var data = {};
        this.panelsContent.forEach((/**
         * @param {?} panel
         * @return {?}
         */
        function (panel) {
            panel.formSectionContent.forEach((/**
             * @param {?} controlContent
             * @return {?}
             */
            function (controlContent) {
                data[controlContent.name] = controlContent.value;
            }));
        }));
        if (this.action) {
            this.action.doit(data);
        }
        if (this.deleteValuesAfterAction) {
            this.panelsContent.forEach((/**
             * @param {?} panel
             * @return {?}
             */
            function (panel) {
                panel.formSectionContent.forEach((/**
                 * @param {?} controlContent
                 * @return {?}
                 */
                function (controlContent) {
                    controlContent.value = undefined;
                }));
            }));
        }
    };
    FormContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: "toco-form-container",
                    template: "\n<ng-container *ngIf=\"(panelsContent)\">\n\n    <ng-container *ngIf=\"useContainer\">\n        <mat-accordion *ngIf=\"(useAccordion)\" class=\"toco-form-container\" multi=\"true\">\n\n            <mat-expansion-panel *ngFor=\"let panel of panelsContent; let newStep = index; let count=count\"\n                [expanded]=\"panel.open\" (opened)=\"setStep(newStep)\">\n        \n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        {{ panel.title }}\n                    </mat-panel-title>\n                    <mat-panel-description>\n                        {{ panel.description }}\n                        <mat-icon>{{ panel.iconName }}</mat-icon>\n                    </mat-panel-description>\n                </mat-expansion-panel-header>\n        \n                <component-factory-depr [componentsContent]=\"panel.formSectionContent\"></component-factory-depr>\n        \n                <mat-action-row *ngIf=\"panel.actionLabel\">\n                    <!-- <button mat-button *ngIf=\"newStep > 0\" color=\"warn\" (click)=\"prevStep()\">Anterior</button>\n                    <button mat-button *ngIf=\"newStep != count-1\" color=\"primary\" (click)=\"nextStep()\">Siguente</button> -->\n        \n                    <button *ngIf=\"panel.actionLabel\" mat-button color=\"accent\" (click)=\"panel.action.doit(newStep)\">{{ panel.actionLabel }}</button>\n                    <!-- <button *ngIf=\"i == l-1 && actionButtonIsStepperNext\" mat-button matStepperNext color=\"primary\" (click)=\"doAction()\">{{actionLabel}}</button> -->\n                </mat-action-row>\n\n            </mat-expansion-panel>\n\n            <button *ngIf=\"actionLabel\" mat-raised-button color=\"primary\" (click)=\"doAction()\">{{actionLabel}}</button>\n        </mat-accordion>\n        \n        <div *ngIf=\"(!useAccordion)\" class=\"toco-form-container\">\n            <div *ngFor=\"let panel of panelsContent; let i=index; let count=count\">\n                <mat-card [ngStyle]=\"{'margin-bottom': '1em'}\">\n                    <mat-card-header>\n                        <mat-card-title>\n                            {{ panel.title }}\n                        </mat-card-title>\n                        <mat-card-subtitle *ngIf=\"panel.description\">\n                            {{ panel.description }}\n                            <mat-icon>{{ panel.iconName }}</mat-icon>\n                        </mat-card-subtitle>\n                    </mat-card-header>\n            \n                    <mat-card-content>\n                        <component-factory-depr [componentsContent]=\"panel.formSectionContent\"></component-factory-depr>\n                    </mat-card-content>\n            \n                    <mat-card-actions *ngIf=\"i == count-1 && actionLabel\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n                        <button mat-button color=\"primary\" (click)=\"doAction()\">{{ actionLabel }}</button>\n                    </mat-card-actions>\n                </mat-card>\n            </div>\n        </div>\n    </ng-container>\n\n    <div fxLayout=\"column\" *ngIf=\"!useContainer\">\n        <div *ngFor=\"let panel of panelsContent; let i=index; let count=count\" class=\"toco-form-container\">\n            <component-factory-depr [componentsContent]=\"panel.formSectionContent\"></component-factory-depr>\n        </div>\n        <div  *ngIf=\"actionLabel\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n            <button mat-button color=\"primary\" (click)=\"doAction()\">{{ actionLabel }}</button>\n        </div>\n    </div>\n\n</ng-container>\n",
                    styles: [".toco-form-container{width:100%;margin-bottom:1em}"]
                }] }
    ];
    /** @nocollapse */
    FormContainerComponent.ctorParameters = function () { return []; };
    FormContainerComponent.propDecorators = {
        panelsContent: [{ type: Input }],
        useAccordion: [{ type: Input }],
        useContainer: [{ type: Input }],
        actionButtonIsStepperNext: [{ type: Input }],
        action: [{ type: Input }],
        actionLabel: [{ type: Input }],
        deleteValuesAfterAction: [{ type: Input }]
    };
    return FormContainerComponent;
}(ContainerControl));
export { FormContainerComponent };
if (false) {
    /**
     * Input field that contains the content of this class. The array of panels to show.
     * @type {?}
     */
    FormContainerComponent.prototype.panelsContent;
    /** @type {?} */
    FormContainerComponent.prototype.useAccordion;
    /** @type {?} */
    FormContainerComponent.prototype.useContainer;
    /** @type {?} */
    FormContainerComponent.prototype.actionButtonIsStepperNext;
    /** @type {?} */
    FormContainerComponent.prototype.action;
    /**
     * An string that represents the action label of the last panel.
     * @type {?}
     */
    FormContainerComponent.prototype.actionLabel;
    /** @type {?} */
    FormContainerComponent.prototype.deleteValuesAfterAction;
    /**
     * The current expanded panel position.
     * @type {?}
     */
    FormContainerComponent.prototype.step;
}
//# sourceMappingURL=data:application/json;base64,