/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/container.control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Input, ViewChild } from '@angular/core';
import { FormArray, FormGroup } from '@angular/forms';
import { GetViewContainerDirective } from '../../core/utils/get-view-container.directive';
import { FormFieldControl, cloneFormControl, cloneFormSection } from '../form-field.control';
/**
 * A base interface that represents the content of a `ContainerControl`.
 * @record
 */
export function ContainerContent() { }
if (false) {
    /**
     * Returns an array of controls that represents the `ContainerControl`'s child controls that are
     * stored in the `content.formSection`; that is, `content.containerControlChildren` and `content.formSection`
     * have the same length.
     * It is always set internally.
     * By default, its value is `[]`.
     * @type {?|undefined}
     */
    ContainerContent.prototype.containerControlChildren;
    /**
     * Returns the `FormSection` that tracks the value and validity state of the internal
     * child controls that contains this control.
     * Implementation notes:
     *  - Represents the `FormGroup` or `FormArray` that contains the child controls.
     *  - The `content.containerControlChildren` and `content.formSection` have the same length.
     *  - It must be specified; otherwise, an exception is thrown.
     * @type {?|undefined}
     */
    ContainerContent.prototype.formSection;
    /**
     * Returns an array of contents that represents the `ContainerControl`'s child controls that are
     * stored in the `ViewContainer`; that is, `content.formSectionContent` and container's `ViewContainer`
     * have the same length.
     * Implementation notes:
     *  - It must be specified, and must have at least one element; otherwise, an exception is thrown.
     *  - If the `content.formSection` field represents a `FormArray`, then the `name` field
     * of all elements in the `content.formSectionContent` array represents the position
     * in the array like string.
     * @type {?|undefined}
     */
    ContainerContent.prototype.formSectionContent;
    /**
     * Returns true if the container control has a dynamic length, that is, the `content.formSection` field
     * represents a `FormArray` and its length is not fixed; otherwise, false.
     * This field has sense only when the `content.formSection` field represents a `FormArray`.
     * By default, its value is `true`.
     * @type {?|undefined}
     */
    ContainerContent.prototype.isDynamic;
}
/**
 * Represents the base abstract class for a control that contains one or more controls.
 * @abstract
 */
var ContainerControl = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerControl, _super);
    /**
     * Constructs a new instance of this class.
     */
    function ContainerControl() {
        var _this = _super.call(this) || this;
        _this._isFormArray = false;
        _this._formArrayPatternContent = [];
        _this._formArrayPatternValue = undefined;
        _this._formArrayLength = 0;
        return _this;
    }
    /**
     * Returns a `FormGroup` by default.
     * Its value is empty object, and does not have validators.
     */
    /**
     * Returns a `FormGroup` by default.
     * Its value is empty object, and does not have validators.
     * @return {?}
     */
    ContainerControl.getFormGroupByDefault = /**
     * Returns a `FormGroup` by default.
     * Its value is empty object, and does not have validators.
     * @return {?}
     */
    function () {
        return new FormGroup({}, []);
    };
    /**
     * Returns a `FormArray` by default.
     * Its value is empty array, and does not have validators.
     */
    /**
     * Returns a `FormArray` by default.
     * Its value is empty array, and does not have validators.
     * @return {?}
     */
    ContainerControl.getFormArrayByDefault = /**
     * Returns a `FormArray` by default.
     * Its value is empty array, and does not have validators.
     * @return {?}
     */
    function () {
        return new FormArray([], []);
    };
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     * @param placeholder It is NOT used here. Fix that.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder It is NOT used here. Fix that.
     * @return {?}
     */
    ContainerControl.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder It is NOT used here. Fix that.
     * @return {?}
     */
    function (label, placeholder) {
        /* Sets the default values. */
        if (placeholder === void 0) { placeholder = ''; }
        _super.prototype.init.call(this, label, placeholder);
        if (this.content.formSection == undefined) {
            throw new Error("For the '" + this.content.name + "' control, the 'content.formSection' value can not be undefined; it must be a 'FormGroup' or 'FormArray' value.");
        }
        if ((this.content.formSectionContent == undefined) || (this.content.formSectionContent.length == 0)) {
            throw new Error("For the '" + this.content.name + "' control, the 'content.formSectionContent' array can not be undefined, and must have at least one element.");
        }
        this._isFormArray = this.content.formSection instanceof FormArray;
        if (this._isFormArray) {
            if (this.content.isDynamic == undefined)
                this.content.isDynamic = true; /* By default, its value is `true`. */
            if (this.content.required == undefined)
                this.content.required = false; /* By default, its value is `false`. */
        }
        else {
            if (this.content.isDynamic != undefined)
                throw new Error("For the '" + this.content.name + "' control, the 'content.isDynamic' value must not exist because the 'content.formSection' value is a 'FormGroup'.");
            if (this.content.required != undefined)
                throw new Error("For the '" + this.content.name + "' control, the 'content.required' value must not exist because the 'content.formSection' value is a 'FormGroup'.");
            if (this.content.value != undefined)
                throw new Error("For the '" + this.content.name + "' control, the 'content.value' value must not exist because the 'content.formSection' value is a 'FormGroup'.");
        }
        this._viewContainerRef = this._componentHost.viewContainerRef;
        this._componentFactoryResolver = this._componentHost.componentFactoryResolver;
        /* Initializes the `content.containerControlChildren`. */
        this.content.containerControlChildren = [];
        if (this._isFormArray) {
            if (this.content.value == undefined) {
                throw new Error("The '" + this.content.name + "' control is constructed dynamically using 'FormArray'. Its 'content.value' array can not be undefined.");
            }
            if ((this.content.value.length == 0) && (!this.content.isDynamic) && (this.content.required)) {
                throw new Error("The '" + this.content.name + "' control has not sense because its 'content.value' array length is zero, and its 'content.isDynamic' value is false, and its 'content.required' value is true.");
            }
            this.initFormSectionContentToFormArray();
        }
        else {
            /* Sets the parent control to its children. */
            this.setParentToChildren();
        }
        // let temp: string = (isAbbreviation) ? this.content.label : this.content.label.toLowerCase();
        // this.validationError_required = `The ${ temp } can not be empty.`;
        /************************** `mat-form-field` properties. **************************/
        // if (this.content.appearance == undefined) this.content.appearance = TextInputAppearance.standard;
        /***************************** `mat-hint` properties. *****************************/
        // if (alwaysHint && (this.content.startHint == undefined) && (this.content.endHint == undefined))
        // {
        //     this.content.startHint = new HintValue(HintPosition.start, `Write a valid ${ temp }.`);
        // }
        // else
        // {
        //     if (this.content.startHint != undefined) this.content.startHint.setDefaultValueIfUndefined_setPosition(HintPosition.start);
        //     if (this.content.endHint != undefined) this.content.endHint.setDefaultValueIfUndefined_setPosition(HintPosition.end);
        // }
        /* Adds this control as a child to the `content.parentFormSection`.
        It must be called at the end before calling `createChildComponents` method. */
        if (this.content.parentFormSection != undefined) {
            this.addAsChildControl(this, this.content.formSection);
        }
        /* Creates the child components. */
        this.createChildComponents(this.content.formSectionContent);
    };
    /**
     * Initializes the `content.formSectionContent` array correctly depending on the `content.value`.
     * In this case, `content.value` is an array. For each element in the `content.value`, a cloning
     * is done to the `_formArrayPatternContent` array, and it is added in the `content.formSectionContent`;
     * therefore one element is added in the `content.formSection` `FormArray`.
     */
    /**
     * Initializes the `content.formSectionContent` array correctly depending on the `content.value`.
     * In this case, `content.value` is an array. For each element in the `content.value`, a cloning
     * is done to the `_formArrayPatternContent` array, and it is added in the `content.formSectionContent`;
     * therefore one element is added in the `content.formSection` `FormArray`.
     * @protected
     * @return {?}
     */
    ContainerControl.prototype.initFormSectionContentToFormArray = /**
     * Initializes the `content.formSectionContent` array correctly depending on the `content.value`.
     * In this case, `content.value` is an array. For each element in the `content.value`, a cloning
     * is done to the `_formArrayPatternContent` array, and it is added in the `content.formSectionContent`;
     * therefore one element is added in the `content.formSection` `FormArray`.
     * @protected
     * @return {?}
     */
    function () {
        /* At this point, `content.formSectionContent` has at least one element. */
        var e_1, _a;
        /* Saves the pattern content, that is, `content.formSectionContent`.
        It is shared among controls. */
        this._formArrayPatternContent = this.content.formSectionContent;
        /* The `FormArray` is empty initially. */
        this.content.formSectionContent = [];
        /* Saves the pattern value, that is, creates the pattern value following the `_formArrayPatternContent` structure.
        The result value represents a copy of one value that can contain the `content.value` array, and
        sets all its properties/values of built-in type to `undefined`.
        It does not clone a value from the `content.value` array because the array can be empty.
        It creates in deep until the next `FormArray`, then the next `FormArray` creates in deep until the next `FormArray`, and so on.
        It is the first time that the `_formArrayPatternContent` is travelled, therefore the `createValueToUndefined` method does verifications. */
        this._formArrayPatternValue = this.createValueToUndefined();
        /* If the `content.required` field is true, then the container control must have one child control at least. */
        if ((this.content.required) && (this.content.value.length == 0)) {
            /* It can push the `_formArrayPatternValue` and does not push its clone because
            both values have the same properties and there is not problem. */
            this.content.value[0] = this._formArrayPatternValue;
        }
        try {
            /* The `FormArray` will contain one element for each element in the `content.value`. */
            for (var _b = tslib_1.__values(this.content.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var val = _c.value;
                this._initElemFormSectionContentToFormArray(val);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Sets the parent control to its children.
     */
    /**
     * Sets the parent control to its children.
     * @protected
     * @return {?}
     */
    ContainerControl.prototype.setParentToChildren = /**
     * Sets the parent control to its children.
     * @protected
     * @return {?}
     */
    function () {
        this.content.formSectionContent.forEach(this.setParentToChild, this);
    };
    /**
     * Sets the parent control to one child.
     * @param ffc The child to set the parent control.
     */
    /**
     * Sets the parent control to one child.
     * @protected
     * @param {?} ffc The child to set the parent control.
     * @return {?}
     */
    ContainerControl.prototype.setParentToChild = /**
     * Sets the parent control to one child.
     * @protected
     * @param {?} ffc The child to set the parent control.
     * @return {?}
     */
    function (ffc) {
        /* Sets the parent `ContainerControl` to its children. */
        ffc.parentContainerControl = this;
        /* Sets the parent `FormSection` to its children if they have got nothing. */
        ffc.parentFormSection = this.content.formSection;
    };
    /**
     * Returns a new value that is created following the `_formArrayPatternContent` structure.
     * It also sets all its properties/values of built-in type to `undefined`.
     * It creates the value smartly depending on the type of content.
     * It creates in deep until the next `FormArray`, then the next `FormArray` creates in deep until the next `FormArray`, and so on.
     * It is the first time that the `_formArrayPatternContent` is travelled, therefore the `createValueToUndefined` method does verifications.
     */
    /**
     * Returns a new value that is created following the `_formArrayPatternContent` structure.
     * It also sets all its properties/values of built-in type to `undefined`.
     * It creates the value smartly depending on the type of content.
     * It creates in deep until the next `FormArray`, then the next `FormArray` creates in deep until the next `FormArray`, and so on.
     * It is the first time that the `_formArrayPatternContent` is travelled, therefore the `createValueToUndefined` method does verifications.
     * @protected
     * @return {?}
     */
    ContainerControl.prototype.createValueToUndefined = /**
     * Returns a new value that is created following the `_formArrayPatternContent` structure.
     * It also sets all its properties/values of built-in type to `undefined`.
     * It creates the value smartly depending on the type of content.
     * It creates in deep until the next `FormArray`, then the next `FormArray` creates in deep until the next `FormArray`, and so on.
     * It is the first time that the `_formArrayPatternContent` is travelled, therefore the `createValueToUndefined` method does verifications.
     * @protected
     * @return {?}
     */
    function () {
        var e_2, _a;
        /** @type {?} */
        var result;
        /* The `_formArrayPatternContent` array can have one element only with the `content.formSection` field. */
        /** @type {?} */
        var alreadyHasFormSection = false;
        try {
            for (var _b = tslib_1.__values(this._formArrayPatternContent), _c = _b.next(); !_c.done; _c = _b.next()) {
                var content = _c.value;
                if (content.formControl) {
                    if (alreadyHasFormSection)
                        throw new Error("For the '" + this.content.name + "' control, the 'content.formSectionContent' array can have one element only with the 'content.formControl' or 'content.formSection' field.");
                    alreadyHasFormSection = true;
                    result = undefined;
                }
                else if (content.formSection) {
                    if (alreadyHasFormSection)
                        throw new Error("For the '" + this.content.name + "' control, the 'content.formSectionContent' array can have one element only with the 'content.formControl' or 'content.formSection' field.");
                    alreadyHasFormSection = true;
                    result = this._createValueToUndefined(content);
                }
                /* The rest of `content`s do not contain a `value` field of interest. */
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (!alreadyHasFormSection)
            throw new Error("For the '" + this.content.name + "' control, the 'content.formSectionContent' array must have one element only among all with the 'content.formControl' or 'content.formSection' field.");
        return result;
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    ContainerControl.prototype._createValueToUndefined = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        var e_3, _a;
        if (target.formSection instanceof FormArray) {
            return [];
        }
        else {
            /** @type {?} */
            var result = {};
            try {
                for (var _b = tslib_1.__values(target.formSectionContent), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var content = _c.value;
                    if (content.formControl)
                        result[content.name] = undefined;
                    else if (content.formSection)
                        result[content.name] = this._createValueToUndefined(content);
                    /* The rest of `content`s do not contain a `value` field of interest. */
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return result;
        }
    };
    /**
     * Initializes and returns a clone of the `_formArrayPatternContent` array correctly
     * depending on the specified `value`.
     * This clone is also added in the `content.formSectionContent` array.
     * @param value The initial `value` field of each content representing a `FormControl`.
     */
    /**
     * Initializes and returns a clone of the `_formArrayPatternContent` array correctly
     * depending on the specified `value`.
     * This clone is also added in the `content.formSectionContent` array.
     * @private
     * @param {?} value The initial `value` field of each content representing a `FormControl`.
     * @return {?}
     */
    ContainerControl.prototype._initElemFormSectionContentToFormArray = /**
     * Initializes and returns a clone of the `_formArrayPatternContent` array correctly
     * depending on the specified `value`.
     * This clone is also added in the `content.formSectionContent` array.
     * @private
     * @param {?} value The initial `value` field of each content representing a `FormControl`.
     * @return {?}
     */
    function (value) {
        var e_4, _a;
        /* The content array cloned. */
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var refContent;
        try {
            for (var _b = tslib_1.__values(this._formArrayPatternContent), _c = _b.next(); !_c.done; _c = _b.next()) {
                var content = _c.value;
                /* Clones in deep until the next `FormArray`, then the next `FormArray` clones in deep until the next `FormArray`, and so on. */
                if (content.formSection instanceof FormArray) {
                    /* This `content.formSectionContent` will not be cloned because it belongs to a `FormArray` and it will be cloned when the `FormArray` is analyzed in the `ContainerControl` class. */
                    refContent = this._cloneContent(content, undefined /* It is not used in this case. */, false);
                    refContent.value = value;
                }
                else {
                    refContent = this._cloneContent(content, value, true);
                }
                /* Sets the parent control to its child. */
                this.setParentToChild(refContent);
                /* Overwrites some properties for the content cloned. */
                refContent.name = this._formArrayLength.toString(10); /* The element is added in the `FormArray` after the last position. */
                /* Overwrites some properties for the content cloned if it contains the `content.formControl` or `content.formSection` field. */
                if ((content.formControl) || (content.formSection)) {
                    // refContent.label = ((refContent.label == undefined) ? (refContent.name) : (refContent.label + refContent.name));
                    // refContent.ariaLabel = refContent.label;
                }
                /* Save the content cloned. */
                this.content.formSectionContent.push(refContent);
                result.push(refContent);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this._formArrayLength++;
        return result;
    };
    /**
     * Returns a new content that represents the clone of the specified content target.
     * It also sets the initial `value` field of each content representing a `FormControl`.
     * It clones the content smartly depending on the type of property.
     * It clones in deep until the next `FormArray`, then the next `FormArray` clones in deep until the next `FormArray`, and so on.
     * @param target The content object to clone.
     * @param value The initial `value` field of each content representing a `FormControl`.
     * @param canClone It is true if the function can clone the `formSectionContent` field; otherwise, false.
     */
    /**
     * Returns a new content that represents the clone of the specified content target.
     * It also sets the initial `value` field of each content representing a `FormControl`.
     * It clones the content smartly depending on the type of property.
     * It clones in deep until the next `FormArray`, then the next `FormArray` clones in deep until the next `FormArray`, and so on.
     * @private
     * @param {?} target The content object to clone.
     * @param {?} value The initial `value` field of each content representing a `FormControl`.
     * @param {?} canClone It is true if the function can clone the `formSectionContent` field; otherwise, false.
     * @return {?}
     */
    ContainerControl.prototype._cloneContent = /**
     * Returns a new content that represents the clone of the specified content target.
     * It also sets the initial `value` field of each content representing a `FormControl`.
     * It clones the content smartly depending on the type of property.
     * It clones in deep until the next `FormArray`, then the next `FormArray` clones in deep until the next `FormArray`, and so on.
     * @private
     * @param {?} target The content object to clone.
     * @param {?} value The initial `value` field of each content representing a `FormControl`.
     * @param {?} canClone It is true if the function can clone the `formSectionContent` field; otherwise, false.
     * @return {?}
     */
    function (target, value, canClone) {
        var e_5, _a;
        /* The content cloned. */
        /** @type {?} */
        var result = {};
        for (var prop in target) {
            switch (prop) {
                /* The `formControl` property special case. */
                case 'formControl':
                    {
                        result[prop] = cloneFormControl(target.formControl);
                        /* If this content (`result`) represents a `FormControl`, then the `value` field is initialized. */
                        result['value'] = value;
                        break;
                    }
                /* The `formSection` property special case. */
                case 'formSection':
                    {
                        result[prop] = cloneFormSection(target.formSection);
                        break;
                    }
                /* The `formSectionContent` property special case. */
                case 'formSectionContent':
                    {
                        if (canClone) /* Clones the `target.formSectionContent`. */ {
                            result[prop] = [];
                            try {
                                for (var _b = (e_5 = void 0, tslib_1.__values(target.formSectionContent)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    var content = _c.value;
                                    if (content.formSection instanceof FormArray) {
                                        content.value = value[content.name];
                                        /* This `content.formSectionContent` will not be cloned because it belongs to a `FormArray` and it will be cloned when the `FormArray` is analyzed in the `ContainerControl` class. */
                                        result[prop].push(this._cloneContent(content, undefined /* It is not used in this case. */, false));
                                        content.value = undefined;
                                    }
                                    else {
                                        result[prop].push(this._cloneContent(content, value[content.name], canClone));
                                    }
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                        }
                        else /* Takes the same `target.formSectionContent` reference because `target` is a `FormArray` and its `formSectionContent` will be taken like a pattern. */ {
                            result[prop] = target.formSectionContent;
                        }
                        break;
                    }
                /* Copies the property without problem. */
                default:
                    {
                        result[prop] = target[prop];
                        break;
                    }
            }
        }
        return result;
    };
    /**
     * Creates the child components.
     * @param componentsContent Components content array for creating the components.
     */
    /**
     * Creates the child components.
     * @protected
     * @param {?} componentsContent Components content array for creating the components.
     * @return {?}
     */
    ContainerControl.prototype.createChildComponents = /**
     * Creates the child components.
     * @protected
     * @param {?} componentsContent Components content array for creating the components.
     * @return {?}
     */
    function (componentsContent) {
        var e_6, _a;
        try {
            for (var componentsContent_1 = tslib_1.__values(componentsContent), componentsContent_1_1 = componentsContent_1.next(); !componentsContent_1_1.done; componentsContent_1_1 = componentsContent_1.next()) {
                var componentContent = componentsContent_1_1.value;
                /* Creates a child component. */
                this.createChildComponent(componentContent);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (componentsContent_1_1 && !componentsContent_1_1.done && (_a = componentsContent_1.return)) _a.call(componentsContent_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    /**
     * Creates a child component.
     * @param componentContent Component content for creating the component.
     */
    /**
     * Creates a child component.
     * @protected
     * @param {?} componentContent Component content for creating the component.
     * @return {?}
     */
    ContainerControl.prototype.createChildComponent = /**
     * Creates a child component.
     * @protected
     * @param {?} componentContent Component content for creating the component.
     * @return {?}
     */
    function (componentContent) {
        this._cr = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(componentContent.controlType));
        ((/** @type {?} */ (this._cr.instance))).content = componentContent;
    };
    /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     */
    /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     * @protected
     * @return {?}
     */
    ContainerControl.prototype.initValue = /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     * @protected
     * @return {?}
     */
    function () {
        /* It does not need to do something because the child controls are already initialized. */
        // /* In this way, checks if the specified `content.value` is correct. */
        // this.content.formControl.setValue(this.content.value);
        // /* Marks the control as `touched`. */
        // this.content.formControl.markAsTouched({
        //     onlySelf: true
        // });
    };
    Object.defineProperty(ContainerControl.prototype, "getInstance", {
        /**
         * Returns this instance.
         */
        get: /**
         * Returns this instance.
         * @return {?}
         */
        function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerControl.prototype, "containerControlChildren", {
        /**
         * Returns an array of controls that represents the `ContainerControl`'s child controls.
         * It is always set internally.
         */
        get: /**
         * Returns an array of controls that represents the `ContainerControl`'s child controls.
         * It is always set internally.
         * @return {?}
         */
        function () {
            return this.content.containerControlChildren;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerControl.prototype, "formArrayPatternContent", {
        /**
         * If the `content.formSection` represents a `FormArray`, then this field returns
         * a pattern content that is `content.formSectionContent[0]` value; otherwise, returns `undefined`.
         * It is shared among controls.
         * It is used for adding a new element in the `content.formSectionContent`, that is,
         * for adding a new control in the `FormArray`.
         * By default, its value is `undefined`.
         */
        get: /**
         * If the `content.formSection` represents a `FormArray`, then this field returns
         * a pattern content that is `content.formSectionContent[0]` value; otherwise, returns `undefined`.
         * It is shared among controls.
         * It is used for adding a new element in the `content.formSectionContent`, that is,
         * for adding a new control in the `FormArray`.
         * By default, its value is `undefined`.
         * @return {?}
         */
        function () {
            return this._formArrayPatternContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerControl.prototype, "formArrayPatternValue", {
        /**
         * If the `content.formSection` represents a `FormArray`, then this field returns
         * a pattern value that is a clone of the `content.value[0]` value, and sets all
         * its properties/values of built-in type to `undefined`; otherwise, returns `undefined`.
         * It is used for adding a new element in the `content.formSectionContent`.
         * By default, its value is `undefined`.
         */
        get: /**
         * If the `content.formSection` represents a `FormArray`, then this field returns
         * a pattern value that is a clone of the `content.value[0]` value, and sets all
         * its properties/values of built-in type to `undefined`; otherwise, returns `undefined`.
         * It is used for adding a new element in the `content.formSectionContent`.
         * By default, its value is `undefined`.
         * @return {?}
         */
        function () {
            return this._formArrayPatternValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerControl.prototype, "isDynamic", {
        /**
         * Returns true if the container control has a dynamic length, that is, the `content.formSection` field
         * represents a `FormArray` and its length is not fixed; otherwise, false.
         * This property has sense only when the `content.formSection` field represents a `FormArray`.
         */
        get: /**
         * Returns true if the container control has a dynamic length, that is, the `content.formSection` field
         * represents a `FormArray` and its length is not fixed; otherwise, false.
         * This property has sense only when the `content.formSection` field represents a `FormArray`.
         * @return {?}
         */
        function () {
            return this.content.isDynamic;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerControl.prototype, "isFormArray", {
        /**
         * Returns true if the container control is a `FormArray`, that is, the `content.formSection` field
         * represents a `FormArray`; otherwise, false.
         */
        get: /**
         * Returns true if the container control is a `FormArray`, that is, the `content.formSection` field
         * represents a `FormArray`; otherwise, false.
         * @return {?}
         */
        function () {
            return this._isFormArray;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerControl.prototype, "isEmpty", {
        /**
         * Returns true if this container is empty; otherwise, false.
         */
        get: /**
         * Returns true if this container is empty; otherwise, false.
         * @return {?}
         */
        function () {
            return (this.content.formSectionContent.length == 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerControl.prototype, "canRemoveFromFormArray", {
        /**
         * Returns true if an element can be removed from the `content.formSection`; otherwise, false.
         * Use along with `removeFromFormArray` and `clearFormArray` methods.
         * The `content.formSection` must be an instance of `FormArray`.
         */
        get: /**
         * Returns true if an element can be removed from the `content.formSection`; otherwise, false.
         * Use along with `removeFromFormArray` and `clearFormArray` methods.
         * The `content.formSection` must be an instance of `FormArray`.
         * @return {?}
         */
        function () {
            /* The method uses the `_formArrayLength` instead of `content.formSection` because
            the first one field is updated first and it has the answer more accurate than the second one field. */
            if (this.content.required) {
                return (this._formArrayLength > 1);
            }
            else {
                return (this._formArrayLength != 0);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds an empty element at the end of the `content.formSectionContent`; therefore one element
     * is added at the end of the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     */
    /**
     * Adds an empty element at the end of the `content.formSectionContent`; therefore one element
     * is added at the end of the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     * @return {?}
     */
    ContainerControl.prototype.addToFormArray = /**
     * Adds an empty element at the end of the `content.formSectionContent`; therefore one element
     * is added at the end of the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     * @return {?}
     */
    function () {
        console.log('addToFormArray');
        if (this._isFormArray) {
            this.createChildComponents(this._initElemFormSectionContentToFormArray(this._formArrayPatternValue));
        }
        else {
            throw new Error("For the '" + this.content.name + "' control, the 'content.formSection' value must be an instance of 'FormArray'.");
        }
    };
    /**
     * Removes the element at the given `index` in the `content.formSectionContent`; therefore
     * the element at the given `index` is removed in the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     * @param index Index in the array to remove the element.
     */
    /**
     * Removes the element at the given `index` in the `content.formSectionContent`; therefore
     * the element at the given `index` is removed in the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     * @param {?} index Index in the array to remove the element.
     * @return {?}
     */
    ContainerControl.prototype.removeFromFormArray = /**
     * Removes the element at the given `index` in the `content.formSectionContent`; therefore
     * the element at the given `index` is removed in the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     * @param {?} index Index in the array to remove the element.
     * @return {?}
     */
    function (index) {
        console.log('removeFromFormArray', index);
        if (this._isFormArray) {
            //TODO: la variable `formArrayPatternContentLength` podría ser un campo de la clase. 
            /** @type {?} */
            var formArrayPatternContentLength = this._formArrayPatternContent.length;
            /** @type {?} */
            var i = void 0;
            /** @type {?} */
            var j = void 0;
            /** @type {?} */
            var k = void 0;
            this.content.containerControlChildren.splice(index, 1);
            this.content.formSectionContent.splice((index * formArrayPatternContentLength), formArrayPatternContentLength);
            ((/** @type {?} */ (this.content.formSection))).removeAt(index);
            for (i = formArrayPatternContentLength, j = index * formArrayPatternContentLength; i != 0; i--) {
                this._viewContainerRef.remove(j);
            }
            this._formArrayLength--;
            /* Updates the elements' index in the `content.formSectionContent` array from
            the specified `index` onwards. */
            for (k = (i = index * formArrayPatternContentLength) + formArrayPatternContentLength, j = this.content.formSectionContent.length; i < j; i++) {
                if (i == k) {
                    index++;
                    k += formArrayPatternContentLength;
                }
                this.content.formSectionContent[i].name = index.toString(10);
            }
        }
        else {
            throw new Error("For the '" + this.content.name + "' control, the 'content.formSection' value must be an instance of 'FormArray'.");
        }
    };
    /**
     * Removes all elements in the `content.formSectionContent`; therefore
     * all elements are removed in the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     */
    /**
     * Removes all elements in the `content.formSectionContent`; therefore
     * all elements are removed in the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     * @return {?}
     */
    ContainerControl.prototype.clearFormArray = /**
     * Removes all elements in the `content.formSectionContent`; therefore
     * all elements are removed in the `content.formSection` `FormArray`.
     * The `content.formSection` must be an instance of `FormArray`.
     * @return {?}
     */
    function () {
        console.log('clearFormArray');
        if (this._isFormArray) {
            this.content.containerControlChildren = [];
            this.content.formSectionContent = [];
            ((/** @type {?} */ (this.content.formSection))).clear();
            this._viewContainerRef.clear();
            this._formArrayLength = 0;
            if (this.content.required) {
                /* The `FormArray` always has one element at least. */
                this.addToFormArray();
            }
        }
        else {
            throw new Error("For the '" + this.content.name + "' control, the 'content.formSection' value must be an instance of 'FormArray'.");
        }
    };
    ContainerControl.propDecorators = {
        content: [{ type: Input }],
        _componentHost: [{ type: ViewChild, args: [GetViewContainerDirective, { static: true },] }]
    };
    return ContainerControl;
}(FormFieldControl));
export { ContainerControl };
if (false) {
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    ContainerControl.prototype.content;
    /**
     * Returns the helper directive to mark valid insertion point in the `ContainerControl`'s template.
     * @type {?}
     * @protected
     */
    ContainerControl.prototype._componentHost;
    /**
     * Returns the view container of the element that will host the child components in the `ContainerControl`'s template.
     * This field can only be assigned in the `ContainerControl` class.
     * The `content.formSectionContent` and container's `_viewContainerRef` have the same length.
     * @type {?}
     * @protected
     */
    ContainerControl.prototype._viewContainerRef;
    /**
     * Returns the factory for a given component type.
     * This field can only be assigned in the `ContainerControl` class.
     * @type {?}
     * @protected
     */
    ContainerControl.prototype._componentFactoryResolver;
    /**
     * Returns the component created by a `ComponentFactory`.
     * For only internal use by the `createChildComponent` method.
     * @type {?}
     * @protected
     */
    ContainerControl.prototype._cr;
    /**
     * Returns true if the container control is a `FormArray`, that is, the `content.formSection` field
     * represents a `FormArray`; otherwise, false.
     * By default, its value is `false`.
     * @type {?}
     * @private
     */
    ContainerControl.prototype._isFormArray;
    /**
     * If the `content.formSection` represents a `FormArray`, then this field returns
     * a pattern content that is `content.formSectionContent` value; otherwise, returns `undefined`.
     * It is shared among controls.
     * It is used for adding a new element in the `content.formSectionContent`, that is,
     * for adding a new control in the `FormArray`.
     * By default, its value is `[]`.
     * @type {?}
     * @private
     */
    ContainerControl.prototype._formArrayPatternContent;
    /**
     * If the `content.formSection` represents a `FormArray`, then this field returns
     * a pattern value that is a copy of one value that can contain the `content.value` array, and sets all
     * its properties/values of built-in type to `undefined`; otherwise, returns `undefined`.
     * It is used for adding a new element in the `content.formSectionContent`, that is,
     * for adding a new control in the `FormArray`.
     * By default, its value is `undefined`.
     * @type {?}
     * @private
     */
    ContainerControl.prototype._formArrayPatternValue;
    /**
     * Returns the current `FormArray` length.
     * This field has sense only when the `content.formSection` field represents a `FormArray`.
     * By default, its value is `0`.
     * @type {?}
     * @private
     */
    ContainerControl.prototype._formArrayLength;
}
//# sourceMappingURL=data:application/json;base64,