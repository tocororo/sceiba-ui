/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/panel/panel-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { ContainerControl } from '../container.control';
/**
 * An interface that represents the content of a panel control.
 * @record
 */
export function PanelContent() { }
if (false) {
    /**
     * Returns the panel's description.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    PanelContent.prototype.description;
    /**
     * Returns the panel's icon name.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    PanelContent.prototype.iconName;
}
/**
 * Represents a container control that is showed as a panel.
 * Usage notes:
 *  - It can be used as:
 * <container-panel [content]="panelContent"></container-panel>
 * Where `content.formSection` is created, for example, as this:
 * this.content.formSection = new FormGroup({ }, [ ]);
 */
var ContainerPanelComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerPanelComponent, _super);
    function ContainerPanelComponent() {
        return _super.call(this) || this;
    }
    /**
     * @return {?}
     */
    ContainerPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /* Sets the default values. */
        this.init('');
    };
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @return {?}
     */
    ContainerPanelComponent.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @return {?}
     */
    function (label) {
        /* Sets the default values. */
        _super.prototype.init.call(this, label);
        /* The `content.description`, and `content.iconName` fields
        have the `undefined` value by default. */
    };
    ContainerPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'container-panel',
                    template: "<mat-card\n  class=\"container-panel-mat-card\"\n  [formGroup]=\"content.formSection\"\n  [attr.aria-label]=\"content.ariaLabel\"\n>\n  <mat-card-header>\n    <mat-card-title *ngIf=\"content.label\">\n      {{ content.label }}\n    </mat-card-title>\n    <mat-card-subtitle *ngIf=\"content.description\">\n      {{ content.description }}\n      <mat-icon>{{ content.iconName }}</mat-icon>\n    </mat-card-subtitle>\n  </mat-card-header>\n\n  <mat-card-content\n    fxLayout=\"row wrap\"\n    fxLayout.xs=\"column\"\n    fxLayoutAlign=\"space-between end\"\n    fxLayoutAlign.xs=\"space-between center\"\n    fxLayoutGap=\"1em\"\n    class=\"form-field-component\"\n  >\n    <ng-template get-view-container></ng-template>\n  </mat-card-content>\n\n  <mat-card-actions *ngIf=\"content.isDynamic\">\n    <button mat-raised-button color=\"primary\" (click)=\"addToFormArray()\">\n      <!-- <mat-icon>add box</mat-icon> -->\n      <mat-icon>add_circle</mat-icon>\n      Add new item\n    </button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"!canRemoveFromFormArray\"\n      (click)=\"clearFormArray()\"\n    >\n      <!-- <mat-icon>remove box</mat-icon> -->\n      <mat-icon>remove_circle</mat-icon>\n      Clear all\n    </button>\n  </mat-card-actions>\n</mat-card>\n",
                    host: {
                        '[style.minWidth]': 'content.minWidth',
                        '[style.width]': 'content.width'
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContainerPanelComponent.ctorParameters = function () { return []; };
    ContainerPanelComponent.propDecorators = {
        content: [{ type: Input }]
    };
    return ContainerPanelComponent;
}(ContainerControl));
export { ContainerPanelComponent };
if (false) {
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    ContainerPanelComponent.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2Zvcm1zL2NvbnRhaW5lci9wYW5lbC9wYW5lbC1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBb0IsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7QUFLMUUsa0NBbUJDOzs7Ozs7O0lBUEcsbUNBQXFCOzs7Ozs7SUFNckIsZ0NBQWtCOzs7Ozs7Ozs7O0FBV3RCO0lBUzZDLG1EQUFnQjtJQVE1RDtlQUVPLGlCQUFPO0lBQ2QsQ0FBQzs7OztJQUVNLDBDQUFROzs7SUFBZjtRQUVDLDhCQUE4QjtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7SUFDTyxzQ0FBSTs7Ozs7O0lBQWQsVUFBZSxLQUFhO1FBRXhCLDhCQUE4QjtRQUU5QixpQkFBTSxJQUFJLFlBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEI7aURBQ3lDO0lBQzdDLENBQUM7O2dCQXhDSixTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IscXlDQUErQztvQkFFL0MsSUFBSSxFQUFFO3dCQUNMLGtCQUFrQixFQUFFLGtCQUFrQjt3QkFDdEMsZUFBZSxFQUFFLGVBQWU7cUJBQ2hDOztpQkFDRDs7Ozs7MEJBTUksS0FBSzs7SUEyQlYsOEJBQUM7Q0FBQSxBQXpDRCxDQVM2QyxnQkFBZ0IsR0FnQzVEO1NBaENZLHVCQUF1Qjs7Ozs7O0lBS2hDLDBDQUMwQiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbnRhaW5lckNvbnRlbnQsIENvbnRhaW5lckNvbnRyb2wgfSBmcm9tICcuLi9jb250YWluZXIuY29udHJvbCc7XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgY29udGVudCBvZiBhIHBhbmVsIGNvbnRyb2wuIFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhbmVsQ29udGVudCBleHRlbmRzIENvbnRhaW5lckNvbnRlbnRcbntcbiAgICAvKipcbiAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBgbGFiZWw/OiBzdHJpbmdgIGZpZWxkIGluaGVyaXRlZCBmcm9tIGBGb3JtRmllbGRDb250ZW50YCBpcyBpbnRlcnByZXRlZCBhczogXG4gICAgICogUmV0dXJucyB0aGUgY29udHJvbCdzIHRpdGxlLiBcbiAgICAgKiBCeSBkZWZhdWx0LCBpdHMgdmFsdWUgaXMgYCcnYC4gRWFjaCBjb250cm9sIHNldHMgaXRzIG93biBsYWJlbCAodGl0bGUpLiBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhbmVsJ3MgZGVzY3JpcHRpb24uIFxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC4gXG4gICAgICovXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwYW5lbCdzIGljb24gbmFtZS4gXG4gICAgICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLiBcbiAgICAgKi9cbiAgICBpY29uTmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29udGFpbmVyIGNvbnRyb2wgdGhhdCBpcyBzaG93ZWQgYXMgYSBwYW5lbC4gXG4gKiBVc2FnZSBub3RlczogXG4gKiAgLSBJdCBjYW4gYmUgdXNlZCBhczogXG4gKiA8Y29udGFpbmVyLXBhbmVsIFtjb250ZW50XT1cInBhbmVsQ29udGVudFwiPjwvY29udGFpbmVyLXBhbmVsPiBcbiAqIFdoZXJlIGBjb250ZW50LmZvcm1TZWN0aW9uYCBpcyBjcmVhdGVkLCBmb3IgZXhhbXBsZSwgYXMgdGhpczogXG4gKiB0aGlzLmNvbnRlbnQuZm9ybVNlY3Rpb24gPSBuZXcgRm9ybUdyb3VwKHsgfSwgWyBdKTsgXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2NvbnRhaW5lci1wYW5lbCcsXG5cdHRlbXBsYXRlVXJsOiAnLi9wYW5lbC1jb250YWluZXIuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9wYW5lbC1jb250YWluZXIuY29tcG9uZW50LnNjc3MnXSxcblx0aG9zdDoge1xuXHRcdCdbc3R5bGUubWluV2lkdGhdJzogJ2NvbnRlbnQubWluV2lkdGgnLFxuXHRcdCdbc3R5bGUud2lkdGhdJzogJ2NvbnRlbnQud2lkdGgnXG5cdH1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyUGFuZWxDb21wb25lbnQgZXh0ZW5kcyBDb250YWluZXJDb250cm9sIGltcGxlbWVudHMgT25Jbml0XG57XG4gICAgLyoqXG4gICAgICogSW5wdXQgZmllbGQgdGhhdCBjb250YWlucyB0aGUgY29udGVudCBvZiB0aGlzIGNsYXNzLiBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuXHRwdWJsaWMgY29udGVudDogUGFuZWxDb250ZW50O1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcigpXG5cdHtcbiAgICAgICAgc3VwZXIoKTtcblx0fVxuXG5cdHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkXG5cdHtcblx0XHQvKiBTZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy4gKi9cbiAgICAgICAgdGhpcy5pbml0KCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYGNvbnRlbnRgIGlucHV0IHByb3BlcnR5LiBcbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGRlZmF1bHQgbGFiZWwgdG8gdXNlLiBJdCBpcyB1c2VkIGlmIHRoZSBgY29udGVudC5sYWJlbGAgaXMgbm90IHNwZWNpZmllZC4gXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGluaXQobGFiZWw6IHN0cmluZyk6IHZvaWRcbiAgICB7XG4gICAgICAgIC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuXG4gICAgICAgIHN1cGVyLmluaXQobGFiZWwpO1xuXG4gICAgICAgIC8qIFRoZSBgY29udGVudC5kZXNjcmlwdGlvbmAsIGFuZCBgY29udGVudC5pY29uTmFtZWAgZmllbGRzIFxuICAgICAgICBoYXZlIHRoZSBgdW5kZWZpbmVkYCB2YWx1ZSBieSBkZWZhdWx0LiAqL1xuICAgIH1cbn1cbiJdfQ==