/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/panel-action/panel-action-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { ContainerControl } from '../container.control';
/**
 * @record
 */
export function PanelAction() { }
if (false) {
    /**
     * @param {?} data
     * @return {?}
     */
    PanelAction.prototype.doit = function (data) { };
}
/**
 * An interface that represents the content of a panel control.
 * @record
 */
export function PanelActionContent() { }
if (false) {
    /**
     * Returns the panel's description.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    PanelActionContent.prototype.description;
    /**
     * Returns the panel's icon name.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    PanelActionContent.prototype.iconName;
    /**
     * Returns the action and action labels for each panel.
     * @type {?|undefined}
     */
    PanelActionContent.prototype.action;
    /** @type {?|undefined} */
    PanelActionContent.prototype.actionLabel;
}
/**
 * Represents a container control that is showed as a panel.
 * Usage notes:
 *  - It can be used as:
 * <container-panel [content]="panelContent"></container-panel>
 * Where `content.formSection` is created, for example, as this:
 * this.content.formSection = new FormGroup({ }, [ ]);
 */
var ContainerPanelActionComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerPanelActionComponent, _super);
    function ContainerPanelActionComponent() {
        return _super.call(this) || this;
    }
    /**
     * @return {?}
     */
    ContainerPanelActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /* Sets the default values. */
        this.init('');
    };
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @return {?}
     */
    ContainerPanelActionComponent.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @return {?}
     */
    function (label) {
        /* Sets the default values. */
        _super.prototype.init.call(this, label);
        /* The `content.description`, and `content.iconName` fields
        have the `undefined` value by default. */
    };
    /**
     * @return {?}
     */
    ContainerPanelActionComponent.prototype.doAction = /**
     * @return {?}
     */
    function () {
        // const data = {};
        // this.content..formSectionContent.forEach(element => {
        //   element
        // });
        // this.panelsContent.forEach((panel) => {
        //   panel.formSectionContent.forEach((controlContent) => {
        //     data[controlContent.name] = controlContent.value;
        //   });
        // });
        if (this.content.action) {
            this.content.action.doit(this.content.value);
        }
    };
    ContainerPanelActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'container-panel-action',
                    template: "<mat-card\n  class=\"container-panel-mat-card\"\n  [formGroup]=\"content.formSection\"\n  [attr.aria-label]=\"content.ariaLabel\"\n>\n  <mat-card-header>\n    <mat-card-title *ngIf=\"content.label\">\n      {{ content.label }}\n    </mat-card-title>\n    <mat-card-subtitle *ngIf=\"content.description\">\n      {{ content.description }}\n      <mat-icon>{{ content.iconName }}</mat-icon>\n    </mat-card-subtitle>\n  </mat-card-header>\n\n  <mat-card-content\n    fxLayout=\"row wrap\"\n    fxLayout.xs=\"column\"\n    fxLayoutAlign=\"space-between end\"\n    fxLayoutAlign.xs=\"space-between center\"\n    fxLayoutGap=\"1em\"\n    class=\"form-field-component\"\n  >\n    <ng-template get-view-container></ng-template>\n  </mat-card-content>\n\n  <mat-card-actions *ngIf=\"content.actionLabel\">\n    <button\n      *ngIf=\"content.actionLabel\"\n      mat-button\n      color=\"accent\"\n      (click)=\"doAction()\"\n    >\n      {{ content.actionLabel }}\n    </button>\n  </mat-card-actions>\n\n  <mat-card-actions *ngIf=\"content.isDynamic\">\n    <button mat-raised-button color=\"primary\" (click)=\"addToFormArray()\">\n      <!-- <mat-icon>add box</mat-icon> -->\n      <mat-icon>add_circle</mat-icon>\n      Add new item\n    </button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"!canRemoveFromFormArray\"\n      (click)=\"clearFormArray()\"\n    >\n      <!-- <mat-icon>remove box</mat-icon> -->\n      <mat-icon>remove_circle</mat-icon>\n      Clear all\n    </button>\n  </mat-card-actions>\n</mat-card>\n",
                    host: {
                        '[style.minWidth]': 'content.minWidth',
                        '[style.width]': 'content.width'
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContainerPanelActionComponent.ctorParameters = function () { return []; };
    ContainerPanelActionComponent.propDecorators = {
        content: [{ type: Input }]
    };
    return ContainerPanelActionComponent;
}(ContainerControl));
export { ContainerPanelActionComponent };
if (false) {
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    ContainerPanelActionComponent.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtYWN0aW9uLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9jb250YWluZXIvcGFuZWwtYWN0aW9uL3BhbmVsLWFjdGlvbi1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBb0IsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUkxRSxpQ0FFQzs7Ozs7O0lBREMsaURBQXNCOzs7Ozs7QUFReEIsd0NBeUJDOzs7Ozs7O0lBYkcseUNBQXFCOzs7Ozs7SUFNckIsc0NBQWtCOzs7OztJQUtsQixvQ0FBcUI7O0lBQ3JCLHlDQUFxQjs7Ozs7Ozs7OztBQVd6QjtJQVNtRCx5REFBZ0I7SUFRbEU7ZUFFTyxpQkFBTztJQUNkLENBQUM7Ozs7SUFFTSxnREFBUTs7O0lBQWY7UUFFQyw4QkFBOEI7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7O0lBQ08sNENBQUk7Ozs7OztJQUFkLFVBQWUsS0FBYTtRQUV4Qiw4QkFBOEI7UUFFOUIsaUJBQU0sSUFBSSxZQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxCO2lEQUN5QztJQUM3QyxDQUFDOzs7O0lBQ00sZ0RBQVE7OztJQUFmO1FBRUUsbUJBQW1CO1FBQ25CLHdEQUF3RDtRQUN4RCxZQUFZO1FBQ1osTUFBTTtRQUNOLDBDQUEwQztRQUMxQywyREFBMkQ7UUFDM0Qsd0RBQXdEO1FBQ3hELFFBQVE7UUFDUixNQUFNO1FBRU4sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QztJQUdILENBQUM7O2dCQTFESixTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsbWlEQUFzRDtvQkFFdEQsSUFBSSxFQUFFO3dCQUNMLGtCQUFrQixFQUFFLGtCQUFrQjt3QkFDdEMsZUFBZSxFQUFFLGVBQWU7cUJBQ2hDOztpQkFDRDs7Ozs7MEJBTUksS0FBSzs7SUE2Q1Ysb0NBQUM7Q0FBQSxBQTNERCxDQVNtRCxnQkFBZ0IsR0FrRGxFO1NBbERZLDZCQUE2Qjs7Ozs7O0lBS3RDLGdEQUNnQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbnRhaW5lckNvbnRlbnQsIENvbnRhaW5lckNvbnRyb2wgfSBmcm9tICcuLi9jb250YWluZXIuY29udHJvbCc7XG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFBhbmVsQWN0aW9uIHtcbiAgZG9pdChkYXRhOiBhbnkpOiB2b2lkO1xufVxuXG5cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjb250ZW50IG9mIGEgcGFuZWwgY29udHJvbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYW5lbEFjdGlvbkNvbnRlbnQgZXh0ZW5kcyBDb250YWluZXJDb250ZW50XG57XG4gICAgLyoqXG4gICAgICogSW4gdGhpcyBjYXNlLCB0aGUgYGxhYmVsPzogc3RyaW5nYCBmaWVsZCBpbmhlcml0ZWQgZnJvbSBgRm9ybUZpZWxkQ29udGVudGAgaXMgaW50ZXJwcmV0ZWQgYXM6XG4gICAgICogUmV0dXJucyB0aGUgY29udHJvbCdzIHRpdGxlLlxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgJydgLiBFYWNoIGNvbnRyb2wgc2V0cyBpdHMgb3duIGxhYmVsICh0aXRsZSkuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwYW5lbCdzIGRlc2NyaXB0aW9uLlxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhbmVsJ3MgaWNvbiBuYW1lLlxuICAgICAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBpY29uTmFtZT86IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWN0aW9uIGFuZCBhY3Rpb24gbGFiZWxzIGZvciBlYWNoIHBhbmVsLlxuICAgICAqL1xuICAgIGFjdGlvbj86IFBhbmVsQWN0aW9uO1xuICAgIGFjdGlvbkxhYmVsPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb250YWluZXIgY29udHJvbCB0aGF0IGlzIHNob3dlZCBhcyBhIHBhbmVsLlxuICogVXNhZ2Ugbm90ZXM6XG4gKiAgLSBJdCBjYW4gYmUgdXNlZCBhczpcbiAqIDxjb250YWluZXItcGFuZWwgW2NvbnRlbnRdPVwicGFuZWxDb250ZW50XCI+PC9jb250YWluZXItcGFuZWw+XG4gKiBXaGVyZSBgY29udGVudC5mb3JtU2VjdGlvbmAgaXMgY3JlYXRlZCwgZm9yIGV4YW1wbGUsIGFzIHRoaXM6XG4gKiB0aGlzLmNvbnRlbnQuZm9ybVNlY3Rpb24gPSBuZXcgRm9ybUdyb3VwKHsgfSwgWyBdKTtcbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnY29udGFpbmVyLXBhbmVsLWFjdGlvbicsXG5cdHRlbXBsYXRlVXJsOiAnLi9wYW5lbC1hY3Rpb24tY29udGFpbmVyLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJy4vcGFuZWwtYWN0aW9uLWNvbnRhaW5lci5jb21wb25lbnQuc2NzcyddLFxuXHRob3N0OiB7XG5cdFx0J1tzdHlsZS5taW5XaWR0aF0nOiAnY29udGVudC5taW5XaWR0aCcsXG5cdFx0J1tzdHlsZS53aWR0aF0nOiAnY29udGVudC53aWR0aCdcblx0fVxufSlcbmV4cG9ydCBjbGFzcyBDb250YWluZXJQYW5lbEFjdGlvbkNvbXBvbmVudCBleHRlbmRzIENvbnRhaW5lckNvbnRyb2wgaW1wbGVtZW50cyBPbkluaXRcbntcbiAgICAvKipcbiAgICAgKiBJbnB1dCBmaWVsZCB0aGF0IGNvbnRhaW5zIHRoZSBjb250ZW50IG9mIHRoaXMgY2xhc3MuXG4gICAgICovXG4gICAgQElucHV0KClcblx0cHVibGljIGNvbnRlbnQ6IFBhbmVsQWN0aW9uQ29udGVudDtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoKVxuXHR7XG4gICAgICAgIHN1cGVyKCk7XG5cdH1cblxuXHRwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuXHR7XG5cdFx0LyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG4gICAgICAgIHRoaXMuaW5pdCgnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGBjb250ZW50YCBpbnB1dCBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGRlZmF1bHQgbGFiZWwgdG8gdXNlLiBJdCBpcyB1c2VkIGlmIHRoZSBgY29udGVudC5sYWJlbGAgaXMgbm90IHNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaW5pdChsYWJlbDogc3RyaW5nKTogdm9pZFxuICAgIHtcbiAgICAgICAgLyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG5cbiAgICAgICAgc3VwZXIuaW5pdChsYWJlbCk7XG5cbiAgICAgICAgLyogVGhlIGBjb250ZW50LmRlc2NyaXB0aW9uYCwgYW5kIGBjb250ZW50Lmljb25OYW1lYCBmaWVsZHNcbiAgICAgICAgaGF2ZSB0aGUgYHVuZGVmaW5lZGAgdmFsdWUgYnkgZGVmYXVsdC4gKi9cbiAgICB9XG4gICAgcHVibGljIGRvQWN0aW9uKCk6IHZvaWQge1xuXG4gICAgICAvLyBjb25zdCBkYXRhID0ge307XG4gICAgICAvLyB0aGlzLmNvbnRlbnQuLmZvcm1TZWN0aW9uQ29udGVudC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgLy8gICBlbGVtZW50XG4gICAgICAvLyB9KTtcbiAgICAgIC8vIHRoaXMucGFuZWxzQ29udGVudC5mb3JFYWNoKChwYW5lbCkgPT4ge1xuICAgICAgLy8gICBwYW5lbC5mb3JtU2VjdGlvbkNvbnRlbnQuZm9yRWFjaCgoY29udHJvbENvbnRlbnQpID0+IHtcbiAgICAgIC8vICAgICBkYXRhW2NvbnRyb2xDb250ZW50Lm5hbWVdID0gY29udHJvbENvbnRlbnQudmFsdWU7XG4gICAgICAvLyAgIH0pO1xuICAgICAgLy8gfSk7XG5cbiAgICAgIGlmICh0aGlzLmNvbnRlbnQuYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY29udGVudC5hY3Rpb24uZG9pdCh0aGlzLmNvbnRlbnQudmFsdWUpO1xuICAgICAgfVxuXG5cbiAgICB9XG59XG5cbiJdfQ==