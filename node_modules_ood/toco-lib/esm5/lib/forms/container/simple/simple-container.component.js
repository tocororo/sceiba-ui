/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/container/simple/simple-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ContainerControl } from '../container.control';
/**
 * Represents a container control that is showed very simple.
 * Usage notes:
 *  - It can be used as:
 * <container-simple [content]="simpleContent"></container-simple>
 * Where `content.formSection` is created, for example, as this:
 * this.content.formSection = new FormGroup({ }, [ ]);
 */
var ContainerSimpleComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerSimpleComponent, _super);
    function ContainerSimpleComponent() {
        return _super.call(this) || this;
    }
    /**
     * @return {?}
     */
    ContainerSimpleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /* Sets the default values. */
        this.init('');
    };
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @return {?}
     */
    ContainerSimpleComponent.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @return {?}
     */
    function (label) {
        /* Sets the default values. */
        _super.prototype.init.call(this, label);
    };
    ContainerSimpleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'container-simple',
                    template: "\n<!-- TODO: En dependencia del valor de `appearance`, se aplican las clases CSS para lograr la apariencia deseada. \n     Actualmente, `appearance = 'outline'` es el \u00FAnico que est\u00E1 hecho. -->\n<fieldset class=\"container-simple-form-field\" [formGroup]=\"content.formSection\" [attr.aria-label]=\"content.ariaLabel\">\n    <legend class=\"container-simple-form-field-legend\">{{ content.label }}</legend>\n\n    <ng-template get-view-container></ng-template>\n\n    <ng-container *ngIf=\"content.isDynamic\">\n        <button mat-raised-button color=\"primary\" (click)=\"addToFormArray()\">\n            <!-- <mat-icon>add box</mat-icon> -->\n            <mat-icon>add_circle</mat-icon>\n            Add new item\n        </button>\n        <button mat-raised-button color=\"primary\" [disabled]=\"!canRemoveFromFormArray\" (click)=\"clearFormArray()\">\n            <!-- <mat-icon>remove box</mat-icon> -->\n            <mat-icon>remove_circle</mat-icon>\n            Clear all\n        </button>\n    </ng-container>\n\n</fieldset>\n",
                    host: {
                        '[style.minWidth]': 'content.minWidth',
                        '[style.width]': 'content.width'
                    },
                    styles: [".container-simple-form-field{margin:-4px 0 24px;padding:0 10px 14px;cursor:default;background-color:#fff;border:1px solid rgba(0,0,0,.12);border-radius:4px}.container-simple-form-field-legend{padding:0 4px;background-color:#fff;color:rgba(0,0,0,.6);font-size:10px}"]
                }] }
    ];
    /** @nocollapse */
    ContainerSimpleComponent.ctorParameters = function () { return []; };
    return ContainerSimpleComponent;
}(ContainerControl));
export { ContainerSimpleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9jb250YWluZXIvc2ltcGxlL3NpbXBsZS1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7Ozs7OztBQVV4RDtJQVM4QyxvREFBZ0I7SUFFN0Q7ZUFFTyxpQkFBTztJQUNkLENBQUM7Ozs7SUFFTSwyQ0FBUTs7O0lBQWY7UUFFQyw4QkFBOEI7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUU7OztPQUdHOzs7Ozs7O0lBQ08sdUNBQUk7Ozs7OztJQUFkLFVBQWUsS0FBYTtRQUV4Qiw4QkFBOEI7UUFFOUIsaUJBQU0sSUFBSSxZQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLENBQUM7O2dCQS9CSixTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsbWlDQUFnRDtvQkFFaEQsSUFBSSxFQUFFO3dCQUNMLGtCQUFrQixFQUFFLGtCQUFrQjt3QkFDdEMsZUFBZSxFQUFFLGVBQWU7cUJBQ2hDOztpQkFDRDs7OztJQXdCRCwrQkFBQztDQUFBLEFBaENELENBUzhDLGdCQUFnQixHQXVCN0Q7U0F2Qlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb250YWluZXJDb250cm9sIH0gZnJvbSAnLi4vY29udGFpbmVyLmNvbnRyb2wnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb250YWluZXIgY29udHJvbCB0aGF0IGlzIHNob3dlZCB2ZXJ5IHNpbXBsZS4gXG4gKiBVc2FnZSBub3RlczogXG4gKiAgLSBJdCBjYW4gYmUgdXNlZCBhczogXG4gKiA8Y29udGFpbmVyLXNpbXBsZSBbY29udGVudF09XCJzaW1wbGVDb250ZW50XCI+PC9jb250YWluZXItc2ltcGxlPiBcbiAqIFdoZXJlIGBjb250ZW50LmZvcm1TZWN0aW9uYCBpcyBjcmVhdGVkLCBmb3IgZXhhbXBsZSwgYXMgdGhpczogXG4gKiB0aGlzLmNvbnRlbnQuZm9ybVNlY3Rpb24gPSBuZXcgRm9ybUdyb3VwKHsgfSwgWyBdKTsgXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2NvbnRhaW5lci1zaW1wbGUnLFxuXHR0ZW1wbGF0ZVVybDogJy4vc2ltcGxlLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL3NpbXBsZS1jb250YWluZXIuY29tcG9uZW50LnNjc3MnXSxcblx0aG9zdDoge1xuXHRcdCdbc3R5bGUubWluV2lkdGhdJzogJ2NvbnRlbnQubWluV2lkdGgnLFxuXHRcdCdbc3R5bGUud2lkdGhdJzogJ2NvbnRlbnQud2lkdGgnXG5cdH1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyU2ltcGxlQ29tcG9uZW50IGV4dGVuZHMgQ29udGFpbmVyQ29udHJvbCBpbXBsZW1lbnRzIE9uSW5pdFxue1xuXHRwdWJsaWMgY29uc3RydWN0b3IoKVxuXHR7XG4gICAgICAgIHN1cGVyKCk7XG5cdH1cblxuXHRwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuXHR7XG5cdFx0LyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG4gICAgICAgIHRoaXMuaW5pdCgnJyk7XG5cdH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBgY29udGVudGAgaW5wdXQgcHJvcGVydHkuIFxuICAgICAqIEBwYXJhbSBsYWJlbCBUaGUgZGVmYXVsdCBsYWJlbCB0byB1c2UuIEl0IGlzIHVzZWQgaWYgdGhlIGBjb250ZW50LmxhYmVsYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaW5pdChsYWJlbDogc3RyaW5nKTogdm9pZFxuICAgIHtcbiAgICAgICAgLyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG5cbiAgICAgICAgc3VwZXIuaW5pdChsYWJlbCk7XG4gICAgfVxufVxuIl19