/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/component-factory-depr/component-factory-depr.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component, Input } from '@angular/core';
import { FormFieldType } from '../form-field.control';
/**
 * This component represents a components' factory.
 * This component is deprecated.
 */
var ComponentFactory_Depr = /** @class */ (function () {
    function ComponentFactory_Depr() {
        this.formFieldType = FormFieldType;
        this.componentsContent = [];
    }
    /**
     * @return {?}
     */
    ComponentFactory_Depr.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log('ComponentFactory_Depr componentsContent: ', this.componentsContent);
    };
    ComponentFactory_Depr.decorators = [
        { type: Component, args: [{
                    selector: 'component-factory-depr',
                    template: "\n<div fxLayout=\"row wrap\" fxLayout.xs=\"column\"\nfxLayoutAlign=\"space-between end\" fxLayoutAlign.xs=\"space-between center\"\nfxLayoutGap=\"1em\" class=\"form-field-component\"\n>\n\n    <ng-container *ngFor=\"let componentContent of componentsContent\" [ngSwitch]=\"componentContent.type\">\n\n        <!-- <ng-container \n            *ngSwitchCase=\"formFieldType.checkbox\"\n            [formGroup]=\"componentContent.formGroup\"\n        >\n            <mat-checkbox\n                [style.width]=\"componentContent.width\"\n                [style.minWidth]=\"componentContent.minWidth\"\n                [value]=\"componentContent.value\"\n                (input)=\"$event.target.value\"\n                name=\"{{ componentContent.name }}\"\n                required=\"{{ componentContent.required }}\"\n                [formControlName]=\"componentContent.name\"\n            >\n                {{ componentContent.label }}\n            </mat-checkbox>\n        </ng-container> -->\n<!-- \n        <mat-form-field \n            *ngSwitchCase=\"formFieldType.textarea\"\n            [style.width]=\"componentContent.width\"\n            [style.minWidth]=\"componentContent.minWidth\"\n            [formGroup]=\"componentContent.formGroup\"\n        >\n            <textarea \n                matInput [value]=\"componentContent.value\"\n                (input)=\"$event.target.value\"\n                name=\"{{ componentContent.name }}\"\n                placeholder=\"{{ componentContent.label }}\"\n                required=\"{{ componentContent.required }}\"\n                [formControlName]=\"componentContent.name\"\n                minRows=\"20\"\n            ></textarea>\n        </mat-form-field> -->\n\n\n        <!-- <mat-form-field \n            *ngSwitchCase=\"formFieldType.datepicker\"\n            [style.width]=\"componentContent.width\"\n            [formGroup]=\"componentContent.formGroup\"\n        >\n            <input \n                matInput\n                [value]=\"componentContent.value\"\n                (input)=\"$event.target.value\"\n                [matDatepicker]=\"picker\"\n                name=\"{{ componentContent.name }}\"\n                placeholder=\"{{ componentContent.label }}\"\n                required=\"{{ componentContent.required }}\"\n                [formControlName]=\"componentContent.name\"\n            >\n            <mat-datepicker-toggle\n                matSuffix [for]=\"picker\"\n            ></mat-datepicker-toggle>\n            <mat-datepicker \n                #picker\n                startView=\"multi-year\"\n            ></mat-datepicker>\n        </mat-form-field> -->\n        <toco-checkbox *ngSwitchCase=\"formFieldType.datepicker\" [content]=\"componentContent\"></toco-checkbox>\n        <toco-datepicker *ngSwitchCase=\"formFieldType.datepicker\" [content]=\"componentContent\"></toco-datepicker>\n\n\n        <action-button *ngSwitchCase=\"formFieldType.action_button\" [content]=\"componentContent\"></action-button>\n\n\n        <container-panel *ngSwitchCase=\"formFieldType.container_panel\" [content]=\"componentContent\"></container-panel>\n\n        <container-simple *ngSwitchCase=\"formFieldType.container_simple\" [content]=\"componentContent\"></container-simple>\n\n\n        <container-label-diff-lang *ngSwitchCase=\"formFieldType.container_label_diff_lang\" [content]=\"componentContent\"></container-label-diff-lang>\n\n\n        <input-url *ngSwitchCase=\"formFieldType.url\" [content]=\"componentContent\"></input-url>\n        \n        <input-email *ngSwitchCase=\"formFieldType.email\" [content]=\"componentContent\"></input-email>\n\n        <input-identifier *ngSwitchCase=\"formFieldType.identifier\" [content]=\"componentContent\"></input-identifier>\n\n        <input-issn *ngSwitchCase=\"formFieldType.issn\" [content]=\"componentContent\"></input-issn>\n\n        <input-rnps *ngSwitchCase=\"formFieldType.rnps\" [content]=\"componentContent\"></input-rnps>\n\n        <input-select *ngSwitchCase=\"formFieldType.select\" [content]=\"componentContent\"></input-select>\n\n        <toco-vocabulary *ngSwitchCase=\"formFieldType.vocabulary\" [content]=\"componentContent\"></toco-vocabulary>\n\n        <toco-vocabulary-tree *ngSwitchCase=\"formFieldType.vocabulary_tree\" [content]=\"componentContent\"></toco-vocabulary-tree>\n        \n        <toco-term-parent *ngSwitchCase=\"formFieldType.term_parent\" [content]=\"componentContent\"></toco-term-parent>\n\n        <toco-textarea *ngSwitchCase=\"formFieldType.textarea\" [content]=\"componentContent\"></toco-textarea>\n\n        <toco-select *ngSwitchCase=\"formFieldType.select_expr\" [content]=\"componentContent\"></toco-select>\n\n        <toco-select-filter *ngSwitchCase=\"formFieldType.select_filter\" [content]=\"componentContent\"></toco-select-filter>\n\n        <toco-select-tree *ngSwitchCase=\"formFieldType.select_tree\" [content]=\"componentContent\"></toco-select-tree>\n\n        <input-text *ngSwitchDefault [content]=\"componentContent\"></input-text>\n\n    </ng-container>\n\n</div>\n",
                    styles: [".form-field-component{margin:5px}"]
                }] }
    ];
    /** @nocollapse */
    ComponentFactory_Depr.ctorParameters = function () { return []; };
    ComponentFactory_Depr.propDecorators = {
        componentsContent: [{ type: Input }]
    };
    return ComponentFactory_Depr;
}());
export { ComponentFactory_Depr };
if (false) {
    /**
     * Represents the `FormFieldType` enum for internal use.
     * @type {?}
     */
    ComponentFactory_Depr.prototype.formFieldType;
    /**
     * Input field that represents an array of types which types inherit from `FormFieldContent` interface.
     * This array contains the content of the components that the factory is going to create.
     * @type {?}
     */
    ComponentFactory_Depr.prototype.componentsContent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWZhY3RvcnktZGVwci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9jb21wb25lbnQtZmFjdG9yeS1kZXByL2NvbXBvbmVudC1mYWN0b3J5LWRlcHIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1BLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7QUFNdEQ7SUFtQkk7UUFFSSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUVuQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFTSx3Q0FBUTs7O0lBQWY7UUFFSSxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7O2dCQTdCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsNitKQUFzRDs7aUJBRXpEOzs7OztvQ0FZSSxLQUFLOztJQWNWLDRCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0F6QlkscUJBQXFCOzs7Ozs7SUFLOUIsOENBQW9EOzs7Ozs7SUFNcEQsa0RBQ2dDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICAgQ29weXJpZ2h0IChjKSAyMDIwIFVuaXZlcnNpZGFkIGRlIFBpbmFyIGRlbCBSw61vIFwiSGVybWFub3MgU2HDrXogTW9udGVzIGRlIE9jYVwiXG4gKiAgIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRm9ybUZpZWxkVHlwZSB9IGZyb20gJy4uL2Zvcm0tZmllbGQuY29udHJvbCc7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgcmVwcmVzZW50cyBhIGNvbXBvbmVudHMnIGZhY3RvcnkuIFxuICogVGhpcyBjb21wb25lbnQgaXMgZGVwcmVjYXRlZC4gXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnY29tcG9uZW50LWZhY3RvcnktZGVwcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NvbXBvbmVudC1mYWN0b3J5LWRlcHIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbXBvbmVudC1mYWN0b3J5LWRlcHIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRGYWN0b3J5X0RlcHIgaW1wbGVtZW50cyBPbkluaXRcbntcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBgRm9ybUZpZWxkVHlwZWAgZW51bSBmb3IgaW50ZXJuYWwgdXNlLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgZm9ybUZpZWxkVHlwZTogdHlwZW9mIEZvcm1GaWVsZFR5cGU7XG5cbiAgICAvKipcbiAgICAgKiBJbnB1dCBmaWVsZCB0aGF0IHJlcHJlc2VudHMgYW4gYXJyYXkgb2YgdHlwZXMgd2hpY2ggdHlwZXMgaW5oZXJpdCBmcm9tIGBGb3JtRmllbGRDb250ZW50YCBpbnRlcmZhY2UuIFxuICAgICAqIFRoaXMgYXJyYXkgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudHMgdGhhdCB0aGUgZmFjdG9yeSBpcyBnb2luZyB0byBjcmVhdGUuIFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbXBvbmVudHNDb250ZW50OiBhbnlbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpXG4gICAge1xuICAgICAgICB0aGlzLmZvcm1GaWVsZFR5cGUgPSBGb3JtRmllbGRUeXBlO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50c0NvbnRlbnQgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuICAgIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvbXBvbmVudEZhY3RvcnlfRGVwciBjb21wb25lbnRzQ29udGVudDogJywgdGhpcy5jb21wb25lbnRzQ29udGVudCk7XG4gICAgfVxufVxuIl19