/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/datepicker-year/datepicker-year.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InputControl } from '../../input/input.control';
import { Component, Input, forwardRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatDatepicker } from '@angular/material';
import { MomentDateAdapter } from '@angular/material-moment-adapter';
import moment from 'moment';
// const moment = _rollupMoment || _moment;
/** @type {?} */
export var YEAR_MODE_FORMATS = {
    parse: {
        dateInput: 'YYYY',
    },
    display: {
        dateInput: 'YYYY',
        monthYearLabel: 'MMM YYYY',
        dateA11yLabel: 'LL',
        monthYearA11yLabel: 'MMMM YYYY',
    },
};
var DatepickerYearComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatepickerYearComponent, _super);
    function DatepickerYearComponent() {
        var _this = _super.call(this) || this;
        /**
         * Component label
         */
        _this.label = '';
        _this.touchUi = false;
        // _inputCtrl: FormControl = new FormControl();
        // Function to call when the date changes.
        _this.onChange = (/**
         * @param {?} year
         * @return {?}
         */
        function (year) { });
        // Function to call when the input is touched (when a star is clicked).
        _this.onTouched = (/**
         * @return {?}
         */
        function () { });
        return _this;
    }
    Object.defineProperty(DatepickerYearComponent.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max ? this._max.year() : undefined;
        },
        set: /**
         * @param {?} max
         * @return {?}
         */
        function (max) {
            if (max) {
                /** @type {?} */
                var momentDate = typeof max === 'number' ? moment([max, 0, 1]) : moment(max);
                this._max = momentDate.isValid() ? momentDate : undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerYearComponent.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min ? this._min.year() : undefined;
        },
        set: /**
         * @param {?} min
         * @return {?}
         */
        function (min) {
            if (min) {
                /** @type {?} */
                var momentDate = typeof min === 'number' ? moment([min, 0, 1]) : moment(min);
                this._min = momentDate.isValid() ? momentDate : undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatepickerYearComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init('', '', false, true);
        // this.value = moment(this.value.toString()).format("YYYY")
        if (this.label == '') {
            this.label = this.content.label;
        }
        this.min = this.content.extraContent.minYear;
        this.max = this.content.extraContent.maxYear;
        console.log(this.content.extraContent, 'DATEPICKER YEAR EXTRA CONTENT....', this._min, this._max);
        this.writeValue(new Date(this.content.value));
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatepickerYearComponent.prototype.writeValue = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date && this._isYearEnabled(date.getFullYear())) {
            /** @type {?} */
            var momentDate = moment(date);
            if (momentDate.isValid()) {
                this.content.formControl.setValue(moment(date), { emitEvent: false });
                this.content.value = moment(date).year;
                // this.content.formControl.setValue(this.content.value);
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerYearComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerYearComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    // Allows Angular to disable the input.
    // Allows Angular to disable the input.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    DatepickerYearComponent.prototype.setDisabledState = 
    // Allows Angular to disable the input.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        isDisabled ? this._picker.disabled = true : this._picker.disabled = false;
        isDisabled ? this.content.formControl.disable() : this.content.formControl.enable();
    };
    /**
     * @param {?} chosenDate
     * @param {?} datepicker
     * @return {?}
     */
    DatepickerYearComponent.prototype._yearSelectedHandler = /**
     * @param {?} chosenDate
     * @param {?} datepicker
     * @return {?}
     */
    function (chosenDate, datepicker) {
        if (!this._isYearEnabled(chosenDate.year())) {
            datepicker.close();
            return;
        }
        this.content.formControl.setValue(chosenDate, { emitEvent: false });
        this.content.value = chosenDate.year;
        // this.content.formControl.setValue(this.content.value);
        this.onChange(chosenDate.toDate());
        this.onTouched();
        datepicker.close();
    };
    /**
     * @param {?} datepicker
     * @return {?}
     */
    DatepickerYearComponent.prototype._openDatepickerOnClick = /**
     * @param {?} datepicker
     * @return {?}
     */
    function (datepicker) {
        if (!datepicker.opened) {
            datepicker.open();
        }
    };
    /**
     * @param {?} datepicker
     * @return {?}
     */
    DatepickerYearComponent.prototype._openDatepickerOnFocus = /**
     * @param {?} datepicker
     * @return {?}
     */
    function (datepicker) {
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (!datepicker.opened) {
                datepicker.open();
            }
        }));
    };
    /** Whether the given year is enabled. */
    /**
     * Whether the given year is enabled.
     * @private
     * @param {?} year
     * @return {?}
     */
    DatepickerYearComponent.prototype._isYearEnabled = /**
     * Whether the given year is enabled.
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        // disable if the year is greater than maxDate lower than minDate
        if (year === undefined || year === null ||
            (this._max && year > this._max.year()) ||
            (this._min && year < this._min.year())) {
            return false;
        }
        return true;
    };
    DatepickerYearComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-datepicker-year',
                    template: "<mat-form-field style=\"width: 100%\">\n  <!-- <mat-label>{{ label }}</mat-label> -->\n  <input\n    matInput\n    [matDatepicker]=\"datepicker\"\n    [max]=\"_max\"\n    [min]=\"_min\"\n    [formControl]=\"content.formControl\"\n    (click)=\"_openDatepickerOnClick(datepicker)\"\n    (focus)=\"_openDatepickerOnFocus(datepicker)\"\n    readonly\n    placeholder=\"{{ content.label }}\"\n    required=\"{{ content.required }}\"\n  />\n\n  <mat-datepicker\n    #datepicker\n    [touchUi]=\"touchUi\"\n    startView=\"multi-year\"\n    (yearSelected)=\"_yearSelectedHandler($event, datepicker)\"\n    panelClass=\"year-picker\"\n  >\n  </mat-datepicker>\n</mat-form-field>\n",
                    providers: [
                        { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                        { provide: MAT_DATE_FORMATS, useValue: YEAR_MODE_FORMATS },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatepickerYearComponent; })),
                            multi: true,
                        },
                    ],
                    host: {
                        "[style.minWidth]": "content.minWidth",
                        "[style.width]": "content.width",
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DatepickerYearComponent.ctorParameters = function () { return []; };
    DatepickerYearComponent.propDecorators = {
        label: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        touchUi: [{ type: Input }],
        _picker: [{ type: ViewChild, args: [MatDatepicker, { static: true },] }]
    };
    return DatepickerYearComponent;
}(InputControl));
export { DatepickerYearComponent };
if (false) {
    /**
     * Component label
     * @type {?}
     */
    DatepickerYearComponent.prototype.label;
    /** @type {?} */
    DatepickerYearComponent.prototype._max;
    /** @type {?} */
    DatepickerYearComponent.prototype._min;
    /** @type {?} */
    DatepickerYearComponent.prototype.touchUi;
    /** @type {?} */
    DatepickerYearComponent.prototype._picker;
    /** @type {?} */
    DatepickerYearComponent.prototype.onChange;
    /** @type {?} */
    DatepickerYearComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,