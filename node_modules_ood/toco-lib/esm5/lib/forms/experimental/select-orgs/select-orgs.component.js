/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/select-orgs/select-orgs.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl } from '@angular/forms';
import { InputControl } from '../../input/input.control';
import { OrganizationServiceNoAuth } from '../../../backend/organization.service';
import { HttpParams } from '@angular/common/http';
import { HitList } from '../../../entities/common';
/**
 * @record
 */
function SelectOrgsComponentExtraContent() { }
if (false) {
    /** @type {?} */
    SelectOrgsComponentExtraContent.prototype.multiple;
    /** @type {?} */
    SelectOrgsComponentExtraContent.prototype.selectedOrgsIds;
    /**
     * Input `orgFilter` is a dict with `type` and `value` to filter the organizations,
     * \@Example { type: 'country' , value: 'Cuba" }
     * @type {?}
     */
    SelectOrgsComponentExtraContent.prototype.orgFilter;
}
var SelectOrgsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SelectOrgsComponent, _super);
    function SelectOrgsComponent(_orgService) {
        var _this = _super.call(this) || this;
        _this._orgService = _orgService;
        /**
         * Input `orgCtrl` is a FormControl
         */
        _this.orgCtrl = new FormControl();
        _this.filteredOrg = new HitList();
        _this.params = new HttpParams();
        _this.placeholder = "Escriba al menos 3 letras";
        _this.label = "Busque una organizaciÃ³n";
        _this.appearance = "outline";
        /**
         * Input `cleaning` is a boolen, if true then clean the search
         */
        _this.cleaning = false;
        _this.selectedOrg = new EventEmitter();
        _this.chipsList = [];
        _this.loading = false;
        _this.toSearch = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    SelectOrgsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.init('', '', false, false);
        this.extraContent = this.content.extraContent;
        this.content.value = [];
        this.extraContent.selectedOrgsIds.forEach((/**
         * @param {?} uuid
         * @return {?}
         */
        function (uuid) {
            _this._orgService.getOrganizationByUUID(uuid).subscribe({
                next: (/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.addChips(response);
                })
            });
        }));
        this.params = this.params.set('size', '10');
        this.params = this.params.set('page', '1');
        if (this.extraContent.orgFilter != undefined) {
            this.params = this.params.set(this.extraContent.orgFilter.type, this.extraContent.orgFilter.value);
        }
        this.orgCtrl.valueChanges
            .subscribe({
            next: (/**
             * @param {?} orgValueChanges
             * @return {?}
             */
            function (orgValueChanges) {
                _this.toSearch++;
                // this condition check if the param is a `string` an if at least write 3 letters
                if (_this.toSearch > 3 && typeof orgValueChanges === 'string') {
                    _this.toSearch = 0;
                    _this.params = _this.params.set('q', orgValueChanges);
                    _this.loading = true;
                    _this._orgService.getOrganizations(_this.params).subscribe({
                        next: (/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) {
                            _this.filteredOrg = response.hits;
                            _this.loading = false;
                        })
                    });
                }
                else if (typeof orgValueChanges === 'object') {
                    _this.toSearch = 0;
                    _this.selectedOrg.emit(orgValueChanges);
                    if (_this.cleaning) {
                        _this.orgCtrl.setValue('');
                    }
                }
            })
        });
    };
    /* This function return the organization name
     * @param org the Organization object
     */
    /* This function return the organization name
        * @param org the Organization object
        */
    /**
     * @param {?=} org
     * @return {?}
     */
    SelectOrgsComponent.prototype.displayFn = /* This function return the organization name
        * @param org the Organization object
        */
    /**
     * @param {?=} org
     * @return {?}
     */
    function (org) {
        return org ? org.name : undefined;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SelectOrgsComponent.prototype.addChips = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.extraContent.multiple) {
            if (!this.chipsList.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.id == value.id; }))) {
                this.chipsList.unshift(value);
                this.content.value.unshift(value);
            }
        }
        else {
            this.chipsList = [value];
            this.content.value = [value];
        }
        this.content.formControl.setValue(this.content.value);
        this.orgCtrl.setValue("");
        this.filteredOrg = new HitList();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SelectOrgsComponent.prototype.removeChip = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var todelete = this.chipsList[index];
        this.content.value = ((/** @type {?} */ (this.content.value))).filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.id !== todelete.id; }));
        this.content.formControl.setValue(this.content.value);
        this.chipsList.splice(index, 1);
    };
    SelectOrgsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-select-org',
                    template: "<mat-card>\n\n\n  <mat-card-subtitle>\n    <mat-form-field style=\"width: 100%;height: 100%;\">\n\n      <mat-label> {{content.label}} <span *ngIf=\"content.required\">*</span></mat-label>\n      <input matInput placeholder=\"{{placeholder}}\" aria-label=\"Buscar\" [matAutocomplete]=\"auto\" [formControl]=\"orgCtrl\">\n      <input\n        matInput\n        id=\"'inputId-'{{content.name}}\"\n        type=\"text\"\n        [formControl]=\"orgCtrl\"\n        [matAutocomplete]=\"auto\"\n          aria-label=\"Number\"\n      />\n\n      <mat-hint *ngIf=\"content.startHint\" [align]=\"'start'\">{{ content.startHint.label }}</mat-hint>\n\n      <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n\n        <mat-option *ngFor=\"let org of filteredOrg.hits\" [value]=\"org.metadata\" (click)=\"addChips(org)\">\n            <span title=\"{{org.metadata.name}}\">{{org.metadata.name}}</span>\n        </mat-option>\n\n      </mat-autocomplete>\n\n      <!-- <button mat-icon-button color=\"accent\" class=\"delete-filter\" (click)=\"remove_component()\">\n        <mat-icon>close</mat-icon>\n      </button> -->\n    </mat-form-field>\n  </mat-card-subtitle>\n\n  <mat-progress-bar\n    mode=\"indeterminate\"\n    *ngIf=\"loading\">\n  </mat-progress-bar>\n\n  <mat-card-content *ngIf=\"!loading\">\n    <mat-chip-list class=\"mat-chip-list-stacked\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: .5em\"\n      id=\"chiplist-{{content.name}}\">\n      <mat-chip *ngFor=\"let item of chipsList; let i=index\" (removed)=\"removeChip(i)\" [removable]=\"true\" style=\"width: 100%;height: 100%;\">\n        {{ item.metadata.name }}\n        <mat-icon matChipRemove>cancel</mat-icon>\n      </mat-chip>\n    </mat-chip-list>\n  </mat-card-content>\n\n</mat-card>\n",
                    host: {
                        "[style.minWidth]": "content.minWidth",
                        "[style.width]": "content.width"
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SelectOrgsComponent.ctorParameters = function () { return [
        { type: OrganizationServiceNoAuth }
    ]; };
    SelectOrgsComponent.propDecorators = {
        orgCtrl: [{ type: Input }],
        placeholder: [{ type: Input }],
        label: [{ type: Input }],
        appearance: [{ type: Input }],
        cleaning: [{ type: Input }],
        selectedOrg: [{ type: Output }]
    };
    return SelectOrgsComponent;
}(InputControl));
export { SelectOrgsComponent };
if (false) {
    /**
     * Input `orgCtrl` is a FormControl
     * @type {?}
     */
    SelectOrgsComponent.prototype.orgCtrl;
    /** @type {?} */
    SelectOrgsComponent.prototype.filteredOrg;
    /** @type {?} */
    SelectOrgsComponent.prototype.params;
    /** @type {?} */
    SelectOrgsComponent.prototype.placeholder;
    /** @type {?} */
    SelectOrgsComponent.prototype.label;
    /** @type {?} */
    SelectOrgsComponent.prototype.appearance;
    /**
     * Input `cleaning` is a boolen, if true then clean the search
     * @type {?}
     */
    SelectOrgsComponent.prototype.cleaning;
    /** @type {?} */
    SelectOrgsComponent.prototype.selectedOrg;
    /** @type {?} */
    SelectOrgsComponent.prototype.chipsList;
    /** @type {?} */
    SelectOrgsComponent.prototype.extraContent;
    /** @type {?} */
    SelectOrgsComponent.prototype.loading;
    /** @type {?} */
    SelectOrgsComponent.prototype.toSearch;
    /**
     * @type {?}
     * @private
     */
    SelectOrgsComponent.prototype._orgService;
}
//# sourceMappingURL=data:application/json;base64,