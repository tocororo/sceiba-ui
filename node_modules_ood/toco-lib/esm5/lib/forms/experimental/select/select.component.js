/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/select/select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component } from '@angular/core';
import { InputControl } from '../../input/input.control';
/**
 * This interface is deprecated.
 * An interface that represents a selectable option.
 * @record
 */
function SelectOption() { }
if (false) {
    /**
     * Returns the label that is showed.
     * @type {?}
     */
    SelectOption.prototype.label;
    /**
     * Returns the value that is stored internally.
     * @type {?}
     */
    SelectOption.prototype.value;
}
/**
 * This component is deprecated.
 * The `extraContent` recibe una funcion llamada getOptions() que se encarga de contruir un SelectOption[].
 * Si es multiple, entonces el `value` es un array de valores.
 */
var SelectComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SelectComponent, _super); /*FormFieldControl_Experimental*/
    function SelectComponent() {
        var _this = _super.call(this) || this;
        _this.selectOptions = [];
        _this.multiple = false;
        return _this;
    }
    /**
     * @return {?}
     */
    SelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log('SelectComponent OnInit');
        /* Sets the default values. */
        this.init('', '', false, false);
        this.onSelectionChange();
    };
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     * @param placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @param isAbbreviation If it is true then the `label` argument represents an abbreviation; otherwise, false.
     * @param alwaysHint If it is true then there is always at leat one hint start-aligned.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @param {?=} isAbbreviation If it is true then the `label` argument represents an abbreviation; otherwise, false.
     * @param {?=} alwaysHint If it is true then there is always at leat one hint start-aligned.
     * @return {?}
     */
    SelectComponent.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @param {?=} isAbbreviation If it is true then the `label` argument represents an abbreviation; otherwise, false.
     * @param {?=} alwaysHint If it is true then there is always at leat one hint start-aligned.
     * @return {?}
     */
    function (label, placeholder, isAbbreviation, alwaysHint) {
        /* Sets the default values. */
        var _this = this;
        if (placeholder === void 0) { placeholder = ''; }
        _super.prototype.init.call(this, label, placeholder, isAbbreviation, alwaysHint);
        //		if (this.content.appearance == undefined) this.content.appearance = false;
        this.multiple = this.content.extraContent['multiple'] ? this.content.extraContent['multiple'] : false;
        if (this.content.extraContent.observable) {
            this.content.extraContent.observable.subscribe((
            // next
            // next
            /**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.selectOptions = _this.content.extraContent.getOptions(response);
            }), (
            // error
            // error
            /**
             * @param {?} error
             * @return {?}
             */
            function (error) { console.log(error); }), (
            // complete
            // complete
            /**
             * @return {?}
             */
            function () { }));
        }
        else {
            this.selectOptions = this.content.extraContent.getOptions();
        }
    };
    /**
     * @return {?}
     */
    SelectComponent.prototype.onSelectionChange = /**
     * @return {?}
     */
    function () {
        if ((this.content.extraContent) && (this.content.extraContent.selectionChange)) {
            this.content.extraContent.selectionChange(this.content.value);
        }
        console.log('Select value: ', this.content.formControl.value);
    };
    SelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-select',
                    template: "\n<mat-form-field\n  class=\"select-mat-form-field\"\n  [appearance]=\"content.appearance\"\n>\n\n  <mat-label>\n    {{ content.label }}\n  </mat-label>\n\n  <mat-select \n    [formControl]=\"content.formControl\"\n    [required]=\"content.required\"\n    [style.textAlign]=\"content.textAlign\"\n    [attr.aria-label]=\"content.ariaLabel\"\n    [(value)]=\"content.value\"\n    [multiple]=\"multiple\"\n    (selectionChange)=\"onSelectionChange()\"\n  >\n    <mat-option \n      *ngFor=\"let option of selectOptions\" \n      [value]=\"option.value\"\n    >\n      {{ option.label }}\n    </mat-option>\n  </mat-select>\n\n</mat-form-field>\n",
                    host: {
                        '[style.minWidth]': 'content.minWidth',
                        '[style.width]': 'content.width'
                    },
                    styles: [".select-mat-form-field{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    SelectComponent.ctorParameters = function () { return []; };
    return SelectComponent;
}(InputControl /*FormFieldControl_Experimental*/));
export { SelectComponent };
if (false) {
    /**
     * Returns the options list that can be selected.
     * By default, its value is `[]`.
     * @type {?}
     */
    SelectComponent.prototype.selectOptions;
    /**
     * Returns true if the selection can be multiple; otherwise, false.
     * By default, its value is `false`.
     * @type {?}
     */
    SelectComponent.prototype.multiple;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2Zvcm1zL2V4cGVyaW1lbnRhbC9zZWxlY3Qvc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7OztBQU16RCwyQkFnQkM7Ozs7OztJQVhBLDZCQUFjOzs7OztJQUtkLDZCQUFXOzs7Ozs7O0FBYVo7SUFTcUMsMkNBQVksQ0FBQSxpQ0FBaUM7SUFjakY7UUFBQSxZQUVPLGlCQUFPLFNBSWI7UUFGQSxLQUFJLENBQUMsYUFBYSxHQUFHLEVBQUcsQ0FBQztRQUN6QixLQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzs7SUFDdkIsQ0FBQzs7OztJQUVNLGtDQUFROzs7SUFBZjtRQUVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUVoQyw4QkFBOEI7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVoQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUU7Ozs7OztPQU1HOzs7Ozs7Ozs7O0lBQ08sOEJBQUk7Ozs7Ozs7OztJQUFkLFVBQWUsS0FBeUIsRUFBRSxXQUF3QixFQUFFLGNBQXVCLEVBQUUsVUFBbUI7UUFFNUcsOEJBQThCO1FBRmxDLGlCQStCQztRQS9CeUMsNEJBQUEsRUFBQSxnQkFBd0I7UUFJcEUsaUJBQU0sSUFBSSxZQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRTdELDhFQUE4RTtRQUM1RSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRXRHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUN4QztZQUNDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxTQUFTO1lBRTdDLE9BQU87Ozs7OztZQUNQLFVBQUMsUUFBYTtnQkFDYixLQUFJLENBQUMsYUFBYSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRSxDQUFDO1lBRUQsUUFBUTs7Ozs7O1lBQ1IsVUFBQyxLQUFVLElBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFHdkMsV0FBVzs7Ozs7WUFDWCxjQUFRLENBQUMsRUFFVCxDQUFDO1NBQ0Y7YUFFRDtZQUNDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDNUQ7SUFDQyxDQUFDOzs7O0lBRUcsMkNBQWlCOzs7SUFBeEI7UUFFQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxFQUM5RTtZQUNDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlEO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvRCxDQUFDOztnQkF6RkQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxhQUFhO29CQUN2Qiwrb0JBQXNDO29CQUV0QyxJQUFJLEVBQUU7d0JBQ0wsa0JBQWtCLEVBQUUsa0JBQWtCO3dCQUN0QyxlQUFlLEVBQUUsZUFBZTtxQkFDaEM7O2lCQUNEOzs7O0lBa0ZELHNCQUFDO0NBQUEsQUExRkQsQ0FTcUMsWUFBWSxDQUFBLGlDQUFpQyxHQWlGakY7U0FqRlksZUFBZTs7Ozs7OztJQU0zQix3Q0FBcUM7Ozs7OztJQU1yQyxtQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMjAgVW5pdmVyc2lkYWQgZGUgUGluYXIgZGVsIFLDrW8gXCJIZXJtYW5vcyBTYcOteiBNb250ZXMgZGUgT2NhXCJcbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnRyb2wgfSBmcm9tICcuLi8uLi9pbnB1dC9pbnB1dC5jb250cm9sJztcblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBpcyBkZXByZWNhdGVkLiBcbiAqIEFuIGludGVyZmFjZSB0aGF0IHJlcHJlc2VudHMgYSBzZWxlY3RhYmxlIG9wdGlvbi4gXG4gKi9cbmludGVyZmFjZSBTZWxlY3RPcHRpb25cbntcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxhYmVsIHRoYXQgaXMgc2hvd2VkLiBcblx0ICovXG5cdGxhYmVsOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhbHVlIHRoYXQgaXMgc3RvcmVkIGludGVybmFsbHkuIFxuXHQgKi9cblx0dmFsdWU6IGFueTtcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoaXMgb3B0aW9uIGlzIHNlbGVjdGVkOyBvdGhlcndpc2UsIGZhbHNlLiBcblx0ICovXG5cdC8vIHNlbGVjdGVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkLiBcbiAqIFRoZSBgZXh0cmFDb250ZW50YCByZWNpYmUgdW5hIGZ1bmNpb24gbGxhbWFkYSBnZXRPcHRpb25zKCkgcXVlIHNlIGVuY2FyZ2EgZGUgY29udHJ1aXIgdW4gU2VsZWN0T3B0aW9uW10uIFxuICogU2kgZXMgbXVsdGlwbGUsIGVudG9uY2VzIGVsIGB2YWx1ZWAgZXMgdW4gYXJyYXkgZGUgdmFsb3Jlcy4gXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ3RvY28tc2VsZWN0Jyxcblx0dGVtcGxhdGVVcmw6ICcuL3NlbGVjdC5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL3NlbGVjdC5jb21wb25lbnQuc2NzcyddLFxuXHRob3N0OiB7XG5cdFx0J1tzdHlsZS5taW5XaWR0aF0nOiAnY29udGVudC5taW5XaWR0aCcsXG5cdFx0J1tzdHlsZS53aWR0aF0nOiAnY29udGVudC53aWR0aCdcblx0fVxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RDb21wb25lbnQgZXh0ZW5kcyBJbnB1dENvbnRyb2wvKkZvcm1GaWVsZENvbnRyb2xfRXhwZXJpbWVudGFsKi8gaW1wbGVtZW50cyBPbkluaXRcbntcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG9wdGlvbnMgbGlzdCB0aGF0IGNhbiBiZSBzZWxlY3RlZC4gXG5cdCAqIEJ5IGRlZmF1bHQsIGl0cyB2YWx1ZSBpcyBgW11gLiBcblx0ICovXG5cdHB1YmxpYyBzZWxlY3RPcHRpb25zOiBTZWxlY3RPcHRpb25bXTtcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBzZWxlY3Rpb24gY2FuIGJlIG11bHRpcGxlOyBvdGhlcndpc2UsIGZhbHNlLiBcblx0ICogQnkgZGVmYXVsdCwgaXRzIHZhbHVlIGlzIGBmYWxzZWAuIFxuXHQgKi9cblx0cHVibGljIG11bHRpcGxlOiBib29sZWFuO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcigpXG5cdHtcbiAgICAgICAgc3VwZXIoKTtcblxuXHRcdHRoaXMuc2VsZWN0T3B0aW9ucyA9IFsgXTtcblx0XHR0aGlzLm11bHRpcGxlID0gZmFsc2U7XG5cdH1cblxuXHRwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuXHR7XG5cdFx0Y29uc29sZS5sb2coJ1NlbGVjdENvbXBvbmVudCBPbkluaXQnKTtcblxuICAgICAgICAvKiBTZXRzIHRoZSBkZWZhdWx0IHZhbHVlcy4gKi9cblx0XHR0aGlzLmluaXQoJycsICcnLCBmYWxzZSwgZmFsc2UpO1xuXG5cdFx0dGhpcy5vblNlbGVjdGlvbkNoYW5nZSgpO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYGNvbnRlbnRgIGlucHV0IHByb3BlcnR5LiBcbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGRlZmF1bHQgbGFiZWwgdG8gdXNlLiBJdCBpcyB1c2VkIGlmIHRoZSBgY29udGVudC5sYWJlbGAgaXMgbm90IHNwZWNpZmllZC4gXG5cdCAqIEBwYXJhbSBwbGFjZWhvbGRlciBUaGUgZGVmYXVsdCBwbGFjZWhvbGRlciB0byB1c2UuIEl0IGlzIHVzZWQgaWYgdGhlIGBjb250ZW50LnBsYWNlaG9sZGVyYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAgICAgKiBAcGFyYW0gaXNBYmJyZXZpYXRpb24gSWYgaXQgaXMgdHJ1ZSB0aGVuIHRoZSBgbGFiZWxgIGFyZ3VtZW50IHJlcHJlc2VudHMgYW4gYWJicmV2aWF0aW9uOyBvdGhlcndpc2UsIGZhbHNlLiBcbiAgICAgKiBAcGFyYW0gYWx3YXlzSGludCBJZiBpdCBpcyB0cnVlIHRoZW4gdGhlcmUgaXMgYWx3YXlzIGF0IGxlYXQgb25lIGhpbnQgc3RhcnQtYWxpZ25lZC4gXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGluaXQobGFiZWw6IHN0cmluZyB8IHVuZGVmaW5lZCwgcGxhY2Vob2xkZXI6IHN0cmluZyA9ICcnLCBpc0FiYnJldmlhdGlvbjogYm9vbGVhbiwgYWx3YXlzSGludDogYm9vbGVhbik6IHZvaWRcbiAgICB7XG4gICAgICAgIC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuXG5cdFx0c3VwZXIuaW5pdChsYWJlbCwgcGxhY2Vob2xkZXIsIGlzQWJicmV2aWF0aW9uLCBhbHdheXNIaW50KTtcblxuLy9cdFx0aWYgKHRoaXMuY29udGVudC5hcHBlYXJhbmNlID09IHVuZGVmaW5lZCkgdGhpcy5jb250ZW50LmFwcGVhcmFuY2UgPSBmYWxzZTtcblx0XHR0aGlzLm11bHRpcGxlID0gdGhpcy5jb250ZW50LmV4dHJhQ29udGVudFsnbXVsdGlwbGUnXSA/IHRoaXMuY29udGVudC5leHRyYUNvbnRlbnRbJ211bHRpcGxlJ10gOiBmYWxzZTtcblxuXHRcdGlmICh0aGlzLmNvbnRlbnQuZXh0cmFDb250ZW50Lm9ic2VydmFibGUpXG5cdFx0e1xuXHRcdFx0dGhpcy5jb250ZW50LmV4dHJhQ29udGVudC5vYnNlcnZhYmxlLnN1YnNjcmliZShcblxuXHRcdFx0XHQvLyBuZXh0XG5cdFx0XHRcdChyZXNwb25zZTogYW55KSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RPcHRpb25zID0gdGhpcy5jb250ZW50LmV4dHJhQ29udGVudC5nZXRPcHRpb25zKHJlc3BvbnNlKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBlcnJvclxuXHRcdFx0XHQoZXJyb3I6IGFueSkgPT4geyBjb25zb2xlLmxvZyhlcnJvcik7IH1cblx0XHRcdFx0LFxuXG5cdFx0XHRcdC8vIGNvbXBsZXRlXG5cdFx0XHRcdCgpID0+IHsgfVxuXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dGhpcy5zZWxlY3RPcHRpb25zID0gdGhpcy5jb250ZW50LmV4dHJhQ29udGVudC5nZXRPcHRpb25zKCk7XG5cdFx0fVxuICAgIH1cblxuXHRwdWJsaWMgb25TZWxlY3Rpb25DaGFuZ2UoKTogdm9pZFxuXHR7XG5cdFx0aWYgKCh0aGlzLmNvbnRlbnQuZXh0cmFDb250ZW50KSAmJiAodGhpcy5jb250ZW50LmV4dHJhQ29udGVudC5zZWxlY3Rpb25DaGFuZ2UpKVxuXHRcdHtcblx0XHRcdHRoaXMuY29udGVudC5leHRyYUNvbnRlbnQuc2VsZWN0aW9uQ2hhbmdlKHRoaXMuY29udGVudC52YWx1ZSk7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coJ1NlbGVjdCB2YWx1ZTogJywgdGhpcy5jb250ZW50LmZvcm1Db250cm9sLnZhbHVlKTtcblx0fVxufVxuIl19