/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/experimental/vocabulary-tree/vocabulary-tree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component } from "@angular/core";
import { FormControl, } from "@angular/forms";
import { startWith, map } from "rxjs/operators";
import { TaxonomyService } from '../../../backend/public-api';
import { InputControl } from '../../input/input.control';
/**
 * @record
 */
function VocabularyComponentExtraContent() { }
if (false) {
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.multiple;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.selectedTermsIds;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.excludeTermsIds;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.level;
    /** @type {?} */
    VocabularyComponentExtraContent.prototype.vocab;
}
/**
 * A control to select a term or terms in a vocabulary.
 */
var VocabularyTreeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(VocabularyTreeComponent, _super);
    function VocabularyTreeComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        // internalControl = new FormControl();
        //this control is used by the chips,not necessary to expose it
        _this.chipsFormControl = new FormControl();
        _this.levelsOptions = null;
        _this.levelsSelection = new Array();
        _this.lastLevelTerm = null;
        _this.chipsList = [];
        _this.leafsOptions = null;
        _this.terms = [];
        _this.loading = true;
        // selectedTermsIds = [];
        _this.searchText = "Seleccione las opciones";
        return _this;
    }
    /**
     * @return {?}
     */
    VocabularyTreeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.init('', '', false, true);
        // (this.content.parentFormSection as FormGroup).addControl(
        //   this.content.name,
        //   this.content.formControl
        // );
        if (this.content.required) {
            this.content.formControl.setValidators((/**
             * @param {?} control
             * @return {?}
             */
            function (control) {
                return !_this.content.value || _this.content.value.length == 0
                    ? { requiredTerms: "No Terms Selected" }
                    : null;
            }));
        }
        this.inputId = this.content.label.trim().toLowerCase();
        if (this.content.extraContent) {
            this.extraContent = this.content.extraContent;
            // already selected terms
            if (!this.extraContent.selectedTermsIds) {
                this.extraContent.selectedTermsIds = [];
            }
            // terms ids to exclude of the possible options.
            if (!this.extraContent.excludeTermsIds) {
                this.extraContent.excludeTermsIds = [];
            }
            this.content.value = [];
            this.content.formControl.setValue(this.content.value);
            if (this.extraContent.level == undefined) {
                this.extraContent.level = 10;
            }
            if (this.extraContent.vocab) {
                this.loading = true;
                this.service.getTermsTreeByVocab(this.extraContent.vocab, 0).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.loading = false;
                    /** @type {?} */
                    var nextLevel = response.data.tree.term_node;
                    if (_this.extraContent.level > 0) {
                        _this.levelsOptions = new Array();
                        // this.levelsSelection = new Array<TermNode>();
                        _this._setLevelsOptions(nextLevel, 0);
                    }
                    else {
                        _this.leafsOptions = _this._get_terms(nextLevel);
                        _this._updateFilteredOptions();
                    }
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    console.log("The observable got an error notification: " + err + ".");
                }), (/**
                 * @return {?}
                 */
                function () {
                    console.log("The observable got a complete notification.");
                    _this.loading = !_this.loading;
                }));
            }
            //   else if(this.extraContent.termID){
            //     this.service.getTermByUUID(this.extraContent.termID, this.extraContent.level)
            //     .subscribe(this.termsTreeObserver);
            // }
        }
    };
    /**
     * @private
     * @param {?} nextLevel
     * @param {?} level
     * @return {?}
     */
    VocabularyTreeComponent.prototype._setLevelsOptions = /**
     * @private
     * @param {?} nextLevel
     * @param {?} level
     * @return {?}
     */
    function (nextLevel, level) {
        var _this = this;
        console.log('VOCABULARY TREE *****');
        console.log(this.extraContent.selectedTermsIds, nextLevel);
        /** @type {?} */
        var result = [];
        nextLevel.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (!((/** @type {?} */ (_this.extraContent.excludeTermsIds))).some((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return id === node.term.uuid; }))) {
                result.push(node);
            }
            if (((/** @type {?} */ (_this.extraContent.selectedTermsIds))).some((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return id === node.term.uuid; }))) {
                _this.onSelectionChange(level, node.term);
                // this.addTermToValue(node.term);
                // this.levelsSelection[level] = node.term;
            }
        }));
        this.levelsOptions.push(result);
    };
    /**
     * @param {?} level
     * @param {?} item
     * @return {?}
     */
    VocabularyTreeComponent.prototype.onSelectionChange = /**
     * @param {?} level
     * @param {?} item
     * @return {?}
     */
    function (level, item) {
        var _this = this;
        console.log(level, item);
        this.leafsOptions = null;
        this.chipsList = [];
        this.loading = true;
        this.lastLevelTerm = item;
        this.levelsOptions = this.levelsOptions.slice(0, level + 1);
        // this.removeTermFromValue(this.levelsSelection[level]);
        // this.levelsSelection[level] = item;
        // this.addTermToValue(this.levelsSelection[level]);
        this.content.value = [];
        this.levelsSelection = this.levelsSelection.slice(0, level);
        this.levelsSelection.push(item);
        this.levelsSelection.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _this.addTermToValue(element, false);
        }));
        this.service.getTermByUUID(item.uuid, 1).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            console.log(response);
            _this.loading = false;
            /** @type {?} */
            var nextLevel = response.data.term_node.children;
            if (_this.extraContent.level > level + 1) {
                _this._setLevelsOptions(nextLevel, level);
            }
            else {
                _this.leafsOptions = _this._get_terms(nextLevel);
                _this._updateFilteredOptions();
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.log("The observable got an error notification: " + err + ".");
        }), (/**
         * @return {?}
         */
        function () {
            console.log("The observable got a complete notification.");
            _this.loading = !_this.loading;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    VocabularyTreeComponent.prototype.setValidation = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.content.formControl.valid) {
            this.chipsFormControl.setErrors(null);
        }
        else {
            this.chipsFormControl.setErrors({ requiered: true });
        }
    };
    /**
     * @private
     * @param {?} term
     * @param {?=} isLeaf
     * @return {?}
     */
    VocabularyTreeComponent.prototype.addTermToValue = /**
     * @private
     * @param {?} term
     * @param {?=} isLeaf
     * @return {?}
     */
    function (term, isLeaf) {
        var _this = this;
        if (isLeaf === void 0) { isLeaf = true; }
        if (this.extraContent.multiple) {
            this.content.value.unshift(term);
        }
        else {
            this.content.value = [];
            this.levelsSelection.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.content.value.unshift(element);
            }));
            this.content.value.unshift(term);
        }
        console.log(this.content.value);
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
        console.log(this.content.formControl);
    };
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    VocabularyTreeComponent.prototype.removeTermFromValue = /**
     * @private
     * @param {?} term
     * @return {?}
     */
    function (term) {
        this.content.value = ((/** @type {?} */ (this.content.value))).filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.id !== term.id; }));
        this.content.formControl.setValue(this.content.value);
        this.setValidation();
        console.log(this.content.formControl);
    };
    /**
     * @private
     * @return {?}
     */
    VocabularyTreeComponent.prototype._updateFilteredOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.filteredOptions = this.chipsFormControl.valueChanges.pipe(startWith(""), map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var filterValue = value ? value.toLowerCase() : "";
            return _this.leafsOptions.filter((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                return option.term.description.toLowerCase().includes(filterValue);
            }));
        })));
    };
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    VocabularyTreeComponent.prototype._get_terms = /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        var _this = this;
        this.chipsList = [];
        /** @type {?} */
        var result = [];
        nodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (((/** @type {?} */ (_this.extraContent.selectedTermsIds))).some((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return id === node.term.uuid; }))) {
                _this.addTermToValue(node.term);
                _this.chipsList.push(node);
            }
            else {
                // if is not in any of the exclude term ids, then push
                if (!((/** @type {?} */ (_this.extraContent.excludeTermsIds))).some((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) { return id === node.term.uuid; }))) {
                    result.push(node);
                }
            }
        }));
        return result;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    VocabularyTreeComponent.prototype.addChips = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.extraContent.multiple) {
            this.chipsList.unshift(value);
        }
        else {
            // if not is multiple, then the element in the chipsList goes back to the options
            if (this.chipsList.length > 0) {
                this.leafsOptions.push(this.chipsList[0]);
            }
            this.chipsList = [value];
        }
        console.log(value, this.chipsList);
        this.addTermToValue(value.term);
        this.leafsOptions = this.leafsOptions.filter((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.term.id !== value.term.id; }));
        this.chipsFormControl.setValue("");
        // document.getElementById(this.inputId).blur();
        this._updateFilteredOptions();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    VocabularyTreeComponent.prototype.removeChip = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.leafsOptions.push(this.chipsList[index]);
        this.removeTermFromValue(this.chipsList[index].term);
        this.chipsList.splice(index, 1);
        this._updateFilteredOptions();
    };
    /**
     * @param {?} node
     * @return {?}
     */
    VocabularyTreeComponent.prototype.getTermNameInATree = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.parent != null) {
            return (this.getTermNameInATree(node.parent) + " / " + node.term.description);
        }
        else {
            return node.term.description;
        }
    };
    VocabularyTreeComponent.decorators = [
        { type: Component, args: [{
                    selector: "toco-vocabulary-tree",
                    template: "<mat-card>\n  <mat-card-header>\n\n    <mat-progress-bar *ngIf=\"!levelsOptions\" mode=\"indeterminate\"></mat-progress-bar>\n\n    <ng-template *ngIf=\"levelsOptions\" >\n\n      <mat-form-field\n      *ngFor=\"let level of levelsOptions; let i = index\"\n      class=\"select-mat-form-field\"\n      [appearance]=\"content.appearance\"\n      style=\"width: 100%;\"\n    >\n      <mat-label>{{ content.label }}</mat-label>\n      <mat-select\n        name=\"item\"\n        [required]=\"content.required\"\n        [multiple]=\"false\"\n        [(value)]=\"levelsSelection[i]\"\n        (selectionChange)=\"onSelectionChange(i, levelsSelection[i])\"\n      >\n        <mat-option *ngFor=\"let item of level\" [value]=\"item.term\">\n          {{ item.term.description }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    </ng-template>\n  </mat-card-header>\n\n  <mat-card-content *ngIf=\"lastLevelTerm\">\n    <mat-progress-bar *ngIf=\"!leafsOptions\" mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-form-field *ngIf=\"leafsOptions\" style=\"width: 100%;\">\n      <mat-label>\n        {{ lastLevelTerm.description }}\n        <span *ngIf=\"content.required\">*</span></mat-label\n      >\n      <input\n        matInput\n        id=\"'inputId-'{{ content.name }}\"\n        type=\"text\"\n        [formControl]=\"chipsFormControl\"\n        [matAutocomplete]=\"auto\"\n        aria-label=\"Number\"\n      />\n\n      <mat-hint *ngIf=\"content.startHint\" [align]=\"'start'\">{{\n        content.startHint.label\n      }}</mat-hint>\n      <mat-hint *ngIf=\"!content.startHint\" [align]=\"'start'\">{{\n        searchText\n      }}</mat-hint>\n\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option\n          *ngFor=\"let option of filteredOptions | async\"\n          [value]=\"option.term.description\"\n          (click)=\"addChips(option)\"\n          [title]=\"option.term.description\"\n        >\n          {{ option.term.description }}\n        </mat-option>\n      </mat-autocomplete>\n\n      <!-- <button mat-icon-button color=\"accent\" class=\"delete-filter\" (click)=\"remove_component()\">\n      <mat-icon>close</mat-icon>\n    </button> -->\n    </mat-form-field>\n\n    <mat-chip-list\n      class=\"mat-chip-list-stacked\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start center\"\n      style=\"margin-bottom: 0.5em;\"\n      id=\"chiplist-{{ extraContent.vocab }}\"\n    >\n      <mat-chip\n        *ngFor=\"let item of chipsList; let i = index\"\n        (removed)=\"removeChip(i)\"\n        [removable]=\"true\"\n      >\n        {{ getTermNameInATree(item) }}\n        <mat-icon matChipRemove>cancel</mat-icon>\n      </mat-chip>\n    </mat-chip-list>\n  </mat-card-content>\n</mat-card>\n",
                    host: {
                        "[style.minWidth]": "content.minWidth",
                        "[style.width]": "content.width",
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    VocabularyTreeComponent.ctorParameters = function () { return [
        { type: TaxonomyService }
    ]; };
    return VocabularyTreeComponent;
}(InputControl));
export { VocabularyTreeComponent };
if (false) {
    /** @type {?} */
    VocabularyTreeComponent.prototype.chipsFormControl;
    /** @type {?} */
    VocabularyTreeComponent.prototype.levelsOptions;
    /** @type {?} */
    VocabularyTreeComponent.prototype.levelsSelection;
    /** @type {?} */
    VocabularyTreeComponent.prototype.lastLevelTerm;
    /** @type {?} */
    VocabularyTreeComponent.prototype.inputId;
    /** @type {?} */
    VocabularyTreeComponent.prototype.filteredOptions;
    /** @type {?} */
    VocabularyTreeComponent.prototype.chipsList;
    /** @type {?} */
    VocabularyTreeComponent.prototype.leafsOptions;
    /** @type {?} */
    VocabularyTreeComponent.prototype.terms;
    /** @type {?} */
    VocabularyTreeComponent.prototype.loading;
    /** @type {?} */
    VocabularyTreeComponent.prototype.extraContent;
    /** @type {?} */
    VocabularyTreeComponent.prototype.searchText;
    /**
     * @type {?}
     * @private
     */
    VocabularyTreeComponent.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,