/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/action/action.control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { HintValue, FormFieldControl, ContentPosition, HintPosition } from '../form-field.control';
/** @enum {string} */
var OperationAction = {
    back: "back",
    cancel: "cancel",
    reset: "reset",
    delete: "delete",
    submit: "submit",
};
export { OperationAction };
/**
 * Returns true if the control is disabled; otherwise, false.
 * This function returns false by definition, that is, the control is enabled.
 * @param {?} sender Control that wants to know its disabled state.
 * @return {?}
 */
export function isDisabledDefault(sender) {
    /* This function returns false by definition, that is, the control is enabled. */
    return false;
}
/**
 * This function does nothing by definition.
 * @param {?} sender Control that was clicked.
 * @return {?}
 */
export function clickDefault(sender) {
    /* This function does nothing by definition. */
}
/**
 * A base interface that represents the content of an `ActionControl`.
 * @record
 */
export function ActionContent() { }
if (false) {
    /**
     * Returns the control's icon.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    ActionContent.prototype.icon;
    /**
     * Returns the control's tooltip.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    ActionContent.prototype.tooltip;
    /**
     * Returns the function that is executed for knowing if the control is or is not disabled.
     * By default, its value is `isDisabledDefault`.
     * @type {?|undefined}
     */
    ActionContent.prototype.isDisabled;
    /**
     * Returns the function that is executed when the user clicks the control.
     * By default, its value is `clickDefault`.
     * @type {?|undefined}
     */
    ActionContent.prototype.click;
}
/**
 * Represents the base abstract class for a control that executes actions.
 * @abstract
 */
var ActionControl = /** @class */ (function (_super) {
    tslib_1.__extends(ActionControl, _super);
    /**
     * Constructs a new instance of this class.
     */
    function ActionControl() {
        return _super.call(this) || this;
    }
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     * @param placeholder It is NOT used here. Fix that.
     * @param alwaysHint If it is true then there is always a hint start-aligned.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder It is NOT used here. Fix that.
     * @param {?=} alwaysHint If it is true then there is always a hint start-aligned.
     * @return {?}
     */
    ActionControl.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder It is NOT used here. Fix that.
     * @param {?=} alwaysHint If it is true then there is always a hint start-aligned.
     * @return {?}
     */
    function (label, placeholder, alwaysHint) {
        /* Sets the default values. */
        if (placeholder === void 0) { placeholder = ''; }
        if (alwaysHint === void 0) { alwaysHint = true; }
        _super.prototype.init.call(this, label, placeholder);
        /***************************** `mat-icon` properties. *****************************/
        if (this.content.icon != undefined)
            this.content.icon.setDefaultValueIfUndefined_setPosition(ContentPosition.prefix);
        /************************** `mat-form-field` properties. **************************/
        // if (this.content.appearance == undefined) this.content.appearance = TextInputAppearance.standard;
        /**************************** `matTooltip` properties. ****************************/
        if (alwaysHint && (this.content.tooltip == undefined)) {
            this.content.tooltip = new HintValue(HintPosition.start, this.content.label);
        }
        if (this.content.isDisabled == undefined)
            this.content.isDisabled = isDisabledDefault;
        if (this.content.click == undefined)
            this.content.click = clickDefault;
    };
    /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     */
    /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     * @protected
     * @return {?}
     */
    ActionControl.prototype.initValue = /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     * @protected
     * @return {?}
     */
    function () {
        /* It does not need to do something because the child controls are already initialized. */
        // /* In this way, checks if the specified `content.value` is correct. */
        // this.content.formControl.setValue(this.content.value);
        // /* Marks the control as `touched`. */
        // this.content.formControl.markAsTouched({
        //     onlySelf: true
        // });
    };
    Object.defineProperty(ActionControl.prototype, "getInstance", {
        /**
         * Returns this instance.
         */
        get: /**
         * Returns this instance.
         * @return {?}
         */
        function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    ActionControl.propDecorators = {
        content: [{ type: Input }]
    };
    return ActionControl;
}(FormFieldControl));
export { ActionControl };
if (false) {
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    ActionControl.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,