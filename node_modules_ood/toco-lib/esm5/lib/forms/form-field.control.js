/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/form-field.control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Input } from '@angular/core';
import { FormGroup, FormArray, FormControl } from '@angular/forms';
import { IconService } from '../core/services/icon.service';
/** @enum {string} */
var TextAlign = {
    /**
     * The inline contents are aligned to the left edge of the line box. In vertical text,
     * `left` aligns to the edge of the line box that would be the start edge for left-to-right text.
     */
    left: "left",
    /**
     * The inline contents are centered within the line box.
     */
    center: "center",
    /**
     * The inline contents are aligned to the right edge of the line box. In vertical text,
     * `right` aligns to the edge of the line box that would be the end edge for left-to-right text.
     */
    right: "right",
    /**
     * The text is justified.
     */
    justify: "justify",
};
export { TextAlign };
/** @enum {string} */
var ContentPosition = {
    /**
     * Adding the `prefix` option to an element will designate it as the prefix.
     */
    prefix: "matPrefix",
    /**
     * Adding the `suffix` option to an element will designate it as the suffix.
     */
    suffix: "matSuffix",
    /**
     * Adding the `none` option to an element will not show it.
     */
    none: "none",
};
export { ContentPosition };
/** @enum {string} */
var IconSource = {
    /**
     * The icon is obtained from an internal source. In this case, it uses an icon that was copied to
     * the 'assets' folder of the project, and it was registered using the `IconService.registerIcons` method.
     */
    internal: "internal",
    /**
     * The icon is obtained from an external source. In this case,
     * it uses a 'Material Icon' from 'https://fonts.googleapis.com/icon?family=Material+Icons'.
     */
    external: "external",
};
export { IconSource };
/**
 * Data structure for holding an icon.
 */
var /**
 * Data structure for holding an icon.
 */
IconValue = /** @class */ (function () {
    /**
     * Creates a new instance of the `IconValue` class.
     * @param s The icon source type. By default, its value is `IconSource.internal`.
     * @param p The icon position type. By default, its value is `ContentPosition.prefix`.
     * @param n The icon name. By default, its value is `IconService.defaultIconName`.
     */
    function IconValue(s, p, n) {
        if (s === void 0) { s = IconSource.internal; }
        if (p === void 0) { p = ContentPosition.prefix; }
        if (n === void 0) { n = IconService.defaultIconName; }
        this.source = s;
        this.position = p;
        this.name = n;
        this.setDefaultValueIfUndefined();
    }
    /**
     * Sets the default value for each undefined value.
     */
    /**
     * Sets the default value for each undefined value.
     * @return {?}
     */
    IconValue.prototype.setDefaultValueIfUndefined = /**
     * Sets the default value for each undefined value.
     * @return {?}
     */
    function () {
        if (this.source == undefined)
            this.source = IconSource.internal;
        if (this.position == undefined)
            this.position = ContentPosition.prefix;
        if (this.name == undefined)
            this.name = IconService.defaultIconName;
    };
    /**
     * Sets the default value for each undefined value, but the icon position is always set to the specified value.
     * @param iconPosition The icon position to set.
     */
    /**
     * Sets the default value for each undefined value, but the icon position is always set to the specified value.
     * @param {?} iconPosition The icon position to set.
     * @return {?}
     */
    IconValue.prototype.setDefaultValueIfUndefined_setPosition = /**
     * Sets the default value for each undefined value, but the icon position is always set to the specified value.
     * @param {?} iconPosition The icon position to set.
     * @return {?}
     */
    function (iconPosition) {
        if (this.source == undefined)
            this.source = IconSource.internal;
        this.position = iconPosition;
        if (this.name == undefined)
            this.name = IconService.defaultIconName;
    };
    return IconValue;
}());
/**
 * Data structure for holding an icon.
 */
export { IconValue };
if (false) {
    /**
     * Returns the icon source type.
     * By default, its value is `IconSource.internal`.
     * @type {?}
     */
    IconValue.prototype.source;
    /**
     * Returns the icon position type.
     * By default, its value is `ContentPosition.prefix`.
     * @type {?}
     */
    IconValue.prototype.position;
    /**
     * Returns the icon name.
     * By default, its value is `IconService.defaultIconName`.
     * @type {?}
     */
    IconValue.prototype.name;
}
/** @enum {string} */
var HintPosition = {
    /**
     * Adding the `start` option to a `HintValue` will designate it as start-aligned.
     */
    start: "start",
    /**
     * Adding the `end` option to a `HintValue` will designate it as end-aligned.
     */
    end: "end",
    /**
     * Adding the `none` option to a `HintValue` will not show it.
     */
    none: "none",
};
export { HintPosition };
/**
 * Data structure for holding a hint.
 * A hint label is additional descriptive text that appears below the control's underline.
 */
var /**
 * Data structure for holding a hint.
 * A hint label is additional descriptive text that appears below the control's underline.
 */
HintValue = /** @class */ (function () {
    /**
     * Creates a new instance of the `HintValue` class.
     * @param p The hint position type. By default, its value is `HintPosition.none`.
     * @param l The hint label. By default, its value is `''`.
     */
    function HintValue(p, l) {
        if (p === void 0) { p = HintPosition.none; }
        if (l === void 0) { l = ''; }
        this.position = p;
        this.label = l;
        this.setDefaultValueIfUndefined();
    }
    /**
     * Sets the default value for each undefined value.
     */
    /**
     * Sets the default value for each undefined value.
     * @return {?}
     */
    HintValue.prototype.setDefaultValueIfUndefined = /**
     * Sets the default value for each undefined value.
     * @return {?}
     */
    function () {
        if (this.position == undefined)
            this.position = HintPosition.none;
        if (this.label == undefined)
            this.label = '';
    };
    /**
     * Sets the default value for each undefined value, but the hint position is always set to the specified value.
     * @param hintPosition The hint position to set.
     */
    /**
     * Sets the default value for each undefined value, but the hint position is always set to the specified value.
     * @param {?} hintPosition The hint position to set.
     * @return {?}
     */
    HintValue.prototype.setDefaultValueIfUndefined_setPosition = /**
     * Sets the default value for each undefined value, but the hint position is always set to the specified value.
     * @param {?} hintPosition The hint position to set.
     * @return {?}
     */
    function (hintPosition) {
        this.position = hintPosition;
        if (this.label == undefined)
            this.label = '';
    };
    return HintValue;
}());
/**
 * Data structure for holding a hint.
 * A hint label is additional descriptive text that appears below the control's underline.
 */
export { HintValue };
if (false) {
    /**
     * Returns the hint position type.
     * By default, its value is `HintPosition.none`.
     * @type {?}
     */
    HintValue.prototype.position;
    /**
     * Returns the hint label.
     * By default, its value is `''`.
     * @type {?}
     */
    HintValue.prototype.label;
}
/** @enum {string} */
var FormFieldType = {
    /** A button control. */
    action_button: "action_button",
    /** A container control that is showed as a panel. */
    container_panel: "container_panel",
    /** A container control that is showed very simple. */
    container_simple: "container_simple",
    /** A container control that allows the writing of a name of something in different language. */
    container_label_diff_lang: "container_label_diff_lang",
    /** A text control. */
    text: "text",
    /** A textarea control. */
    textarea: "textarea",
    /** A datapicker control. */
    datepicker: "datepicker",
    /** A checkbox control. */
    checkbox: "checkbox",
    /** A url control. */
    url: "url",
    /** An email control. */
    email: "email",
    /** An identifier control. */
    identifier: "identifier",
    /** An issn control. */
    issn: "issn",
    /** A rnps control. */
    rnps: "rnps",
    /** A vocabulary control. */
    vocabulary: "vocabulary",
    vocabulary_tree: "toco-vocabulary-tree",
    /** A term parent control. */
    term_parent: "term_parent",
    /** A select control. */
    select: "select",
    /** A select control. */
    select_expr: "select_expr",
    /** A select with a filter control. */
    select_filter: "select_filter",
    /** A select with a filter control. */
    select_tree: "select_tree",
};
export { FormFieldType };
/**
 * A base interface that represents the content of a `FormFieldControl`.
 * @record
 */
export function FormFieldContent() { }
if (false) {
    /**
     * Returns the parent `ContainerControl` of this control.
     * It is always set internally.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.parentContainerControl;
    /**
     * Returns the parent `FormSection` that represents the parent `FormGroup` or `FormArray` of this control.
     * It is always set internally.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.parentFormSection;
    /**
     * Returns the control's minimum width.
     * The minimum width of the content area, padding area or border area (depending on `box-sizing`)
     * of certain boxes. Allows authors to constrain content width to a centain range.
     * By default, its value is `'15em'`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.minWidth;
    /**
     * Returns the control's width.
     * The width of the content area, padding area or border area (depending on `box-sizing`) of certain boxes.
     * By default, its value is `minWidth`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.width;
    /**
     * Returns the control's label.
     * See the `ContainerContent` for the particular interpretation of this field.
     * See the `ActionContent` for the particular interpretation of this field.
     * By default, its value is `''`. Each control sets its own label.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.label;
    /**
     * Returns the control's placeholder.
     * By default, its value is `''`. Each control sets its own placeholder.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.placeholder;
    /**
     * Returns true if the control is required; otherwise, false.
     * See the `ContainerContent` for the particular interpretation of this field.
     * By default, its value is `false`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.required;
    /**
     * Returns the control's text align.
     * By default, its value is `TextAlign.left`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.textAlign;
    /**
     * Returns the control's aria-label.
     * Defines a string value that labels the current element.
     * By default, its value is `'Text Input'`. Each control sets its own aria-label.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.ariaLabel;
    /**
     * The control's value.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.value;
    /**
     * This `type` field is deprecated, you must use the `controlType` field.
     * Returns the control's type that is used to create the control.
     * Implementation notes:
     *  - It must be specified; otherwise, an exception is thrown.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.type;
    /**
     * Returns the control's type that is used to create the control.
     * Implementation notes:
     *  - It must be specified; otherwise, an exception is thrown.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.controlType;
    /**
     * Returns the control's name that is used to save the control's value as a name/value pair.
     * Implementation notes:
     *  - It can be used with a JSON string.
     *  - It must be specified; otherwise, an exception is thrown.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.name;
    /**
     * The control's extra content. For any other content needed by an specific `FormFieldControl`.
     * By default, its value is `undefined`.
     * @type {?|undefined}
     */
    FormFieldContent.prototype.extraContent;
}
/**
 * Returns a new object that represents the clone of the specified `FormControl` target.
 * @param {?} target The `FormControl` object to clone.
 * @return {?}
 */
export function cloneFormControl(target) {
    return new FormControl(target.value, target.validator, target.asyncValidator);
}
/**
 * Returns a new object that represents the clone of the specified `FormSection` target.
 * @param {?} target The `FormSection` object to clone.
 * @return {?}
 */
export function cloneFormSection(target) {
    var e_1, _a;
    if (target instanceof FormGroup) {
        /* Creates an empty `FormGroup` with its validators. */
        /** @type {?} */
        var result = new FormGroup({}, target.validator, target.asyncValidator);
        /* Adds the controls to `FormGroup`. */
        for (var ctr in target.controls) {
            if ((target.controls[ctr]) instanceof FormControl)
                result.addControl(ctr, cloneFormControl((/** @type {?} */ ((target.controls[ctr])))));
            else
                result.addControl(ctr, cloneFormSection((/** @type {?} */ ((target.controls[ctr])))));
        }
        return result;
    }
    else {
        /* Creates an empty `FormArray` with its validators. */
        /** @type {?} */
        var result = new FormArray([], target.validator, target.asyncValidator);
        try {
            /* Adds the controls to the `FormArray`. */
            for (var _b = tslib_1.__values(target.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                var ctr = _c.value;
                if (ctr instanceof FormControl)
                    result.push(cloneFormControl(ctr));
                else
                    result.push(cloneFormSection((/** @type {?} */ (ctr))));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    }
}
/**
 * Represents the base abstract class for a control that is treated as a form field.
 * @abstract
 */
var FormFieldControl = /** @class */ (function () {
    /**
     * Constructs a new instance of this class.
     */
    function FormFieldControl() {
        this.contentPosition = ContentPosition;
        this.iconSource = IconSource;
        /* It must be initialize. */
        this.content = undefined;
        this.isTranslationBuiltByControl = false;
    }
    /**
     * Sets the new language.
     * @param transServ The `TranslateService` instance injected.
     */
    /**
     * Sets the new language.
     * @protected
     * @param {?} transServ The `TranslateService` instance injected.
     * @return {?}
     */
    FormFieldControl.prototype.setNewLanguage = /**
     * Sets the new language.
     * @protected
     * @param {?} transServ The `TranslateService` instance injected.
     * @return {?}
     */
    function (transServ) {
        /* The `FormFieldControl.currentLang != transServ.currentLang` test is NOT necessary here because it is done in the non-abstract child classes. */
        FormFieldControl.currentLang = transServ.currentLang;
    };
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     * @param placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @return {?}
     */
    FormFieldControl.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @return {?}
     */
    function (label, placeholder) {
        /* Sets the default values. */
        if (placeholder === void 0) { placeholder = ''; }
        if (this.content == undefined) {
            throw new Error("For the '" + FormFieldControl.name + "' control, the 'content' value can not be undefined.");
        }
        if (this.content.name == undefined) {
            throw new Error("For the '" + FormFieldControl.name + "' control, the 'content.name' value can not be undefined.");
        }
        if (this.content.controlType == undefined) {
            throw new Error("For the '" + this.content.name + "' control, the 'content.controlType' value can not be undefined.");
        }
        if (label == undefined) {
            if (this.content.label == undefined) {
                throw new Error("For the '" + this.content.name + "' control, the 'content.label' value can not be undefined. \n\n                    You can specify: \n\n                    - A default label value when overwriting the 'init' method in the component that represents the control. \n\n                    - A label value when defining the content object for the control.");
            }
            label = this.content.label;
        }
        else {
            if (this.content.label) {
                label = this.content.label;
            }
        }
        /************************** `mat-form-field` properties. **************************/
        if (this.content.minWidth == undefined)
            this.content.minWidth = '15em';
        if (this.content.width == undefined)
            this.content.width = this.content.minWidth;
        /**************************** `mat-label` properties. *****************************/
        if (this.content.label == undefined)
            this.content.label = label;
        if (this.content.placeholder == undefined)
            this.content.placeholder = placeholder;
        /************************** Internal control properties. **************************/
        if (this.content.textAlign == undefined)
            this.content.textAlign = TextAlign.left;
        if (this.content.ariaLabel == undefined)
            this.content.ariaLabel = label;
        if (this.content.value != undefined) /* It does not set the default value here (does not call `getDefaultValue` method here) because in this way it is more consistent. */ {
            /* It also checks if the specified `content.value` is correct. */
            this.initValue();
        }
        /******************************* Other properties. ********************************/
    };
    Object.defineProperty(FormFieldControl.prototype, "parentContainerControl", {
        /**
         * Returns the parent `ContainerControl` of this control.
         * It is always set internally.
         */
        get: /**
         * Returns the parent `ContainerControl` of this control.
         * It is always set internally.
         * @return {?}
         */
        function () {
            return this.content.parentContainerControl;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds the specified `control`/`internalControl` as a child
     * to the `content.containerControlChildren`/`content.parentFormSection` respectively.
     * @param control Form control to be added (descendant from `FormFieldControl`).
     * @param internalControl Internal form control to be added (`FormControl`, `FormGroup`, or `FormArray`).
     */
    /**
     * Adds the specified `control`/`internalControl` as a child
     * to the `content.containerControlChildren`/`content.parentFormSection` respectively.
     * @protected
     * @param {?} control Form control to be added (descendant from `FormFieldControl`).
     * @param {?} internalControl Internal form control to be added (`FormControl`, `FormGroup`, or `FormArray`).
     * @return {?}
     */
    FormFieldControl.prototype.addAsChildControl = /**
     * Adds the specified `control`/`internalControl` as a child
     * to the `content.containerControlChildren`/`content.parentFormSection` respectively.
     * @protected
     * @param {?} control Form control to be added (descendant from `FormFieldControl`).
     * @param {?} internalControl Internal form control to be added (`FormControl`, `FormGroup`, or `FormArray`).
     * @return {?}
     */
    function (control, internalControl) {
        /* Adds the specified `control` as a child to the `content.containerControlChildren`. */
        this.content.parentContainerControl.content.containerControlChildren.push(control);
        /* Adds the specified `internalControl` as a child to the `content.parentFormSection`. */
        if (this.content.parentContainerControl.isFormArray) /* `content.parentFormSection` is an instance of `FormArray`. */ {
            /* The `internalControl`'s name is already correct, that is,
            `content.name` equals the `content.parentFormSection`'s last position
            (because the `internalControl` has a `FormArray` as its parent). */
            ((/** @type {?} */ (this.content.parentFormSection))).push(internalControl);
        }
        else /* `content.parentFormSection` is an instance of `FormGroup`. */ {
            ((/** @type {?} */ (this.content.parentFormSection))).addControl(this.content.name, internalControl);
        }
    };
    /**
     * Returns true if the specified `IconValue` has the specified `ContentPosition` value; otherwise, false.
     * @param icon The `IconValue` to check.
     * @param contentPosition The `ContentPosition` value to check.
     */
    /**
     * Returns true if the specified `IconValue` has the specified `ContentPosition` value; otherwise, false.
     * @param {?} icon The `IconValue` to check.
     * @param {?} contentPosition The `ContentPosition` value to check.
     * @return {?}
     */
    FormFieldControl.prototype.iconPositionState = /**
     * Returns true if the specified `IconValue` has the specified `ContentPosition` value; otherwise, false.
     * @param {?} icon The `IconValue` to check.
     * @param {?} contentPosition The `ContentPosition` value to check.
     * @return {?}
     */
    function (icon, contentPosition) {
        return (icon.position == contentPosition);
    };
    /**
     * Returns true if the specified `IconValue` has the specified `IconSource` value; otherwise, false.
     * @param icon The `IconValue` to check.
     * @param iconSource The `IconSource` value to check.
     */
    /**
     * Returns true if the specified `IconValue` has the specified `IconSource` value; otherwise, false.
     * @param {?} icon The `IconValue` to check.
     * @param {?} iconSource The `IconSource` value to check.
     * @return {?}
     */
    FormFieldControl.prototype.iconSourceState = /**
     * Returns true if the specified `IconValue` has the specified `IconSource` value; otherwise, false.
     * @param {?} icon The `IconValue` to check.
     * @param {?} iconSource The `IconSource` value to check.
     * @return {?}
     */
    function (icon, iconSource) {
        return (icon.source == iconSource);
    };
    /**
     * Returns the language currently used.
     * This is a static field.
     */
    FormFieldControl.currentLang = '';
    FormFieldControl.propDecorators = {
        content: [{ type: Input }]
    };
    return FormFieldControl;
}());
export { FormFieldControl };
if (false) {
    /**
     * Returns the language currently used.
     * This is a static field.
     * @type {?}
     * @protected
     */
    FormFieldControl.currentLang;
    /**
     * Represents the `ContentPosition` enum for internal use.
     * @type {?}
     */
    FormFieldControl.prototype.contentPosition;
    /**
     * Represents the `IconSource` enum for internal use.
     * @type {?}
     */
    FormFieldControl.prototype.iconSource;
    /**
     * Input field that contains the content of this class.
     * @type {?}
     */
    FormFieldControl.prototype.content;
    /**
     * Returns true if the translation is built by the control; otherwise, false.
     * It is used to select the way the translation is built for the control.
     * By default, its value is `false`.
     * As an example of usage for this field, the `InputNumberComponent` class implements the logic when this value is `true`.
     * @type {?}
     */
    FormFieldControl.prototype.isTranslationBuiltByControl;
    /**
     * Initializes the control's value. It uses the `content.value` and it is already different of `undefined`.
     * It also checks if the specified `content.value` is correct. For internal use only.
     * @abstract
     * @protected
     * @return {?}
     */
    FormFieldControl.prototype.initValue = function () { };
    /**
     * Returns this instance.
     * @abstract
     * @return {?}
     */
    FormFieldControl.prototype.getInstance = function () { };
}
//# sourceMappingURL=data:application/json;base64,