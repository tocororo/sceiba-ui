/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/bool/bool-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { isBoolean, isNullOrUndefined } from 'util';
import { InputControl } from '../input.control';
import { HintPosition, HintValue } from '../../form-field.control';
/**
 * Represents a control that allows to select true or false value.
 */
var InputBoolComponent = /** @class */ (function (_super) {
    tslib_1.__extends(InputBoolComponent, _super);
    function InputBoolComponent() {
        return _super.call(this) || this;
    }
    /**
     * @return {?}
     */
    InputBoolComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /* Sets the default values. */
        this.init('', '', false, true);
        this.onSelectionChange();
    };
    /**
     * Initializes the `content` input property.
     * @param label The default label to use. It is used if the `content.label` is not specified.
     * @param placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @param isAbbreviation If it is true then the `label` argument represents an abbreviation; otherwise, false.
     * @param alwaysHint If it is true then there is always at leat one hint start-aligned.
     */
    /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @param {?=} isAbbreviation If it is true then the `label` argument represents an abbreviation; otherwise, false.
     * @param {?=} alwaysHint If it is true then there is always at leat one hint start-aligned.
     * @return {?}
     */
    InputBoolComponent.prototype.init = /**
     * Initializes the `content` input property.
     * @protected
     * @param {?} label The default label to use. It is used if the `content.label` is not specified.
     * @param {?=} placeholder The default placeholder to use. It is used if the `content.placeholder` is not specified.
     * @param {?=} isAbbreviation If it is true then the `label` argument represents an abbreviation; otherwise, false.
     * @param {?=} alwaysHint If it is true then there is always at leat one hint start-aligned.
     * @return {?}
     */
    function (label, placeholder, isAbbreviation, alwaysHint) {
        /* Sets the default values. */
        if (placeholder === void 0) { placeholder = ''; }
        _super.prototype.init.call(this, label, placeholder, isAbbreviation, alwaysHint);
        if (!isBoolean(this.content.value) && !isNullOrUndefined(this.content.value))
            throw new Error("For the '" + this.content.name + "' control, the 'content.value' value must have a boolean type.");
        if (this.content.startHint != undefined) {
            if (this.content.startHint.label == 'TOCO_NG_HINT_TEXTO_POR_DEFECTO')
                this.content.startHint.label = 'TOCO_NG_HINT_TEXTO_SELECC_POR_DEFECTO';
        }
        else
            this.content.startHint = new HintValue(HintPosition.start, 'TOCO_NG_HINT_TEXTO_SELECC_POR_DEFECTO');
    };
    /**
     * @return {?}
     */
    InputBoolComponent.prototype.onSelectionChange = /**
     * @return {?}
     */
    function () {
        if ((this.content.extraContent) && (this.content.extraContent.selectionChange)) {
            this.content.extraContent.selectionChange(this.content.formControl.value);
        }
        // console.log('Select value: ', this.content.formControl.value);
    };
    InputBoolComponent.decorators = [
        { type: Component, args: [{
                    selector: 'input-bool',
                    template: "\n<mat-form-field\n\tclass=\"select-mat-form-field\"\n\t[appearance]=\"content.appearance\"\n>\n\n\t<mat-label>\n\t\t{{ content.label | translate }}\n\t</mat-label>\n\n\t<mat-select\n\t\t[formControl]=\"content.formControl\"\n\t\t[required]=\"content.required\"\n\t\t[style.textAlign]=\"content.textAlign\"\n\t\t[attr.aria-label]=\"content.ariaLabel | translate\"\n\t\t[(value)]=\"content.value\"\n\t\t[multiple]=\"'false'\"\n\t\t(selectionChange)=\"onSelectionChange()\"\n\t>\n\t\t<mat-option [value]=\"true\">\n\t\t\t{{ 'TOCO_NG_VERDADERO' | translate }}\n\t\t</mat-option>\n\t\t<mat-option [value]=\"false\">\n\t\t\t{{ 'TOCO_NG_FALSO' | translate }}\n\t\t</mat-option>\n\t</mat-select>\n\n\t<mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                    host: {
                        '[style.minWidth]': 'content.minWidth',
                        '[style.width]': 'content.width'
                    },
                    styles: [".select-mat-form-field{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    InputBoolComponent.ctorParameters = function () { return []; };
    return InputBoolComponent;
}(InputControl));
export { InputBoolComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbC1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9pbnB1dC9ib29sL2Jvb2wtaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQUtuRTtJQVN3Qyw4Q0FBWTtJQUVuRDtlQUVPLGlCQUFPO0lBQ2QsQ0FBQzs7OztJQUVNLHFDQUFROzs7SUFBZjtRQUVPLDhCQUE4QjtRQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRTs7Ozs7O09BTUc7Ozs7Ozs7Ozs7SUFDSyxpQ0FBSTs7Ozs7Ozs7O0lBQWQsVUFBZSxLQUFhLEVBQUUsV0FBd0IsRUFBRSxjQUF1QixFQUFFLFVBQW1CO1FBRXBHLDhCQUE4QjtRQUZBLDRCQUFBLEVBQUEsZ0JBQXdCO1FBSXRELGlCQUFNLElBQUksWUFBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksbUVBQWlFLENBQUMsQ0FBQztRQUUvTCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsRUFDdkM7WUFDQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxnQ0FBZ0M7Z0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLHVDQUF1QyxDQUFDO1NBQzdJOztZQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsdUNBQXVDLENBQUMsQ0FBQztJQUN6RyxDQUFDOzs7O0lBRUssOENBQWlCOzs7SUFBeEI7UUFFQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxFQUM5RTtZQUNDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxRTtRQUVELGlFQUFpRTtJQUNsRSxDQUFDOztnQkF0REQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxZQUFZO29CQUN0Qix3MkNBQTBDO29CQUUxQyxJQUFJLEVBQUU7d0JBQ0wsa0JBQWtCLEVBQUUsa0JBQWtCO3dCQUN0QyxlQUFlLEVBQUUsZUFBZTtxQkFDaEM7O2lCQUNEOzs7O0lBK0NELHlCQUFDO0NBQUEsQUF2REQsQ0FTd0MsWUFBWSxHQThDbkQ7U0E5Q1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNCb29sZWFuLCBpc051bGxPclVuZGVmaW5lZCB9IGZyb20gJ3V0aWwnO1xuXG5pbXBvcnQgeyBJbnB1dENvbnRyb2wgfSBmcm9tICcuLi9pbnB1dC5jb250cm9sJztcbmltcG9ydCB7IEhpbnRQb3NpdGlvbiwgSGludFZhbHVlIH0gZnJvbSAnLi4vLi4vZm9ybS1maWVsZC5jb250cm9sJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29udHJvbCB0aGF0IGFsbG93cyB0byBzZWxlY3QgdHJ1ZSBvciBmYWxzZSB2YWx1ZS4gXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2lucHV0LWJvb2wnLFxuXHR0ZW1wbGF0ZVVybDogJy4vYm9vbC1pbnB1dC5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL2Jvb2wtaW5wdXQuY29tcG9uZW50LnNjc3MnXSxcblx0aG9zdDoge1xuXHRcdCdbc3R5bGUubWluV2lkdGhdJzogJ2NvbnRlbnQubWluV2lkdGgnLFxuXHRcdCdbc3R5bGUud2lkdGhdJzogJ2NvbnRlbnQud2lkdGgnXG5cdH1cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRCb29sQ29tcG9uZW50IGV4dGVuZHMgSW5wdXRDb250cm9sIGltcGxlbWVudHMgT25Jbml0XG57XG5cdHB1YmxpYyBjb25zdHJ1Y3RvcigpXG5cdHtcbiAgICAgICAgc3VwZXIoKTtcblx0fVxuXG5cdHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkXG5cdHtcbiAgICAgICAgLyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG5cdFx0dGhpcy5pbml0KCcnLCAnJywgZmFsc2UsIHRydWUpO1xuXG5cdFx0dGhpcy5vblNlbGVjdGlvbkNoYW5nZSgpO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYGNvbnRlbnRgIGlucHV0IHByb3BlcnR5LiBcbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGRlZmF1bHQgbGFiZWwgdG8gdXNlLiBJdCBpcyB1c2VkIGlmIHRoZSBgY29udGVudC5sYWJlbGAgaXMgbm90IHNwZWNpZmllZC4gXG5cdCAqIEBwYXJhbSBwbGFjZWhvbGRlciBUaGUgZGVmYXVsdCBwbGFjZWhvbGRlciB0byB1c2UuIEl0IGlzIHVzZWQgaWYgdGhlIGBjb250ZW50LnBsYWNlaG9sZGVyYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAgICAgKiBAcGFyYW0gaXNBYmJyZXZpYXRpb24gSWYgaXQgaXMgdHJ1ZSB0aGVuIHRoZSBgbGFiZWxgIGFyZ3VtZW50IHJlcHJlc2VudHMgYW4gYWJicmV2aWF0aW9uOyBvdGhlcndpc2UsIGZhbHNlLiBcbiAgICAgKiBAcGFyYW0gYWx3YXlzSGludCBJZiBpdCBpcyB0cnVlIHRoZW4gdGhlcmUgaXMgYWx3YXlzIGF0IGxlYXQgb25lIGhpbnQgc3RhcnQtYWxpZ25lZC4gXG4gICAgICovXG5cdCBwcm90ZWN0ZWQgaW5pdChsYWJlbDogc3RyaW5nLCBwbGFjZWhvbGRlcjogc3RyaW5nID0gJycsIGlzQWJicmV2aWF0aW9uOiBib29sZWFuLCBhbHdheXNIaW50OiBib29sZWFuKTogdm9pZFxuXHQge1xuXHRcdC8qIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzLiAqL1xuXG5cdFx0c3VwZXIuaW5pdChsYWJlbCwgcGxhY2Vob2xkZXIsIGlzQWJicmV2aWF0aW9uLCBhbHdheXNIaW50KTtcblxuXHRcdGlmICghaXNCb29sZWFuKHRoaXMuY29udGVudC52YWx1ZSkgJiYgIWlzTnVsbE9yVW5kZWZpbmVkKHRoaXMuY29udGVudC52YWx1ZSkpIHRocm93IG5ldyBFcnJvcihgRm9yIHRoZSAnJHsgdGhpcy5jb250ZW50Lm5hbWUgfScgY29udHJvbCwgdGhlICdjb250ZW50LnZhbHVlJyB2YWx1ZSBtdXN0IGhhdmUgYSBib29sZWFuIHR5cGUuYCk7XG5cblx0XHRpZiAodGhpcy5jb250ZW50LnN0YXJ0SGludCAhPSB1bmRlZmluZWQpXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuY29udGVudC5zdGFydEhpbnQubGFiZWwgPT0gJ1RPQ09fTkdfSElOVF9URVhUT19QT1JfREVGRUNUTycpIHRoaXMuY29udGVudC5zdGFydEhpbnQubGFiZWwgPSAnVE9DT19OR19ISU5UX1RFWFRPX1NFTEVDQ19QT1JfREVGRUNUTyc7XG5cdFx0fVxuXHRcdGVsc2UgdGhpcy5jb250ZW50LnN0YXJ0SGludCA9IG5ldyBIaW50VmFsdWUoSGludFBvc2l0aW9uLnN0YXJ0LCAnVE9DT19OR19ISU5UX1RFWFRPX1NFTEVDQ19QT1JfREVGRUNUTycpO1xuXHQgfVxuXG5cdHB1YmxpYyBvblNlbGVjdGlvbkNoYW5nZSgpOiB2b2lkXG5cdHtcblx0XHRpZiAoKHRoaXMuY29udGVudC5leHRyYUNvbnRlbnQpICYmICh0aGlzLmNvbnRlbnQuZXh0cmFDb250ZW50LnNlbGVjdGlvbkNoYW5nZSkpXG5cdFx0e1xuXHRcdFx0dGhpcy5jb250ZW50LmV4dHJhQ29udGVudC5zZWxlY3Rpb25DaGFuZ2UodGhpcy5jb250ZW50LmZvcm1Db250cm9sLnZhbHVlKTtcblx0XHR9XG5cblx0XHQvLyBjb25zb2xlLmxvZygnU2VsZWN0IHZhbHVlOiAnLCB0aGlzLmNvbnRlbnQuZm9ybUNvbnRyb2wudmFsdWUpO1xuXHR9XG59XG4iXX0=