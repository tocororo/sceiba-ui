/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/email/email-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { InputControl } from '../input.control';
import { EmailValue } from './email-value';
/**
 * Represents a control that allows the writing of an email.
 * It uses the `EmailValue.email_Label` as a label if the `content.label` is not specified.
 * It uses the `EmailValue.email_Placeholder` as a placeholder if the `content.placeholder` is not specified.
 */
var InputEmailComponent = /** @class */ (function (_super) {
    tslib_1.__extends(InputEmailComponent, _super);
    function InputEmailComponent() {
        return _super.call(this) || this;
    }
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputEmailComponent`'s `content.formControl` value by default.
     * In this case, the `validatorArguments` argument is always `undefined`.
     */
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputEmailComponent`'s `content.formControl` value by default.
     * In this case, the `validatorArguments` argument is always `undefined`.
     * @param {?=} validatorArguments
     * @return {?}
     */
    InputEmailComponent.getFormControlByDefault = /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputEmailComponent`'s `content.formControl` value by default.
     * In this case, the `validatorArguments` argument is always `undefined`.
     * @param {?=} validatorArguments
     * @return {?}
     */
    function (validatorArguments) {
        if (validatorArguments === void 0) { validatorArguments = undefined; }
        return new FormControl('', [
            Validators.email
        ]);
    };
    /**
     * @return {?}
     */
    InputEmailComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /* Sets the default values. */
        this.init(EmailValue.email_Label, EmailValue.email_Placeholder, false, true);
    };
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     */
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    InputEmailComponent.prototype.getErrorMessage = /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validationErrors = this.content.formControl.errors;
        /* Shows the email errors. */
        if (validationErrors) {
            if (validationErrors[Validators.required.name]) {
                return this.validationError_required;
            }
            else {
                /* It is `validationErrors[Validators.email.name]`. */
                return 'TOCO_NG_ERROR_MSG_CORREO_INVAL';
            }
        }
        return '';
    };
    InputEmailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'input-email',
                    template: "\n<mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\">\n<!-- <mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\" [formGroup]=\"content.parentFormSection\"> -->\n\n    <mat-label>{{ content.label | translate }}</mat-label>\n\n    <input matInput [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" />\n    <!-- <input matInput id=\"inputId-{{ content.name }}\" class=\"input-text-element\" [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" [formControlName]=\"content.name\" /> -->\n\n    <!-- At the moment of writing this code (2019-08-03), I think that there is an error in `ng-container` or \n        `mat-icon` or something related because I can not put the `mat-icon` tag within an `ng-container` tag \n        because the normal layout of `mat-icon` is modified. This is a contradiction because the `ng-container` \n        does not interfere with styles or layout. -->\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.internal)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix [svgIcon]=\"content.prefixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.external)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix>{{ content.prefixIcon.name }}</mat-icon>\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.internal)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix [svgIcon]=\"content.suffixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.external)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix>{{ content.suffixIcon.name }}</mat-icon>\n\n    <span *ngIf=\"content.prefixText\" matPrefix><pre class=\"content.appearance\">{{ content.prefixText }}</pre></span>\n    <span *ngIf=\"content.suffixText\" matSuffix><pre class=\"content.appearance\">{{ content.suffixText }}</pre></span>\n\n    <mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                    host: {
                        '[style.minWidth]': 'content.minWidth',
                        '[style.width]': 'content.width'
                    },
                    styles: [".text-mat-form-field{width:100%;cursor:text}.text-mat-icon-prefix{margin-right:8px}.text-mat-icon-prefix.standard{position:relative;top:4px}.text-mat-icon-suffix{margin-left:8px}.text-mat-icon-suffix.standard{position:relative;top:4px}pre{margin:0}pre.outline{position:relative;bottom:4px}"]
                }] }
    ];
    /** @nocollapse */
    InputEmailComponent.ctorParameters = function () { return []; };
    return InputEmailComponent;
}(InputControl));
export { InputEmailComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwtaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvZm9ybXMvaW5wdXQvZW1haWwvZW1haWwtaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQW9CLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWhELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7OztBQU8zQztJQVN5QywrQ0FBWTtJQWNqRDtlQUVJLGlCQUFPO0lBQ1gsQ0FBQztJQWZEOzs7O09BSUc7Ozs7Ozs7O0lBQ1csMkNBQXVCOzs7Ozs7O0lBQXJDLFVBQXNDLGtCQUFrRDtRQUFsRCxtQ0FBQSxFQUFBLDhCQUFrRDtRQUVwRixPQUFPLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUN2QixVQUFVLENBQUMsS0FBSztTQUNuQixDQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBT00sc0NBQVE7OztJQUFmO1FBRUksOEJBQThCO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSw2Q0FBZTs7OztJQUF0Qjs7WUFFUSxnQkFBZ0IsR0FBcUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTTtRQUV4RSw2QkFBNkI7UUFDN0IsSUFBSSxnQkFBZ0IsRUFDcEI7WUFDSSxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQzlDO2dCQUNJLE9BQU8sSUFBSSxDQUFDLHdCQUF3QixDQUFDO2FBQ3hDO2lCQUVEO2dCQUNJLHNEQUFzRDtnQkFDdEQsT0FBTyxnQ0FBZ0MsQ0FBQzthQUMzQztTQUNKO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOztnQkF4REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxhQUFhO29CQUN2Qix5d0dBQWdEO29CQUVoRCxJQUFJLEVBQUU7d0JBQ0Ysa0JBQWtCLEVBQUUsa0JBQWtCO3dCQUN0QyxlQUFlLEVBQUUsZUFBZTtxQkFDbkM7O2lCQUNKOzs7O0lBaURELDBCQUFDO0NBQUEsQUF6REQsQ0FTeUMsWUFBWSxHQWdEcEQ7U0FoRFksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFZhbGlkYXRvcnMsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IElucHV0Q29udHJvbCB9IGZyb20gJy4uL2lucHV0LmNvbnRyb2wnO1xuaW1wb3J0IHsgVmFsaWRhdG9yQXJndW1lbnRzIH0gZnJvbSAnLi4vLi4vZm9ybS1maWVsZC5jb250cm9sJztcbmltcG9ydCB7IEVtYWlsVmFsdWUgfSBmcm9tICcuL2VtYWlsLXZhbHVlJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29udHJvbCB0aGF0IGFsbG93cyB0aGUgd3JpdGluZyBvZiBhbiBlbWFpbC4gXG4gKiBJdCB1c2VzIHRoZSBgRW1haWxWYWx1ZS5lbWFpbF9MYWJlbGAgYXMgYSBsYWJlbCBpZiB0aGUgYGNvbnRlbnQubGFiZWxgIGlzIG5vdCBzcGVjaWZpZWQuIFxuICogSXQgdXNlcyB0aGUgYEVtYWlsVmFsdWUuZW1haWxfUGxhY2Vob2xkZXJgIGFzIGEgcGxhY2Vob2xkZXIgaWYgdGhlIGBjb250ZW50LnBsYWNlaG9sZGVyYCBpcyBub3Qgc3BlY2lmaWVkLiBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpbnB1dC1lbWFpbCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuLi90ZXh0L3RleHQtaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuLi90ZXh0L3RleHQtaW5wdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbc3R5bGUubWluV2lkdGhdJzogJ2NvbnRlbnQubWluV2lkdGgnLFxuICAgICAgICAnW3N0eWxlLndpZHRoXSc6ICdjb250ZW50LndpZHRoJ1xuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRFbWFpbENvbXBvbmVudCBleHRlbmRzIElucHV0Q29udHJvbCBpbXBsZW1lbnRzIE9uSW5pdFxue1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgRm9ybUNvbnRyb2xgIGJ5IGRlZmF1bHQuIFxuICAgICAqIEl0IGlzIHVzZWQgdG8gaW5pdGlhbGl6ZWQgdGhlIGBJbnB1dEVtYWlsQ29tcG9uZW50YCdzIGBjb250ZW50LmZvcm1Db250cm9sYCB2YWx1ZSBieSBkZWZhdWx0LiBcbiAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBgdmFsaWRhdG9yQXJndW1lbnRzYCBhcmd1bWVudCBpcyBhbHdheXMgYHVuZGVmaW5lZGAuIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Rm9ybUNvbnRyb2xCeURlZmF1bHQodmFsaWRhdG9yQXJndW1lbnRzOiBWYWxpZGF0b3JBcmd1bWVudHMgPSB1bmRlZmluZWQpOiBGb3JtQ29udHJvbFxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGb3JtQ29udHJvbCgnJywgW1xuICAgICAgICAgICAgVmFsaWRhdG9ycy5lbWFpbFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuICAgIHtcbiAgICAgICAgLyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG4gICAgICAgIHRoaXMuaW5pdChFbWFpbFZhbHVlLmVtYWlsX0xhYmVsLCBFbWFpbFZhbHVlLmVtYWlsX1BsYWNlaG9sZGVyLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlcnJvciBzdHJpbmcgaWYgdGhlIGNvbnRyb2wgaXMgaW4gYW4gZXJyb3Igc3RhdGU7IG90aGVyd2lzZSwgZW1wdHkgc3RyaW5nLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXJyb3JNZXNzYWdlKCk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgbGV0IHZhbGlkYXRpb25FcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMgPSB0aGlzLmNvbnRlbnQuZm9ybUNvbnRyb2wuZXJyb3JzO1xuXG4gICAgICAgIC8qIFNob3dzIHRoZSBlbWFpbCBlcnJvcnMuICovXG4gICAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3JzKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9yc1tWYWxpZGF0b3JzLnJlcXVpcmVkLm5hbWVdKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25FcnJvcl9yZXF1aXJlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvKiBJdCBpcyBgdmFsaWRhdGlvbkVycm9yc1tWYWxpZGF0b3JzLmVtYWlsLm5hbWVdYC4gKi9cbiAgICAgICAgICAgICAgICByZXR1cm4gJ1RPQ09fTkdfRVJST1JfTVNHX0NPUlJFT19JTlZBTCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuIl19