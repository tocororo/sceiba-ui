/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/identifier/identifier-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { InputControl } from '../input.control';
import { IdentifierValue } from './identifier-value';
/**
 * Represents a control that allows the writing of an identifier.
 * It uses the `IdentifierValue.identifier_Label` as a label if the `content.label` is not specified.
 */
var InputIdentifierComponent = /** @class */ (function (_super) {
    tslib_1.__extends(InputIdentifierComponent, _super);
    function InputIdentifierComponent() {
        return _super.call(this) || this;
    }
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputIdentifierComponent`'s `content.formControl` value by default.
     * @param validatorArguments An object that has only one field of `pattern` name and its value is a string.
     * The `pattern` name is the validator name and the value is the value that the validator needs to check.
     * For example, you can call the `getFormControlByDefault` method in this way:
     * InputIdentifierComponent.getFormControlByDefault({ 'pattern': '^[a-zA-Z\_][a-zA-Z\-\_0-9]*$' });
     * If this argument is not specified, by default its value is { 'pattern': '^[a-zA-Z\-\_]*$' }.
     */
    /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputIdentifierComponent`'s `content.formControl` value by default.
     * @param {?=} validatorArguments An object that has only one field of `pattern` name and its value is a string.
     * The `pattern` name is the validator name and the value is the value that the validator needs to check.
     * For example, you can call the `getFormControlByDefault` method in this way:
     * InputIdentifierComponent.getFormControlByDefault({ 'pattern': '^[a-zA-Z\_][a-zA-Z\-\_0-9]*$' });
     * If this argument is not specified, by default its value is { 'pattern': '^[a-zA-Z\-\_]*$' }.
     * @return {?}
     */
    InputIdentifierComponent.getFormControlByDefault = /**
     * Returns a `FormControl` by default.
     * It is used to initialized the `InputIdentifierComponent`'s `content.formControl` value by default.
     * @param {?=} validatorArguments An object that has only one field of `pattern` name and its value is a string.
     * The `pattern` name is the validator name and the value is the value that the validator needs to check.
     * For example, you can call the `getFormControlByDefault` method in this way:
     * InputIdentifierComponent.getFormControlByDefault({ 'pattern': '^[a-zA-Z\_][a-zA-Z\-\_0-9]*$' });
     * If this argument is not specified, by default its value is { 'pattern': '^[a-zA-Z\-\_]*$' }.
     * @return {?}
     */
    function (validatorArguments) {
        if (validatorArguments === void 0) { validatorArguments = undefined; }
        return new FormControl('', [
            (((validatorArguments) && (validatorArguments.pattern)) ? Validators.pattern(validatorArguments.pattern) : Validators.pattern('^[a-zA-Z\-\_]*$'))
            // Validators.pattern(/((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/i)
        ]);
    };
    /**
     * @return {?}
     */
    InputIdentifierComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /* Sets the default values. */
        this.init(IdentifierValue.identifier_Label, '', false, true);
    };
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     */
    /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    InputIdentifierComponent.prototype.getErrorMessage = /**
     * Returns an error string if the control is in an error state; otherwise, empty string.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validationErrors = this.content.formControl.errors;
        /* Shows the identifier errors. */
        if (validationErrors) {
            if (validationErrors[Validators.required.name]) {
                return this.validationError_required;
            }
            else {
                /* It is `validationErrors[Validators.pattern.name]`. */
                return 'TOCO_NG_ERROR_MSG_ID_INVAL';
            }
        }
        return '';
    };
    InputIdentifierComponent.decorators = [
        { type: Component, args: [{
                    selector: 'input-identifier',
                    template: "\n<mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\">\n<!-- <mat-form-field class=\"text-mat-form-field\" [appearance]=\"content.appearance\" [formGroup]=\"content.parentFormSection\"> -->\n\n    <mat-label>{{ content.label | translate }}</mat-label>\n\n    <input matInput [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" />\n    <!-- <input matInput id=\"inputId-{{ content.name }}\" class=\"input-text-element\" [formControl]=\"content.formControl\" [required]=\"content.required\" [placeholder]=\"content.placeholder | translate\" [style.textAlign]=\"content.textAlign\" [attr.aria-label]=\"content.ariaLabel | translate\" (input)=\"handleInput()\" [formControlName]=\"content.name\" /> -->\n\n    <!-- At the moment of writing this code (2019-08-03), I think that there is an error in `ng-container` or \n        `mat-icon` or something related because I can not put the `mat-icon` tag within an `ng-container` tag \n        because the normal layout of `mat-icon` is modified. This is a contradiction because the `ng-container` \n        does not interfere with styles or layout. -->\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.internal)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix [svgIcon]=\"content.prefixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.prefixIcon && iconSourceState(content.prefixIcon, iconSource.external)\" class=\"text-mat-icon-prefix mat-icon {{ content.appearance }} notranslate\" matPrefix>{{ content.prefixIcon.name }}</mat-icon>\n\n    <!-- Only renders one of these two `mat-icon` or nothing. -->\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.internal)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix [svgIcon]=\"content.suffixIcon.name\"></mat-icon>\n    <mat-icon *ngIf=\"content.suffixIcon && iconSourceState(content.suffixIcon, iconSource.external)\" class=\"text-mat-icon-suffix mat-icon {{ content.appearance }} notranslate\" matSuffix>{{ content.suffixIcon.name }}</mat-icon>\n\n    <span *ngIf=\"content.prefixText\" matPrefix><pre class=\"content.appearance\">{{ content.prefixText }}</pre></span>\n    <span *ngIf=\"content.suffixText\" matSuffix><pre class=\"content.appearance\">{{ content.suffixText }}</pre></span>\n\n    <mat-hint *ngIf=\"hintState && content.startHint\" [align]=\"'start'\">{{ content.startHint.label | translate }}</mat-hint>\n    <mat-hint *ngIf=\"hintState && content.endHint\" [align]=\"'end'\">{{ content.endHint.label | translate }}</mat-hint>\n    <mat-error *ngIf=\"errorState\">\n        <ng-container *ngIf=\"isTranslationBuiltByControl; then thenTemplate_BuildTranslation; else elseTemplate_NotBuildTranslation\"></ng-container>\n\n        <ng-template #thenTemplate_BuildTranslation>{{ getErrorMessage() }}</ng-template>\n\n        <ng-template #elseTemplate_NotBuildTranslation>{{ getErrorMessage() | translate }}</ng-template>\n    </mat-error>\n\n</mat-form-field>\n",
                    host: {
                        '[style.minWidth]': 'content.minWidth',
                        '[style.width]': 'content.width'
                    },
                    styles: [".text-mat-form-field{width:100%;cursor:text}.text-mat-icon-prefix{margin-right:8px}.text-mat-icon-prefix.standard{position:relative;top:4px}.text-mat-icon-suffix{margin-left:8px}.text-mat-icon-suffix.standard{position:relative;top:4px}pre{margin:0}pre.outline{position:relative;bottom:4px}"]
                }] }
    ];
    /** @nocollapse */
    InputIdentifierComponent.ctorParameters = function () { return []; };
    return InputIdentifierComponent;
}(InputControl));
export { InputIdentifierComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllci1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9pbnB1dC9pZGVudGlmaWVyL2lkZW50aWZpZXItaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQW9CLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7QUFNckQ7SUFTOEMsb0RBQVk7SUFtQnREO2VBRUksaUJBQU87SUFDWCxDQUFDO0lBcEJEOzs7Ozs7OztPQVFHOzs7Ozs7Ozs7OztJQUNXLGdEQUF1Qjs7Ozs7Ozs7OztJQUFyQyxVQUFzQyxrQkFBa0Q7UUFBbEQsbUNBQUEsRUFBQSw4QkFBa0Q7UUFFcEYsT0FBTyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDdkIsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNqSiw4TUFBOE07U0FDak4sQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQU9NLDJDQUFROzs7SUFBZjtRQUVJLDhCQUE4QjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSxrREFBZTs7OztJQUF0Qjs7WUFFUSxnQkFBZ0IsR0FBcUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTTtRQUV4RSxrQ0FBa0M7UUFDbEMsSUFBSSxnQkFBZ0IsRUFDcEI7WUFDSSxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQzlDO2dCQUNJLE9BQU8sSUFBSSxDQUFDLHdCQUF3QixDQUFDO2FBQ3hDO2lCQUVEO2dCQUNJLHdEQUF3RDtnQkFDeEQsT0FBTyw0QkFBNEIsQ0FBQzthQUN2QztTQUNKO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOztnQkE3REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLHl3R0FBZ0Q7b0JBRWhELElBQUksRUFBRTt3QkFDRixrQkFBa0IsRUFBRSxrQkFBa0I7d0JBQ3RDLGVBQWUsRUFBRSxlQUFlO3FCQUNuQzs7aUJBQ0o7Ozs7SUFzREQsK0JBQUM7Q0FBQSxBQTlERCxDQVM4QyxZQUFZLEdBcUR6RDtTQXJEWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9ycywgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgSW5wdXRDb250cm9sIH0gZnJvbSAnLi4vaW5wdXQuY29udHJvbCc7XG5pbXBvcnQgeyBWYWxpZGF0b3JBcmd1bWVudHMgfSBmcm9tICcuLi8uLi9mb3JtLWZpZWxkLmNvbnRyb2wnO1xuaW1wb3J0IHsgSWRlbnRpZmllclZhbHVlIH0gZnJvbSAnLi9pZGVudGlmaWVyLXZhbHVlJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29udHJvbCB0aGF0IGFsbG93cyB0aGUgd3JpdGluZyBvZiBhbiBpZGVudGlmaWVyLiBcbiAqIEl0IHVzZXMgdGhlIGBJZGVudGlmaWVyVmFsdWUuaWRlbnRpZmllcl9MYWJlbGAgYXMgYSBsYWJlbCBpZiB0aGUgYGNvbnRlbnQubGFiZWxgIGlzIG5vdCBzcGVjaWZpZWQuIFxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lucHV0LWlkZW50aWZpZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi4vdGV4dC90ZXh0LWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi4vdGV4dC90ZXh0LWlucHV0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgaG9zdDoge1xuICAgICAgICAnW3N0eWxlLm1pbldpZHRoXSc6ICdjb250ZW50Lm1pbldpZHRoJyxcbiAgICAgICAgJ1tzdHlsZS53aWR0aF0nOiAnY29udGVudC53aWR0aCdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIElucHV0SWRlbnRpZmllckNvbXBvbmVudCBleHRlbmRzIElucHV0Q29udHJvbCBpbXBsZW1lbnRzIE9uSW5pdFxue1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgRm9ybUNvbnRyb2xgIGJ5IGRlZmF1bHQuIFxuICAgICAqIEl0IGlzIHVzZWQgdG8gaW5pdGlhbGl6ZWQgdGhlIGBJbnB1dElkZW50aWZpZXJDb21wb25lbnRgJ3MgYGNvbnRlbnQuZm9ybUNvbnRyb2xgIHZhbHVlIGJ5IGRlZmF1bHQuIFxuICAgICAqIEBwYXJhbSB2YWxpZGF0b3JBcmd1bWVudHMgQW4gb2JqZWN0IHRoYXQgaGFzIG9ubHkgb25lIGZpZWxkIG9mIGBwYXR0ZXJuYCBuYW1lIGFuZCBpdHMgdmFsdWUgaXMgYSBzdHJpbmcuIFxuICAgICAqIFRoZSBgcGF0dGVybmAgbmFtZSBpcyB0aGUgdmFsaWRhdG9yIG5hbWUgYW5kIHRoZSB2YWx1ZSBpcyB0aGUgdmFsdWUgdGhhdCB0aGUgdmFsaWRhdG9yIG5lZWRzIHRvIGNoZWNrLiBcbiAgICAgKiBGb3IgZXhhbXBsZSwgeW91IGNhbiBjYWxsIHRoZSBgZ2V0Rm9ybUNvbnRyb2xCeURlZmF1bHRgIG1ldGhvZCBpbiB0aGlzIHdheTogXG4gICAgICogSW5wdXRJZGVudGlmaWVyQ29tcG9uZW50LmdldEZvcm1Db250cm9sQnlEZWZhdWx0KHsgJ3BhdHRlcm4nOiAnXlthLXpBLVpcXF9dW2EtekEtWlxcLVxcXzAtOV0qJCcgfSk7XG4gICAgICogSWYgdGhpcyBhcmd1bWVudCBpcyBub3Qgc3BlY2lmaWVkLCBieSBkZWZhdWx0IGl0cyB2YWx1ZSBpcyB7ICdwYXR0ZXJuJzogJ15bYS16QS1aXFwtXFxfXSokJyB9LiBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldEZvcm1Db250cm9sQnlEZWZhdWx0KHZhbGlkYXRvckFyZ3VtZW50czogVmFsaWRhdG9yQXJndW1lbnRzID0gdW5kZWZpbmVkKTogRm9ybUNvbnRyb2xcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgRm9ybUNvbnRyb2woJycsIFtcbiAgICAgICAgICAgICgoKHZhbGlkYXRvckFyZ3VtZW50cykgJiYgKHZhbGlkYXRvckFyZ3VtZW50cy5wYXR0ZXJuKSkgPyBWYWxpZGF0b3JzLnBhdHRlcm4odmFsaWRhdG9yQXJndW1lbnRzLnBhdHRlcm4pIDogVmFsaWRhdG9ycy5wYXR0ZXJuKCdeW2EtekEtWlxcLVxcX10qJCcpKVxuICAgICAgICAgICAgLy8gVmFsaWRhdG9ycy5wYXR0ZXJuKC8oKChbQS1aYS16XXszLDl9Oig/OlxcL1xcLyk/KSg/OltcXC07OiY9XFwrXFwkLFxcd10rQCk/W0EtWmEtejAtOVxcLlxcLV0rfCg/Ond3d1xcLnxbXFwtOzomPVxcK1xcJCxcXHddK0ApW0EtWmEtejAtOVxcLlxcLV0rKSgoPzpcXC9bXFwrfiVcXC9cXC5cXHdcXC1fXSopP1xcPz8oPzpbXFwtXFwrPSY7JUBcXC5cXHdfXSopIz8oPzpbXFwuXFwhXFwvXFxcXFxcd10qKSk/KS9pKVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZFxuICAgIHtcbiAgICAgICAgLyogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZXMuICovXG4gICAgICAgIHRoaXMuaW5pdChJZGVudGlmaWVyVmFsdWUuaWRlbnRpZmllcl9MYWJlbCwgJycsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGVycm9yIHN0cmluZyBpZiB0aGUgY29udHJvbCBpcyBpbiBhbiBlcnJvciBzdGF0ZTsgb3RoZXJ3aXNlLCBlbXB0eSBzdHJpbmcuIFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFcnJvck1lc3NhZ2UoKTogc3RyaW5nXG4gICAge1xuICAgICAgICBsZXQgdmFsaWRhdGlvbkVycm9yczogVmFsaWRhdGlvbkVycm9ycyA9IHRoaXMuY29udGVudC5mb3JtQ29udHJvbC5lcnJvcnM7XG5cbiAgICAgICAgLyogU2hvd3MgdGhlIGlkZW50aWZpZXIgZXJyb3JzLiAqL1xuICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9ycylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcnNbVmFsaWRhdG9ycy5yZXF1aXJlZC5uYW1lXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uRXJyb3JfcmVxdWlyZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLyogSXQgaXMgYHZhbGlkYXRpb25FcnJvcnNbVmFsaWRhdG9ycy5wYXR0ZXJuLm5hbWVdYC4gKi9cbiAgICAgICAgICAgICAgICByZXR1cm4gJ1RPQ09fTkdfRVJST1JfTVNHX0lEX0lOVkFMJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG4iXX0=