/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input/issn/issn-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var IssnType_Abbreviation = {
    /**
     * The ISSN abbreviation by default.
     */
    ISSN: "ISSN",
    /**
     * The ISSN abbreviation for the print media (paper) version of a serial.
     * Usually it is the "default media", so the "default ISSN".
     */
    p_ISSN: "p-ISSN",
    /**
     * The ISSN abbreviation for the electronic media (online) version of a serial.
     */
    e_ISSN: "e-ISSN",
    /**
     * The ISSN abbreviation for the linking ISSN.
     * It is a specific ISSN that groups the different media of the same serial publication.
     * A single ISSN-L is designated for all media of a serial publication, irrespective of how many there are.
     * A serial publication is associated with a single ISSN-L.
     */
    ISSN_L: "ISSN-L",
};
export { IssnType_Abbreviation };
/** @enum {string} */
var IssnType_Label = {
    /**
     * The ISSN label.
     */
    ISSN: "TOCO_NG_ISSN",
    /**
     * The ISSN label for the print ISSN.
     */
    p_ISSN: "TOCO_NG_P_ISSN",
    /**
     * The ISSN label for the electronic ISSN.
     */
    e_ISSN: "TOCO_NG_E_ISSN",
    /**
     * The ISSN label for the linking ISSN.
     */
    ISSN_L: "TOCO_NG_ISSN_L",
};
export { IssnType_Label };
/**
 * Data structure for holding an ISSN.
 * An ISSN (International Standard Serial Number) is an 8-digit code.
 * This control stores the code as a string of length 11, with the form 'XXXX – XXXX'.
 * It is used to identify newspapers, journals, magazines and periodicals
 * of all kinds and on all media–print and electronic. For more information
 * follow the link: https://www.issn.org/understanding-the-issn/what-is-an-issn/.
 */
var IssnValue = /** @class */ (function () {
    function IssnValue(c) {
        this.code = IssnValue.convertIssnToLength_11(c);
    }
    /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 11 with the form 'XXXX – XXXX'.
     * @param code The code to convert.
     */
    /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 11 with the form 'XXXX – XXXX'.
     * @param {?} code The code to convert.
     * @return {?}
     */
    IssnValue.convertIssnToLength_11 = /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 11 with the form 'XXXX – XXXX'.
     * @param {?} code The code to convert.
     * @return {?}
     */
    function (code) {
        /** @type {?} */
        var fg;
        /** @type {?} */
        var sg;
        if (code.length == 8) {
            fg = code.slice(0, 4);
            sg = code.slice(4, 7);
            return (fg + ' ' + IssnValue.codeGroupSeparator + ' ' + sg + ((code[7] == 'x') ? 'X' : code[7]));
        }
        else if (code.length == 9) {
            fg = code.slice(0, 4);
            sg = code.slice(5, 8);
            return (fg + ' ' + IssnValue.codeGroupSeparator + ' ' + sg + ((code[8] == 'x') ? 'X' : code[8]));
        }
        else /* The code length is 11. */ {
            fg = code.slice(0, 5);
            sg = code.slice(6, 10);
            return (fg + IssnValue.codeGroupSeparator + sg + ((code[10] == 'x') ? 'X' : code[10]));
        }
    };
    /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 9 with the form 'XXXX–XXXX'.
     * @param code The code to convert.
     */
    /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 9 with the form 'XXXX–XXXX'.
     * @param {?} code The code to convert.
     * @return {?}
     */
    IssnValue.convertIssnToLength_9 = /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 9 with the form 'XXXX–XXXX'.
     * @param {?} code The code to convert.
     * @return {?}
     */
    function (code) {
        /** @type {?} */
        var fg;
        /** @type {?} */
        var sg;
        if (code.length == 8) {
            fg = code.slice(0, 4);
            sg = code.slice(4, 7);
            return (fg + IssnValue.codeGroupSeparator + sg + ((code[7] == 'x') ? 'X' : code[7]));
        }
        else if (code.length == 9) {
            fg = code.slice(0, 4);
            sg = code.slice(5, 8);
            return (fg + IssnValue.codeGroupSeparator + sg + ((code[8] == 'x') ? 'X' : code[8]));
        }
        else /* The code length is 11. */ {
            fg = code.slice(0, 4);
            sg = code.slice(7, 10);
            return (fg + IssnValue.codeGroupSeparator + sg + ((code[10] == 'x') ? 'X' : code[10]));
        }
    };
    /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 8 with the form 'XXXXXXXX'.
     * @param code The code to convert.
     */
    /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 8 with the form 'XXXXXXXX'.
     * @param {?} code The code to convert.
     * @return {?}
     */
    IssnValue.convertIssnToLength_8 = /**
     * General purpose method.
     * Converts the specified ISSN code to a code with length 8 with the form 'XXXXXXXX'.
     * @param {?} code The code to convert.
     * @return {?}
     */
    function (code) {
        /** @type {?} */
        var fg;
        /** @type {?} */
        var sg;
        if (code.length == 9) {
            fg = code.slice(0, 4);
            sg = code.slice(5, 8);
            return (fg + sg + ((code[8] == 'x') ? 'X' : code[8]));
        }
        if (code.length == 11) {
            fg = code.slice(0, 4);
            sg = code.slice(7, 10);
            return (fg + sg + ((code[10] == 'x') ? 'X' : code[10]));
        }
        else /* The code length is 8. */ {
            return code;
        }
    };
    /**
     * Returns true if the ISSN is complete; otherwise, false.
     * It is complete if the code of characters has the correct length. It does not check if the ISSN has
     * the correct digits.
     */
    /**
     * Returns true if the ISSN is complete; otherwise, false.
     * It is complete if the code of characters has the correct length. It does not check if the ISSN has
     * the correct digits.
     * @return {?}
     */
    IssnValue.prototype.isComplete = /**
     * Returns true if the ISSN is complete; otherwise, false.
     * It is complete if the code of characters has the correct length. It does not check if the ISSN has
     * the correct digits.
     * @return {?}
     */
    function () {
        return (this.code.length == IssnValue.codeLength);
    };
    /**
     * Returns a string representation of this `IssnValue` object.
     * @param acronym The acronym to use.
     */
    /**
     * Returns a string representation of this `IssnValue` object.
     * @param {?} acronym The acronym to use.
     * @return {?}
     */
    IssnValue.prototype.toString = /**
     * Returns a string representation of this `IssnValue` object.
     * @param {?} acronym The acronym to use.
     * @return {?}
     */
    function (acronym) {
        return acronym + ' ' + this.code;
    };
    /**
     * Represents the ISSN placeholder.
     */
    IssnValue.issn_Placeholder = 'XXXX – XXXX';
    /**
     * The amount of characters in the code.
     */
    IssnValue.codeLength = 11;
    /**
     * The amount of characters in the code as string value.
     */
    IssnValue.codeLengthAsString = IssnValue.codeLength.toString(10);
    /**
     * The character that represents the code group separator.
     */
    IssnValue.codeGroupSeparator = '–';
    /**
     * The string that represents the code group separator with space.
     */
    IssnValue.codeGroupSeparatorWithSpace = ' ' + IssnValue.codeGroupSeparator + ' ';
    /**
     * The regular expression that matches an ISSN code as a string of length 11, with the form 'XXXX – XXXX'.
     */
    IssnValue.regExpIssnWithLength_11 = '^[0-9]{4} ' + IssnValue.codeGroupSeparator + ' [0-9]{3}[0-9xX]$';
    /**
     * The regular expression that matches an ISSN code as a string of length 9, with the form 'XXXX–XXXX'.
     */
    IssnValue.regExpIssnWithLength_9 = '^[0-9]{4}' + IssnValue.codeGroupSeparator + '[0-9]{3}[0-9xX]$';
    /**
     * The regular expression that matches an ISSN code as a string of length 8, with the form 'XXXXXXXX'.
     */
    IssnValue.regExpIssnWithLength_8 = '^[0-9]{7}[0-9xX]$';
    return IssnValue;
}());
export { IssnValue };
if (false) {
    /**
     * Represents the ISSN placeholder.
     * @type {?}
     */
    IssnValue.issn_Placeholder;
    /**
     * The amount of characters in the code.
     * @type {?}
     */
    IssnValue.codeLength;
    /**
     * The amount of characters in the code as string value.
     * @type {?}
     */
    IssnValue.codeLengthAsString;
    /**
     * The character that represents the code group separator.
     * @type {?}
     */
    IssnValue.codeGroupSeparator;
    /**
     * The string that represents the code group separator with space.
     * @type {?}
     */
    IssnValue.codeGroupSeparatorWithSpace;
    /**
     * The regular expression that matches an ISSN code as a string of length 11, with the form 'XXXX – XXXX'.
     * @type {?}
     */
    IssnValue.regExpIssnWithLength_11;
    /**
     * The regular expression that matches an ISSN code as a string of length 9, with the form 'XXXX–XXXX'.
     * @type {?}
     */
    IssnValue.regExpIssnWithLength_9;
    /**
     * The regular expression that matches an ISSN code as a string of length 8, with the form 'XXXXXXXX'.
     * @type {?}
     */
    IssnValue.regExpIssnWithLength_8;
    /**
     * The code of `IssnValue.codeLength` characters.
     * @type {?}
     */
    IssnValue.prototype.code;
}
//# sourceMappingURL=data:application/json;base64,