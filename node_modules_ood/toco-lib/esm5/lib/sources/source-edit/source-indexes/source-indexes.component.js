/**
 * @fileoverview added by tsickle
 * Generated from: lib/sources/source-edit/source-indexes/source-indexes.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { MatDialog, MAT_DIALOG_DATA } from '@angular/material';
import { TaxonomyService } from '../../../backend/public-api';
import { SourceData, SourceClasification, VocabulariesInmutableNames } from '../../../entities/public-api';
import { InputTextComponent, FormFieldType, SelectComponent, InputUrlComponent, HintValue, HintPosition } from '../../../forms/public-api';
var SourceIndexesComponent = /** @class */ (function () {
    function SourceIndexesComponent(dialog, service) {
        this.dialog = dialog;
        this.service = service;
        this.editable = true;
        /*
            el arbol entero de los indexes
            el primer nivel se considera que es una clasificacion del index, por ejemplo
                {
                  "children": {...}
                  "term": {
                    "clasified_ids": [],
                    "class_ids": [],
                    "data": null,
                    "description": "WoS / Scopus",
                    "id": 4355,
                    "name": "http://miar.ub.edu/databases/GRUPO/G",
                    "parent_id": null,
                    "uuid": "a4aae8a2-b65d-4313-b666-5ef4170fc549",
                    "vocabulary_id": "INDEXES"
                  }
                }
            en el segundo nivel (children) estan los indices(bases de datos) que realmente clasifican a las fuentes
          */
        this.databases = null;
        /*
            cada elemento de este array tiene:
            dbclass, que es un termino del primer nivel de databases,
            dblist, son las clasificaciones de las fuentes con los correspondientes datos,
              los terminos correspondientes de los elementos de dblist son hijos de dbclass en databses
          */
        this.selectedDatabases = null;
    }
    /**
     * @return {?}
     */
    SourceIndexesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.service.getTermsTreeByVocab(VocabulariesInmutableNames.INDEXES, 1).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response.data.tree.term_node) {
                _this.databases = response.data.tree.term_node;
                _this.initIndexes();
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.log('ERROR: ' + err + '.');
        }), (/**
         * @return {?}
         */
        function () {
        }));
    };
    /**
     * @return {?}
     */
    SourceIndexesComponent.prototype.initIndexes = /**
     * @return {?}
     */
    function () {
        this.selectedDatabases = new Array(this.databases.length);
        this._setSelectedDatabses();
        this._setIndexesToSource();
        console.log('******* complete process');
    };
    /**
     * divide los source.classifications que son de INDEXES
     * en el arreglo selectedDatabases, cuyos elementos tienen
     * dbclass, que es el primer nivel
     * dblist, que son los SourceClassification seleccionados e hijos de dbclass
     */
    /**
     * divide los source.classifications que son de INDEXES
     * en el arreglo selectedDatabases, cuyos elementos tienen
     * dbclass, que es el primer nivel
     * dblist, que son los SourceClassification seleccionados e hijos de dbclass
     * @private
     * @return {?}
     */
    SourceIndexesComponent.prototype._setSelectedDatabses = /**
     * divide los source.classifications que son de INDEXES
     * en el arreglo selectedDatabases, cuyos elementos tienen
     * dbclass, que es el primer nivel
     * dblist, que son los SourceClassification seleccionados e hijos de dbclass
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        var _loop_1 = function (i) {
            this_1.selectedDatabases[i] = {
                dbclass: this_1.databases[i].term,
                dblist: this_1.sourceData.classifications.filter((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    return value.vocabulary == VocabulariesInmutableNames.INDEXES &&
                        _this.databases[i].children.find((/**
                         * @param {?} db
                         * @return {?}
                         */
                        function (db) { return db.term.uuid == value.id; })) != undefined;
                }))
            };
        };
        var this_1 = this;
        for (var i = 0; i < this.databases.length; i++) {
            _loop_1(i);
        }
        for (var i = 0; i < this.databases.length; i++) {
            for (var k = 0; k < this.selectedDatabases[i].dblist.length; k++) {
                /** @type {?} */
                var element = this.selectedDatabases[i].dblist[k];
                if (!this.selectedDatabases[i].dblist[k].data) {
                    this.selectedDatabases[i].dblist[k].data = {};
                }
                if (!this.selectedDatabases[i].dblist[k].data['url']) {
                    this.selectedDatabases[i].dblist[k].data['url'] = '';
                }
                if (!this.selectedDatabases[i].dblist[k].data['initial_cover']) {
                    this.selectedDatabases[i].dblist[k].data['initial_cover'] = '';
                }
                if (!this.selectedDatabases[i].dblist[k].data['end_cover']) {
                    this.selectedDatabases[i].dblist[k].data['end_cover'] = '';
                }
            }
        }
    };
    /**
     * mantiene la lista sourceData.classification bien formada en relacion con lo que hay en selectedDatabases
     */
    /**
     * mantiene la lista sourceData.classification bien formada en relacion con lo que hay en selectedDatabases
     * @private
     * @return {?}
     */
    SourceIndexesComponent.prototype._setIndexesToSource = /**
     * mantiene la lista sourceData.classification bien formada en relacion con lo que hay en selectedDatabases
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // filtra las clasificaciones que no sean indexes
        this.sourceData.classifications = this.sourceData.classifications.filter((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value.vocabulary != VocabulariesInmutableNames.INDEXES; }));
        this.selectedDatabases.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            // por cada elemento en selectedDatabases, si tiene algun elemento en dblist
            // entonces dbclass y dblist tambien son parte de sourceData.classifications
            if (element.dblist.length > 0) {
                /** @type {?} */
                var parent_1 = new SourceClasification();
                parent_1.id = element.dbclass.uuid;
                parent_1.description = element.dbclass.description;
                parent_1.vocabulary = element.dbclass.vocabulary_id;
                _this.sourceData.classifications.push(parent_1);
                _this.sourceData.classifications = _this.sourceData.classifications.concat(element.dblist);
            }
        }));
        console.log(this.sourceData);
    };
    /**
     * @param {?} dbclassIndex
     * @return {?}
     */
    SourceIndexesComponent.prototype.addIndexAction = /**
     * @param {?} dbclassIndex
     * @return {?}
     */
    function (dbclassIndex) {
        var _this = this;
        /** @type {?} */
        var dbclass = this.selectedDatabases[dbclassIndex].dbclass;
        /** @type {?} */
        var options = this.databases[dbclassIndex].children.filter((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return _this.selectedDatabases[dbclassIndex].dblist.find((/**
             * @param {?} db
             * @return {?}
             */
            function (db) { return db.id == value.term.uuid; })) == undefined;
        }));
        if (options.length > 0) {
            this.dialog.open(SourceEditAddIndexComponent, {
                data: {
                    dbclass: this.selectedDatabases[dbclassIndex].dbclass,
                    options: options,
                    editing: null,
                    addIndex: (/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        _this.dialog.closeAll();
                        _this.selectedDatabases[dbclassIndex].dblist = _this.selectedDatabases[dbclassIndex].dblist.filter((/**
                         * @param {?} value
                         * @return {?}
                         */
                        function (value) { return value.id != result.id; }));
                        _this.selectedDatabases[dbclassIndex].dblist.push(result);
                        _this._setIndexesToSource();
                    }),
                },
            });
        }
    };
    /**
     * @param {?} dbclassIndex
     * @param {?} editing
     * @return {?}
     */
    SourceIndexesComponent.prototype.editIndexAction = /**
     * @param {?} dbclassIndex
     * @param {?} editing
     * @return {?}
     */
    function (dbclassIndex, editing) {
        var _this = this;
        /** @type {?} */
        var dbclass = this.selectedDatabases[dbclassIndex].dbclass;
        if (editing) {
            // this.selectedDatabases[dbclassIndex].dblist = this.selectedDatabases[dbclassIndex].dblist.filter(
            //   value => value.id != editing.id
            // );
            /** @type {?} */
            var options = this.databases[dbclassIndex].children.filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return _this.selectedDatabases[dbclassIndex].dblist.find((/**
                 * @param {?} db
                 * @return {?}
                 */
                function (db) { return db.id == value.term.uuid; })) == undefined ||
                    value.term.uuid == editing.id;
            }));
            if (options.length > 0 || editing) {
                this.dialog.open(SourceEditAddIndexComponent, {
                    data: {
                        dbclass: this.selectedDatabases[dbclassIndex].dbclass,
                        options: options,
                        editing: editing,
                        addIndex: (/**
                         * @param {?} result
                         * @return {?}
                         */
                        function (result) {
                            _this.dialog.closeAll();
                            // console.log('----------------------------',this.selectedDatabases[dbclassIndex].dblist);
                            /** @type {?} */
                            var newSelected = [];
                            _this.selectedDatabases[dbclassIndex].dblist.forEach((/**
                             * @param {?} element
                             * @return {?}
                             */
                            function (element) {
                                if (element.id != result.id && element.id != editing.id) {
                                    newSelected.push(element);
                                }
                            }));
                            _this.selectedDatabases[dbclassIndex].dblist = newSelected;
                            // this.selectedDatabases[dbclassIndex].dblist = this.selectedDatabases[dbclassIndex].dblist.filter(
                            //   value => (value.id == result.id && value.id == editing.id));
                            // console.log('++++++++++++++++++++++',this.selectedDatabases[dbclassIndex].dblist);
                            _this.selectedDatabases[dbclassIndex].dblist.push(result);
                            // console.log('*********************',this.selectedDatabases[dbclassIndex].dblist);
                            _this._setIndexesToSource();
                        }),
                    },
                });
            }
        }
    };
    /**
     * @param {?} dbclassIndex
     * @param {?} toDelete
     * @return {?}
     */
    SourceIndexesComponent.prototype.deleteIndexAction = /**
     * @param {?} dbclassIndex
     * @param {?} toDelete
     * @return {?}
     */
    function (dbclassIndex, toDelete) {
        // console.log('DELETE', toDelete);
        this.selectedDatabases[dbclassIndex].dblist = this.selectedDatabases[dbclassIndex].dblist.filter((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value.id != toDelete.id; }));
        this._setIndexesToSource();
    };
    SourceIndexesComponent.decorators = [
        { type: Component, args: [{
                    selector: "toco-source-indexes",
                    template: "<mat-progress-bar\n  *ngIf=\"!selectedDatabases\"\n  mode=\"indeterminate\"\n></mat-progress-bar>\n\n<mat-accordion *ngIf=\"selectedDatabases\">\n  <mat-expansion-panel\n    *ngFor=\"let clasification of selectedDatabases; let classIndex = index\"\n  >\n    <mat-expansion-panel-header>\n      {{ clasification.dbclass.description }} ({{clasification.dblist.length}})\n    </mat-expansion-panel-header>\n    <mat-action-row *ngIf=\"editable\">\n      <button\n          mat-icon-button\n          aria-label=\"Adicionar\"\n          matTooltip=\"Adicionar\"\n          (click)=\"addIndexAction(classIndex)\"\n        >\n          <mat-icon>add</mat-icon>\n        </button>\n    </mat-action-row>\n    <mat-card *ngFor=\"let db of clasification.dblist; let dbIndex = index\">\n      <mat-card-header>\n        <mat-card-title><mat-label>{{ db.description }}</mat-label></mat-card-title>\n        <mat-card-subtitle>\n          <mat-label style=\"font-weight: bold;\">URL: </mat-label>\n          {{ db.data[\"url\"] }}\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n          <mat-label style=\"font-weight: bold;\">Cobertura: </mat-label>\n          <mat-label>\n            {{ db.data[\"initial_cover\"] }} - {{ db.data[\"end_cover\"] }}\n          </mat-label>\n      </mat-card-content>\n      <mat-card-actions *ngIf=\"editable\">\n        <button\n          mat-icon-button\n          aria-label=\"Editar\"\n          matTooltip=\"Editar\"\n          (click)=\"editIndexAction(classIndex, db)\"\n        >\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          aria-label=\"Eliminar\"\n          matTooltip=\"Eliminar\"\n          (click)=\"deleteIndexAction(classIndex, db)\"\n        >\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-card-actions>\n    </mat-card>\n  </mat-expansion-panel>\n</mat-accordion>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SourceIndexesComponent.ctorParameters = function () { return [
        { type: MatDialog },
        { type: TaxonomyService }
    ]; };
    SourceIndexesComponent.propDecorators = {
        sourceData: [{ type: Input }],
        editable: [{ type: Input }]
    };
    return SourceIndexesComponent;
}());
export { SourceIndexesComponent };
if (false) {
    /** @type {?} */
    SourceIndexesComponent.prototype.sourceData;
    /** @type {?} */
    SourceIndexesComponent.prototype.editable;
    /** @type {?} */
    SourceIndexesComponent.prototype.databases;
    /** @type {?} */
    SourceIndexesComponent.prototype.selectedDatabases;
    /** @type {?} */
    SourceIndexesComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    SourceIndexesComponent.prototype.service;
}
var SourceEditAddIndexComponent = /** @class */ (function () {
    function SourceEditAddIndexComponent(service, _formBuilder, data) {
        // console.log(data);
        this.service = service;
        this._formBuilder = _formBuilder;
        this.data = data;
        this.indexPanel = null;
        this.editing = null;
        this.dbclass = data.dbclass;
        this.options = data.options;
        if (data.editing) {
            this.editing = data.editing;
        }
        this.addIndex = data.addIndex;
    }
    /**
     * @return {?}
     */
    SourceEditAddIndexComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.indexFormGroup = this._formBuilder.group({});
        if (this.dbclass) {
            this.indexPanel = [
                {
                    title: (this.editing) ? 'Editar' : 'Adicionar',
                    description: '',
                    iconName: '',
                    formSection: this.indexFormGroup,
                    formSectionContent: [
                        {
                            formControl: InputTextComponent.getFormControlByDefault(),
                            name: 'indexes',
                            label: this.dbclass.description,
                            type: FormFieldType.select_expr,
                            controlType: SelectComponent,
                            required: true,
                            width: '100%',
                            value: (this.editing) ? this.editing.id : null,
                            extraContent: {
                                multiple: false,
                                getOptions: (/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    /** @type {?} */
                                    var opts = [];
                                    _this.options.forEach((/**
                                     * @param {?} node
                                     * @return {?}
                                     */
                                    function (node) {
                                        opts.push({
                                            value: node.term.uuid,
                                            label: node.term.description,
                                        });
                                    }));
                                    return opts;
                                }),
                                selectionChange: (/**
                                 * @param {?} value
                                 * @return {?}
                                 */
                                function (value) {
                                    console.log(value);
                                })
                            }
                        },
                        {
                            formControl: InputUrlComponent.getFormControlByDefault(),
                            name: 'url',
                            label: 'URL',
                            type: FormFieldType.url,
                            controlType: InputUrlComponent,
                            required: false,
                            startHint: new HintValue(HintPosition.start, 'URL de la revista en el índice.'),
                            width: '100%',
                            value: (this.editing) ? [this.editing.data['url']] : '',
                        },
                        {
                            formControl: InputTextComponent.getFormControlByDefault(),
                            name: 'initial_cover',
                            label: 'Cobertura inicio',
                            type: FormFieldType.text,
                            controlType: InputTextComponent,
                            required: false,
                            startHint: new HintValue(HintPosition.start, ''),
                            width: '45%',
                            value: (this.editing) ? [this.editing.data['initial_cover']] : '',
                        },
                        {
                            formControl: InputTextComponent.getFormControlByDefault(),
                            name: 'end_cover',
                            label: 'Cobertura',
                            type: FormFieldType.text,
                            controlType: InputTextComponent,
                            required: false,
                            startHint: new HintValue(HintPosition.start, ''),
                            width: '45%',
                            value: (this.editing) ? [this.editing.data['end_cover']] : '',
                        },
                    ],
                },
            ];
        }
        this.addIndexAction = {
            doit: (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (_this.indexFormGroup.valid) {
                    /** @type {?} */
                    var result = new SourceClasification();
                    // console.log(this.indexFormGroup);
                    if (_this.indexFormGroup.controls['indexes'].value) {
                        /** @type {?} */
                        var node = _this.options.find((/**
                         * @param {?} value
                         * @return {?}
                         */
                        function (value) { return value.term.uuid == _this.indexFormGroup.controls['indexes'].value; }));
                        if (node) {
                            result.vocabulary = node.term.vocabulary_id;
                            result.description = node.term.description;
                            result.id = node.term.uuid;
                            result.data = {
                                url: _this.indexFormGroup.controls['url'].value,
                                initial_cover: _this.indexFormGroup.controls['initial_cover'].value,
                                end_cover: _this.indexFormGroup.controls['end_cover'].value,
                            };
                            _this.addIndex(result);
                        }
                    }
                }
            }),
        };
    };
    SourceEditAddIndexComponent.decorators = [
        { type: Component, args: [{
                    selector: "toco-source-addindex",
                    template: "\n    <toco-form-container\n      #indexPanelContainer\n      [panelsContent]=\"indexPanel\"\n      [useAccordion]=\"false\"\n      fxLayout=\"row\"\n      [formGroup]=\"indexFormGroup\"\n      [action]=\"addIndexAction\"\n      [actionLabel]=\"'OK'\"\n      [deleteValuesAfterAction]=\"false\"\n    ></toco-form-container>\n  ",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SourceEditAddIndexComponent.ctorParameters = function () { return [
        { type: TaxonomyService },
        { type: FormBuilder },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return SourceEditAddIndexComponent;
}());
export { SourceEditAddIndexComponent };
if (false) {
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.indexPanel;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.indexFormGroup;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.addIndexAction;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.dbclass;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.options;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.editing;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.addIndex;
    /**
     * @type {?}
     * @private
     */
    SourceEditAddIndexComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    SourceEditAddIndexComponent.prototype._formBuilder;
    /** @type {?} */
    SourceEditAddIndexComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,