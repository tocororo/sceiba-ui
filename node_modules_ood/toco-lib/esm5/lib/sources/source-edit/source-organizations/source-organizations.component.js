/**
 * @fileoverview added by tsickle
 * Generated from: lib/sources/source-edit/source-organizations/source-organizations.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject } from "@angular/core";
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from "@angular/material";
import { OrganizationServiceNoAuth } from '../../../backend/public-api';
import { MessageHandler, StatusCode, HandlerComponent } from '../../../core/public-api';
import { SourceData, Organization, SourceOrganizationRole, SourceOrganization, OrganizationRelationships } from '../../../entities/public-api';
var SourceOrganizationsComponent = /** @class */ (function () {
    function SourceOrganizationsComponent(dialog, orgService) {
        this.dialog = dialog;
        this.orgService = orgService;
        this.editable = true;
        this.topMainOrganization = null;
        this.roles = SourceOrganizationRole;
    }
    /**
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log(this.sourceData.organizations);
        this.sourceData.organizations = this.sourceData.organizations.filter((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return element && element.role; }));
        console.log(this.sourceData.organizations);
    };
    /**
     * @param {?=} cuban
     * @param {?=} topMain
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.addOrg = /**
     * @param {?=} cuban
     * @param {?=} topMain
     * @return {?}
     */
    function (cuban, topMain) {
        var _this = this;
        if (cuban === void 0) { cuban = true; }
        if (topMain === void 0) { topMain = false; }
        if (topMain && this.topMainOrganization) {
            this.dialog.open(SourceOrganizationSelectTopDialog, {
                width: "500px",
                data: {
                    topMainOrganization: this.topMainOrganization,
                    selectOrg: (/**
                     * @param {?} org
                     * @param {?} parents
                     * @return {?}
                     */
                    function (org, parents) {
                        _this.addOrgToSource(org, SourceOrganizationRole.MAIN.value);
                        parents.forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        function (element) {
                            _this.addOrgToSource(element, SourceOrganizationRole.COLABORATOR.value);
                        }));
                    }),
                },
            });
        }
        else {
            this.dialog.open(SourceOrganizationSelectDialog, {
                width: "500px",
                data: {
                    filter: cuban ? { type: "country", value: "Cuba" } : null,
                    canSelectRole: this.topMainOrganization == null,
                    selectOrg: (/**
                     * @param {?} org
                     * @param {?} role
                     * @param {?} parents
                     * @return {?}
                     */
                    function (org, role, parents) {
                        _this.addOrgToSource(org, role);
                        parents.forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        function (element) {
                            _this.addOrgToSource(element, SourceOrganizationRole.COLABORATOR.value);
                        }));
                    }),
                },
            });
        }
    };
    /**
     * @private
     * @param {?} org
     * @param {?} role
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.addOrgToSource = /**
     * @private
     * @param {?} org
     * @param {?} role
     * @return {?}
     */
    function (org, role) {
        if (!this.sourceData.organizations.find((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return o.id == org.id; }))) {
            /** @type {?} */
            var selected = new SourceOrganization();
            selected.deepcopy(org);
            selected.role = role;
            this.sourceData.organizations.push(selected);
            if (SourceOrganizationRole.MAIN.value == role) {
                this.setAsMain(org);
            }
        }
    };
    /**
     * @param {?} organization
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.setAsMain = /**
     * @param {?} organization
     * @return {?}
     */
    function (organization) {
        this.sourceData.organizations.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (organization.id == element.id) {
                element.role = SourceOrganizationRole.MAIN.value;
            }
            else {
                element.role = SourceOrganizationRole.COLABORATOR.value;
            }
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.removeInst = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        /** @type {?} */
        var organization = this.sourceData.organizations[index];
        /** @type {?} */
        var m = new MessageHandler(null, this.dialog);
        /** @type {?} */
        var child = this.childToRemove(organization);
        if (child == null) {
            /** @type {?} */
            var parents = this.getOrgToDelete(organization);
            /** @type {?} */
            var toDelete = [];
            /** @type {?} */
            var msg = "";
            for (var i = 0; i < parents.length; i++) {
                /** @type {?} */
                var element = parents[i];
                toDelete.push(this.sourceData.organizations[element]);
                msg += this.sourceData.organizations[element].name + ", ";
            }
            toDelete.push(organization);
            console.log(toDelete);
            if (toDelete.length > 0) {
                m.showMessage(StatusCode.OK, msg, HandlerComponent.dialog, "Se eliminó también: ");
            }
            /** @type {?} */
            var orgs = [];
            var _loop_1 = function (i) {
                if (!toDelete.find((/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return o.id == _this.sourceData.organizations[i].id; }))) {
                    orgs.push(this_1.sourceData.organizations[i]);
                }
            };
            var this_1 = this;
            for (var i = 0; i < this.sourceData.organizations.length; i++) {
                _loop_1(i);
            }
            console.log(orgs);
            this.sourceData.organizations = orgs;
            // this.sourceData.organizations = this.sourceData.organizations.filter(
            //   (o) => o.id != organization.id
            // );
        }
        else {
            m.showMessage(StatusCode.OK, child.name, HandlerComponent.dialog, "Para eliminar este elemento debe eliminar:");
        }
    };
    /**
     * @private
     * @param {?} org
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.childToRemove = /**
     * @private
     * @param {?} org
     * @return {?}
     */
    function (org) {
        // se puede eliminar si no tiene hijos en el sourceData.organizations
        /** @type {?} */
        var result = true;
        if (org.relationships) {
            for (var index = 0; index < org.relationships.length; index++) {
                /** @type {?} */
                var element = org.relationships[index];
                if (element.type == OrganizationRelationships.CHILD.value) {
                    /** @type {?} */
                    var childIndex = this.getIndexByPid(element.identifiers[0].value);
                    if (childIndex != null) {
                        return this.sourceData.organizations[childIndex];
                    }
                }
            }
            return null;
        }
    };
    // removeInst(index) {
    //   let toDelete = []
    //   toDelete.push(index);
    //   toDelete.concat(this.getOrgToDelete(this.sourceData.organizations[index]));
    //   let orgs = [];
    //   for (let i = 0; i < this.sourceData.organizations.length; i++) {
    //     if(!toDelete.find((o) => o == i)){
    //       orgs.push(this.sourceData.organizations[i]);
    //     }
    //   }
    //   this.sourceData.organizations = orgs;
    // }
    // removeInst(index) {
    //   let toDelete = []
    //   toDelete.push(index);
    //   toDelete.concat(this.getOrgToDelete(this.sourceData.organizations[index]));
    //   let orgs = [];
    //   for (let i = 0; i < this.sourceData.organizations.length; i++) {
    //     if(!toDelete.find((o) => o == i)){
    //       orgs.push(this.sourceData.organizations[i]);
    //     }
    //   }
    //   this.sourceData.organizations = orgs;
    // }
    /**
     * @private
     * @param {?} org
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.getOrgToDelete = 
    // removeInst(index) {
    //   let toDelete = []
    //   toDelete.push(index);
    //   toDelete.concat(this.getOrgToDelete(this.sourceData.organizations[index]));
    //   let orgs = [];
    //   for (let i = 0; i < this.sourceData.organizations.length; i++) {
    //     if(!toDelete.find((o) => o == i)){
    //       orgs.push(this.sourceData.organizations[i]);
    //     }
    //   }
    //   this.sourceData.organizations = orgs;
    // }
    /**
     * @private
     * @param {?} org
     * @return {?}
     */
    function (org) {
        var _this = this;
        /** @type {?} */
        var toDelete = [];
        if (org.relationships) {
            org.relationships.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element.type == OrganizationRelationships.PARENT.value) {
                    /** @type {?} */
                    var parentIndex = _this.getIndexByPid(element.identifiers[0].value);
                    if (parentIndex) {
                        toDelete.push(parentIndex);
                        toDelete.concat(_this.getOrgToDelete(_this.sourceData.organizations[parentIndex]));
                    }
                }
            }));
        }
        return toDelete;
    };
    /**
     * @private
     * @param {?} pid
     * @return {?}
     */
    SourceOrganizationsComponent.prototype.getIndexByPid = /**
     * @private
     * @param {?} pid
     * @return {?}
     */
    function (pid) {
        for (var index = 0; index < this.sourceData.organizations.length; index++) {
            /** @type {?} */
            var element = this.sourceData.organizations[index];
            for (var pidindex = 0; pidindex < element.identifiers.length; pidindex++) {
                /** @type {?} */
                var identifier = element.identifiers[pidindex];
                console.log(identifier.value + "==" + pid);
                if (identifier.value == pid) {
                    console.log(identifier.value + "==" + pid + "  iguales!!!");
                    return index;
                }
            }
        }
        return null;
    };
    SourceOrganizationsComponent.decorators = [
        { type: Component, args: [{
                    selector: "toco-source-organizations",
                    template: "<ng-container>\n  <mat-toolbar\n    *ngIf=\"editable\"\n    fxLayout=\"row wrap\"\n    fxLayoutAlign=\"space-between center\"\n    fxLayoutGap=\"20px\"\n  >\n    <span>Adicionar</span>\n    <div\n      fxLayout=\"row wrap\"\n      fxLayoutAlign=\"space-between center\"\n      fxLayoutGap=\"20px\"\n    >\n    <button *ngIf=\"topMainOrganization\" mat-raised-button (click)=\"addOrg(true, true)\">\n      Organizaci\u00F3n Principal\n    </button>\n      <button mat-raised-button (click)=\"addOrg(true)\">\n        Organizaciones Cubanas\n      </button>\n      <button mat-raised-button (click)=\"addOrg(false)\">\n        Otras\n      </button>\n    </div>\n  </mat-toolbar>\n\n  \n  <mat-accordion>\n    <mat-expansion-panel\n      *ngFor=\"let org of sourceData.organizations; let index = index\"\n      [expanded]=\"false\"\n    >\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          {{ roles[org.role].label }}\n        </mat-panel-title>\n        <mat-panel-description>\n          {{ org.name }}\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <mat-action-row *ngIf=\"editable\">\n        <button\n          mat-stroked-button\n          [disabled]=\"org.length === 1\"\n          (click)=\"setAsMain(org)\"\n          *ngIf=\"!topMainOrganization\"\n        >\n          Establecer como Principal\n        </button>\n        <button\n          mat-stroked-button\n          [disabled]=\"org.length === 1\"\n          (click)=\"removeInst(index)\"\n        >\n          Eliminar\n        </button>\n      </mat-action-row>\n      <toco-org-view [org]=\"org\" [showContent]=\"false\"></toco-org-view>\n    </mat-expansion-panel>\n  </mat-accordion>\n</ng-container>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SourceOrganizationsComponent.ctorParameters = function () { return [
        { type: MatDialog },
        { type: OrganizationServiceNoAuth }
    ]; };
    SourceOrganizationsComponent.propDecorators = {
        sourceData: [{ type: Input }],
        editable: [{ type: Input }],
        topMainOrganization: [{ type: Input }]
    };
    return SourceOrganizationsComponent;
}());
export { SourceOrganizationsComponent };
if (false) {
    /** @type {?} */
    SourceOrganizationsComponent.prototype.sourceData;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.editable;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.topMainOrganization;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.roles;
    /** @type {?} */
    SourceOrganizationsComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    SourceOrganizationsComponent.prototype.orgService;
}
var SourceOrganizationSelectTopDialog = /** @class */ (function () {
    function SourceOrganizationSelectTopDialog(dialogRef, data, orgService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.orgService = orgService;
        this.topMainOrganization = null;
        this.toSelect = null;
        this.selected = -1;
    }
    /**
     * @return {?}
     */
    SourceOrganizationSelectTopDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.topMainOrganization = this.data.topMainOrganization;
        this.toSelect = new Array();
        this.topMainOrganization.relationships.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.type == OrganizationRelationships.CHILD.value) {
                _this.toSelect.push(element);
            }
        }));
        console.log(this.toSelect);
    };
    /**
     * @return {?}
     */
    SourceOrganizationSelectTopDialog.prototype.onNoClick = /**
     * @return {?}
     */
    function () {
        this.dialogRef.close();
    };
    /**
     * @return {?}
     */
    SourceOrganizationSelectTopDialog.prototype.ok = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // let selected = new SourceOrganization()
        // selected.organization = org;
        // selected.role = SourceOrganizationRole.MAIN.value;
        if (this.selected >= 0) {
            console.log(this.toSelect[this.selected]);
            this.orgService
                .getOrganizationByPID(this.toSelect[this.selected].identifiers[0].value)
                .subscribe({
                next: (/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.data.selectOrg(response.metadata, [_this.topMainOrganization]);
                    _this.dialogRef.close();
                }),
            });
        }
    };
    SourceOrganizationSelectTopDialog.decorators = [
        { type: Component, args: [{
                    selector: "toco-source-organizations-select-top-main",
                    template: "<mat-dialog-content class=\"height-auto\">\n    <ng-container *ngIf=\"toSelect\"\n      >{{ topMainOrganization.name }}\n      <br />\n      <mat-form-field>\n        <mat-label>Seleccione la Organizaci\u00F3n Principal: </mat-label>\n        <mat-select [(value)]=\"selected\" required>\n          <mat-option\n            *ngFor=\"let item of toSelect; let index = index\"\n            value=\"{{ index }}\"\n            >{{ item.label }}</mat-option\n          >\n        </mat-select>\n      </mat-form-field>\n\n      <br />\n      <mat-label *ngIf=\"selected >= 0\">{{\n        toSelect[selected].label\n      }}</mat-label>\n      <br />\n    </ng-container>\n    <br />\n    <button mat-raised-button (click)=\"ok()\">OK</button>\n  </mat-dialog-content>"
                }] }
    ];
    /** @nocollapse */
    SourceOrganizationSelectTopDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: OrganizationServiceNoAuth }
    ]; };
    return SourceOrganizationSelectTopDialog;
}());
export { SourceOrganizationSelectTopDialog };
if (false) {
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.topMainOrganization;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.toSelect;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.selected;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.dialogRef;
    /** @type {?} */
    SourceOrganizationSelectTopDialog.prototype.data;
    /**
     * @type {?}
     * @private
     */
    SourceOrganizationSelectTopDialog.prototype.orgService;
}
var SourceOrganizationSelectDialog = /** @class */ (function () {
    function SourceOrganizationSelectDialog(dialogRef, data, orgService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.orgService = orgService;
        this.roles = [
            { label: "Principal", value: "MAIN" },
            { label: "Colaborador", value: "COLABORATOR" },
        ];
        this.role = null;
        this.parents = new Array();
        this.placeholder = "Buscar una organización";
        this.canSelectRole = true;
    }
    /**
     * @return {?}
     */
    SourceOrganizationSelectDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log(this.data);
        this.canSelectRole = this.data.canSelectRole;
        if (this.data.filter) {
            this.placeholder = "Buscar una organización cubana";
        }
    };
    /**
     * @return {?}
     */
    SourceOrganizationSelectDialog.prototype.onNoClick = /**
     * @return {?}
     */
    function () {
        this.dialogRef.close();
    };
    /**
     * @param {?=} org
     * @return {?}
     */
    SourceOrganizationSelectDialog.prototype.selectedOrg = /**
     * @param {?=} org
     * @return {?}
     */
    function (org) {
        console.log(org);
        this.org = org;
        this.addParent(this.org);
    };
    /**
     * @private
     * @param {?} child
     * @return {?}
     */
    SourceOrganizationSelectDialog.prototype.addParent = /**
     * @private
     * @param {?} child
     * @return {?}
     */
    function (child) {
        var _this = this;
        child.relationships.forEach((/**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            if (p.type == OrganizationRelationships.PARENT.value) {
                if (p.identifiers.length > 0 && p.identifiers[0].value) {
                    _this.orgService
                        .getOrganizationByPID(p.identifiers[0].value)
                        .subscribe({
                        next: (/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) {
                            console.log(response);
                            _this.parents.push(response.metadata);
                            _this.addParent(response.metadata);
                        }),
                    });
                }
            }
        }));
    };
    /**
     * @return {?}
     */
    SourceOrganizationSelectDialog.prototype.ok = /**
     * @return {?}
     */
    function () {
        // let selected = new SourceOrganization()
        // selected.organization = org;
        // selected.role = SourceOrganizationRole.MAIN.value;
        if (this.canSelectRole) {
            if (this.role) {
                this.data.selectOrg(this.org, this.role, this.parents);
                this.dialogRef.close();
            }
        }
        else {
            this.data.selectOrg(this.org, SourceOrganizationRole.COLABORATOR.value, this.parents);
            this.dialogRef.close();
        }
    };
    SourceOrganizationSelectDialog.decorators = [
        { type: Component, args: [{
                    selector: "toco-source-organizations-select-dialog",
                    template: "<mat-dialog-content class=\"height-auto\">\n    <toco-org-search\n      [orgFilter]=\"data.filter\"\n      (selectedOrg)=\"selectedOrg($event)\"\n      [placeholder]=\"placeholder\"\n    >\n    </toco-org-search>\n    <br />\n    <mat-label *ngIf=\"org\">{{ org.name }}</mat-label>\n    <br />\n    <mat-form-field *ngIf=\"canSelectRole\">\n      <mat-label>Rol</mat-label>\n      <mat-select [(value)]=\"role\" required>\n        <mat-option *ngFor=\"let item of roles\" value=\"{{ item.value }}\">{{\n          item.label\n        }}</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <br />\n\n    <ng-container *ngIf=\"parents.length > 0\">\n      <mat-label>Se a\u00F1adir\u00E1 tambi\u00E9n: </mat-label>\n      <ng-container *ngFor=\"let item of parents\">\n        <br />\n        <mat-label>{{ item.name }}</mat-label>\n        <br />\n      </ng-container>\n      <br />\n    </ng-container>\n\n    <button mat-raised-button (click)=\"ok()\">OK</button>\n  </mat-dialog-content>"
                }] }
    ];
    /** @nocollapse */
    SourceOrganizationSelectDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: OrganizationServiceNoAuth }
    ]; };
    return SourceOrganizationSelectDialog;
}());
export { SourceOrganizationSelectDialog };
if (false) {
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.roles;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.role;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.org;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.parents;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.placeholder;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.canSelectRole;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.dialogRef;
    /** @type {?} */
    SourceOrganizationSelectDialog.prototype.data;
    /**
     * @type {?}
     * @private
     */
    SourceOrganizationSelectDialog.prototype.orgService;
}
//# sourceMappingURL=data:application/json;base64,