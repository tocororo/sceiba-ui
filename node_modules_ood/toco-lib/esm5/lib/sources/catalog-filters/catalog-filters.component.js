/**
 * @fileoverview added by tsickle
 * Generated from: lib/sources/catalog-filters/catalog-filters.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Component, ComponentFactoryResolver } from '@angular/core';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { MatSnackBar } from '@angular/material';
import { FilterItem } from '../../filters/public-api';
import { BooleanFilterComponent } from '../../filters/public-api';
import { FilterContainerService } from '../../filters/public-api';
import { FilterContainerComponent } from '../../filters/public-api';
import { MessageHandler, StatusCode } from '../../core/public-api';
import { CatalogService, TaxonomyService } from '../../backend/public-api';
import { Environment } from '../../core/env';
import { VocabulariesInmutableNames } from '../../entities/public-api';
var CatalogFiltersComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CatalogFiltersComponent, _super);
    function CatalogFiltersComponent(componentFactoryResolver, childrenService, service, taxonomyService, _snackBar, env) {
        var _this = _super.call(this, componentFactoryResolver, childrenService) || this;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.childrenService = childrenService;
        _this.service = service;
        _this.taxonomyService = taxonomyService;
        _this._snackBar = _snackBar;
        _this.env = env;
        return _this;
    }
    /**
     * @return {?}
     */
    CatalogFiltersComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.addOperator();
        // tslint:disable-next-line: no-use-before-declare
        default_filters.forEach((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            _this.filters_data.push(filter);
        }));
        this.service.getJournalsVocab().pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            /** @type {?} */
            var m = new MessageHandler(_this._snackBar);
            m.showMessage(StatusCode.serverError, error.message);
            return of(null);
        })))
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response) {
                response.data.vocabularies.forEach((/**
                 * @param {?} vocab
                 * @return {?}
                 */
                function (vocab) {
                    if (VocabulariesInmutableNames.CUBAN_INTITUTIONS === vocab.id
                        && _this.env.topOrganizationPID !== '') {
                        console.log(_this.env.topOrganizationPID);
                        _this.taxonomyService.getTermByUUID(_this.env.topOrganizationPID).subscribe((/**
                         * @param {?} termsResponse
                         * @return {?}
                         */
                        function (termsResponse) {
                            _this.filters_data.push({
                                index: _this.filters_data.length,
                                field: 'terms',
                                type: 'tree',
                                placeholder: vocab.human_name,
                                name: vocab.human_name,
                                idVocab: vocab.id,
                                selectOptions: termsResponse.data.term_node.children,
                                is_enabled: true
                            });
                        }));
                    }
                    else {
                        _this.service.getTerminosByVocab(vocab.id).subscribe((/**
                         * @param {?} termsResponse
                         * @return {?}
                         */
                        function (termsResponse) {
                            _this.filters_data.push({
                                index: _this.filters_data.length,
                                field: 'terms',
                                type: 'select-autocomplete',
                                placeholder: vocab.human_name,
                                name: vocab.human_name,
                                idVocab: vocab.id,
                                selectOptions: termsResponse.data.terms,
                                is_enabled: true
                            });
                        }));
                    }
                }));
            }
            else {
                /** @type {?} */
                var m = new MessageHandler(_this._snackBar);
                m.showMessage(StatusCode.serverError, "No puedo cargar los vocabularios");
            }
        }));
    };
    /**
     * @return {?}
     */
    CatalogFiltersComponent.prototype.addOperator = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var f = new FilterItem(BooleanFilterComponent, { field: 'op', value: true, name: ['AND', 'OR'], is_enabled: false, index: -1 });
        // this.current_filters.push(f);
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(f.component);
        /** @type {?} */
        var viewContainerRef = this.adHost.viewContainerRef;
        // viewContainerRef.clear();
        /** @type {?} */
        var componentRef = viewContainerRef.createComponent(componentFactory);
        ((/** @type {?} */ (componentRef.instance))).data = f.data;
    };
    CatalogFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-catalog-filters-container',
                    template: "<!-- <div fxLayout=\"row wrap\" fxLayoutAlign=\"start center\" fxLayoutAlign.xs=\"center center\" fxLayoutGap=\"1em\" fxLayoutGap.xs=\"0\"> -->\n\n  <ng-template toco-Filter></ng-template>\n\n<!-- </div> -->\n\n<button mat-icon-button [matMenuTriggerFor]=\"menu\">\n    <mat-icon>add</mat-icon>\n</button>\n  <mat-menu #menu=\"matMenu\" >\n    <ng-container *ngFor=\"let item of filters_data,let i=index\">\n        <ng-container *ngIf=\"item.is_enabled\">\n          <button mat-menu-item (click)=\"addFilter(i)\">\n            {{item.name}}\n          </button>\n        </ng-container>\n    </ng-container>\n    \n\n    \n  </mat-menu>",
                    styles: [".width-100{width:100%}.mat-menu-item{height:37px}"]
                }] }
    ];
    /** @nocollapse */
    CatalogFiltersComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: FilterContainerService },
        { type: CatalogService },
        { type: TaxonomyService },
        { type: MatSnackBar },
        { type: Environment }
    ]; };
    return CatalogFiltersComponent;
}(FilterContainerComponent));
export { CatalogFiltersComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    CatalogFiltersComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @protected
     */
    CatalogFiltersComponent.prototype.childrenService;
    /**
     * @type {?}
     * @protected
     */
    CatalogFiltersComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    CatalogFiltersComponent.prototype.taxonomyService;
    /**
     * @type {?}
     * @private
     */
    CatalogFiltersComponent.prototype._snackBar;
    /**
     * @type {?}
     * @private
     */
    CatalogFiltersComponent.prototype.env;
}
/** @type {?} */
var default_filters = [
    {
        index: 0,
        field: 'title',
        type: 'search',
        placeholder: 'Título',
        name: 'Título',
        is_enabled: true
    },
    {
        index: 1,
        field: 'issn',
        type: 'text',
        placeholder: 'ISSN',
        name: 'ISSN',
        is_enabled: true
    } /*,
        {
            index: 2,
            field: 'e_issn',
            type: 'text',
            placeholder: 'eISSN',
            name: 'eISSN',
            is_enabled: true
        },
        {
            index: 3,
            field: 'i_issn',
            type: 'text',
            placeholder: 'iISSN',
            name: 'iISSN',
            is_enabled: true
        }*/,
    {
        index: 2,
        field: 'rnps',
        type: 'number',
        placeholder: 'RNPS',
        name: 'RNPS',
        is_enabled: true
    } /*,
        {
            index: 5,
            field: 'term',
            type: 'select',
            placeholder: 'Términos',
            name: 'Términos',
            is_enabled: true
        } */
];
//# sourceMappingURL=data:application/json;base64,