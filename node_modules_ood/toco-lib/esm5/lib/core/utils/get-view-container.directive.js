/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/utils/get-view-container.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
/**
 * A helper directive to mark valid insertion points in the template.
 * This directive injects the `ViewContainerRef` to gain access to the view container of the element
 * that will host the dynamically components.
 * In the `\@Directive` decorator, notice the selector name, `get-view-container`; that's what you use
 * to apply the directive to the element.
 */
var GetViewContainerDirective = /** @class */ (function () {
    function GetViewContainerDirective(_viewContainerRef, _componentFactoryResolver) {
        this._viewContainerRef = _viewContainerRef;
        this._componentFactoryResolver = _componentFactoryResolver;
    }
    Object.defineProperty(GetViewContainerDirective.prototype, "viewContainerRef", {
        /**
         * Returns the injected `ViewContainerRef` to gain access to the view container of the element
         * that will host the dynamically components.
         */
        get: /**
         * Returns the injected `ViewContainerRef` to gain access to the view container of the element
         * that will host the dynamically components.
         * @return {?}
         */
        function () {
            return this._viewContainerRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GetViewContainerDirective.prototype, "componentFactoryResolver", {
        /**
         * Returns the injected `ComponentFactoryResolver` to gain access to the factory for a given component type.
         */
        get: /**
         * Returns the injected `ComponentFactoryResolver` to gain access to the factory for a given component type.
         * @return {?}
         */
        function () {
            return this._componentFactoryResolver;
        },
        enumerable: true,
        configurable: true
    });
    GetViewContainerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[get-view-container]'
                },] }
    ];
    /** @nocollapse */
    GetViewContainerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    return GetViewContainerDirective;
}());
export { GetViewContainerDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetViewContainerDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    GetViewContainerDirective.prototype._componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXZpZXctY29udGFpbmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL2NvcmUvdXRpbHMvZ2V0LXZpZXctY29udGFpbmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBU3RGO0lBS0ksbUNBQTJCLGlCQUFtQyxFQUFVLHlCQUFtRDtRQUFoRyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtCO1FBQVUsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEwQjtJQUN6SCxDQUFDO0lBTUgsc0JBQVcsdURBQWdCO1FBSjNCOzs7V0FHRzs7Ozs7O1FBQ0g7WUFFSSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNsQyxDQUFDOzs7T0FBQTtJQUtELHNCQUFXLCtEQUF3QjtRQUhuQzs7V0FFRzs7Ozs7UUFDSDtZQUVJLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO1FBQzFDLENBQUM7OztPQUFBOztnQkF2QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7aUJBQ25DOzs7O2dCQVhtQixnQkFBZ0I7Z0JBQUUsd0JBQXdCOztJQWlDOUQsZ0NBQUM7Q0FBQSxBQXhCRCxJQXdCQztTQXJCWSx5QkFBeUI7Ozs7OztJQUVmLHNEQUEyQzs7Ozs7SUFBRSw4REFBMkQiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IERpcmVjdGl2ZSwgVmlld0NvbnRhaW5lclJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQSBoZWxwZXIgZGlyZWN0aXZlIHRvIG1hcmsgdmFsaWQgaW5zZXJ0aW9uIHBvaW50cyBpbiB0aGUgdGVtcGxhdGUuIFxuICogVGhpcyBkaXJlY3RpdmUgaW5qZWN0cyB0aGUgYFZpZXdDb250YWluZXJSZWZgIHRvIGdhaW4gYWNjZXNzIHRvIHRoZSB2aWV3IGNvbnRhaW5lciBvZiB0aGUgZWxlbWVudCBcbiAqIHRoYXQgd2lsbCBob3N0IHRoZSBkeW5hbWljYWxseSBjb21wb25lbnRzLiBcbiAqIEluIHRoZSBgQERpcmVjdGl2ZWAgZGVjb3JhdG9yLCBub3RpY2UgdGhlIHNlbGVjdG9yIG5hbWUsIGBnZXQtdmlldy1jb250YWluZXJgOyB0aGF0J3Mgd2hhdCB5b3UgdXNlIFxuICogdG8gYXBwbHkgdGhlIGRpcmVjdGl2ZSB0byB0aGUgZWxlbWVudC4gXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2dldC12aWV3LWNvbnRhaW5lcl0nXG59KVxuZXhwb3J0IGNsYXNzIEdldFZpZXdDb250YWluZXJEaXJlY3RpdmVcbntcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpXG4gICAgeyB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbmplY3RlZCBgVmlld0NvbnRhaW5lclJlZmAgdG8gZ2FpbiBhY2Nlc3MgdG8gdGhlIHZpZXcgY29udGFpbmVyIG9mIHRoZSBlbGVtZW50IFxuICAgICAqIHRoYXQgd2lsbCBob3N0IHRoZSBkeW5hbWljYWxseSBjb21wb25lbnRzLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHZpZXdDb250YWluZXJSZWYoKTogVmlld0NvbnRhaW5lclJlZlxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdDb250YWluZXJSZWY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5qZWN0ZWQgYENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcmAgdG8gZ2FpbiBhY2Nlc3MgdG8gdGhlIGZhY3RvcnkgZm9yIGEgZ2l2ZW4gY29tcG9uZW50IHR5cGUuIFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCk6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICB9XG59XG4iXX0=