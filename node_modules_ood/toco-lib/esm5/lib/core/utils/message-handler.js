/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/utils/message-handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
/** @enum {string} */
var HandlerComponent = {
    snackBar: "snackBar",
    dialog: "dialog",
};
export { HandlerComponent };
/** @enum {number} */
var StatusCode = {
    OK: 200,
    serverError: 500,
    notFound: 400,
};
export { StatusCode };
StatusCode[StatusCode.OK] = 'OK';
StatusCode[StatusCode.serverError] = 'serverError';
StatusCode[StatusCode.notFound] = 'notFound';
/**
 * Object that is used with the `DialogContentComponent` component.
 * It contains the different data that are showed in the message.
 */
var /**
 * Object that is used with the `DialogContentComponent` component.
 * It contains the different data that are showed in the message.
 */
DialogMessageData = /** @class */ (function () {
    function DialogMessageData() {
    }
    return DialogMessageData;
}());
/**
 * Object that is used with the `DialogContentComponent` component.
 * It contains the different data that are showed in the message.
 */
export { DialogMessageData };
if (false) {
    /**
     * Message title.
     * @type {?}
     */
    DialogMessageData.prototype.title;
    /**
     * Message content.
     * @type {?}
     */
    DialogMessageData.prototype.content;
}
/**
 * Object that is used with the `DialogDeleteConfirmComponent` component.
 * It contains the different data that are showed in the message.
 */
var /**
 * Object that is used with the `DialogDeleteConfirmComponent` component.
 * It contains the different data that are showed in the message.
 */
DialogDeleteConfirmMessageData = /** @class */ (function () {
    function DialogDeleteConfirmMessageData() {
    }
    return DialogDeleteConfirmMessageData;
}());
/**
 * Object that is used with the `DialogDeleteConfirmComponent` component.
 * It contains the different data that are showed in the message.
 */
export { DialogDeleteConfirmMessageData };
if (false) {
    /**
     * Article of the type to delete.
     * @type {?}
     */
    DialogDeleteConfirmMessageData.prototype.delTypeArt;
    /**
     * Type to delete.
     * @type {?}
     */
    DialogDeleteConfirmMessageData.prototype.delType;
    /**
     * Value to delete.
     * @type {?}
     */
    DialogDeleteConfirmMessageData.prototype.delValue;
}
/**
 * Simple dialog message.
 */
var DialogContentComponent = /** @class */ (function () {
    function DialogContentComponent(data) {
        this.data = data;
    }
    DialogContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-dialog-message',
                    template: "\n\t\t<h1 mat-dialog-title>\n\t\t\t{{ data.title }}\n\t\t</h1>\n\t\t<mat-dialog-content> {{ data.content }} </mat-dialog-content>\n\t\t<mat-dialog-actions align=\"end\">\n\t\t\t<button mat-stroked-button mat-dialog-close>OK</button>\n\t\t</mat-dialog-actions>\n\t"
                }] }
    ];
    /** @nocollapse */
    DialogContentComponent.ctorParameters = function () { return [
        { type: DialogMessageData, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return DialogContentComponent;
}());
export { DialogContentComponent };
if (false) {
    /** @type {?} */
    DialogContentComponent.prototype.data;
}
/**
 * Dialog confirm message used to delete something.
 */
var DialogDeleteConfirmComponent = /** @class */ (function () {
    function DialogDeleteConfirmComponent(data) {
        this.data = data;
    }
    DialogDeleteConfirmComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-dialog-delete-confirm',
                    template: "\n\t\t<h1 mat-dialog-title>\n\t\t\t\u00BFEst\u00E1 usted seguro que desea eliminar {{ data.delTypeArt }} <strong>{{ data.delType }}</strong>?\n\t\t</h1>\n\t\t<mat-dialog-content>\n\t\t\tSu valor es: <em>{{ data.delValue }}</em>\n\t\t</mat-dialog-content>\n\t\t<mat-dialog-actions align=\"end\">\n\t\t\t<button mat-stroked-button mat-dialog-close color=\"warning\">Cancelar</button>\n\t\t\t<button mat-stroked-button [mat-dialog-close]=\"true\" color=\"warning\" cdkFocusInitial>Eliminar</button>\n\t\t</mat-dialog-actions>\n\t"
                }] }
    ];
    /** @nocollapse */
    DialogDeleteConfirmComponent.ctorParameters = function () { return [
        { type: DialogDeleteConfirmMessageData, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return DialogDeleteConfirmComponent;
}());
export { DialogDeleteConfirmComponent };
if (false) {
    /** @type {?} */
    DialogDeleteConfirmComponent.prototype.data;
}
var MessageHandler = /** @class */ (function () {
    function MessageHandler(_snackBar, dialog) {
        this._snackBar = _snackBar;
        this.dialog = dialog;
    }
    /**
     * @param {?} status
     * @param {?=} message
     * @param {?=} component
     * @param {?=} title
     * @param {?=} width
     * @return {?}
     */
    MessageHandler.prototype.showMessage = /**
     * @param {?} status
     * @param {?=} message
     * @param {?=} component
     * @param {?=} title
     * @param {?=} width
     * @return {?}
     */
    function (status, message, component, title, width) {
        switch (status) {
            case StatusCode.serverError:
                this.componentHandler(message ? message : 'No se pudo conectar al servidor.', component, title, width);
                break;
            case StatusCode.notFound:
                this.componentHandler(message ? message : 'Operación extraviada, no se pudo realizar.', component, title, width);
                break;
            default:
                this.componentHandler(message ? message : 'Operación realizada con éxito.', component, title, width);
                break;
        }
    };
    /**
     * @private
     * @param {?} message
     * @param {?=} handlercomponent
     * @param {?=} title
     * @param {?=} width
     * @return {?}
     */
    MessageHandler.prototype.componentHandler = /**
     * @private
     * @param {?} message
     * @param {?=} handlercomponent
     * @param {?=} title
     * @param {?=} width
     * @return {?}
     */
    function (message, handlercomponent, title, width) {
        if (width === void 0) { width = '300px'; }
        switch (handlercomponent) {
            case HandlerComponent.dialog:
                this.dialog.open(DialogContentComponent, {
                    width: width,
                    data: { title: title, content: message }
                });
                break;
            default:
                this._snackBar.open(message, null, {
                    duration: 5000,
                    verticalPosition: 'bottom',
                });
                break;
        }
    };
    return MessageHandler;
}());
export { MessageHandler };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MessageHandler.prototype._snackBar;
    /** @type {?} */
    MessageHandler.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,