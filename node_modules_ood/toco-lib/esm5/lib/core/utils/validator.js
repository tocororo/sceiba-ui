/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/utils/validator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
/**
 * Represents a class that contains a boolean property named `required`.
 * @record
 */
export function RequiredProperty() { }
if (false) {
    /**
     * Returns true if the control is required; otherwise, false.
     * @type {?}
     */
    RequiredProperty.prototype.required;
}
/**
 * \@description
 * Provides a set of extra validators that can be used by form controls.
 *
 * A validator is a function that processes a `FormControl` or collection of
 * controls and returns an error map or `null`. A `null` map means that validation has passed.
 *
 * @see [Form Validation](/guide/form-validation)
 */
var /**
 * \@description
 * Provides a set of extra validators that can be used by form controls.
 *
 * A validator is a function that processes a `FormControl` or collection of
 * controls and returns an error map or `null`. A `null` map means that validation has passed.
 *
 * @see [Form Validation](/guide/form-validation)
 */
ExtraValidators = /** @class */ (function () {
    function ExtraValidators() {
    }
    /**
     * @description
     * Validator that requires the length of the control's value to be equal to the
     * provided length. It assumes that the control's value is of string type.
     * This validator is used with Reactive Forms; if you want to use
     * an equivalent validator with Template-driven Form you must use the `equalLength` attribute.
     *
     * @usageNotes
     *
     * ### Validates that the field has a length of 4 characters:
     *
     * ```typescript
     * const control = new FormControl('ng', ExtraValidators.equalLength(4));
     *
     * console.log(control.errors); // { equalLength: { requiredLength: 4, actualLength: 2 } }
     * ```
     *
     * ```html
     * <input name="firstName" ngModel equallength="4">
     * ```
     *
     * @returns A validator function that returns an error map with the `equalLength`
     * if the validation check fails, otherwise `null`.
     */
    /**
     * \@description
     * Validator that requires the length of the control's value to be equal to the
     * provided length. It assumes that the control's value is of string type.
     * This validator is used with Reactive Forms; if you want to use
     * an equivalent validator with Template-driven Form you must use the `equalLength` attribute.
     *
     * \@usageNotes
     *
     * ### Validates that the field has a length of 4 characters:
     *
     * ```typescript
     * const control = new FormControl('ng', ExtraValidators.equalLength(4));
     *
     * console.log(control.errors); // { equalLength: { requiredLength: 4, actualLength: 2 } }
     * ```
     *
     * ```html
     * <input name="firstName" ngModel equallength="4">
     * ```
     *
     * @param {?} equalLength
     * @return {?} A validator function that returns an error map with the `equalLength`
     * if the validation check fails, otherwise `null`.
     */
    ExtraValidators.equalLength = /**
     * \@description
     * Validator that requires the length of the control's value to be equal to the
     * provided length. It assumes that the control's value is of string type.
     * This validator is used with Reactive Forms; if you want to use
     * an equivalent validator with Template-driven Form you must use the `equalLength` attribute.
     *
     * \@usageNotes
     *
     * ### Validates that the field has a length of 4 characters:
     *
     * ```typescript
     * const control = new FormControl('ng', ExtraValidators.equalLength(4));
     *
     * console.log(control.errors); // { equalLength: { requiredLength: 4, actualLength: 2 } }
     * ```
     *
     * ```html
     * <input name="firstName" ngModel equallength="4">
     * ```
     *
     * @param {?} equalLength
     * @return {?} A validator function that returns an error map with the `equalLength`
     * if the validation check fails, otherwise `null`.
     */
    function (equalLength) {
        /** @type {?} */
        var res = (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var len = control.value ? control.value.length : 0;
            return ((len != 0) && (len != equalLength))
                ? { 'equalLength': { 'requiredLength': equalLength, 'actualLength': len } }
                : null;
        });
        return res;
    };
    /**
     * @description
     * Validator that is applied to `FormArray` controls. It requires that the amount of
     * `FormArray`'s child controls to be greater than or equal to the provided minimum length.
     * The validator exists only as a function and not as a directive.
     *
     * @usageNotes
     *
     * ### Validates that the `FormArray` field has a minimum of 2 child controls:
     *
     * ```typescript
     * const formArrayControl = new FormArray([new FormControl('ng')], ExtraValidators.minLength(2));
     *
     * console.log(formArrayControl.errors); // { minLength: { requiredLength: 2, actualLength: 1 } }
     * ```
     *
     * @returns A validator function that returns an error map with the
     * `minLength` if the validation check fails, otherwise `null`.
     */
    /**
     * \@description
     * Validator that is applied to `FormArray` controls. It requires that the amount of
     * `FormArray`'s child controls to be greater than or equal to the provided minimum length.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the `FormArray` field has a minimum of 2 child controls:
     *
     * ```typescript
     * const formArrayControl = new FormArray([new FormControl('ng')], ExtraValidators.minLength(2));
     *
     * console.log(formArrayControl.errors); // { minLength: { requiredLength: 2, actualLength: 1 } }
     * ```
     *
     * @param {?} minLength
     * @return {?} A validator function that returns an error map with the
     * `minLength` if the validation check fails, otherwise `null`.
     */
    ExtraValidators.minLength = /**
     * \@description
     * Validator that is applied to `FormArray` controls. It requires that the amount of
     * `FormArray`'s child controls to be greater than or equal to the provided minimum length.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the `FormArray` field has a minimum of 2 child controls:
     *
     * ```typescript
     * const formArrayControl = new FormArray([new FormControl('ng')], ExtraValidators.minLength(2));
     *
     * console.log(formArrayControl.errors); // { minLength: { requiredLength: 2, actualLength: 1 } }
     * ```
     *
     * @param {?} minLength
     * @return {?} A validator function that returns an error map with the
     * `minLength` if the validation check fails, otherwise `null`.
     */
    function (minLength) {
        /** @type {?} */
        var res = (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var len = control.controls.length;
            return (len < minLength)
                ? { 'minLength': { 'requiredLength': minLength, 'actualLength': len } }
                : null;
        });
        return res;
    };
    /**
     * @description
     * Validator that is applied to a control that has an array of child controls.
     * It receives an object that fits the `RequiredProperty` interface and an array of child controls.
     * The behavior of the validator is the following:
     * If the control's value is required, then
     *   - all child controls must be different of empty.
     * If the control's value is not required, then
     *   - all child controls can be empty.
     *   - if there is at least one child control not empty, then all child controls must be different of empty.
     * The validator exists only as a function and not as a directive.
     *
     * @usageNotes
     *
     * ### Validates that the control does not have an empty child control:
     *
     * ```typescript
     * const control = new FormGroup({
     *     'fg': (firstGroup = new FormControl('2049')),
     *     'sg': (secondGroup = new FormControl(''))},
     *     ExtraValidators.requiredAndNotEmpty(this, [firstGroup, secondGroup]));
     *
     * console.log(control.errors); // { requiredAndNotEmpty: { required: true, pos: 1 } }
     * ```
     *
     * @returns A validator function that returns an error map with the `requiredAndNotEmpty`
     * if the validation check fails, otherwise `null`.
     */
    /**
     * \@description
     * Validator that is applied to a control that has an array of child controls.
     * It receives an object that fits the `RequiredProperty` interface and an array of child controls.
     * The behavior of the validator is the following:
     * If the control's value is required, then
     *   - all child controls must be different of empty.
     * If the control's value is not required, then
     *   - all child controls can be empty.
     *   - if there is at least one child control not empty, then all child controls must be different of empty.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the control does not have an empty child control:
     *
     * ```typescript
     * const control = new FormGroup({
     *     'fg': (firstGroup = new FormControl('2049')),
     *     'sg': (secondGroup = new FormControl(''))},
     *     ExtraValidators.requiredAndNotEmpty(this, [firstGroup, secondGroup]));
     *
     * console.log(control.errors); // { requiredAndNotEmpty: { required: true, pos: 1 } }
     * ```
     *
     * @param {?} requiredProperty
     * @param {?} childControls
     * @return {?} A validator function that returns an error map with the `requiredAndNotEmpty`
     * if the validation check fails, otherwise `null`.
     */
    ExtraValidators.requiredAndNotEmpty = /**
     * \@description
     * Validator that is applied to a control that has an array of child controls.
     * It receives an object that fits the `RequiredProperty` interface and an array of child controls.
     * The behavior of the validator is the following:
     * If the control's value is required, then
     *   - all child controls must be different of empty.
     * If the control's value is not required, then
     *   - all child controls can be empty.
     *   - if there is at least one child control not empty, then all child controls must be different of empty.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the control does not have an empty child control:
     *
     * ```typescript
     * const control = new FormGroup({
     *     'fg': (firstGroup = new FormControl('2049')),
     *     'sg': (secondGroup = new FormControl(''))},
     *     ExtraValidators.requiredAndNotEmpty(this, [firstGroup, secondGroup]));
     *
     * console.log(control.errors); // { requiredAndNotEmpty: { required: true, pos: 1 } }
     * ```
     *
     * @param {?} requiredProperty
     * @param {?} childControls
     * @return {?} A validator function that returns an error map with the `requiredAndNotEmpty`
     * if the validation check fails, otherwise `null`.
     */
    function (requiredProperty, childControls) {
        /** @type {?} */
        var res = (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var i = 0;
            /** @type {?} */
            var controlsGroupLength = childControls.length;
            if (requiredProperty.required) {
                /* Only iterates to the first empty element. */
                for (; i < controlsGroupLength; i++) {
                    if (!childControls[i].value)
                        break;
                }
                return (i == controlsGroupLength)
                    ? null
                    : { 'requiredAndNotEmpty': { 'required': true, 'pos': i } };
            }
            else {
                /** @type {?} */
                var hasControlNotEmpty = false;
                /** @type {?} */
                var minEmptyPos = -1;
                /* Iterates to the first empty element. */
                for (; i < controlsGroupLength; i++) {
                    if (childControls[i].value) {
                        if (minEmptyPos != -1)
                            break;
                        hasControlNotEmpty = true;
                    }
                    else {
                        if (minEmptyPos == -1)
                            minEmptyPos = i;
                        if (hasControlNotEmpty)
                            break;
                    }
                }
                return (i == controlsGroupLength)
                    ? null
                    : { 'requiredAndNotEmpty': { 'required': true, 'pos': minEmptyPos } };
            }
        });
        return res;
    };
    /**
     * @description
     * Validator that requires the control's value pass an ISSN validation test (confirm the check digit).
     * Assumes that the code (control's value) is a string of length 11, with the form 'XXXX – XXXX'.
     * The validator exists only as a function and not as a directive.
     *
     * @usageNotes
     *
     * ### Validates that the field matches a valid ISSN pattern (confirms the check digit):
     *
     * ```typescript
     * const control = new FormControl('2049 – 3635', ExtraValidators.issnConfirmCheckDigitOneField(11));
     *
     * console.log(control.errors); // { issnConfirmCheckDigitOneField: true }
     * ```
     *
     * @returns A validator function that returns an error map with the `issnConfirmCheckDigitOneField`
     * if the validation check fails, otherwise `null`.
     */
    /**
     * \@description
     * Validator that requires the control's value pass an ISSN validation test (confirm the check digit).
     * Assumes that the code (control's value) is a string of length 11, with the form 'XXXX – XXXX'.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the field matches a valid ISSN pattern (confirms the check digit):
     *
     * ```typescript
     * const control = new FormControl('2049 – 3635', ExtraValidators.issnConfirmCheckDigitOneField(11));
     *
     * console.log(control.errors); // { issnConfirmCheckDigitOneField: true }
     * ```
     *
     * @param {?} codeLength
     * @return {?} A validator function that returns an error map with the `issnConfirmCheckDigitOneField`
     * if the validation check fails, otherwise `null`.
     */
    ExtraValidators.issnConfirmCheckDigitOneField = /**
     * \@description
     * Validator that requires the control's value pass an ISSN validation test (confirm the check digit).
     * Assumes that the code (control's value) is a string of length 11, with the form 'XXXX – XXXX'.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the field matches a valid ISSN pattern (confirms the check digit):
     *
     * ```typescript
     * const control = new FormControl('2049 – 3635', ExtraValidators.issnConfirmCheckDigitOneField(11));
     *
     * console.log(control.errors); // { issnConfirmCheckDigitOneField: true }
     * ```
     *
     * @param {?} codeLength
     * @return {?} A validator function that returns an error map with the `issnConfirmCheckDigitOneField`
     * if the validation check fails, otherwise `null`.
     */
    function (codeLength) {
        /** @type {?} */
        var res = (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            if (control.value.length == codeLength) {
                /** @type {?} */
                var code = control.value;
                /** @type {?} */
                var result = (code.charCodeAt(0) - 48) * 8;
                result += (code.charCodeAt(1) - 48) * 7;
                result += (code.charCodeAt(2) - 48) * 6;
                result += (code.charCodeAt(3) - 48) * 5;
                /* code[4] = ' ', code[5] = '–', code[6] = ' '. */
                result += (code.charCodeAt(7) - 48) * 4;
                result += (code.charCodeAt(8) - 48) * 3;
                result += (code.charCodeAt(9) - 48) * 2;
                result += ((code[10] == 'x') || (code[10] == 'X')) ? 10 : code.charCodeAt(10) - 48;
                return (result % 11)
                    ? { 'issnConfirmCheckDigitOneField': true }
                    : null;
            }
            return null;
        });
        return res;
    };
    /**
     * @description
     * Validator that requires the control's value passes an ISSN validation test (confirms the check digit).
     * The ISSN value is divided in two groups, therefore the control has two child controls and they are
     * arguments of the validator method. It assumes that the control's value is of string type.
     * The validator exists only as a function and not as a directive.
     *
     * @usageNotes
     *
     * ### Validates that the field matches a valid ISSN pattern (confirms the check digit):
     *
     * ```typescript
     * const control = new FormGroup({
     *     'fg': (firstGroup = new FormControl('2049')),
     *     'sg': (secondGroup = new FormControl('3635'))},
     *     ExtraValidators.issnConfirmCheckDigitTwoField(firstGroup, secondGroup, 4));
     *
     * console.log(control.errors); // { issnConfirmCheckDigitTwoField: true }
     * ```
     *
     * @returns A validator function that returns an error map with the `issnConfirmCheckDigitTwoField`
     * if the validation check fails, otherwise `null`.
     */
    /**
     * \@description
     * Validator that requires the control's value passes an ISSN validation test (confirms the check digit).
     * The ISSN value is divided in two groups, therefore the control has two child controls and they are
     * arguments of the validator method. It assumes that the control's value is of string type.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the field matches a valid ISSN pattern (confirms the check digit):
     *
     * ```typescript
     * const control = new FormGroup({
     *     'fg': (firstGroup = new FormControl('2049')),
     *     'sg': (secondGroup = new FormControl('3635'))},
     *     ExtraValidators.issnConfirmCheckDigitTwoField(firstGroup, secondGroup, 4));
     *
     * console.log(control.errors); // { issnConfirmCheckDigitTwoField: true }
     * ```
     *
     * @param {?} firstGroup
     * @param {?} secondGroup
     * @param {?} groupLength
     * @return {?} A validator function that returns an error map with the `issnConfirmCheckDigitTwoField`
     * if the validation check fails, otherwise `null`.
     */
    ExtraValidators.issnConfirmCheckDigitTwoField = /**
     * \@description
     * Validator that requires the control's value passes an ISSN validation test (confirms the check digit).
     * The ISSN value is divided in two groups, therefore the control has two child controls and they are
     * arguments of the validator method. It assumes that the control's value is of string type.
     * The validator exists only as a function and not as a directive.
     *
     * \@usageNotes
     *
     * ### Validates that the field matches a valid ISSN pattern (confirms the check digit):
     *
     * ```typescript
     * const control = new FormGroup({
     *     'fg': (firstGroup = new FormControl('2049')),
     *     'sg': (secondGroup = new FormControl('3635'))},
     *     ExtraValidators.issnConfirmCheckDigitTwoField(firstGroup, secondGroup, 4));
     *
     * console.log(control.errors); // { issnConfirmCheckDigitTwoField: true }
     * ```
     *
     * @param {?} firstGroup
     * @param {?} secondGroup
     * @param {?} groupLength
     * @return {?} A validator function that returns an error map with the `issnConfirmCheckDigitTwoField`
     * if the validation check fails, otherwise `null`.
     */
    function (firstGroup, secondGroup, groupLength) {
        /** @type {?} */
        var res = (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            if ((firstGroup.value.length == groupLength) && (secondGroup.value.length == groupLength)) {
                /** @type {?} */
                var groupValue = firstGroup.value;
                /** @type {?} */
                var result = (groupValue.charCodeAt(0) - 48) * 8;
                result += (groupValue.charCodeAt(1) - 48) * 7;
                result += (groupValue.charCodeAt(2) - 48) * 6;
                result += (groupValue.charCodeAt(3) - 48) * 5;
                result += ((groupValue = secondGroup.value).charCodeAt(0) - 48) * 4;
                result += (groupValue.charCodeAt(1) - 48) * 3;
                result += (groupValue.charCodeAt(2) - 48) * 2;
                result += ((groupValue[3] == 'x') || (groupValue[3] == 'X')) ? 10 : groupValue.charCodeAt(3) - 48;
                return (result % 11)
                    ? { 'issnConfirmCheckDigitTwoField': true }
                    : null;
            }
            return null;
        });
        return res;
    };
    /**
     * @param {?} internalFormGroup
     * @return {?}
     */
    ExtraValidators.issnValidator = /**
     * @param {?} internalFormGroup
     * @return {?}
     */
    function (internalFormGroup) {
        /** @type {?} */
        var res = (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            return (!internalFormGroup.valid)
                ? { 'issnValidator': { 'requiredValid': internalFormGroup.valid } }
                : null;
        });
        return res;
    };
    return ExtraValidators;
}());
/**
 * \@description
 * Provides a set of extra validators that can be used by form controls.
 *
 * A validator is a function that processes a `FormControl` or collection of
 * controls and returns an error map or `null`. A `null` map means that validation has passed.
 *
 * @see [Form Validation](/guide/form-validation)
 */
export { ExtraValidators };
/**
 * \@description
 * A directive that represents a validator that requires the length of the control's value
 * to be equal to the provided length. The control must be marked with the `equalLength` attribute.
 * The directive is provided with the `NG_VALIDATORS` mult-provider list.
 * This validator is used with Template-driven Form; if you want to use an equivalent validator
 * with Reactive Forms you must use the `ExtraValidators.equalLength` method.
 *
 * \@usageNotes
 *
 * ### Validates that the field has a length of 4 characters:
 *
 * The following example shows how to add an equal length validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel equallength="4">
 * ```
 */
var EqualLengthDirective = /** @class */ (function () {
    function EqualLengthDirective() {
    }
    /**
     * @description
     * A lifecycle hook method that is called when the directive's inputs change. For internal use only.
     *
     * @param changes An object of key/value pairs for the set of changed inputs.
     */
    /**
     * \@description
     * A lifecycle hook method that is called when the directive's inputs change. For internal use only.
     *
     * @param {?} changes An object of key/value pairs for the set of changed inputs.
     * @return {?}
     */
    EqualLengthDirective.prototype.ngOnChanges = /**
     * \@description
     * A lifecycle hook method that is called when the directive's inputs change. For internal use only.
     *
     * @param {?} changes An object of key/value pairs for the set of changed inputs.
     * @return {?}
     */
    function (changes) {
        if ('equalLength' in changes) {
            this._validator = ExtraValidators.equalLength(parseInt(this.equalLength, 10));
            if (this._onChange)
                this._onChange();
        }
    };
    /**
     * @description
     * Method that performs synchronous validation against the provided control. It requires the length
     * of the control's value to be equal to the provided `equalLength`.
     *
     * @param control The control to validate against.
     *
     * @returns A map of validation errors if validation fails; otherwise, `null`.
     */
    /**
     * \@description
     * Method that performs synchronous validation against the provided control. It requires the length
     * of the control's value to be equal to the provided `equalLength`.
     *
     * @param {?} control The control to validate against.
     *
     * @return {?} A map of validation errors if validation fails; otherwise, `null`.
     */
    EqualLengthDirective.prototype.validate = /**
     * \@description
     * Method that performs synchronous validation against the provided control. It requires the length
     * of the control's value to be equal to the provided `equalLength`.
     *
     * @param {?} control The control to validate against.
     *
     * @return {?} A map of validation errors if validation fails; otherwise, `null`.
     */
    function (control) {
        return (this.equalLength)
            ? this._validator(control)
            : null;
    };
    /**
     * @description
     * Registers a callback function to call when the validator inputs change.
     *
     * @param fn The callback function to register.
     */
    /**
     * \@description
     * Registers a callback function to call when the validator inputs change.
     *
     * @param {?} fn The callback function to register.
     * @return {?}
     */
    EqualLengthDirective.prototype.registerOnValidatorChange = /**
     * \@description
     * Registers a callback function to call when the validator inputs change.
     *
     * @param {?} fn The callback function to register.
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    EqualLengthDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[equalLength]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            useExisting: EqualLengthDirective,
                            multi: true
                        }]
                },] }
    ];
    EqualLengthDirective.propDecorators = {
        equalLength: [{ type: Input }]
    };
    return EqualLengthDirective;
}());
export { EqualLengthDirective };
if (false) {
    /**
     * \@description
     * Input variable that contains the length to check.
     * @type {?}
     */
    EqualLengthDirective.prototype.equalLength;
    /**
     * @type {?}
     * @private
     */
    EqualLengthDirective.prototype._validator;
    /**
     * @type {?}
     * @private
     */
    EqualLengthDirective.prototype._onChange;
}
//# sourceMappingURL=data:application/json;base64,