/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/icon.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MatIconRegistry } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/icon";
import * as i2 from "@angular/platform-browser";
/**
 * A service that registers custom svg icons in order to use them through the `mat-icon` component.
 * Which simply registers the custom icons with the `MatIconRegistry` service provided by Angular Material.
 */
var IconService = /** @class */ (function () {
    function IconService(_matIconRegistry, _domSanitizer) {
        this._matIconRegistry = _matIconRegistry;
        this._domSanitizer = _domSanitizer;
    }
    /**
     * Registers an array of icons.
     * @param iconNames Array of names under which the icons should be registered.
     * @param iconUrl The relative URL path pointing to the location of the icons.
     */
    /**
     * Registers an array of icons.
     * @param {?} iconNames Array of names under which the icons should be registered.
     * @param {?} iconUrl The relative URL path pointing to the location of the icons.
     * @return {?}
     */
    IconService.prototype.registerIcons = /**
     * Registers an array of icons.
     * @param {?} iconNames Array of names under which the icons should be registered.
     * @param {?} iconUrl The relative URL path pointing to the location of the icons.
     * @return {?}
     */
    function (iconNames, iconUrl) {
        var _this = this;
        iconNames.forEach((/**
         * @param {?} iconName
         * @return {?}
         */
        function (iconName) {
            _this._matIconRegistry.addSvgIcon(iconName, _this._domSanitizer.bypassSecurityTrustResourceUrl(iconUrl + "/" + iconName + ".svg"));
        }));
    };
    /**
     * Returns the default icon name. It represents a blank icon.
     * It is used by controls that want to have occupied the icon space, but nothing is showed.
     */
    IconService.defaultIconName = 'outlined-blank-24px';
    IconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IconService.ctorParameters = function () { return [
        { type: MatIconRegistry },
        { type: DomSanitizer }
    ]; };
    /** @nocollapse */ IconService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(i0.ɵɵinject(i1.MatIconRegistry), i0.ɵɵinject(i2.DomSanitizer)); }, token: IconService, providedIn: "root" });
    return IconService;
}());
export { IconService };
if (false) {
    /**
     * Returns the default icon name. It represents a blank icon.
     * It is used by controls that want to have occupied the icon space, but nothing is showed.
     * @type {?}
     */
    IconService.defaultIconName;
    /**
     * @type {?}
     * @private
     */
    IconService.prototype._matIconRegistry;
    /**
     * @type {?}
     * @private
     */
    IconService.prototype._domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvY29yZS9zZXJ2aWNlcy9pY29uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7Ozs7O0FBTXpEO0lBV0MscUJBQTJCLGdCQUFpQyxFQUFVLGFBQTJCO1FBQXRFLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBYztJQUMvRixDQUFDO0lBRUg7Ozs7T0FJRzs7Ozs7OztJQUNJLG1DQUFhOzs7Ozs7SUFBcEIsVUFBcUIsU0FBbUIsRUFBRSxPQUFlO1FBQXpELGlCQU9DO1FBTEEsU0FBUyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLFFBQVE7WUFDeEIsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FDL0IsUUFBUSxFQUNSLEtBQUksQ0FBQyxhQUFhLENBQUMsOEJBQThCLENBQUssT0FBTyxTQUFNLFFBQVEsU0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4RixDQUFDLEVBQUMsQ0FBQztJQUNKLENBQUM7Ozs7O0lBakJzQiwyQkFBZSxHQUFXLHFCQUFxQixDQUFDOztnQkFUdkUsVUFBVSxTQUFDO29CQUNYLFVBQVUsRUFBRSxNQUFNO2lCQUNsQjs7OztnQkFUUSxlQUFlO2dCQUNmLFlBQVk7OztzQkFIckI7Q0FvQ0MsQUEzQkQsSUEyQkM7U0F4QlksV0FBVzs7Ozs7OztJQU12Qiw0QkFBdUU7Ozs7O0lBRXBELHVDQUF5Qzs7Ozs7SUFBRSxvQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdEljb25SZWdpc3RyeSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG4vKipcbiAqIEEgc2VydmljZSB0aGF0IHJlZ2lzdGVycyBjdXN0b20gc3ZnIGljb25zIGluIG9yZGVyIHRvIHVzZSB0aGVtIHRocm91Z2ggdGhlIGBtYXQtaWNvbmAgY29tcG9uZW50LiBcbiAqIFdoaWNoIHNpbXBseSByZWdpc3RlcnMgdGhlIGN1c3RvbSBpY29ucyB3aXRoIHRoZSBgTWF0SWNvblJlZ2lzdHJ5YCBzZXJ2aWNlIHByb3ZpZGVkIGJ5IEFuZ3VsYXIgTWF0ZXJpYWwuIFxuICovXG5ASW5qZWN0YWJsZSh7XG5cdHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBJY29uU2VydmljZVxue1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGVmYXVsdCBpY29uIG5hbWUuIEl0IHJlcHJlc2VudHMgYSBibGFuayBpY29uLiBcblx0ICogSXQgaXMgdXNlZCBieSBjb250cm9scyB0aGF0IHdhbnQgdG8gaGF2ZSBvY2N1cGllZCB0aGUgaWNvbiBzcGFjZSwgYnV0IG5vdGhpbmcgaXMgc2hvd2VkLiBcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdEljb25OYW1lOiBzdHJpbmcgPSAnb3V0bGluZWQtYmxhbmstMjRweCc7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX21hdEljb25SZWdpc3RyeTogTWF0SWNvblJlZ2lzdHJ5LCBwcml2YXRlIF9kb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcilcblx0eyB9XG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVycyBhbiBhcnJheSBvZiBpY29ucy4gXG5cdCAqIEBwYXJhbSBpY29uTmFtZXMgQXJyYXkgb2YgbmFtZXMgdW5kZXIgd2hpY2ggdGhlIGljb25zIHNob3VsZCBiZSByZWdpc3RlcmVkLiBcblx0ICogQHBhcmFtIGljb25VcmwgVGhlIHJlbGF0aXZlIFVSTCBwYXRoIHBvaW50aW5nIHRvIHRoZSBsb2NhdGlvbiBvZiB0aGUgaWNvbnMuIFxuXHQgKi9cblx0cHVibGljIHJlZ2lzdGVySWNvbnMoaWNvbk5hbWVzOiBzdHJpbmdbXSwgaWNvblVybDogc3RyaW5nKTogdm9pZFxuXHR7XG5cdFx0aWNvbk5hbWVzLmZvckVhY2goaWNvbk5hbWUgPT4ge1xuXHRcdCAgdGhpcy5fbWF0SWNvblJlZ2lzdHJ5LmFkZFN2Z0ljb24oXG5cdFx0XHQgIGljb25OYW1lLCBcblx0XHRcdCAgdGhpcy5fZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybChgJHsgaWNvblVybCB9LyR7IGljb25OYW1lIH0uc3ZnYCkpO1xuXHRcdH0pO1xuXHR9XG59XG4iXX0=