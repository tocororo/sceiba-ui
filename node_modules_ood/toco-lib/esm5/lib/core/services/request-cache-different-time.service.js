/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/request-cache-different-time.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Environment } from '../env';
import { MessageService } from './message.service';
import { Cachable, RequestCache } from './request-cache.service';
import * as i0 from "@angular/core";
import * as i1 from "../env";
import * as i2 from "./message.service";
/**
 * A service that implements the cachable URL request.
 */
var CachableUrl = /** @class */ (function () {
    function CachableUrl(_env) {
        this._env = _env;
    }
    /**
     * Returns a number greater than zero if the specified request is cachable;
     * that number represents the maximum cache age in milliseconds.
     * Return zero if the specified request is NOT cachable.
     * @param req The outgoing request object to handle.
     */
    /**
     * Returns a number greater than zero if the specified request is cachable;
     * that number represents the maximum cache age in milliseconds.
     * Return zero if the specified request is NOT cachable.
     * @param {?} req The outgoing request object to handle.
     * @return {?}
     */
    CachableUrl.prototype.isCachable = /**
     * Returns a number greater than zero if the specified request is cachable;
     * that number represents the maximum cache age in milliseconds.
     * Return zero if the specified request is NOT cachable.
     * @param {?} req The outgoing request object to handle.
     * @return {?}
     */
    function (req) {
        var _this = this;
        /* Only GET requests are cachable. */
        if (req.method != 'GET')
            return 0;
        Object.keys(this._env.cachableUrls).forEach((/**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            /* Verifies if the request cache is cachable. */
            if (req.url.indexOf(url) > -1)
                return _this._env.cachableUrls[url];
        }));
        /* It is not cachable. */
        return 0;
    };
    CachableUrl.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CachableUrl.ctorParameters = function () { return [
        { type: Environment }
    ]; };
    /** @nocollapse */ CachableUrl.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CachableUrl_Factory() { return new CachableUrl(i0.ɵɵinject(i1.Environment)); }, token: CachableUrl, providedIn: "root" });
    return CachableUrl;
}());
export { CachableUrl };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CachableUrl.prototype._env;
}
/**
 * Represents the request cache entry.
 * @record
 */
export function RequestCacheEntry() { }
if (false) {
    /**
     * Returns the request URL.
     * @type {?}
     */
    RequestCacheEntry.prototype.url;
    /**
     * Returns the request cache.
     * @type {?}
     */
    RequestCacheEntry.prototype.response;
    /**
     * Returns the maximum cache age in milliseconds.
     * @type {?}
     */
    RequestCacheEntry.prototype.maxAgeInCache;
    /**
     * Returns the last read of the request URL.
     * @type {?}
     */
    RequestCacheEntry.prototype.lastRead;
}
/**
 * A service that implements the request cache with the different time using `Map` collection.
 */
var RequestCacheDifferentTimeWithMap = /** @class */ (function () {
    function RequestCacheDifferentTimeWithMap(_messageService) {
        this._messageService = _messageService;
        this._cache = new Map();
    }
    /**
     * @param {?} req
     * @return {?}
     */
    RequestCacheDifferentTimeWithMap.prototype.get = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var cached = this._cache.get(req.urlWithParams);
        if (!cached) {
            return undefined;
        }
        if ((cached.lastRead + cached.maxAgeInCache) < Date.now()) /* Found expired cached. */ {
            this._messageService.add("Found expired cached response for '" + req.urlWithParams + "'.");
            return undefined;
        }
        else {
            this._messageService.add("Found cached response for '" + req.urlWithParams + "'.");
            return cached.response;
        }
    };
    /**
     * @param {?} req
     * @param {?} maxAgeInCache
     * @param {?} response
     * @return {?}
     */
    RequestCacheDifferentTimeWithMap.prototype.set = /**
     * @param {?} req
     * @param {?} maxAgeInCache
     * @param {?} response
     * @return {?}
     */
    function (req, maxAgeInCache, response) {
        var _this = this;
        /** @type {?} */
        var url = req.urlWithParams;
        this._messageService.add("Caching response from '" + url + "'.");
        this._cache.set(url, { url: url, response: response, maxAgeInCache: maxAgeInCache, lastRead: Date.now() });
        /* Removes expired cache entries. */
        this._cache.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) {
            if (entry.lastRead < Date.now() - entry.maxAgeInCache) {
                _this._cache.delete(entry.url);
            }
        }));
        this._messageService.add("Request cache size: " + this._cache.size + ".");
    };
    RequestCacheDifferentTimeWithMap.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RequestCacheDifferentTimeWithMap.ctorParameters = function () { return [
        { type: MessageService }
    ]; };
    /** @nocollapse */ RequestCacheDifferentTimeWithMap.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function RequestCacheDifferentTimeWithMap_Factory() { return new RequestCacheDifferentTimeWithMap(i0.ɵɵinject(i2.MessageService)); }, token: RequestCacheDifferentTimeWithMap, providedIn: "root" });
    return RequestCacheDifferentTimeWithMap;
}());
export { RequestCacheDifferentTimeWithMap };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RequestCacheDifferentTimeWithMap.prototype._cache;
    /**
     * @type {?}
     * @private
     */
    RequestCacheDifferentTimeWithMap.prototype._messageService;
}
/**
 * A provider for the cachable URL request.
 * @type {?}
 */
export var CACHABLE_URL_PROVIDER = [
    { 'provide': Cachable, 'useClass': CachableUrl, 'multi': false }
];
/**
 * A provider for the request cache with the different time using `Map` collection.
 * @type {?}
 */
export var REQUEST_CACHE_DIFFERENT_TIME_WITH_MAP_PROVIDER = [
    { 'provide': RequestCache, 'useClass': RequestCacheDifferentTimeWithMap, 'multi': false }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1jYWNoZS1kaWZmZXJlbnQtdGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvY29yZS9zZXJ2aWNlcy9yZXF1ZXN0LWNhY2hlLWRpZmZlcmVudC10aW1lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7Ozs7QUFLakU7SUFLQyxxQkFBMkIsSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtJQUMxQyxDQUFDO0lBRUE7Ozs7O09BS0c7Ozs7Ozs7O0lBQ0ksZ0NBQVU7Ozs7Ozs7SUFBakIsVUFBa0IsR0FBcUI7UUFBdkMsaUJBY0M7UUFaRyxxQ0FBcUM7UUFDM0MsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUs7WUFBRSxPQUFPLENBQUMsQ0FBQztRQUVsQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTzs7OztRQUMxQyxVQUFDLEdBQVc7WUFDWCxnREFBZ0Q7WUFDaEQsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQUUsT0FBTyxLQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRSxDQUFDLEVBQ0QsQ0FBQztRQUVGLHlCQUF5QjtRQUN6QixPQUFPLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQTVCSixVQUFVLFNBQUM7b0JBQ1gsVUFBVSxFQUFFLE1BQU07aUJBQ2xCOzs7O2dCQVZRLFdBQVc7OztzQkFKcEI7Q0F5Q0MsQUE3QkQsSUE2QkM7U0ExQlksV0FBVzs7Ozs7O0lBRUosMkJBQXlCOzs7Ozs7QUE2QjdDLHVDQXFCQzs7Ozs7O0lBaEJBLGdDQUFZOzs7OztJQUtaLHFDQUE0Qjs7Ozs7SUFLNUIsMENBQXNCOzs7OztJQUt0QixxQ0FBaUI7Ozs7O0FBTWxCO0lBT0MsMENBQTJCLGVBQStCO1FBQS9CLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQUV6RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUE2QixDQUFDO0lBQ3BELENBQUM7Ozs7O0lBRU0sOENBQUc7Ozs7SUFBVixVQUFXLEdBQXFCOztZQUV6QixNQUFNLEdBQXNCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFFcEUsSUFBSSxDQUFDLE1BQU0sRUFDWDtZQUNDLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRywyQkFBMkIsQ0FDdkY7WUFDQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyx3Q0FBdUMsR0FBRyxDQUFDLGFBQWEsT0FBSyxDQUFDLENBQUM7WUFDeEYsT0FBTyxTQUFTLENBQUM7U0FDakI7YUFFRDtZQUNDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGdDQUErQixHQUFHLENBQUMsYUFBYSxPQUFLLENBQUMsQ0FBQztZQUNoRixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUM7U0FDdkI7SUFDRixDQUFDOzs7Ozs7O0lBRU0sOENBQUc7Ozs7OztJQUFWLFVBQVcsR0FBcUIsRUFBRSxhQUFxQixFQUFFLFFBQTJCO1FBQXBGLGlCQWtCQzs7WUFoQk0sR0FBRyxHQUFXLEdBQUcsQ0FBQyxhQUFhO1FBQ3JDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLDRCQUEyQixHQUFHLE9BQUssQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsS0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLGFBQWEsZUFBQSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTdFLG9DQUFvQztRQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Ozs7UUFDbEIsVUFBQyxLQUF3QjtZQUN4QixJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQ3JEO2dCQUNDLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM5QjtRQUNGLENBQUMsRUFDRCxDQUFDO1FBRUYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMseUJBQXdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFJLENBQUMsQ0FBQztJQUN4RSxDQUFDOztnQkFuREQsVUFBVSxTQUFDO29CQUNYLFVBQVUsRUFBRSxNQUFNO2lCQUNsQjs7OztnQkFwRVEsY0FBYzs7OzJDQU52QjtDQTRIQyxBQXBERCxJQW9EQztTQWpEWSxnQ0FBZ0M7Ozs7OztJQUU1QyxrREFBK0M7Ozs7O0lBRTVCLDJEQUF1Qzs7Ozs7O0FBa0QzRCxNQUFNLEtBQU8scUJBQXFCLEdBQUc7SUFDakMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtDQUNuRTs7Ozs7QUFLRCxNQUFNLEtBQU8sOENBQThDLEdBQUc7SUFDMUQsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxnQ0FBZ0MsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0NBQzVGIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJy4uL2Vudic7XG5cbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9tZXNzYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FjaGFibGUsIFJlcXVlc3RDYWNoZSB9IGZyb20gJy4vcmVxdWVzdC1jYWNoZS5zZXJ2aWNlJztcblxuLyoqXG4gKiBBIHNlcnZpY2UgdGhhdCBpbXBsZW1lbnRzIHRoZSBjYWNoYWJsZSBVUkwgcmVxdWVzdC5cbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ2FjaGFibGVVcmwgaW1wbGVtZW50cyBDYWNoYWJsZVxue1xuXHRwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfZW52OiBFbnZpcm9ubWVudClcblx0eyB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiB6ZXJvIGlmIHRoZSBzcGVjaWZpZWQgcmVxdWVzdCBpcyBjYWNoYWJsZTtcblx0ICogdGhhdCBudW1iZXIgcmVwcmVzZW50cyB0aGUgbWF4aW11bSBjYWNoZSBhZ2UgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKiBSZXR1cm4gemVybyBpZiB0aGUgc3BlY2lmaWVkIHJlcXVlc3QgaXMgTk9UIGNhY2hhYmxlLlxuICAgICAqIEBwYXJhbSByZXEgVGhlIG91dGdvaW5nIHJlcXVlc3Qgb2JqZWN0IHRvIGhhbmRsZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgaXNDYWNoYWJsZShyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBudW1iZXJcbiAgICB7XG4gICAgICAgIC8qIE9ubHkgR0VUIHJlcXVlc3RzIGFyZSBjYWNoYWJsZS4gKi9cblx0XHRpZiAocmVxLm1ldGhvZCAhPSAnR0VUJykgcmV0dXJuIDA7XG5cblx0XHRPYmplY3Qua2V5cyh0aGlzLl9lbnYuY2FjaGFibGVVcmxzKS5mb3JFYWNoKFxuXHRcdFx0KHVybDogc3RyaW5nKSA9PiB7XG5cdFx0XHRcdC8qIFZlcmlmaWVzIGlmIHRoZSByZXF1ZXN0IGNhY2hlIGlzIGNhY2hhYmxlLiAqL1xuXHRcdFx0XHRpZiAocmVxLnVybC5pbmRleE9mKHVybCkgPiAtMSkgcmV0dXJuIHRoaXMuX2Vudi5jYWNoYWJsZVVybHNbdXJsXTtcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0LyogSXQgaXMgbm90IGNhY2hhYmxlLiAqL1xuXHRcdHJldHVybiAwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSByZXF1ZXN0IGNhY2hlIGVudHJ5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RDYWNoZUVudHJ5XG57XG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSByZXF1ZXN0IFVSTC5cblx0ICovXG5cdHVybDogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSByZXF1ZXN0IGNhY2hlLlxuXHQgKi9cblx0cmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGNhY2hlIGFnZSBpbiBtaWxsaXNlY29uZHMuXG5cdCAqL1xuXHRtYXhBZ2VJbkNhY2hlOiBudW1iZXI7XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxhc3QgcmVhZCBvZiB0aGUgcmVxdWVzdCBVUkwuXG5cdCAqL1xuXHRsYXN0UmVhZDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEEgc2VydmljZSB0aGF0IGltcGxlbWVudHMgdGhlIHJlcXVlc3QgY2FjaGUgd2l0aCB0aGUgZGlmZmVyZW50IHRpbWUgdXNpbmcgYE1hcGAgY29sbGVjdGlvbi5cbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUmVxdWVzdENhY2hlRGlmZmVyZW50VGltZVdpdGhNYXAgaW1wbGVtZW50cyBSZXF1ZXN0Q2FjaGVcbntcblx0cHJpdmF0ZSBfY2FjaGU6IE1hcDxzdHJpbmcsIFJlcXVlc3RDYWNoZUVudHJ5PjtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlKVxuXHR7XG5cdFx0dGhpcy5fY2FjaGUgPSBuZXcgTWFwPHN0cmluZywgUmVxdWVzdENhY2hlRW50cnk+KCk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0KHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IEh0dHBSZXNwb25zZTxhbnk+IHwgdW5kZWZpbmVkXG5cdHtcblx0XHRjb25zdCBjYWNoZWQ6IFJlcXVlc3RDYWNoZUVudHJ5ID0gdGhpcy5fY2FjaGUuZ2V0KHJlcS51cmxXaXRoUGFyYW1zKTtcblxuXHRcdGlmICghY2FjaGVkKVxuXHRcdHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0aWYgKChjYWNoZWQubGFzdFJlYWQgKyBjYWNoZWQubWF4QWdlSW5DYWNoZSkgPCBEYXRlLm5vdygpKSAgLyogRm91bmQgZXhwaXJlZCBjYWNoZWQuICovXG5cdFx0e1xuXHRcdFx0dGhpcy5fbWVzc2FnZVNlcnZpY2UuYWRkKGBGb3VuZCBleHBpcmVkIGNhY2hlZCByZXNwb25zZSBmb3IgJyR7IHJlcS51cmxXaXRoUGFyYW1zIH0nLmApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHRoaXMuX21lc3NhZ2VTZXJ2aWNlLmFkZChgRm91bmQgY2FjaGVkIHJlc3BvbnNlIGZvciAnJHsgcmVxLnVybFdpdGhQYXJhbXMgfScuYCk7XG5cdFx0XHRyZXR1cm4gY2FjaGVkLnJlc3BvbnNlO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBzZXQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBtYXhBZ2VJbkNhY2hlOiBudW1iZXIsIHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55Pik6IHZvaWRcblx0e1xuXHRcdGNvbnN0IHVybDogc3RyaW5nID0gcmVxLnVybFdpdGhQYXJhbXM7XG5cdFx0dGhpcy5fbWVzc2FnZVNlcnZpY2UuYWRkKGBDYWNoaW5nIHJlc3BvbnNlIGZyb20gJyR7IHVybCB9Jy5gKTtcblxuXHRcdHRoaXMuX2NhY2hlLnNldCh1cmwsIHsgdXJsLCByZXNwb25zZSwgbWF4QWdlSW5DYWNoZSwgbGFzdFJlYWQ6IERhdGUubm93KCkgfSk7XG5cblx0XHQvKiBSZW1vdmVzIGV4cGlyZWQgY2FjaGUgZW50cmllcy4gKi9cblx0XHR0aGlzLl9jYWNoZS5mb3JFYWNoKFxuXHRcdFx0KGVudHJ5OiBSZXF1ZXN0Q2FjaGVFbnRyeSkgPT4ge1xuXHRcdFx0XHRpZiAoZW50cnkubGFzdFJlYWQgPCBEYXRlLm5vdygpIC0gZW50cnkubWF4QWdlSW5DYWNoZSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRoaXMuX2NhY2hlLmRlbGV0ZShlbnRyeS51cmwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHRoaXMuX21lc3NhZ2VTZXJ2aWNlLmFkZChgUmVxdWVzdCBjYWNoZSBzaXplOiAkeyB0aGlzLl9jYWNoZS5zaXplIH0uYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBBIHByb3ZpZGVyIGZvciB0aGUgY2FjaGFibGUgVVJMIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBDQUNIQUJMRV9VUkxfUFJPVklERVIgPSBbXG4gICAgeyAncHJvdmlkZSc6IENhY2hhYmxlLCAndXNlQ2xhc3MnOiBDYWNoYWJsZVVybCwgJ211bHRpJzogZmFsc2UgfVxuXTtcblxuLyoqXG4gKiBBIHByb3ZpZGVyIGZvciB0aGUgcmVxdWVzdCBjYWNoZSB3aXRoIHRoZSBkaWZmZXJlbnQgdGltZSB1c2luZyBgTWFwYCBjb2xsZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgUkVRVUVTVF9DQUNIRV9ESUZGRVJFTlRfVElNRV9XSVRIX01BUF9QUk9WSURFUiA9IFtcbiAgICB7ICdwcm92aWRlJzogUmVxdWVzdENhY2hlLCAndXNlQ2xhc3MnOiBSZXF1ZXN0Q2FjaGVEaWZmZXJlbnRUaW1lV2l0aE1hcCwgJ211bHRpJzogZmFsc2UgfVxuXTtcbiJdfQ==