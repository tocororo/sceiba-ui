/**
 * @fileoverview added by tsickle
 * Generated from: lib/notification/notification-list/notification-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { MatTableDataSource, MatPaginator, MatSnackBar } from '@angular/material';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import moment from 'moment';
import { NotificationService } from '../../backend/public-api';
import { MessageHandler, StatusCode } from '../../core/public-api';
var NotificationListComponent = /** @class */ (function () {
    function NotificationListComponent(service, _snackBar) {
        this.service = service;
        this._snackBar = _snackBar;
        this.dataSource = new MatTableDataSource();
        this.columnsToDisplay = ['action', 'description', 'classification', 'emiter', 'emiterEmail', 'createdAt'];
        this.columnsLabels = ['', 'Descripción', 'Clasificación', 'Emisor', 'Correo del emisor', 'Creada'];
        this.moment = moment;
        this.pageSizeOptions = [5, 10, 15, 20];
    }
    /**
     * @return {?}
     */
    NotificationListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.paginator.firstPage();
        this.paginator.pageSize = 5;
        this.getNotificationsListData();
    };
    /**
     * @return {?}
     */
    NotificationListComponent.prototype.getNotificationsListData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.service.getNotificationsList(this.paginator.pageSize, this.paginator.pageIndex)
            .pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            /** @type {?} */
            var m = new MessageHandler(_this._snackBar);
            m.showMessage(StatusCode.serverError, error.message);
            return of(null);
        })))
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response) {
                _this.paginator.length = response.data.total_not_view;
                /** @type {?} */
                var arr = response.data.notifications
                    .map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return (tslib_1.__assign({}, n, { classification: {
                        label: n.classification,
                        color: n.classification === 'INFO' ? '#2196F3' : n.classification === 'ALERT' ? '#FF5722' : '#d32f2f'
                    } })); }));
                _this.dataSource.data = arr;
            }
            else {
                _this.paginator.length = 0;
                _this.dataSource.data = null;
            }
        }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NotificationListComponent.prototype.setnotificationViewed = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        console.log(id);
        if (id) {
            this.service.setNotificationViewed(id)
                .pipe(catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                /** @type {?} */
                var m = new MessageHandler(_this._snackBar);
                m.showMessage(StatusCode.serverError, error.message);
                return of(null);
            })))
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.status === 'success') {
                    _this.getNotificationsListData();
                    /** @type {?} */
                    var m = new MessageHandler(_this._snackBar);
                    m.showMessage(StatusCode.OK, 'La notificación fue marcada como leída');
                }
                else {
                    /** @type {?} */
                    var m = new MessageHandler(_this._snackBar);
                    m.showMessage(StatusCode.serverError, response.message);
                }
            }));
        }
    };
    NotificationListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-notification-list',
                    template: "<div [ngStyle]=\"{padding: '2em 1em 0 1em', overflow: 'auto'}\">\n    <table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows>\n        <ng-container matColumnDef=\"{{column}}\" *ngFor=\"let column of columnsToDisplay; let i = index\">\n            <th [id]=\"column+'-th'\" mat-header-cell *matHeaderCellDef> {{columnsLabels[i]}} </th>\n            <td class=\"element-row-header\"\n                mat-cell *matCellDef=\"let element\"\n                [id]=\"column+'-td'\"\n                [class.expanded-row]=\"column === 'description' && expandedElement === element\" (click)=\"expandedElement = element\"\n                [ngStyle]=\"{'font-weight': !element.viewed ? 'bold' : '0', width: column === 'action' ? '50px' : 'inherit'}\"\n            >\n              <ng-container *ngIf=\"column === 'action'\">\n                <button mat-icon-button *ngIf=\"!element.viewed\" color=\"primary\" (click)=\"setnotificationViewed(element.id)\" matTooltip=\"Marcar como visto\">\n                  <mat-icon class=\"mat-16\">visibility</mat-icon>\n                </button>\n                <button mat-icon-button *ngIf=\"element.viewed\" disabled color=\"primary\" (click)=\"setnotificationViewed(element.id)\" matTooltip=\"Visto\">\n                  <mat-icon class=\"mat-16\">viewed</mat-icon>\n                </button>\n              </ng-container>\n\n              <span *ngIf=\"column === 'createdAt' \" > {{moment(element[column]).format('ll')}} </span>\n              <div class=\"element-tag\" [ngStyle]=\"{'background-color': element['classification'].color}\" *ngIf=\"column === 'classification'\" > {{element[column].label}} </div>\n              <span *ngIf=\"column === 'emiter'\" > {{element[column].name}} {{element[column].lastname}} </span>\n              <span *ngIf=\"column === 'emiterEmail'\" > {{element['emiter'].email}} </span>\n              <div  *ngIf=\"column === 'description'\" class=\"element-description-header\" >\n                <mat-icon class=\"mat-16\" color=\"primary\" >{{expandedElement === element ? 'expand_more' : 'chevron_right'}}</mat-icon>\n                {{(element[column].length && element[column].length>70) ?\n                   (element[column] | slice:0:70)+' ...'\n                   :(element[column])\n                }}\n              </div>\n            </td>\n            <td mat-cell *matCellDef=\"let element\">\n            </td>\n        </ng-container>\n\n        <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n        <ng-container matColumnDef=\"expandedDetail\">\n            <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\n                <div class=\"element-detail\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-between center\"  fxLayoutGap=\"15px\" [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n\n                    <div class=\"element-description\">\n                        {{element.description}}\n                    </div>\n\n                </div>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n        <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay;\" class=\"element-row\"\n            >\n        </tr>\n        <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"detail-row\"></tr>\n    </table>\n    <div *ngIf=\"paginator.length === 0\" class=\"empty-notifications-container\">\n      <mat-icon class=\"empty-notifications-icon\">notifications</mat-icon>\n      <h1 style=\"color: grey;\">SIN NOTIFICACIONES</h1>\n    </div>\n    <mat-paginator [length]=\"paginator.length\" [pageSize]=\"paginator.pageSize\" [pageSizeOptions]=\"pageSizeOptions\" (page)=\"getNotificationsListData()\">\n    </mat-paginator>\n</div>\n",
                    animations: [
                        trigger('detailExpand', [
                            state('collapsed', style({ height: '0px', minHeight: '0' })),
                            state('expanded', style({ height: '*' })),
                            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                        ]),
                    ],
                    styles: ["table{width:100%}tr.detail-row{height:0}tr.element-row:not(.expanded-row):hover{background:#f4f4f4}tr.element-row:not(.expanded-row):active{background:#efefef}.element-row td{border-bottom-width:0}.element-detail{overflow:hidden;display:flex;background-color:#f4f4f4;border-radius:10px 10px 0 0}.element-tag{display:flex;justify-content:center;padding:6px;border-radius:15px;width:60%}.element-description-header{display:flex;align-items:center;cursor:pointer;padding:10px 25px 10px 10px}.element-description{padding:16px}.element-description-attribution{opacity:.5}.empty-notifications-container{display:flex;flex-direction:column;justify-content:center;align-items:center;padding:30px}.empty-notifications-icon{color:grey;font-size:6em;height:100px;width:100px}@media only screen and (max-width:768px){#description-th{padding-left:34px!important}#emiter-td,#emiter-th{display:none!important}#createdAt-th,#emiterEmail-td,#emiterEmail-th{padding-left:20px!important}#createdAt-td{min-width:120px!important;padding-left:20px!important}}"]
                }] }
    ];
    /** @nocollapse */
    NotificationListComponent.ctorParameters = function () { return [
        { type: NotificationService },
        { type: MatSnackBar }
    ]; };
    NotificationListComponent.propDecorators = {
        paginator: [{ type: ViewChild, args: [MatPaginator, { static: true },] }]
    };
    return NotificationListComponent;
}());
export { NotificationListComponent };
if (false) {
    /** @type {?} */
    NotificationListComponent.prototype.dataSource;
    /** @type {?} */
    NotificationListComponent.prototype.columnsToDisplay;
    /** @type {?} */
    NotificationListComponent.prototype.columnsLabels;
    /** @type {?} */
    NotificationListComponent.prototype.expandedElement;
    /** @type {?} */
    NotificationListComponent.prototype.moment;
    /** @type {?} */
    NotificationListComponent.prototype.pageSizeOptions;
    /** @type {?} */
    NotificationListComponent.prototype.paginator;
    /**
     * @type {?}
     * @private
     */
    NotificationListComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    NotificationListComponent.prototype._snackBar;
}
//# sourceMappingURL=data:application/json;base64,