/**
 * @fileoverview added by tsickle
 * Generated from: lib/notification/notification-button/notification-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { of as observableOf, timer } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { MatSnackBar } from '@angular/material';
import moment from 'moment';
import { NotificationService } from '../../backend/public-api';
import { MessageHandler, StatusCode } from '../../core/public-api';
import { OAuthStorage } from 'angular-oauth2-oidc';
var NotificationButtonComponent = /** @class */ (function () {
    function NotificationButtonComponent(service, _snackBar, oauthStorage) {
        var _this = this;
        this.service = service;
        this._snackBar = _snackBar;
        this.oauthStorage = oauthStorage;
        this.count = 0;
        this.moment = moment;
        this.timerSuscription = null;
        this.timerObserver = {
            next: (/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                // if (this.oauthStorage.getItem('access_token')){
                _this.service.getNotificationsList(5, 0).pipe(catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    /** @type {?} */
                    var m = new MessageHandler(_this._snackBar);
                    m.showMessage(StatusCode.serverError, error.message);
                    return observableOf(null);
                })))
                    .subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    if (response && response.status === "success") {
                        _this.count = response.data.total_not_view;
                        /** @type {?} */
                        var arr = response.data.notifications
                            .map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return (tslib_1.__assign({}, n, { classification: {
                                label: n.classification,
                                color: n.classification === 'INFO' ? '#2196F3' : n.classification === 'ALERT' ? '#FF5722' : '#d32f2f'
                            } })); }))
                            .filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return !n.viewed; }));
                        _this.notifications = arr;
                    }
                    else if (response) {
                        /** @type {?} */
                        var m = new MessageHandler(_this._snackBar);
                        m.showMessage(StatusCode.serverError, response.message);
                    }
                    else {
                        /** @type {?} */
                        var m = new MessageHandler(_this._snackBar);
                        m.showMessage(StatusCode.serverError, 'Notificaciones no encontradas');
                    }
                }));
                // }
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.log('The observable got an error notification: ' + err + '.');
            }),
            complete: (/**
             * @return {?}
             */
            function () {
                console.log('The observable got a complete notification.');
            })
        };
    }
    /**
     * @return {?}
     */
    NotificationButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Emits, one every second (90000ms), starting after 0 seconds
        this.timerSuscription = timer(0, 900000).subscribe(this.timerObserver);
        if (this.color == undefined)
            this.color = "primary";
        if (this.buttonType == undefined)
            this.buttonType = "mat-mini-fab";
    };
    /**
     * @return {?}
     */
    NotificationButtonComponent.prototype.notificationsCount = /**
     * @return {?}
     */
    function () {
        if (this.count == 0)
            return '';
        if (this.count > 10)
            return '+10';
        return this.count;
    };
    NotificationButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-notification-button',
                    template: "<ng-container [ngSwitch]=\"buttonType\">\n\n    <button *ngSwitchCase=\"'mat-icon-button'\" mat-icon-button [matBadge]=\"notificationsCount()\" matBadgeColor=\"accent\" [matMenuTriggerFor]=\"notificationsMenu\" matTooltip=\"Notificaciones\">\n        <mat-icon>notifications</mat-icon>\n    </button>\n\n    <button *ngSwitchCase=\"'mat-button'\" mat-button color=\"{{color}}\" [matBadge]=\"notificationsCount()\" matBadgeColor=\"accent\" [matMenuTriggerFor]=\"notificationsMenu\" matTooltip=\"Notificaciones\">\n        <mat-icon>notifications</mat-icon>\n    </button>\n\n    <button *ngSwitchDefault mat-mini-fab color=\"{{color}}\" [matBadge]=\"notificationsCount()\" matBadgeColor=\"accent\" [matMenuTriggerFor]=\"notificationsMenu\" matTooltip=\"Notificaciones\">\n        <mat-icon>notifications</mat-icon>\n    </button>\n</ng-container>\n\n<mat-menu #notificationsMenu=\"matMenu\" style=\"max-width: 400px !important;\">\n  <button class=\"notification-item\" mat-menu-item *ngFor=\"let notification of notifications\">\n    <div class=\"notification-container\" [ngStyle]=\"{'border-left-color': notification.classification.color}\">\n      <div class=\"notification-header\">\n        <span>{{notification.emiter.name}} {{notification.emiter.lastname}}</span>\n        <span>{{moment(notification.createdAt).startOf('day').fromNow()}}</span>\n      </div>\n      <span class=\"notification-description\">\n        {{(notification.description.length>135) ?\n          (notification.description | slice:0:135)+' ...'\n          :(notification.description)\n        }}\n      </span>\n    </div>\n  </button>\n  <div *ngIf=\"count === 0\" class=\"empty-notifications-container\">\n    <mat-icon class=\"empty-notifications-icon\">notifications</mat-icon>\n    <h1 style=\"color: gray; font-size: 25px\">SIN NOTIFICACIONES</h1>\n  </div>\n    <mat-divider></mat-divider>\n    <a [routerLink]=\"['/notifications']\" style=\"text-decoration: none;\">\n        <button mat-menu-item style=\"text-align: center;\" color=\"accent\">\n            Ver todas\n        </button>\n    </a>\n</mat-menu>\n",
                    styles: [".notification-item{height:100%;border-bottom:1px solid #f5f5f5;padding-left:0}.notification-container{display:flex;flex-direction:column;justify-content:flex-start;padding-left:10px;padding-bottom:10px;border-left:10px solid}.notification-header{display:flex;justify-content:space-between;margin-bottom:-5px;font-size:12px;color:gray}.notification-description{line-height:20px;white-space:pre-wrap;font-size:15px}.empty-notifications-container{display:flex;flex-direction:column;justify-content:center;align-items:center;padding:30px}.empty-notifications-icon{color:grey;font-size:4.5em;height:70px;width:70px}::ng-deep.mat-menu-panel{max-width:400px!important}"]
                }] }
    ];
    /** @nocollapse */
    NotificationButtonComponent.ctorParameters = function () { return [
        { type: NotificationService },
        { type: MatSnackBar },
        { type: OAuthStorage }
    ]; };
    NotificationButtonComponent.propDecorators = {
        color: [{ type: Input }],
        buttonType: [{ type: Input }]
    };
    return NotificationButtonComponent;
}());
export { NotificationButtonComponent };
if (false) {
    /** @type {?} */
    NotificationButtonComponent.prototype.color;
    /** @type {?} */
    NotificationButtonComponent.prototype.buttonType;
    /** @type {?} */
    NotificationButtonComponent.prototype.count;
    /** @type {?} */
    NotificationButtonComponent.prototype.notifications;
    /** @type {?} */
    NotificationButtonComponent.prototype.moment;
    /**
     * @type {?}
     * @private
     */
    NotificationButtonComponent.prototype.timerSuscription;
    /**
     * @type {?}
     * @private
     */
    NotificationButtonComponent.prototype.timerObserver;
    /**
     * @type {?}
     * @private
     */
    NotificationButtonComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    NotificationButtonComponent.prototype._snackBar;
    /**
     * @type {?}
     * @private
     */
    NotificationButtonComponent.prototype.oauthStorage;
}
var UserNotification = /** @class */ (function () {
    function UserNotification() {
    }
    return UserNotification;
}());
if (false) {
    /** @type {?} */
    UserNotification.prototype.id;
    /** @type {?} */
    UserNotification.prototype.name;
    /** @type {?} */
    UserNotification.prototype.lastname;
    /** @type {?} */
    UserNotification.prototype.email;
}
var NotificationInfo = /** @class */ (function () {
    function NotificationInfo() {
    }
    return NotificationInfo;
}());
export { NotificationInfo };
if (false) {
    /** @type {?} */
    NotificationInfo.prototype.classification;
    /** @type {?} */
    NotificationInfo.prototype.receiver_id;
    /** @type {?} */
    NotificationInfo.prototype.viewed;
    /** @type {?} */
    NotificationInfo.prototype.viewed_date;
    /** @type {?} */
    NotificationInfo.prototype.description;
    /** @type {?} */
    NotificationInfo.prototype.createdAt;
    /** @type {?} */
    NotificationInfo.prototype.emiter;
    /** @type {?} */
    NotificationInfo.prototype.app;
    /** @type {?} */
    NotificationInfo.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,