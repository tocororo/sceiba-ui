/**
 * @fileoverview added by tsickle
 * Generated from: lib/taxonomy/terms-viewer/terms-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { TaxonomyService } from '../../backend/public-api';
var TermsViewerComponent = /** @class */ (function () {
    function TermsViewerComponent(taxonomyService) {
        this.taxonomyService = taxonomyService;
        /**
         * receive vocab_id and a list of terms ids.
         * show in a chiplist the terms of vocab_id
         */
        this.vocabulary_id = null;
        this.ids = null;
        this.terms = [];
    }
    /**
     * @return {?}
     */
    TermsViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.vocabulary_id) {
            console.log(this.ids);
            this.taxonomyService.getTermListByIDs(this.ids)
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                console.log(response);
                if (response.data.term) {
                    response.data.term.forEach((/**
                     * @param {?} term
                     * @return {?}
                     */
                    function (term) {
                        if (term.vocabulary_id == _this.vocabulary_id) {
                            _this.terms.push(term);
                        }
                    }));
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { }), (/**
             * @return {?}
             */
            function () { }));
        }
    };
    TermsViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-terms-viewer',
                    template: "<mat-chip-list>\n  <mat-chip *ngFor=\"let term of terms\">{{ term.name }}</mat-chip>\n</mat-chip-list>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TermsViewerComponent.ctorParameters = function () { return [
        { type: TaxonomyService }
    ]; };
    TermsViewerComponent.propDecorators = {
        vocabulary_id: [{ type: Input }],
        ids: [{ type: Input }]
    };
    return TermsViewerComponent;
}());
export { TermsViewerComponent };
if (false) {
    /**
     * receive vocab_id and a list of terms ids.
     * show in a chiplist the terms of vocab_id
     * @type {?}
     */
    TermsViewerComponent.prototype.vocabulary_id;
    /** @type {?} */
    TermsViewerComponent.prototype.ids;
    /** @type {?} */
    TermsViewerComponent.prototype.terms;
    /**
     * @type {?}
     * @private
     */
    TermsViewerComponent.prototype.taxonomyService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybXMtdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL3RheG9ub215L3Rlcm1zLXZpZXdlci90ZXJtcy12aWV3ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRzNEO0lBaUJFLDhCQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7Ozs7O1FBTHBELGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBRXJCLFFBQUcsR0FBYSxJQUFJLENBQUM7UUFFckIsVUFBSyxHQUFXLEVBQUUsQ0FBQTtJQUNzQyxDQUFDOzs7O0lBRXpELHVDQUFROzs7SUFBUjtRQUFBLGlCQW9CQztRQW5CQyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUM7WUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDckIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2lCQUM5QyxTQUFTOzs7O1lBQ1IsVUFBQyxRQUFRO2dCQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRXRCLElBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUM7b0JBQ3BCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87Ozs7b0JBQUMsVUFBQSxJQUFJO3dCQUM3QixJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksS0FBSSxDQUFDLGFBQWEsRUFBQzs0QkFDM0MsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7eUJBQ3ZCO29CQUNILENBQUMsRUFBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQzs7OztZQUNELFVBQUMsS0FBSyxJQUFJLENBQUM7OztZQUNYLGNBQUssQ0FBQyxFQUNQLENBQUM7U0FDSDtJQUNILENBQUM7O2dCQXZDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0Isb0hBQTRDOztpQkFFN0M7Ozs7Z0JBUFEsZUFBZTs7O2dDQWNyQixLQUFLO3NCQUVMLEtBQUs7O0lBNEJSLDJCQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0FwQ1ksb0JBQW9COzs7Ozs7O0lBTS9CLDZDQUNxQjs7SUFDckIsbUNBQ3FCOztJQUVyQixxQ0FBa0I7Ozs7O0lBQ04sK0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUYXhvbm9teVNlcnZpY2UgfSBmcm9tICcuLi8uLi9iYWNrZW5kL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgVGVybSB9IGZyb20gJy4uLy4uL2VudGl0aWVzL3B1YmxpYy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0b2NvLXRlcm1zLXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90ZXJtcy12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90ZXJtcy12aWV3ZXIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBUZXJtc1ZpZXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiByZWNlaXZlIHZvY2FiX2lkIGFuZCBhIGxpc3Qgb2YgdGVybXMgaWRzLiBcbiAgICogc2hvdyBpbiBhIGNoaXBsaXN0IHRoZSB0ZXJtcyBvZiB2b2NhYl9pZFxuICAgKi9cblxuICBASW5wdXQoKVxuICB2b2NhYnVsYXJ5X2lkID0gbnVsbDtcbiAgQElucHV0KClcbiAgaWRzOiBudW1iZXJbXSA9IG51bGw7XG4gIFxuICB0ZXJtczogVGVybVtdID0gW11cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YXhvbm9teVNlcnZpY2U6IFRheG9ub215U2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudm9jYWJ1bGFyeV9pZCl7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmlkcylcbiAgICAgIHRoaXMudGF4b25vbXlTZXJ2aWNlLmdldFRlcm1MaXN0QnlJRHModGhpcy5pZHMpXG4gICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAocmVzcG9uc2UpPT57XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEudGVybSl7XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhLnRlcm0uZm9yRWFjaCh0ZXJtID0+IHtcbiAgICAgICAgICAgICAgaWYgKHRlcm0udm9jYWJ1bGFyeV9pZCA9PSB0aGlzLnZvY2FidWxhcnlfaWQpe1xuICAgICAgICAgICAgICAgIHRoaXMudGVybXMucHVzaCh0ZXJtKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAoZXJyb3IpPT57fSxcbiAgICAgICAgKCk9Pnt9XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=