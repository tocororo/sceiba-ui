/**
 * @fileoverview added by tsickle
 * Generated from: lib/harvester/harvester-filters/harvester-filters.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ComponentFactoryResolver } from '@angular/core';
import { CatalogService } from '../../backend/public-api';
import { FilterContainerComponent, FilterContainerService } from '../../filters/public-api';
var HarvesterFiltersComponent = /** @class */ (function (_super) {
    tslib_1.__extends(HarvesterFiltersComponent, _super);
    function HarvesterFiltersComponent(componentFactoryResolver, childrenService, service) {
        var _this = _super.call(this, componentFactoryResolver, childrenService) || this;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.childrenService = childrenService;
        _this.service = service;
        return _this;
    }
    /**
     * @return {?}
     */
    HarvesterFiltersComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        default_filters.forEach((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            _this.filters_data.push(filter);
        }));
        this.service.getJournalsVocab().subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            response.data.vocabularies.forEach((/**
             * @param {?} vocab
             * @return {?}
             */
            function (vocab) {
                _this.service.getTerminosByVocab(vocab.name + '/any').subscribe((/**
                 * @param {?} termsResponse
                 * @return {?}
                 */
                function (termsResponse) {
                    _this.filters_data.push({
                        index: _this.filters_data.length,
                        field: 'terms',
                        type: 'select-autocomplete',
                        placeholder: vocab.name,
                        name: vocab.name,
                        idVocab: vocab.id,
                        selectOptions: termsResponse.data.terms,
                        is_enabled: true
                    });
                }));
            }));
        }));
    };
    HarvesterFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-harvester-filters-container',
                    template: "<!-- <div fxLayout=\"row wrap\" fxLayoutAlign=\"start center\" fxLayoutAlign.xs=\"center center\" fxLayoutGap=\"1em\" fxLayoutGap.xs=\"0\"> -->\n\n  <ng-template toco-Filter></ng-template>\n\n<!-- </div> -->\n\n<button mat-icon-button [matMenuTriggerFor]=\"menu\">\n    <mat-icon>add</mat-icon>\n</button>\n  <mat-menu #menu=\"matMenu\" >\n    <ng-container *ngFor=\"let item of filters_data,let i=index\">\n        <ng-container *ngIf=\"item.is_enabled\">\n          <button mat-menu-item (click)=\"addFilter(i)\">\n            {{item.name}}\n          </button>\n        </ng-container>\n    </ng-container>\n    \n\n    \n  </mat-menu>",
                    styles: [".width-100{width:100%}.mat-menu-item{height:37px}"]
                }] }
    ];
    /** @nocollapse */
    HarvesterFiltersComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: FilterContainerService },
        { type: CatalogService }
    ]; };
    return HarvesterFiltersComponent;
}(FilterContainerComponent));
export { HarvesterFiltersComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    HarvesterFiltersComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @protected
     */
    HarvesterFiltersComponent.prototype.childrenService;
    /**
     * @type {?}
     * @protected
     */
    HarvesterFiltersComponent.prototype.service;
}
/** @type {?} */
var default_filters = [
    {
        index: 0,
        field: 'title',
        type: 'search',
        placeholder: 'Título',
        name: 'Título',
        is_enabled: true
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFydmVzdGVyLWZpbHRlcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvaGFydmVzdGVyL2hhcnZlc3Rlci1maWx0ZXJzL2hhcnZlc3Rlci1maWx0ZXJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUU1RjtJQUsrQyxxREFBd0I7SUFFbkUsbUNBQXNCLHdCQUFrRCxFQUMxRCxlQUF1QyxFQUN2QyxPQUF3QjtRQUZ0QyxZQUlJLGtCQUFNLHdCQUF3QixFQUFFLGVBQWUsQ0FBQyxTQUNuRDtRQUxxQiw4QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQzFELHFCQUFlLEdBQWYsZUFBZSxDQUF3QjtRQUN2QyxhQUFPLEdBQVAsT0FBTyxDQUFpQjs7SUFHdEMsQ0FBQzs7OztJQUVELDRDQUFROzs7SUFBUjtRQUFBLGlCQXVCQztRQXRCRyxpQkFBTSxRQUFRLFdBQUUsQ0FBQTtRQUVoQixlQUFlLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsTUFBTTtZQUMxQixLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQyxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxRQUFRO1lBQzlDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLEtBQUs7Z0JBQ3BDLEtBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksR0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTOzs7O2dCQUFDLFVBQUEsYUFBYTtvQkFDdEUsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7d0JBQ25CLEtBQUssRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLE1BQU07d0JBQy9CLEtBQUssRUFBRSxPQUFPO3dCQUNkLElBQUksRUFBRSxxQkFBcUI7d0JBQzNCLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSTt3QkFDdkIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO3dCQUNoQixPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUU7d0JBQ2pCLGFBQWEsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUs7d0JBQ3ZDLFVBQVUsRUFBRSxJQUFJO3FCQUNuQixDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxFQUFDLENBQUM7WUFDUCxDQUFDLEVBQUMsQ0FBQztRQUNQLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBckNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0NBQWtDO29CQUM1Qywwb0JBQWlEOztpQkFFcEQ7Ozs7Z0JBVG1CLHdCQUF3QjtnQkFHVCxzQkFBc0I7Z0JBRGhELGNBQWM7O0lBeUN2QixnQ0FBQztDQUFBLEFBdENELENBSytDLHdCQUF3QixHQWlDdEU7U0FqQ1kseUJBQXlCOzs7Ozs7SUFFdEIsNkRBQTREOzs7OztJQUNwRSxvREFBaUQ7Ozs7O0lBQ2pELDRDQUFrQzs7O0lBK0JwQyxlQUFlLEdBQUc7SUFDcEI7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQUNSLEtBQUssRUFBRSxPQUFPO1FBQ2QsSUFBSSxFQUFFLFFBQVE7UUFDZCxXQUFXLEVBQUUsUUFBUTtRQUNyQixJQUFJLEVBQUUsUUFBUTtRQUNkLFVBQVUsRUFBRSxJQUFJO0tBQ25CO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENhdGFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYmFja2VuZC9wdWJsaWMtYXBpJztcbmltcG9ydCB7IEZpbHRlckNvbnRhaW5lckNvbXBvbmVudCwgRmlsdGVyQ29udGFpbmVyU2VydmljZSB9IGZyb20gJy4uLy4uL2ZpbHRlcnMvcHVibGljLWFwaSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndG9jby1oYXJ2ZXN0ZXItZmlsdGVycy1jb250YWluZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9oYXJ2ZXN0ZXItZmlsdGVycy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vaGFydmVzdGVyLWZpbHRlcnMuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBIYXJ2ZXN0ZXJGaWx0ZXJzQ29tcG9uZW50IGV4dGVuZHMgRmlsdGVyQ29udGFpbmVyQ29tcG9uZW50e1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBwcm90ZWN0ZWQgY2hpbGRyZW5TZXJ2aWNlOiBGaWx0ZXJDb250YWluZXJTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgc2VydmljZTogIENhdGFsb2dTZXJ2aWNlLClcbiAgICB7XG4gICAgICAgIHN1cGVyKGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgY2hpbGRyZW5TZXJ2aWNlKVxuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBzdXBlci5uZ09uSW5pdCgpXG5cbiAgICAgICAgZGVmYXVsdF9maWx0ZXJzLmZvckVhY2goZmlsdGVyID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyc19kYXRhLnB1c2goZmlsdGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZXJ2aWNlLmdldEpvdXJuYWxzVm9jYWIoKS5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS52b2NhYnVsYXJpZXMuZm9yRWFjaCh2b2NhYiA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmdldFRlcm1pbm9zQnlWb2NhYih2b2NhYi5uYW1lKycvYW55Jykuc3Vic2NyaWJlKHRlcm1zUmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcnNfZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmZpbHRlcnNfZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ3Rlcm1zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QtYXV0b2NvbXBsZXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB2b2NhYi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdm9jYWIubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkVm9jYWI6IHZvY2FiLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0T3B0aW9uczogdGVybXNSZXNwb25zZS5kYXRhLnRlcm1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IGRlZmF1bHRfZmlsdGVycyA9IFtcbiAgICB7XG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgICBmaWVsZDogJ3RpdGxlJyxcbiAgICAgICAgdHlwZTogJ3NlYXJjaCcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnVMOtdHVsbycsXG4gICAgICAgIG5hbWU6ICdUw610dWxvJyxcbiAgICAgICAgaXNfZW5hYmxlZDogdHJ1ZVxuICAgIH1cbl07XG4iXX0=