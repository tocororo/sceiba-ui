/**
 * @fileoverview added by tsickle
 * Generated from: lib/harvester/repositories/repositories.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { merge, of as observableOf } from 'rxjs';
import { startWith, switchMap, map, catchError } from 'rxjs/operators';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { CatalogService } from '../../backend/public-api';
import { MetadataService } from '../../core/public-api';
import { Journal, JournalData, ISSN } from '../../entities/public-api';
import { FiltersService } from '../../filters/public-api';
import { Environment } from '../../core/env';
import { HarvesterFiltersComponent } from '../harvester-filters/harvester-filters.component';
var RepositoriesComponent = /** @class */ (function () {
    function RepositoriesComponent(service, metadata, filterService, env) {
        this.service = service;
        this.metadata = metadata;
        this.filterService = filterService;
        this.env = env;
        this.journalList = [];
        this.loading = true;
        this.dataSource = new MatTableDataSource();
        this.columnsToDisplay = ['title'];
        this.length = 0;
        this.pageSize = 5;
        this.pageSizeOptions = [5, 10, 20, 40, 60, 80, 100];
        this.sceibaHost = '';
        this.currentlayout = {
            name: 'Izquierda',
            layout: 'row',
            aling: 'center baseline',
            width: '22'
        };
        this.sceibaHost = env.sceibaHost + "/catalog";
    }
    /**
     * @return {?}
     */
    RepositoriesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.metadata.setStandardMeta("Catálogo de Revistas Científicas", "", "");
        this.paginator.firstPage();
        this.paginator.pageSize = this.pageSize;
        this.service.getJournalsCount().subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.length = response.data.count;
        }));
        this.fetchJournalData();
        this.filterService.paramsChanged.subscribe((/**
         * @param {?} params
         * @return {?}
         */
        function (params) {
            _this.params = params;
            _this.fetchJournalData();
        }));
    };
    // onPaginatorChanged(){
    //   this.filterService.changeFilter('count',this.paginator.pageSize, false);
    //   this.filterService.changeFilter('page',this.paginator.pageIndex);
    // }
    // onPaginatorChanged(){
    //   this.filterService.changeFilter('count',this.paginator.pageSize, false);
    //   this.filterService.changeFilter('page',this.paginator.pageIndex);
    // }
    /**
     * @return {?}
     */
    RepositoriesComponent.prototype.fetchJournalData = 
    // onPaginatorChanged(){
    //   this.filterService.changeFilter('count',this.paginator.pageSize, false);
    //   this.filterService.changeFilter('page',this.paginator.pageIndex);
    // }
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading = true;
        //this.dataSource.data = this.service.getJournalsPage(this.count, this.page);
        /** @type {?} */
        var arr = new Array();
        merge().pipe(startWith({}), switchMap((/**
         * @return {?}
         */
        function () {
            _this.loading = true;
            return (/** @type {?} */ (_this.service)).getJournalsPage(_this.paginator.pageSize, _this.paginator.pageIndex, _this.params);
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            // Flip flag to show that loading has finished.
            _this.loading = false;
            // this.isRateLimitReached = false;
            // this.resultsLength = response.total_count;
            _this.length = response.data.sources.count;
            response.data.sources.data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var j = new Journal();
                j.id = item.id;
                j.uuid = item.uuid;
                j.source_type = item.source_type;
                // j.harvest_type = item.harvest_type;
                j.data.oaiurl = item.harvest_endpoint;
                /** @type {?} */
                var info = new JournalData();
                info.url = item.data != null ? item.data.url : "";
                info.title = item.name;
                info.subtitle = item.subtitle;
                info.shortname = item.shortname;
                /** @type {?} */
                var issn = new ISSN();
                issn.e = item.data != null ? item.data.issn.e : "";
                issn.l = item.data != null ? item.data.issn.l : "";
                issn.p = item.data != null ? item.data.issn.p : "";
                info.issn = issn;
                info.rnps = item.data != null ? item.data.rnps : "";
                info.logo = item.data != null ? item.data.logo : "";
                info.purpose = item.purpose;
                info.description = item.data != null ? item.data.description : "";
                j.data = info;
                arr.push(j);
            }));
            return arr;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.loading = false;
            console.log("ERRORRR  " + error);
            // Catch if the GitHub API has reached its rate limit. Return empty data.
            // this.isRateLimitReached = true;
            return observableOf([]);
        }))).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.dataSource.data = data; }));
    };
    /**
     * @return {?}
     */
    RepositoriesComponent.prototype.onScrollUp = /**
     * @return {?}
     */
    function () {
        // console.log("scrolled up!!");
    };
    /**
     * @return {?}
     */
    RepositoriesComponent.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (this.journalList.length == 0) {
            this.loading = false;
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    RepositoriesComponent.prototype.isLoading = /**
     * @return {?}
     */
    function () {
        return this.loading;
    };
    /**
     * @return {?}
     */
    RepositoriesComponent.prototype.currentJournals = /**
     * @return {?}
     */
    function () {
        console.log(this.dataSource.data);
    };
    RepositoriesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-repositories',
                    template: "<div fxLayout=\"{{currentlayout.layout}}\" fxLayout.xs=\"column nowrap\" fxLayoutAlign=\"{{currentlayout.aling}}\">\n  <button mat-raised-button (click)=\"currentJournals()\">Print Current Fournals</button>\n  <button mat-raised-button (click)=\"currentJournals()\">Print Current Fournals</button>\n  <button mat-raised-button (click)=\"currentJournals()\">Print Current Fournals</button>\n</div>\n\n\n<div fxLayout=\"{{currentlayout.layout}}\" fxLayout.xs=\"column nowrap\" fxLayoutAlign=\"{{currentlayout.aling}}\">\n\n  <toco-harvester-filters-container fxLayout=\"row wrap\" fxLayout.xs=\"column wrap\" fxFlex=\"{{currentlayout.width}}\" fxLayoutAlign=\"start center\" fxLayoutAlign.xs=\"center center\"\n    fxLayoutGap=\"1em\" class=\"width-90 back-grey mat-elevation-z8\">\n  </toco-harvester-filters-container>\n\n  <div class=\"mat-elevation-z8 width-90 margin1em\">\n    <table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows>\n      <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef>Titulo</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.data.title}} </td>\n      </ng-container>\n      <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n      <ng-container matColumnDef=\"expandedDetail\">\n        <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\n          <div class=\"example-element-detail\" [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n              <toco-harvester-repository\n              [repostitory]=\"element\"></toco-harvester-repository>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n      <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay;\" class=\"example-element-row\" [class.example-expanded-row]=\"expandedElement === element\"\n        (click)=\"expandedElement = element\">\n      </tr>\n      <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\n    </table>\n    <mat-paginator [length]=\"length\"\n          [pageSize]=\"pageSize\"\n          [pageSizeOptions]=\"pageSizeOptions\"\n          (page)=\"fetchJournalData()\">\n    </mat-paginator>\n  </div>\n\n  <mat-card *ngIf=\"!isEmpty()\" class=\"center-spinner\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"gappx\">\n    <mat-spinner></mat-spinner>\n    <!--<mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>-->\n  </mat-card>\n\n  <!-- <mat-card *ngIf=\"isEmpty()\" class=\"center-spinner\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"gappx\">\n    <h1>No hay Informaci\u00F3n para Mostrar</h1>\n  </mat-card> -->\n</div>\n\n",
                    animations: [
                        trigger('detailExpand', [
                            state('collapsed', style({ height: '0px', minHeight: '0', display: 'none' })),
                            state('expanded', style({ height: '*' })),
                            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                        ]),
                    ],
                    styles: [".width-card{width:30%;min-width:240px;margin-left:24px;margin-top:24px}.card-float-left{float:left}.center-spinner{width:90.5%;min-width:240px;margin-left:24px;margin-right:24px;margin-top:24px}.back-grey{background:rgba(0,0,0,.01);margin:1.5em 1em;padding:1em;min-width:18em}.width-90{width:90%}.width-93{width:93.5%}table{width:90%}.margin1em{margin:1em}.menu-pull-right{flex:1 1 auto}table.mat-table{width:100%}tr.example-detail-row{height:0}tr.example-element-row:not(.example-expanded-row):hover{background:#f5f5f5}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}.example-element-detail{overflow:hidden;display:flex}.example-element-diagram{min-width:80px;border:2px solid #000;padding:8px;font-weight:lighter;margin:8px 0;height:104px}.example-element-symbol{font-weight:700;font-size:40px;line-height:normal}.example-element-description{padding:16px}.example-element-description-attribution{opacity:.5}"]
                }] }
    ];
    /** @nocollapse */
    RepositoriesComponent.ctorParameters = function () { return [
        { type: CatalogService },
        { type: MetadataService },
        { type: FiltersService },
        { type: Environment }
    ]; };
    RepositoriesComponent.propDecorators = {
        paginator: [{ type: ViewChild, args: [MatPaginator, { static: true },] }],
        filter_component: [{ type: ViewChild, args: [HarvesterFiltersComponent, { static: true },] }]
    };
    return RepositoriesComponent;
}());
export { RepositoriesComponent };
if (false) {
    /** @type {?} */
    RepositoriesComponent.prototype.journalList;
    /**
     * @type {?}
     * @private
     */
    RepositoriesComponent.prototype.loading;
    /** @type {?} */
    RepositoriesComponent.prototype.dataSource;
    /** @type {?} */
    RepositoriesComponent.prototype.columnsToDisplay;
    /** @type {?} */
    RepositoriesComponent.prototype.expandedElement;
    /** @type {?} */
    RepositoriesComponent.prototype.length;
    /** @type {?} */
    RepositoriesComponent.prototype.pageSize;
    /** @type {?} */
    RepositoriesComponent.prototype.pageSizeOptions;
    /** @type {?} */
    RepositoriesComponent.prototype.pageEvent;
    /** @type {?} */
    RepositoriesComponent.prototype.params;
    /** @type {?} */
    RepositoriesComponent.prototype.sceibaHost;
    /** @type {?} */
    RepositoriesComponent.prototype.currentlayout;
    /** @type {?} */
    RepositoriesComponent.prototype.paginator;
    /** @type {?} */
    RepositoriesComponent.prototype.filter_component;
    /**
     * @type {?}
     * @private
     */
    RepositoriesComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    RepositoriesComponent.prototype.metadata;
    /**
     * @type {?}
     * @private
     */
    RepositoriesComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    RepositoriesComponent.prototype.env;
}
//# sourceMappingURL=data:application/json;base64,