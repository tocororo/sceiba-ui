/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/taxonomy.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { OAuthStorage } from 'angular-oauth2-oidc';
import { Environment } from '../core/public-api';
// TODO: Poner todos los tipos de datos de retorno de Response.
// No puede haber en ningun servicio del backend un Response<any>
var TaxonomyService = /** @class */ (function () {
    function TaxonomyService(env, http, oauthStorage) {
        this.env = env;
        this.http = http;
        this.oauthStorage = oauthStorage;
        this.prefix = 'vocabularies';
        this.httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        this.token = '';
        this.token = this.oauthStorage.getItem('access_token');
    }
    /**
     * @param {?} id
     * @return {?}
     */
    TaxonomyService.prototype.getVocabulary = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/vocabulary/' + id;
        return this.http.get(req);
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    TaxonomyService.prototype.getTermListByIDs = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var p = '';
        ids.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return p = p + n.toString(10) + ','; }));
        p = p.substring(0, p.length - 1);
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var options = {
            params: params.set('ids', p)
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/term/inlist';
        return this.http.get(req, options);
    };
    /**
     * @param {?} termID
     * @param {?=} level
     * @return {?}
     */
    TaxonomyService.prototype.getTermByID = /**
     * @param {?} termID
     * @param {?=} level
     * @return {?}
     */
    function (termID, level) {
        if (level === void 0) { level = 10; }
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var options = {
            params: params.set('level', level.toString(10))
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/term/id/' + termID;
        return this.http.get(req, options);
    };
    /**
     * @param {?} termUUID
     * @param {?=} level
     * @return {?}
     */
    TaxonomyService.prototype.getTermByUUID = /**
     * @param {?} termUUID
     * @param {?=} level
     * @return {?}
     */
    function (termUUID, level) {
        if (level === void 0) { level = 10; }
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var options = {
            params: params.set('level', level.toString(10))
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/term/' + termUUID;
        return this.http.get(req, options);
    };
    /**
     * @param {?} vocabId
     * @param {?=} level
     * @return {?}
     */
    TaxonomyService.prototype.getTermsTreeByVocab = /**
     * @param {?} vocabId
     * @param {?=} level
     * @return {?}
     */
    function (vocabId, level) {
        if (level === void 0) { level = 10; }
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var options = {
            params: params.set('level', level.toString(10))
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/term/tree/' + vocabId;
        return this.http.get(req, options);
    };
    /**
     * @param {?} vocab
     * @return {?}
     */
    TaxonomyService.prototype.newVocabulary = /**
     * @param {?} vocab
     * @return {?}
     */
    function (vocab) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/vocabulary/new', vocab.entitystringify(), this.httpOptions);
    };
    /**
     * @param {?} vocab
     * @return {?}
     */
    TaxonomyService.prototype.editVocabulary = /**
     * @param {?} vocab
     * @return {?}
     */
    function (vocab) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/vocabulary/edit/' + vocab.id, vocab.entitystringify(), this.httpOptions);
    };
    /**
     * @return {?}
     */
    TaxonomyService.prototype.getVocabularies = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.env.sceibaApi + this.prefix + '/vocabulary/list');
    };
    /**
     * @param {?} term
     * @return {?}
     */
    TaxonomyService.prototype.newTerm = /**
     * @param {?} term
     * @return {?}
     */
    function (term) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/term/new', term.entitystringify(), this.httpOptions);
    };
    /**
     * @param {?} term
     * @return {?}
     */
    TaxonomyService.prototype.editTerm = /**
     * @param {?} term
     * @return {?}
     */
    function (term) {
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.post(this.env.sceibaApi + this.prefix + '/term/edit/' + term.uuid, term.entitystringify(), this.httpOptions);
    };
    /**
     * @return {?}
     */
    TaxonomyService.prototype.getCurrentUserPermissions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/user/permissions';
        this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        return this.http.get(req, this.httpOptions);
    };
    TaxonomyService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TaxonomyService.ctorParameters = function () { return [
        { type: Environment },
        { type: HttpClient },
        { type: OAuthStorage }
    ]; };
    return TaxonomyService;
}());
export { TaxonomyService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.httpOptions;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.token;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.env;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TaxonomyService.prototype.oauthStorage;
}
//# sourceMappingURL=data:application/json;base64,