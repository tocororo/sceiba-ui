/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/search.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { HttpBackend, HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { Environment } from '../core/public-api';
var SearchService = /** @class */ (function () {
    function SearchService(env, handler) {
        // TODO: hay una mejor manera de hacer esto, creando diferentes y propios HttpClients que
        // tengan un comportamiento especifico (eg: sin/con autenticacion)
        // ver: https://github.com/angular/angular/issues/20203#issuecomment-369754776
        // otra solucion seria pasar parametros especiales como {ignore_auth = true} y que el
        // interceptor actue en consecuencia... .
        // https://github.com/angular/angular/issues/18155#issuecomment-382438006
        this.env = env;
        this.handler = handler;
        this.prefix = 'search';
        this.http = new HttpClient(handler);
    }
    /**
     * @param {?} field
     * @param {?=} size
     * @return {?}
     */
    SearchService.prototype.getAggregation = /**
     * @param {?} field
     * @param {?=} size
     * @return {?}
     */
    function (field, size) {
        if (size === void 0) { size = 10; }
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var options = {
            params: params.set('size', size.toString(10))
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/aggs/' + field;
        return this.http.get(req, options);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    SearchService.prototype.getRecords = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/records/';
        return this.http.get(req, options);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    SearchService.prototype.getSources = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/sources';
        return this.http.get(req, options);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    SearchService.prototype.getOrganizations = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var options = {
            params: params,
        };
        // console.log(params);
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/organizations/';
        // console.log(req);
        return this.http.get(req, options);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SearchService.prototype.getOrganizationById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var req = this.env.cuorApi + 'organizations/' + id + '/';
        // console.log(req);
        return this.http.get(req);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SearchService.prototype.updateOrganizations = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        //TODO: Do this method...
        return of(null);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SearchService.prototype.getSourcesOrgAggregation = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + 'source/aggs/org/' + uuid;
        return this.http.get(req);
    };
    SearchService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SearchService.ctorParameters = function () { return [
        { type: Environment },
        { type: HttpBackend }
    ]; };
    return SearchService;
}());
export { SearchService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.prefix;
    /** @type {?} */
    SearchService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.env;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9iYWNrZW5kL3NlYXJjaC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1BLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFZLE1BQU0sb0JBQW9CLENBQUM7QUFJM0Q7SUFjRSx1QkFBMkIsR0FBZ0IsRUFBVSxPQUFvQjtRQUV2RSx5RkFBeUY7UUFDekYsa0VBQWtFO1FBQ2xFLDhFQUE4RTtRQUM5RSxxRkFBcUY7UUFDckYseUNBQXlDO1FBQ3pDLHlFQUF5RTtRQVBoRCxRQUFHLEdBQUgsR0FBRyxDQUFhO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBYTtRQVhqRSxXQUFNLEdBQUcsUUFBUSxDQUFDO1FBb0J4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7OztJQUVNLHNDQUFjOzs7OztJQUFyQixVQUFzQixLQUFLLEVBQUUsSUFBUztRQUFULHFCQUFBLEVBQUEsU0FBUzs7WUFDaEMsTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFOztZQUN2QixPQUFPLEdBQUc7WUFDZCxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM5Qzs7WUFDSyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLEdBQUcsS0FBSztRQUMvRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFnQixHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Ozs7SUFFTSxrQ0FBVTs7OztJQUFqQixVQUFrQixNQUFrQjs7WUFDNUIsT0FBTyxHQUFHO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FFZjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7O1lBQ2IsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVztRQUMxRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF5QixHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFTSxrQ0FBVTs7OztJQUFqQixVQUFrQixNQUFrQjs7WUFDNUIsT0FBTyxHQUFHO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FFZjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7O1lBQ2QsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVTtRQUN6RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF5QixHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFTSx3Q0FBZ0I7Ozs7SUFBdkIsVUFBd0IsTUFBa0I7O1lBQ2xDLE9BQU8sR0FBRztZQUNkLE1BQU0sRUFBRSxNQUFNO1NBRWY7OztZQUVLLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLGlCQUFpQjtRQUNoRSxvQkFBb0I7UUFFcEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBK0IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLENBQUM7Ozs7O0lBRU0sMkNBQW1COzs7O0lBQTFCLFVBQTJCLEVBQVU7O1lBQzdCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxnQkFBZ0IsR0FBRyxFQUFFLEdBQUcsR0FBRztRQUMxRCxvQkFBb0I7UUFFcEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBK0IsR0FBRyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7SUFDTSwyQ0FBbUI7Ozs7SUFBMUIsVUFBMkIsSUFBa0I7UUFDM0MseUJBQXlCO1FBQ3pCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Ozs7O0lBRU0sZ0RBQXdCOzs7O0lBQS9CLFVBQWdDLElBQUk7O1lBQzVCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsR0FBRyxJQUFJO1FBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWdCLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7O2dCQWpGRixVQUFVOzs7O2dCQUpGLFdBQVc7Z0JBSFgsV0FBVzs7SUF5RnBCLG9CQUFDO0NBQUEsQUFsRkQsSUFrRkM7U0FqRlksYUFBYTs7Ozs7O0lBRXhCLCtCQUEwQjs7SUFTMUIsNkJBQXdCOzs7OztJQUVMLDRCQUF3Qjs7Ozs7SUFBRSxnQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMjAgVW5pdmVyc2lkYWQgZGUgUGluYXIgZGVsIFLDrW8gXCJIZXJtYW5vcyBTYcOteiBNb250ZXMgZGUgT2NhXCJcbiAqICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5cbmltcG9ydCB7IEh0dHBCYWNrZW5kLCBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEVudmlyb25tZW50LCBSZXNwb25zZSB9IGZyb20gJy4uL2NvcmUvcHVibGljLWFwaSc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb24sIFJlY29yZCwgU2VhcmNoUmVzcG9uc2UsIFNvdXJjZSB9IGZyb20gJy4uL2VudGl0aWVzL3B1YmxpYy1hcGknO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZWFyY2hTZXJ2aWNlIHtcblxuICBwcml2YXRlIHByZWZpeCA9ICdzZWFyY2gnO1xuXG4gIC8vIHByaXZhdGUgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyhcbiAgLy8gICAgIHtcbiAgLy8gICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgLy8gICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgLy8gICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xuICAvLyAgICAgfVxuICAvLyApO1xuICBwdWJsaWMgaHR0cDogSHR0cENsaWVudDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBlbnY6IEVudmlyb25tZW50LCBwcml2YXRlIGhhbmRsZXI6IEh0dHBCYWNrZW5kKSB7XG5cbiAgICAvLyBUT0RPOiBoYXkgdW5hIG1lam9yIG1hbmVyYSBkZSBoYWNlciBlc3RvLCBjcmVhbmRvIGRpZmVyZW50ZXMgeSBwcm9waW9zIEh0dHBDbGllbnRzIHF1ZVxuICAgIC8vIHRlbmdhbiB1biBjb21wb3J0YW1pZW50byBlc3BlY2lmaWNvIChlZzogc2luL2NvbiBhdXRlbnRpY2FjaW9uKVxuICAgIC8vIHZlcjogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjAyMDMjaXNzdWVjb21tZW50LTM2OTc1NDc3NlxuICAgIC8vIG90cmEgc29sdWNpb24gc2VyaWEgcGFzYXIgcGFyYW1ldHJvcyBlc3BlY2lhbGVzIGNvbW8ge2lnbm9yZV9hdXRoID0gdHJ1ZX0geSBxdWUgZWxcbiAgICAvLyBpbnRlcmNlcHRvciBhY3R1ZSBlbiBjb25zZWN1ZW5jaWEuLi4gLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE4MTU1I2lzc3VlY29tbWVudC0zODI0MzgwMDZcblxuICAgIHRoaXMuaHR0cCA9IG5ldyBIdHRwQ2xpZW50KGhhbmRsZXIpO1xuICB9XG5cbiAgcHVibGljIGdldEFnZ3JlZ2F0aW9uKGZpZWxkLCBzaXplID0gMTApOiBPYnNlcnZhYmxlPFJlc3BvbnNlPGFueT4+IHtcbiAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgcGFyYW1zOiBwYXJhbXMuc2V0KCdzaXplJywgc2l6ZS50b1N0cmluZygxMCkpXG4gICAgfTtcbiAgICBjb25zdCByZXEgPSB0aGlzLmVudi5zY2VpYmFBcGkgKyB0aGlzLnByZWZpeCArICcvYWdncy8nICsgZmllbGQ7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UmVzcG9uc2U8YW55Pj4ocmVxLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZWNvcmRzKHBhcmFtczogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8U2VhcmNoUmVzcG9uc2U8UmVjb3JkPj4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIC8vIGhlYWRlcnM6IHRoaXMuaGVhZGVyc1xuICAgIH07XG4gICAgY29uc29sZS5sb2cocGFyYW1zKVxuICAgIGNvbnN0IHJlcSA9IHRoaXMuZW52LnNjZWliYUFwaSArIHRoaXMucHJlZml4ICsgJy9yZWNvcmRzLyc7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8U2VhcmNoUmVzcG9uc2U8UmVjb3JkPj4ocmVxLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTb3VyY2VzKHBhcmFtczogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8U2VhcmNoUmVzcG9uc2U8U291cmNlPj4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIC8vIGhlYWRlcnM6IHRoaXMuaGVhZGVyc1xuICAgIH07XG4gICAgY29uc29sZS5sb2cocGFyYW1zKTtcbiAgICBjb25zdCByZXEgPSB0aGlzLmVudi5zY2VpYmFBcGkgKyB0aGlzLnByZWZpeCArICcvc291cmNlcyc7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8U2VhcmNoUmVzcG9uc2U8U291cmNlPj4ocmVxLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRPcmdhbml6YXRpb25zKHBhcmFtczogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8U2VhcmNoUmVzcG9uc2U8T3JnYW5pemF0aW9uPj4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIC8vIGhlYWRlcnM6IHRoaXMuaGVhZGVyc1xuICAgIH07XG4gICAgLy8gY29uc29sZS5sb2cocGFyYW1zKTtcbiAgICBjb25zdCByZXEgPSB0aGlzLmVudi5zY2VpYmFBcGkgKyB0aGlzLnByZWZpeCArICcvb3JnYW5pemF0aW9ucy8nO1xuICAgIC8vIGNvbnNvbGUubG9nKHJlcSk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxTZWFyY2hSZXNwb25zZTxPcmdhbml6YXRpb24+PihyZXEsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGdldE9yZ2FuaXphdGlvbkJ5SWQoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8U2VhcmNoUmVzcG9uc2U8T3JnYW5pemF0aW9uPj4ge1xuICAgIGNvbnN0IHJlcSA9IHRoaXMuZW52LmN1b3JBcGkgKyAnb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnLyc7XG4gICAgLy8gY29uc29sZS5sb2cocmVxKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFNlYXJjaFJlc3BvbnNlPE9yZ2FuaXphdGlvbj4+KHJlcSk7XG4gIH1cbiAgcHVibGljIHVwZGF0ZU9yZ2FuaXphdGlvbnMoZGF0YTogT3JnYW5pemF0aW9uKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb24+IHtcbiAgICAvL1RPRE86IERvIHRoaXMgbWV0aG9kLi4uXG4gICAgcmV0dXJuIG9mKG51bGwpO1xuICB9XG5cbiAgcHVibGljIGdldFNvdXJjZXNPcmdBZ2dyZWdhdGlvbih1dWlkKTogT2JzZXJ2YWJsZTxSZXNwb25zZTxhbnk+PiB7XG4gICAgY29uc3QgcmVxID0gdGhpcy5lbnYuc2NlaWJhQXBpICsgJ3NvdXJjZS9hZ2dzL29yZy8nICsgdXVpZDtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxSZXNwb25zZTxhbnk+PihyZXEpO1xuICB9XG59XG4iXX0=