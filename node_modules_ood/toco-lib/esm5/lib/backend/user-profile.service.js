/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/user-profile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Environment } from '../core/public-api';
import * as i0 from "@angular/core";
import * as i1 from "../core/env";
import * as i2 from "@angular/common/http";
var UserProfileService = /** @class */ (function () {
    function UserProfileService(env, http) {
        this.env = env;
        this.http = http;
    }
    /**
     * gives information about an user authenticated
     */
    /**
     * gives information about an user authenticated
     * @return {?}
     */
    UserProfileService.prototype.getUserInfo = /**
     * gives information about an user authenticated
     * @return {?}
     */
    function () {
        return this.http.get(this.env.sceibaApi + 'me');
    };
    /**
     * @param {?=} size
     * @param {?=} page
     * @param {?=} query
     * @return {?}
     */
    UserProfileService.prototype.getUsers = /**
     * @param {?=} size
     * @param {?=} page
     * @param {?=} query
     * @return {?}
     */
    function (size, page, query) {
        if (size === void 0) { size = 10; }
        if (page === void 0) { page = 1; }
        if (query === void 0) { query = ''; }
        /** @type {?} */
        var params = new HttpParams();
        params = params.set('size', size.toString(10));
        params = params.set('page', page.toString(10));
        params = params.set('query', query);
        /** @type {?} */
        var options = {
            params: params
        };
        return this.http.get(this.env.sceibaApi + 'users/search', options);
    };
    UserProfileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserProfileService.ctorParameters = function () { return [
        { type: Environment },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ UserProfileService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function UserProfileService_Factory() { return new UserProfileService(i0.ɵɵinject(i1.Environment), i0.ɵɵinject(i2.HttpClient)); }, token: UserProfileService, providedIn: "root" });
    return UserProfileService;
}());
export { UserProfileService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UserProfileService.prototype.env;
    /**
     * @type {?}
     * @protected
     */
    UserProfileService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcm9maWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b2NvLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9iYWNrZW5kL3VzZXItcHJvZmlsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7OztBQUlqRDtJQUtFLDRCQUNZLEdBQWdCLEVBQ2QsSUFBZ0I7UUFEbEIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUNkLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDO0lBRW5DOztPQUVHOzs7OztJQUNILHdDQUFXOzs7O0lBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7O0lBRUQscUNBQVE7Ozs7OztJQUFSLFVBQVMsSUFBUSxFQUFFLElBQU8sRUFBRSxLQUFTO1FBQTVCLHFCQUFBLEVBQUEsU0FBUTtRQUFFLHFCQUFBLEVBQUEsUUFBTztRQUFFLHNCQUFBLEVBQUEsVUFBUzs7WUFDL0IsTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFO1FBQzdCLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7O1lBQzlCLE9BQU8sR0FBRztZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2Y7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEYsQ0FBQzs7Z0JBekJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTlEsV0FBVztnQkFGWCxVQUFVOzs7NkJBRm5CO0NBb0NDLEFBNUJELElBNEJDO1NBekJZLGtCQUFrQjs7Ozs7O0lBR3pCLGlDQUF3Qjs7Ozs7SUFDeEIsa0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuLi9jb3JlL3B1YmxpYy1hcGknO1xuXG5pbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJy4uL2NvcmUvcHVibGljLWFwaSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJQcm9maWxlU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIGVudjogRW52aXJvbm1lbnQsXG4gICAgICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgLyoqXG4gICAqIGdpdmVzIGluZm9ybWF0aW9uIGFib3V0IGFuIHVzZXIgYXV0aGVudGljYXRlZFxuICAgKi9cbiAgZ2V0VXNlckluZm8oKTogT2JzZXJ2YWJsZTxSZXNwb25zZTxhbnk+PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UmVzcG9uc2U8YW55Pj4odGhpcy5lbnYuc2NlaWJhQXBpICsgJ21lJyk7XG4gIH1cblxuICBnZXRVc2VycyhzaXplPSAxMCwgcGFnZT0gMSwgcXVlcnk9ICcnKTogT2JzZXJ2YWJsZTxSZXNwb25zZTxhbnk+PiB7XG4gICAgbGV0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XG4gICAgcGFyYW1zID0gcGFyYW1zLnNldCgnc2l6ZScsIHNpemUudG9TdHJpbmcoMTApKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuc2V0KCdwYWdlJywgcGFnZS50b1N0cmluZygxMCkpO1xuICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQoJ3F1ZXJ5JywgcXVlcnkpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBwYXJhbXM6IHBhcmFtc1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UmVzcG9uc2U8YW55Pj4odGhpcy5lbnYuc2NlaWJhQXBpICsgJ3VzZXJzL3NlYXJjaCcsIG9wdGlvbnMpO1xuICB9XG5cblxufVxuIl19