/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/organization.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpBackend, HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { tap } from 'rxjs/operators';
import { Environment, MessageService } from '../core/public-api';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../core/services/message.service";
/**
 * The URL to the root api.
 * @type {?}
 */
export var ROOT_API = 'api';
/**
 * The object with the URLs to the endpoint apis.
 * @type {?}
 */
export var ENDPOINT_APIS = {
    organizations: ROOT_API + '/organizations',
};
/**
 * The backend service in order to communicate with a remote server over HTTP.
 */
var OrganizationService = /** @class */ (function () {
    function OrganizationService(_http, _messageService) {
        this._http = _http;
        this._messageService = _messageService;
        /**
         * The `httpOptions` object that contains the headers and will be passed to every `HttpClient` save method.
         */
        this._httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
                'Authorization': 'my-auth-token'
            })
        };
    }
    /**
     * Gets data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @param url The endpoint api URL.
     * @param optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     */
    /**
     * Gets data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    OrganizationService.prototype.get = /**
     * Gets data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    function (url, optionalResult) {
        var _this = this;
        return this._http.get(url).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _this.log("fetched data from '" + url + "'"); })));
    };
    /**
     * Gets data from the server that meets the specified `query`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @param url The endpoint api URL.
     * @param query The query to search.
     * @param optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     */
    /**
     * Gets data from the server that meets the specified `query`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} query The query to search.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    OrganizationService.prototype.search = /**
     * Gets data from the server that meets the specified `query`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} query The query to search.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    function (url, query, optionalResult) {
        var _this = this;
        return this._http.get(url + "/?" + query).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _this.log("searched '" + query + "' in '" + url + "'"); })));
    };
    /**
     * Adds `data` to the server. Expects the server to generate an `id` for the new `data`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @param url The endpoint api URL.
     * @param data The data to add.
     * @param optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     */
    /**
     * Adds `data` to the server. Expects the server to generate an `id` for the new `data`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} data The data to add.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    OrganizationService.prototype.add = /**
     * Adds `data` to the server. Expects the server to generate an `id` for the new `data`.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} data The data to add.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    function (url, data, optionalResult) {
        /* Expects the server to generate an `id` for the new `data`. */
        var _this = this;
        return this._http.post(url, data, this._httpOptions).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _this.log("added " + data + " to '" + url + "'"); })));
    };
    /**
     * Updates `data` on the server. Returns an Observable of that `data` if the `data` is inserted (does
     * not exist) on the server; otherwise, returns an Observable of null (if the `data` is only updated).
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @param url The endpoint api URL.
     * @param data The data to update.
     * @param optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     */
    /**
     * Updates `data` on the server. Returns an Observable of that `data` if the `data` is inserted (does
     * not exist) on the server; otherwise, returns an Observable of null (if the `data` is only updated).
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} data The data to update.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    OrganizationService.prototype.update = /**
     * Updates `data` on the server. Returns an Observable of that `data` if the `data` is inserted (does
     * not exist) on the server; otherwise, returns an Observable of null (if the `data` is only updated).
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} data The data to update.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    function (url, data, optionalResult) {
        var _this = this;
        return this._http.put(url, data, this._httpOptions).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _this.log("updated " + data + " to '" + url + "'"); })));
    };
    /**
     * Deletes data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @param url The endpoint api URL.
     * @param id The unique identifier that identifies the data to delete.
     * @param optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     */
    /**
     * Deletes data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} id The unique identifier that identifies the data to delete.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    OrganizationService.prototype.delete = /**
     * Deletes data from the server.
     * If an error occurs, lets the app keep running by returning the specified safe `optionalResult`.
     * @template T
     * @param {?} url The endpoint api URL.
     * @param {?} id The unique identifier that identifies the data to delete.
     * @param {?} optionalResult If an error occurs, lets the app keep running by returning a safe optional value
     * as the observable result.
     * @return {?}
     */
    function (url, id, optionalResult) {
        var _this = this;
        return this._http.delete(url + "/" + id, this._httpOptions).pipe(tap((/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return _this.log("deleted data with id = " + id + " from '" + url + "'"); })));
    };
    /**
     * Logs an `OrganizationService` message with the `MessageService`.
     * @param message The message to log.
     */
    /**
     * Logs an `OrganizationService` message with the `MessageService`.
     * @private
     * @param {?} message The message to log.
     * @return {?}
     */
    OrganizationService.prototype.log = /**
     * Logs an `OrganizationService` message with the `MessageService`.
     * @private
     * @param {?} message The message to log.
     * @return {?}
     */
    function (message) {
        this._messageService.add(OrganizationService.name + ": " + message + ".");
    };
    OrganizationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    OrganizationService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: MessageService }
    ]; };
    /** @nocollapse */ OrganizationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OrganizationService_Factory() { return new OrganizationService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService)); }, token: OrganizationService, providedIn: "root" });
    return OrganizationService;
}());
export { OrganizationService };
if (false) {
    /**
     * The `httpOptions` object that contains the headers and will be passed to every `HttpClient` save method.
     * @type {?}
     * @private
     */
    OrganizationService.prototype._httpOptions;
    /**
     * @type {?}
     * @private
     */
    OrganizationService.prototype._http;
    /**
     * @type {?}
     * @private
     */
    OrganizationService.prototype._messageService;
}
var OrganizationServiceNoAuth = /** @class */ (function () {
    function OrganizationServiceNoAuth(env, handler) {
        this.env = env;
        this.handler = handler;
        this.path = 'organizations';
        this.http = new HttpClient(handler);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    OrganizationServiceNoAuth.prototype.getOrganizationByUUID = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        var req = this.env.sceibaApi + "/pid/organization/" + uuid;
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @param {?=} relType
     * @return {?}
     */
    OrganizationServiceNoAuth.prototype.getOrganizationRelationships = /**
     * @param {?} uuid
     * @param {?=} relType
     * @return {?}
     */
    function (uuid, relType) {
        if (relType === void 0) { relType = null; }
        /** @type {?} */
        var req = this.env.sceibaApi + this.path + '/' + uuid + '/relationships';
        if (relType != null) {
            /** @type {?} */
            var params = new HttpParams();
            params = params.set('type', relType);
            /** @type {?} */
            var options = {
                params: params,
            };
            return this.http.get(req, options);
        }
        else {
            return this.http.get(req);
        }
    };
    /**
     * @param {?} pid
     * @return {?}
     */
    OrganizationServiceNoAuth.prototype.getOrganizationByPID = /**
     * @param {?} pid
     * @return {?}
     */
    function (pid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        var params = new HttpParams();
        params = params.set('value', pid);
        /** @type {?} */
        var options = {
            params: params,
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.path + '/pid';
        return this.http.get(req, options);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    OrganizationServiceNoAuth.prototype.getOrganizations = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        var req = this.env.sceibaApi + 'search/' + this.path;
        console.log(req);
        return this.http.get(req, options);
    };
    OrganizationServiceNoAuth.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OrganizationServiceNoAuth.ctorParameters = function () { return [
        { type: Environment },
        { type: HttpBackend }
    ]; };
    return OrganizationServiceNoAuth;
}());
export { OrganizationServiceNoAuth };
if (false) {
    /** @type {?} */
    OrganizationServiceNoAuth.prototype.http;
    /** @type {?} */
    OrganizationServiceNoAuth.prototype.path;
    /**
     * @type {?}
     * @private
     */
    OrganizationServiceNoAuth.prototype.env;
    /**
     * @type {?}
     * @private
     */
    OrganizationServiceNoAuth.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,