/**
 * @fileoverview added by tsickle
 * Generated from: lib/backend/source.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *   Copyright (c) 2020 Universidad de Pinar del Río "Hermanos Saíz Montes de Oca"
 *   All rights reserved.
 */
import { HttpBackend, HttpClient, HttpHeaders, HttpParams } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { OAuthStorage } from "angular-oauth2-oidc";
import { Environment } from "../core/env";
var SourceService = /** @class */ (function () {
    function SourceService(env, http, handler, oauthStorage) {
        this.env = env;
        this.http = http;
        this.handler = handler;
        this.oauthStorage = oauthStorage;
        this.prefix = "source";
        this.httpOptions = {
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                Authorization: "Bearer ",
            }),
        };
        this.token = "";
        this.token = this.oauthStorage.getItem("access_token");
        // TODO: hay una mejor manera de hacer esto, creando diferentes y propios HttpClients que
        // tengan un comportamiento especifico (eg: sin/con autenticacion)
        // ver: https://github.com/angular/angular/issues/20203#issuecomment-369754776
        // otra solucion seria pasar parametros especiales como {ignore_auth = true} y que el
        // interceptor actue en consecuencia... .
        // https://github.com/angular/angular/issues/18155#issuecomment-382438006
        this.httpSearch = new HttpClient(handler);
    }
    /**
     * @param {?=} size
     * @param {?=} page
     * @param {?=} role
     * @return {?}
     */
    SourceService.prototype.getMySources = /**
     * @param {?=} size
     * @param {?=} page
     * @param {?=} role
     * @return {?}
     */
    function (size, page, role) {
        if (size === void 0) { size = 10; }
        if (page === void 0) { page = 1; }
        if (role === void 0) { role = 'manager'; }
        /** @type {?} */
        var params = new HttpParams();
        params = params.set("size", size.toString(10));
        params = params.set("page", page.toString(10));
        /** @type {?} */
        var options = {
            params: params,
        };
        // this.httpOptions.headers = this.httpOptions.headers.set('Authorization', 'Bearer ' + this.token);
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/me/" + role + "/ALL";
        return this.http.get(req, options);
    };
    /**
     * @return {?}
     */
    SourceService.prototype.getMySourcesAllRoles = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/me/ALL";
        return this.http.get(req);
    };
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    SourceService.prototype.adhocstringgify = /**
     * @private
     * @param {?} source
     * @return {?}
     */
    function (source) {
        /** @type {?} */
        var orgs = JSON.stringify(source.data.organizations);
        console.log("-------------------", orgs);
        /** @type {?} */
        var all = source.entitystringify();
        console.log("-------------------", all);
        /** @type {?} */
        var from = all.search('"organizations"') + 16;
        /** @type {?} */
        var p1 = all.substr(0, from);
        console.log(p1);
        /** @type {?} */
        var p2 = all.substr(from);
        console.log(p2);
        /** @type {?} */
        var len = this.count_to_len(p2);
        console.log(len);
        /** @type {?} */
        var p3 = all.substr(from + len);
        console.log(p3);
        return p1 + orgs + p3;
    };
    /**
     * @private
     * @param {?} p2
     * @return {?}
     */
    SourceService.prototype.count_to_len = /**
     * @private
     * @param {?} p2
     * @return {?}
     */
    function (p2) {
        if (p2[0] == "[") {
            /** @type {?} */
            var len = 1;
            /** @type {?} */
            var count = 1;
            for (var index = 1; index < p2.length; index++) {
                /** @type {?} */
                var element = p2[index];
                len++;
                if (p2[index] === "[")
                    count++;
                if (p2[index] === "]")
                    count--;
                if (count === 0)
                    return len;
            }
        }
    };
    /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.editSource = /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    function (source, uuid) {
        // this.adhocstringgify(source)
        // console.log(source)
        // let valu = source.entitystringify();
        // console.log("s: ", valu)
        // this.adhocstringgify(source)
        // console.log(source)
        // let valu = source.entitystringify();
        // console.log("s: ", valu)
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/" + uuid + "/edit";
        return this.http.post(req, this.adhocstringgify(source), this.httpOptions);
    };
    /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.makeSourceAsApproved = /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    function (source, uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/" + uuid + "/publish";
        return this.http.post(req, this.adhocstringgify(source), this.httpOptions);
    };
    /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.makeSourceAsUnApproved = /**
     * @param {?} source
     * @param {?} uuid
     * @return {?}
     */
    function (source, uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/" + uuid + "/unpublish";
        return this.http.post(req, this.adhocstringgify(source), this.httpOptions);
    };
    /**
     * @param {?} source
     * @param {?} uuid
     * @param {?} role
     * @return {?}
     */
    SourceService.prototype.newSource = /**
     * @param {?} source
     * @param {?} uuid
     * @param {?} role
     * @return {?}
     */
    function (source, uuid, role) {
        /** @type {?} */
        var params = new HttpParams();
        params = params.set("pid", uuid.toString());
        params = params.set("role", role.toString());
        /** @type {?} */
        var options = {
            params: params,
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/new";
        return this.http.post(req, this.adhocstringgify(source), options);
    };
    /**
     * @param {?} issn
     * @return {?}
     */
    SourceService.prototype.getIssnInfo = /**
     * @param {?} issn
     * @return {?}
     */
    function (issn) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/journal/issn/" + issn;
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.getSourcesByTermUUID = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/relations/" + uuid;
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.getSourceVersions = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        this.httpOptions.headers = this.httpOptions.headers.set("Authorization", "Bearer " + this.token);
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/" + uuid + "/versions";
        return this.http.get(req, this.httpOptions);
    };
    /**
     * @param {?} uuid
     * @param {?=} level
     * @return {?}
     */
    SourceService.prototype.countSourcesByTerm = /**
     * @param {?} uuid
     * @param {?=} level
     * @return {?}
     */
    function (uuid, level) {
        if (level === void 0) { level = 0; }
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var options = {
            params: params.set("level", level.toString(10)),
        };
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + "/relations/" + uuid + "/count";
        return this.http.get(req, options);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.getSourceByUUID = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/' + uuid;
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.permissionGetSourceEditors = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/editor/' + uuid + '/users';
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    SourceService.prototype.permissionSetSourceEditor = /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    function (uuid, user, allow) {
        if (allow === void 0) { allow = false; }
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/editor/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.permissionGetSourceManagers = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/manager/' + uuid + '/users';
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    SourceService.prototype.permissionSetSourceManager = /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    function (uuid, user, allow) {
        if (allow === void 0) { allow = false; }
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/manager/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.permissionGetOrganizationManagers = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/organization/' + uuid + '/users';
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    SourceService.prototype.permissionSetOrganizationManager = /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    function (uuid, user, allow) {
        if (allow === void 0) { allow = false; }
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/organization/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceService.prototype.permissionGetTermManagers = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/term/' + uuid + '/users';
        return this.http.get(req);
    };
    /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    SourceService.prototype.permissionSetTermManager = /**
     * @param {?} uuid
     * @param {?} user
     * @param {?=} allow
     * @return {?}
     */
    function (uuid, user, allow) {
        if (allow === void 0) { allow = false; }
        /** @type {?} */
        var req = this.env.sceibaApi + this.prefix + '/permission/' + user + '/term/' + uuid + ((allow) ? '/allow' : '/deny');
        return this.http.post(req, null, this.httpOptions);
    };
    SourceService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SourceService.ctorParameters = function () { return [
        { type: Environment },
        { type: HttpClient },
        { type: HttpBackend },
        { type: OAuthStorage }
    ]; };
    return SourceService;
}());
export { SourceService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.httpOptions;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.token;
    /** @type {?} */
    SourceService.prototype.httpSearch;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.env;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.handler;
    /**
     * @type {?}
     * @private
     */
    SourceService.prototype.oauthStorage;
}
var SourceServiceNoAuth = /** @class */ (function () {
    function SourceServiceNoAuth(env, handler) {
        // TODO: hay una mejor manera de hacer esto, creando diferentes y propios HttpClients que
        // tengan un comportamiento especifico (eg: sin/con autenticacion)
        // ver: https://github.com/angular/angular/issues/20203#issuecomment-369754776
        // otra solucion seria pasar parametros especiales como {ignore_auth = true} y que el
        // interceptor actue en consecuencia... .
        // https://github.com/angular/angular/issues/18155#issuecomment-382438006
        this.env = env;
        this.handler = handler;
        this.http = new HttpClient(handler);
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    SourceServiceNoAuth.prototype.getSourceByUUID = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        var req = this.env.sceibaApi + "/pid/source/" + uuid;
        return this.http.get(req);
    };
    /**
     * @param {?} issn
     * @return {?}
     */
    SourceServiceNoAuth.prototype.getSourceByISSN = /**
     * @param {?} issn
     * @return {?}
     */
    function (issn) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        var req = this.env.sceibaApi + "source/byissn/" + issn;
        return this.http.get(req);
    };
    /**
     * @param {?} pid
     * @return {?}
     */
    SourceServiceNoAuth.prototype.getSourceByPID = /**
     * @param {?} pid
     * @return {?}
     */
    function (pid) {
        // const req = this.env.sceibaApi + this.prefix + "/" + uuid;
        /** @type {?} */
        var params = new HttpParams();
        params = params.set('value', pid);
        /** @type {?} */
        var options = {
            params: params,
        };
        /** @type {?} */
        var req = this.env.sceibaApi + 'source/pid';
        return this.http.get(req, options);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    SourceServiceNoAuth.prototype.getSources = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var options = {
            params: params,
        };
        console.log(params);
        /** @type {?} */
        var req = this.env.sceibaApi + 'search/sources';
        return this.http.get(req, options);
    };
    /**
     * @param {?} topOrgId
     * @return {?}
     */
    SourceServiceNoAuth.prototype.getSourcesStats = /**
     * @param {?} topOrgId
     * @return {?}
     */
    function (topOrgId) {
        /** @type {?} */
        var params = new HttpParams();
        params = params.set('org', topOrgId);
        /** @type {?} */
        var options = {
            params: params,
        };
        /** @type {?} */
        var req = this.env.sceibaApi + 'source/stats';
        return this.http.get(req, options);
    };
    SourceServiceNoAuth.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SourceServiceNoAuth.ctorParameters = function () { return [
        { type: Environment },
        { type: HttpBackend }
    ]; };
    return SourceServiceNoAuth;
}());
export { SourceServiceNoAuth };
if (false) {
    /** @type {?} */
    SourceServiceNoAuth.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SourceServiceNoAuth.prototype.env;
    /**
     * @type {?}
     * @private
     */
    SourceServiceNoAuth.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,