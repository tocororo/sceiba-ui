/**
 * @fileoverview added by tsickle
 * Generated from: lib/search/aggregations/aggregations.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from "@angular/core";
/**
 * @record
 */
export function AggregationsSelection() { }
var AggregationsComponent = /** @class */ (function () {
    function AggregationsComponent() {
        this.aggregations = {};
        /**
         *
         * {
         *  'country': ['Cuba','Peru'],
         *  'state': ['New York']
         *  ...
         * }
         *
         * in the aggregation country, buckets 'Cuba' and 'Peru' are selected
         * in the aggregation state, bucket 'New York' is selected
         *
         */
        this.selectedAggr = {};
        this.keySelect = new EventEmitter();
        this.keys = [];
    }
    /**
     * @return {?}
     */
    AggregationsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        for (var key in this.aggregations) {
            if (this.aggregations.hasOwnProperty(key)) {
                /** @type {?} */
                var element = this.aggregations[key];
                //this.keys.push(key);
                this.keys.push({ "key": key, "sp": this._translate(key) });
            }
        }
        console.log("cola");
        console.log(this.keys);
    };
    //aqui se agregan los casos que puedan haber en las agregaciones para q salgan siempre en español
    //aqui se agregan los casos que puedan haber en las agregaciones para q salgan siempre en español
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    AggregationsComponent.prototype._translate = 
    //aqui se agregan los casos que puedan haber en las agregaciones para q salgan siempre en español
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        switch (key) {
            case "status": {
                return "Estado";
            }
            case "country": {
                return "País";
            }
            case "state": {
                return "Provincia (Estado)";
            }
            case "types": {
                return "Tipos";
            }
            default: {
                return this.aggregations[key]['label'];
            }
        }
        return key;
    };
    /**
     * @param {?} aggrKey
     * @param {?} bucket
     * @return {?}
     */
    AggregationsComponent.prototype.isSelected = /**
     * @param {?} aggrKey
     * @param {?} bucket
     * @return {?}
     */
    function (aggrKey, bucket) {
        if (this.selectedAggr.hasOwnProperty(aggrKey)) {
            for (var index = 0; index < this.selectedAggr[aggrKey].length; index++) {
                /** @type {?} */
                var element = this.selectedAggr[aggrKey][index];
                if (element == bucket.key) {
                    // console.log(this.selectedAggr, aggrKey, bucket);
                    // console.log("--------------------");
                    return true;
                }
            }
            // this.selectedAggr[aggrKey].forEach((key) => {
            //   if (key == bucket.key) {
            //     console.log(this.selectedAggr, aggrKey, bucket);
            //     console.log("--------------------");
            //     return true;
            //   }
            // });
        }
        // console.log("FALSE");
        return false;
    };
    /**
     * @param {?} aggrKey
     * @param {?} bucket
     * @return {?}
     */
    AggregationsComponent.prototype.selectionChange = /**
     * @param {?} aggrKey
     * @param {?} bucket
     * @return {?}
     */
    function (aggrKey, bucket) {
        if (!this.selectedAggr.hasOwnProperty(aggrKey)) {
            this.selectedAggr[aggrKey] = [];
        }
        if (this.selectedAggr[aggrKey].find((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return k == bucket.key; }))) {
            this.selectedAggr[aggrKey] = this.selectedAggr[aggrKey].filter((/**
             * @param {?} k
             * @return {?}
             */
            function (k) { return k != bucket.key; }));
        }
        else {
            this.selectedAggr[aggrKey].push(bucket.key);
        }
        this.keySelect.emit(this.selectedAggr);
    };
    AggregationsComponent.decorators = [
        { type: Component, args: [{
                    selector: "toco-search-aggregations",
                    template: "<ng-container *ngFor=\"let key of keys\">\n  <mat-card *ngIf=\"aggregations[key.key].buckets.length != 0\" class=\"m-1\">\n    <mat-card-header>\n      <mat-card-title class=\"text-capitalize\">{{ key.sp }} </mat-card-title>\n    </mat-card-header>\n    <mat-card-content fxLayout=\"column\">\n      <mat-checkbox\n        *ngFor=\"let bucket of aggregations[key.key].buckets\"\n        [checked]=\"isSelected(key.key, bucket)\"\n        (change)=\"selectionChange(key.key, bucket)\"\n        class=\"text-capitalize\"\n      >\n        {{ bucket.key }} ({{ bucket.doc_count }})\n      </mat-checkbox>\n    </mat-card-content>\n  </mat-card>\n</ng-container>\n",
                    styles: [".m-1{margin:1em}.text-capitalize{text-transform:capitalize!important}"]
                }] }
    ];
    /** @nocollapse */
    AggregationsComponent.ctorParameters = function () { return []; };
    AggregationsComponent.propDecorators = {
        aggregations: [{ type: Input }],
        selectedAggr: [{ type: Input }],
        keySelect: [{ type: Output }]
    };
    return AggregationsComponent;
}());
export { AggregationsComponent };
if (false) {
    /** @type {?} */
    AggregationsComponent.prototype.aggregations;
    /**
     *
     * {
     *  'country': ['Cuba','Peru'],
     *  'state': ['New York']
     *  ...
     * }
     *
     * in the aggregation country, buckets 'Cuba' and 'Peru' are selected
     * in the aggregation state, bucket 'New York' is selected
     *
     * @type {?}
     */
    AggregationsComponent.prototype.selectedAggr;
    /** @type {?} */
    AggregationsComponent.prototype.keySelect;
    /** @type {?} */
    AggregationsComponent.prototype.keys;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RvY28tbGliLyIsInNvdXJjZXMiOlsibGliL3NlYXJjaC9hZ2dyZWdhdGlvbnMvYWdncmVnYXRpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFHL0UsMkNBRUM7QUFFRDtJQTRCRTtRQXJCQSxpQkFBWSxHQUEyQixFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7UUFjMUMsaUJBQVksR0FBMEIsRUFBRSxDQUFDO1FBR3pDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBeUIsQ0FBQztRQUV0RCxTQUFJLEdBQUcsRUFBRSxDQUFDO0lBRUssQ0FBQzs7OztJQUVoQix3Q0FBUTs7O0lBQVI7UUFDRSxLQUFLLElBQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTs7b0JBQ25DLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQztnQkFDdEMsc0JBQXNCO2dCQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDO2FBQ3hEO1NBQ0Y7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpCLENBQUM7SUFFRCxpR0FBaUc7Ozs7Ozs7SUFDekYsMENBQVU7Ozs7Ozs7SUFBbEIsVUFBbUIsR0FBRztRQUNwQixRQUFRLEdBQUcsRUFDWDtZQUNFLEtBQUssUUFBUSxDQUFDLENBQUM7Z0JBQ2IsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFDRCxLQUFLLFNBQVMsQ0FBQyxDQUFDO2dCQUNkLE9BQU8sTUFBTSxDQUFDO2FBQ2Y7WUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUNaLE9BQU8sb0JBQW9CLENBQUM7YUFDN0I7WUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUNaLE9BQU8sT0FBTyxDQUFDO2FBQ2hCO1lBQ0QsT0FBTyxDQUFDLENBQUM7Z0JBQ1AsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBRXhDO1NBQ0Y7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Ozs7OztJQUdELDBDQUFVOzs7OztJQUFWLFVBQVcsT0FBTyxFQUFFLE1BQWtCO1FBRXBDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDN0MsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFOztvQkFDaEUsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUNqRCxJQUFJLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO29CQUN6QixtREFBbUQ7b0JBQ25ELHVDQUF1QztvQkFFdkMsT0FBTyxJQUFJLENBQUM7aUJBQ2I7YUFDRjtZQUNELGdEQUFnRDtZQUNoRCw2QkFBNkI7WUFDN0IsdURBQXVEO1lBQ3ZELDJDQUEyQztZQUUzQyxtQkFBbUI7WUFDbkIsTUFBTTtZQUNOLE1BQU07U0FDUDtRQUNELHdCQUF3QjtRQUV4QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVELCtDQUFlOzs7OztJQUFmLFVBQWdCLE9BQU8sRUFBRSxNQUFrQjtRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUM7WUFDN0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDakM7UUFFQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQWYsQ0FBZSxFQUFDLEVBQUM7WUFDeEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFmLENBQWUsRUFBQyxDQUFDO1NBQ3RGO2FBQUs7WUFDSixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDNUM7UUFHSCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Z0JBNUdGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxncUJBQTRDOztpQkFFN0M7Ozs7OytCQUVFLEtBQUs7K0JBY0wsS0FBSzs0QkFHTCxNQUFNOztJQXNGVCw0QkFBQztDQUFBLEFBN0dELElBNkdDO1NBeEdZLHFCQUFxQjs7O0lBQ2hDLDZDQUMwQzs7Ozs7Ozs7Ozs7Ozs7SUFhMUMsNkNBQ3lDOztJQUV6QywwQ0FDc0Q7O0lBRXRELHFDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBBZ2dyLCBBZ2dyQnVja2V0IH0gZnJvbSBcIi4uLy4uL2VudGl0aWVzL3B1YmxpYy1hcGlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBBZ2dyZWdhdGlvbnNTZWxlY3Rpb257XG4gIFtpZDogc3RyaW5nXTogc3RyaW5nW11cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcInRvY28tc2VhcmNoLWFnZ3JlZ2F0aW9uc1wiLFxuICB0ZW1wbGF0ZVVybDogXCIuL2FnZ3JlZ2F0aW9ucy5jb21wb25lbnQuaHRtbFwiLFxuICBzdHlsZVVybHM6IFtcIi4vYWdncmVnYXRpb25zLmNvbXBvbmVudC5zY3NzXCJdLFxufSlcbmV4cG9ydCBjbGFzcyBBZ2dyZWdhdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKVxuICBhZ2dyZWdhdGlvbnM6IHsgW2lkOiBzdHJpbmddOiBBZ2dyIH0gPSB7fTtcblxuICAvKioqXG4gICAqIHtcbiAgICogICdjb3VudHJ5JzogWydDdWJhJywnUGVydSddLFxuICAgKiAgJ3N0YXRlJzogWydOZXcgWW9yayddXG4gICAqICAuLi5cbiAgICogfVxuICAgKlxuICAgKiBpbiB0aGUgYWdncmVnYXRpb24gY291bnRyeSwgYnVja2V0cyAnQ3ViYScgYW5kICdQZXJ1JyBhcmUgc2VsZWN0ZWRcbiAgICogaW4gdGhlIGFnZ3JlZ2F0aW9uIHN0YXRlLCBidWNrZXQgJ05ldyBZb3JrJyBpcyBzZWxlY3RlZFxuICAgKlxuICAgKi9cbiAgQElucHV0KClcbiAgc2VsZWN0ZWRBZ2dyOiBBZ2dyZWdhdGlvbnNTZWxlY3Rpb24gPSB7fTtcblxuICBAT3V0cHV0KClcbiAga2V5U2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcjxBZ2dyZWdhdGlvbnNTZWxlY3Rpb24+KCk7XG5cbiAga2V5cyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmFnZ3JlZ2F0aW9ucykge1xuICAgICAgaWYgKHRoaXMuYWdncmVnYXRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuYWdncmVnYXRpb25zW2tleV07XG4gICAgICAgIC8vdGhpcy5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgdGhpcy5rZXlzLnB1c2goe1wia2V5XCI6a2V5LCBcInNwXCI6dGhpcy5fdHJhbnNsYXRlKGtleSl9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJjb2xhXCIpO1xuICAgIGNvbnNvbGUubG9nKHRoaXMua2V5cyk7XG5cbiAgfVxuXG4gIC8vYXF1aSBzZSBhZ3JlZ2FuIGxvcyBjYXNvcyBxdWUgcHVlZGFuIGhhYmVyIGVuIGxhcyBhZ3JlZ2FjaW9uZXMgcGFyYSBxIHNhbGdhbiBzaWVtcHJlIGVuIGVzcGHDsW9sXG4gIHByaXZhdGUgX3RyYW5zbGF0ZShrZXkpe1xuICAgIHN3aXRjaCAoa2V5KVxuICAgIHtcbiAgICAgIGNhc2UgXCJzdGF0dXNcIjoge1xuICAgICAgICByZXR1cm4gXCJFc3RhZG9cIjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3VudHJ5XCI6IHtcbiAgICAgICAgcmV0dXJuIFwiUGHDrXNcIjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJzdGF0ZVwiOiB7XG4gICAgICAgIHJldHVybiBcIlByb3ZpbmNpYSAoRXN0YWRvKVwiO1xuICAgICAgfVxuICAgICAgY2FzZSBcInR5cGVzXCI6IHtcbiAgICAgICAgcmV0dXJuIFwiVGlwb3NcIjtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRpb25zW2tleV1bJ2xhYmVsJ107XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ga2V5O1xuICB9XG5cblxuICBpc1NlbGVjdGVkKGFnZ3JLZXksIGJ1Y2tldDogQWdnckJ1Y2tldCkge1xuXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRBZ2dyLmhhc093blByb3BlcnR5KGFnZ3JLZXkpKSB7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zZWxlY3RlZEFnZ3JbYWdncktleV0ubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkQWdnclthZ2dyS2V5XVtpbmRleF07XG4gICAgICAgIGlmIChlbGVtZW50ID09IGJ1Y2tldC5rZXkpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnNlbGVjdGVkQWdnciwgYWdncktleSwgYnVja2V0KTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHRoaXMuc2VsZWN0ZWRBZ2dyW2FnZ3JLZXldLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgLy8gICBpZiAoa2V5ID09IGJ1Y2tldC5rZXkpIHtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZyh0aGlzLnNlbGVjdGVkQWdnciwgYWdncktleSwgYnVja2V0KTtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXG4gICAgICAvLyAgICAgcmV0dXJuIHRydWU7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0pO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZyhcIkZBTFNFXCIpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc2VsZWN0aW9uQ2hhbmdlKGFnZ3JLZXksIGJ1Y2tldDogQWdnckJ1Y2tldCkge1xuICAgIGlmICghdGhpcy5zZWxlY3RlZEFnZ3IuaGFzT3duUHJvcGVydHkoYWdncktleSkpe1xuICAgICAgdGhpcy5zZWxlY3RlZEFnZ3JbYWdncktleV0gPSBbXTtcbiAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkQWdnclthZ2dyS2V5XS5maW5kKGsgPT4gayA9PSBidWNrZXQua2V5KSl7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBZ2dyW2FnZ3JLZXldID0gdGhpcy5zZWxlY3RlZEFnZ3JbYWdncktleV0uZmlsdGVyKGsgPT4gayAhPSBidWNrZXQua2V5KTtcbiAgICAgIH0gZWxzZXtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFnZ3JbYWdncktleV0ucHVzaChidWNrZXQua2V5KVxuICAgICAgfVxuXG5cbiAgICB0aGlzLmtleVNlbGVjdC5lbWl0KHRoaXMuc2VsZWN0ZWRBZ2dyKTtcbiAgfVxufVxuIl19