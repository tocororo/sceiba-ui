/**
 * @fileoverview added by tsickle
 * Generated from: lib/search/query-input/query-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
/**
 * Represents a component used to search a query.
 *
 * In order to use this component with the correct i18n, you must include
 * (in your i18n translate files that are in the folder `assets\i18n`)
 * a translation key of name "TOCO_SEARCH_QUERY_INPUT" that contains
 * an object as value with the translation needed by this component.
 *
 * In the case of `es.json` file, you must include the following translation key:
 * "TOCO_SEARCH_QUERY_INPUT": {
 * "INPUT_SEARCH_LABEL": "Buscar",
 * "INPUT_SEARCH_PLACEHOLDER": "Escriba un criterio y presione Enter",
 * "BUTTON_SEARCH": "Buscar"
 * }
 *
 * In the case of `en.json` file, you must include the following translation key:
 * "TOCO_SEARCH_QUERY_INPUT": {
 * "INPUT_SEARCH_LABEL": "Search",
 * "INPUT_SEARCH_PLACEHOLDER": "Write a phrase and press Enter",
 * "BUTTON_SEARCH": "Search"
 * }
 *
 * If you have another language, then you have another `*.json` file,
 * and you must include the "TOCO_SEARCH_QUERY_INPUT" translation key with the correct translation values.
 */
var QueryInputComponent = /** @class */ (function () {
    function QueryInputComponent() {
        this.query = "";
        this.minWordCount = 3;
        this.appearance = 'outline';
        this.inputColor = '';
        this.buttonColor = 'primary';
        this.showButton = true;
        this.width = 100;
        this.queryChange = new EventEmitter();
        this.queryCtrl = new FormControl();
    }
    /**
     * @return {?}
     */
    QueryInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.queryCtrl.valueChanges
        // .subscribe({
        //   next: (queryValueChanges) => {
        //     // this condition check if the param is a `string` an if at least write 3 letters
        //     if (typeof queryValueChanges === 'string' && (queryValueChanges.length >= this.minWordCount)) {
        //       this.queryChange.emit(queryValueChanges);
        //     }
        //   }
        // })
    };
    /**
     * @return {?}
     */
    QueryInputComponent.prototype.riseQuery = /**
     * @return {?}
     */
    function () {
        this.queryChange.emit(this.queryCtrl.value ? this.queryCtrl.value : '');
    };
    QueryInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toco-search-query-input',
                    template: "<div fxLayout=\"row\" [ngStyle]=\"{'align-items': 'center', 'width.%': width }\">\n    \n    <mat-form-field *ngIf=\"appearance == 'outline';else templateMatFormField\" appearance=\"{{appearance}}\" [color]=\"inputColor\" class=\"query-input\" [ngStyle]=\"{'width.%': 100 }\">\n        <mat-label>{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_LABEL' | translate }}</mat-label>\n        <input matInput placeholder=\"{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_PLACEHOLDER' | translate }}\" type=\"search\" [value]=\"query\" [formControl]=\"queryCtrl\" (keyup.enter)= \"riseQuery()\">\n    </mat-form-field>\n    \n    <ng-template #templateMatFormField>\n        <mat-form-field [ngStyle]=\"{'width.%': width }\">\n            <mat-label>{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_LABEL' | translate }}</mat-label>\n            <input matInput placeholder=\"{{ 'TOCO_SEARCH_QUERY_INPUT.INPUT_SEARCH_PLACEHOLDER' | translate }}\" type=\"search\" [value]=\"query\" [formControl]=\"queryCtrl\" (keyup.enter)= \"riseQuery()\">\n        </mat-form-field>\n    </ng-template>\n    \n    <button mat-raised-button *ngIf=\"showButton && appearance == 'outline'\" (click)=\"riseQuery()\" color=\"{{buttonColor}}\" [ngStyle]=\"{'height': '59.5px', 'margin-left': '1em'}\">{{ 'TOCO_SEARCH_QUERY_INPUT.BUTTON_SEARCH' | translate }}</button>\n    <button mat-raised-button *ngIf=\"showButton && appearance != 'outline'\" (click)=\"riseQuery()\" color=\"{{buttonColor}}\" [ngStyle]=\"{'margin-left': '1em'}\">{{ 'TOCO_SEARCH_QUERY_INPUT.BUTTON_SEARCH' | translate }}</button>\n\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    QueryInputComponent.ctorParameters = function () { return []; };
    QueryInputComponent.propDecorators = {
        query: [{ type: Input }],
        minWordCount: [{ type: Input }],
        appearance: [{ type: Input }],
        inputColor: [{ type: Input }],
        buttonColor: [{ type: Input }],
        showButton: [{ type: Input }],
        width: [{ type: Input }],
        queryChange: [{ type: Output }]
    };
    return QueryInputComponent;
}());
export { QueryInputComponent };
if (false) {
    /** @type {?} */
    QueryInputComponent.prototype.query;
    /** @type {?} */
    QueryInputComponent.prototype.minWordCount;
    /** @type {?} */
    QueryInputComponent.prototype.appearance;
    /** @type {?} */
    QueryInputComponent.prototype.inputColor;
    /** @type {?} */
    QueryInputComponent.prototype.buttonColor;
    /** @type {?} */
    QueryInputComponent.prototype.showButton;
    /** @type {?} */
    QueryInputComponent.prototype.width;
    /** @type {?} */
    QueryInputComponent.prototype.queryChange;
    /** @type {?} */
    QueryInputComponent.prototype.queryCtrl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9jby1saWIvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoL3F1ZXJ5LWlucHV0L3F1ZXJ5LWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCN0M7SUFpQ0U7UUF6QkEsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUduQixpQkFBWSxHQUFXLENBQUMsQ0FBQztRQUd6QixlQUFVLEdBQVcsU0FBUyxDQUFDO1FBRy9CLGVBQVUsR0FBVyxFQUFFLENBQUM7UUFHeEIsZ0JBQVcsR0FBVyxTQUFTLENBQUM7UUFHaEMsZUFBVSxHQUFHLElBQUksQ0FBQztRQUdsQixVQUFLLEdBQVcsR0FBRyxDQUFDO1FBR3BCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV6QyxjQUFTLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQUVkLENBQUM7Ozs7SUFFakIsc0NBQVE7OztJQUFSO1FBQ0UsOEJBQThCO1FBQzlCLGVBQWU7UUFDZixtQ0FBbUM7UUFDbkMsd0ZBQXdGO1FBQ3hGLHNHQUFzRztRQUN0RyxrREFBa0Q7UUFDbEQsUUFBUTtRQUNSLE1BQU07UUFDTixLQUFLO0lBQ1AsQ0FBQzs7OztJQUVELHVDQUFTOzs7SUFBVDtRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7Z0JBakRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyx1aURBQTJDOztpQkFFNUM7Ozs7O3dCQUdFLEtBQUs7K0JBR0wsS0FBSzs2QkFHTCxLQUFLOzZCQUdMLEtBQUs7OEJBR0wsS0FBSzs2QkFHTCxLQUFLO3dCQUdMLEtBQUs7OEJBR0wsTUFBTTs7SUFzQlQsMEJBQUM7Q0FBQSxBQWxERCxJQWtEQztTQTdDWSxtQkFBbUI7OztJQUU5QixvQ0FDbUI7O0lBRW5CLDJDQUN5Qjs7SUFFekIseUNBQytCOztJQUUvQix5Q0FDd0I7O0lBRXhCLDBDQUNnQzs7SUFFaEMseUNBQ2tCOztJQUVsQixvQ0FDb0I7O0lBRXBCLDBDQUN5Qzs7SUFFekMsd0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29tcG9uZW50IHVzZWQgdG8gc2VhcmNoIGEgcXVlcnkuIFxuICogXG4gKiBJbiBvcmRlciB0byB1c2UgdGhpcyBjb21wb25lbnQgd2l0aCB0aGUgY29ycmVjdCBpMThuLCB5b3UgbXVzdCBpbmNsdWRlIFxuICogKGluIHlvdXIgaTE4biB0cmFuc2xhdGUgZmlsZXMgdGhhdCBhcmUgaW4gdGhlIGZvbGRlciBgYXNzZXRzXFxpMThuYCkgXG4gKiBhIHRyYW5zbGF0aW9uIGtleSBvZiBuYW1lIFwiVE9DT19TRUFSQ0hfUVVFUllfSU5QVVRcIiB0aGF0IGNvbnRhaW5zIFxuICogYW4gb2JqZWN0IGFzIHZhbHVlIHdpdGggdGhlIHRyYW5zbGF0aW9uIG5lZWRlZCBieSB0aGlzIGNvbXBvbmVudC4gXG4gKiBcbiAqIEluIHRoZSBjYXNlIG9mIGBlcy5qc29uYCBmaWxlLCB5b3UgbXVzdCBpbmNsdWRlIHRoZSBmb2xsb3dpbmcgdHJhbnNsYXRpb24ga2V5OiBcbiAgICBcIlRPQ09fU0VBUkNIX1FVRVJZX0lOUFVUXCI6IHtcbiAgICAgICAgXCJJTlBVVF9TRUFSQ0hfTEFCRUxcIjogXCJCdXNjYXJcIixcbiAgICAgICAgXCJJTlBVVF9TRUFSQ0hfUExBQ0VIT0xERVJcIjogXCJFc2NyaWJhIHVuIGNyaXRlcmlvIHkgcHJlc2lvbmUgRW50ZXJcIixcbiAgICAgICAgXCJCVVRUT05fU0VBUkNIXCI6IFwiQnVzY2FyXCJcbiAgICB9XG4gKiBcbiAqIEluIHRoZSBjYXNlIG9mIGBlbi5qc29uYCBmaWxlLCB5b3UgbXVzdCBpbmNsdWRlIHRoZSBmb2xsb3dpbmcgdHJhbnNsYXRpb24ga2V5OiBcbiAgICBcIlRPQ09fU0VBUkNIX1FVRVJZX0lOUFVUXCI6IHtcbiAgICAgICAgXCJJTlBVVF9TRUFSQ0hfTEFCRUxcIjogXCJTZWFyY2hcIixcbiAgICAgICAgXCJJTlBVVF9TRUFSQ0hfUExBQ0VIT0xERVJcIjogXCJXcml0ZSBhIHBocmFzZSBhbmQgcHJlc3MgRW50ZXJcIixcbiAgICAgICAgXCJCVVRUT05fU0VBUkNIXCI6IFwiU2VhcmNoXCJcbiAgICB9XG4gKiBcbiAqIElmIHlvdSBoYXZlIGFub3RoZXIgbGFuZ3VhZ2UsIHRoZW4geW91IGhhdmUgYW5vdGhlciBgKi5qc29uYCBmaWxlLCBcbiAqIGFuZCB5b3UgbXVzdCBpbmNsdWRlIHRoZSBcIlRPQ09fU0VBUkNIX1FVRVJZX0lOUFVUXCIgdHJhbnNsYXRpb24ga2V5IHdpdGggdGhlIGNvcnJlY3QgdHJhbnNsYXRpb24gdmFsdWVzLiBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndG9jby1zZWFyY2gtcXVlcnktaW5wdXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vcXVlcnktaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9xdWVyeS1pbnB1dC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFF1ZXJ5SW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpXG4gIHF1ZXJ5OiBzdHJpbmcgPSBcIlwiO1xuXG4gIEBJbnB1dCgpXG4gIG1pbldvcmRDb3VudDogbnVtYmVyID0gMztcblxuICBASW5wdXQoKVxuICBhcHBlYXJhbmNlOiBzdHJpbmcgPSAnb3V0bGluZSc7XG5cbiAgQElucHV0KClcbiAgaW5wdXRDb2xvcjogc3RyaW5nID0gJyc7XG5cbiAgQElucHV0KClcbiAgYnV0dG9uQ29sb3I6IHN0cmluZyA9ICdwcmltYXJ5JztcblxuICBASW5wdXQoKVxuICBzaG93QnV0dG9uID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICB3aWR0aDogbnVtYmVyID0gMTAwO1xuXG4gIEBPdXRwdXQoKVxuICBxdWVyeUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIHF1ZXJ5Q3RybCA9IG5ldyBGb3JtQ29udHJvbCgpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gdGhpcy5xdWVyeUN0cmwudmFsdWVDaGFuZ2VzXG4gICAgLy8gLnN1YnNjcmliZSh7XG4gICAgLy8gICBuZXh0OiAocXVlcnlWYWx1ZUNoYW5nZXMpID0+IHtcbiAgICAvLyAgICAgLy8gdGhpcyBjb25kaXRpb24gY2hlY2sgaWYgdGhlIHBhcmFtIGlzIGEgYHN0cmluZ2AgYW4gaWYgYXQgbGVhc3Qgd3JpdGUgMyBsZXR0ZXJzXG4gICAgLy8gICAgIGlmICh0eXBlb2YgcXVlcnlWYWx1ZUNoYW5nZXMgPT09ICdzdHJpbmcnICYmIChxdWVyeVZhbHVlQ2hhbmdlcy5sZW5ndGggPj0gdGhpcy5taW5Xb3JkQ291bnQpKSB7XG4gICAgLy8gICAgICAgdGhpcy5xdWVyeUNoYW5nZS5lbWl0KHF1ZXJ5VmFsdWVDaGFuZ2VzKTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vIH0pXG4gIH1cblxuICByaXNlUXVlcnkoKXtcbiAgICB0aGlzLnF1ZXJ5Q2hhbmdlLmVtaXQodGhpcy5xdWVyeUN0cmwudmFsdWUgPyB0aGlzLnF1ZXJ5Q3RybC52YWx1ZSA6ICcnKTtcbiAgfVxufVxuIl19