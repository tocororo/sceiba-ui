import { ChangeDetectionStrategy, Component } from '@angular/core';
import { merge, of, Subject, timer } from 'rxjs';
import { distinctUntilChanged, map, mapTo, shareReplay, startWith, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const BUTTON_TEXT_COPY = 'Copy';
const BUTTON_TEXT_COPIED = 'Copied';
class ClipboardButtonComponent {
    constructor() {
        this._buttonClick$ = new Subject();
        this.copied$ = this._buttonClick$.pipe(switchMap(() => merge(of(true), timer(3000).pipe(mapTo(false)))), distinctUntilChanged(), shareReplay(1));
        this.copiedText$ = this.copied$.pipe(startWith(false), map(copied => copied
            ? BUTTON_TEXT_COPIED
            : BUTTON_TEXT_COPY));
    }
    onCopyToClipboardClick() {
        this._buttonClick$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ClipboardButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: ClipboardButtonComponent, selector: "markdown-clipboard", ngImport: i0, template: `
    <button
      class="markdown-clipboard-button"
      [class.copied]="copied$ | async"
      (click)="onCopyToClipboardClick()"
    >{{ copiedText$ | async }}</button>
  `, isInline: true, dependencies: [{ kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { ClipboardButtonComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ClipboardButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'markdown-clipboard',
                    template: `
    <button
      class="markdown-clipboard-button"
      [class.copied]="copied$ | async"
      (click)="onCopyToClipboardClick()"
    >{{ copiedText$ | async }}</button>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvc3JjL2NsaXBib2FyZC1idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFFckcsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7QUFDaEMsTUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUM7QUFFcEMsTUFXYSx3QkFBd0I7SUFYckM7UUFhVSxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFFbkMsWUFBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUN4QyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUNuQixFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ1IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDL0IsQ0FBQyxFQUNGLG9CQUFvQixFQUFFLEVBQ3RCLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO1FBRU8sZ0JBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDdEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUNoQixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNO1lBQ2xCLENBQUMsQ0FBQyxrQkFBa0I7WUFDcEIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQ3RCLENBQUM7S0FLSDtJQUhDLHNCQUFzQjtRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBdEJVLHdCQUF3QjtrR0FBeEIsd0JBQXdCLDBEQVR6Qjs7Ozs7O0dBTVQ7O1NBR1Usd0JBQXdCOzJGQUF4Qix3QkFBd0I7a0JBWHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFOzs7Ozs7R0FNVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG1lcmdlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgbWFwVG8sIHNoYXJlUmVwbGF5LCBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmNvbnN0IEJVVFRPTl9URVhUX0NPUFkgPSAnQ29weSc7XHJcbmNvbnN0IEJVVFRPTl9URVhUX0NPUElFRCA9ICdDb3BpZWQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtYXJrZG93bi1jbGlwYm9hcmQnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8YnV0dG9uXHJcbiAgICAgIGNsYXNzPVwibWFya2Rvd24tY2xpcGJvYXJkLWJ1dHRvblwiXHJcbiAgICAgIFtjbGFzcy5jb3BpZWRdPVwiY29waWVkJCB8IGFzeW5jXCJcclxuICAgICAgKGNsaWNrKT1cIm9uQ29weVRvQ2xpcGJvYXJkQ2xpY2soKVwiXHJcbiAgICA+e3sgY29waWVkVGV4dCQgfCBhc3luYyB9fTwvYnV0dG9uPlxyXG4gIGAsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDbGlwYm9hcmRCdXR0b25Db21wb25lbnQge1xyXG5cclxuICBwcml2YXRlIF9idXR0b25DbGljayQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG5cclxuICByZWFkb25seSBjb3BpZWQkID0gdGhpcy5fYnV0dG9uQ2xpY2skLnBpcGUoXHJcbiAgICBzd2l0Y2hNYXAoKCkgPT4gbWVyZ2UoXHJcbiAgICAgIG9mKHRydWUpLFxyXG4gICAgICB0aW1lcigzMDAwKS5waXBlKG1hcFRvKGZhbHNlKSksXHJcbiAgICApKSxcclxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXHJcbiAgICBzaGFyZVJlcGxheSgxKSxcclxuICApO1xyXG5cclxuICByZWFkb25seSBjb3BpZWRUZXh0JCA9IHRoaXMuY29waWVkJC5waXBlKFxyXG4gICAgc3RhcnRXaXRoKGZhbHNlKSxcclxuICAgIG1hcChjb3BpZWQgPT4gY29waWVkXHJcbiAgICAgID8gQlVUVE9OX1RFWFRfQ09QSUVEXHJcbiAgICAgIDogQlVUVE9OX1RFWFRfQ09QWSksXHJcbiAgKTtcclxuXHJcbiAgb25Db3B5VG9DbGlwYm9hcmRDbGljaygpOiB2b2lkIHtcclxuICAgIHRoaXMuX2J1dHRvbkNsaWNrJC5uZXh0KCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==