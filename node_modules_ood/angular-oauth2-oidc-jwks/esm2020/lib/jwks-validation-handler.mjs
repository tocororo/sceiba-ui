import * as rs from 'jsrsasign';
import { AbstractValidationHandler, } from 'angular-oauth2-oidc';
/**
 * Validates the signature of an id_token against one
 * of the keys of an JSON Web Key Set (jwks).
 *
 * This jwks can be provided by the discovery document.
 */
export class JwksValidationHandler extends AbstractValidationHandler {
    constructor() {
        super(...arguments);
        /**
         * Allowed algorithms
         */
        this.allowedAlgorithms = [
            'HS256',
            'HS384',
            'HS512',
            'RS256',
            'RS384',
            'RS512',
            'ES256',
            'ES384',
            'PS256',
            'PS384',
            'PS512',
        ];
        /**
         * Time period in seconds the timestamp in the signature can
         * differ from the current time.
         */
        this.gracePeriodInSec = 600;
    }
    validateSignature(params, retry = false) {
        if (!params.idToken)
            throw new Error('Parameter idToken expected!');
        if (!params.idTokenHeader)
            throw new Error('Parameter idTokenHandler expected.');
        if (!params.jwks)
            throw new Error('Parameter jwks expected!');
        if (!params.jwks['keys'] ||
            !Array.isArray(params.jwks['keys']) ||
            params.jwks['keys'].length === 0) {
            throw new Error('Array keys in jwks missing!');
        }
        // console.debug('validateSignature: retry', retry);
        let kid = params.idTokenHeader['kid'];
        let keys = params.jwks['keys'];
        let key;
        let alg = params.idTokenHeader['alg'];
        if (kid) {
            key = keys.find((k) => k['kid'] === kid /* && k['use'] === 'sig' */);
        }
        else {
            let kty = this.alg2kty(alg);
            let matchingKeys = keys.filter((k) => k['kty'] === kty && k['use'] === 'sig');
            /*
                  if (matchingKeys.length == 0) {
                      let error = 'No matching key found.';
                      console.error(error);
                      return Promise.reject(error);
                  }*/
            if (matchingKeys.length > 1) {
                let error = 'More than one matching key found. Please specify a kid in the id_token header.';
                console.error(error);
                return Promise.reject(error);
            }
            else if (matchingKeys.length === 1) {
                key = matchingKeys[0];
            }
        }
        if (!key && !retry && params.loadKeys) {
            return params
                .loadKeys()
                .then((loadedKeys) => (params.jwks = loadedKeys))
                .then((_) => this.validateSignature(params, true));
        }
        if (!key && retry && !kid) {
            let error = 'No matching key found.';
            console.error(error);
            return Promise.reject(error);
        }
        if (!key && retry && kid) {
            let error = 'expected key not found in property jwks. ' +
                'This property is most likely loaded with the ' +
                'discovery document. ' +
                'Expected key id (kid): ' +
                kid;
            console.error(error);
            return Promise.reject(error);
        }
        let keyObj = rs.KEYUTIL.getKey(key);
        let validationOptions = {
            alg: this.allowedAlgorithms,
            gracePeriod: this.gracePeriodInSec,
        };
        let isValid = rs.KJUR.jws.JWS.verifyJWT(params.idToken, keyObj, validationOptions);
        if (isValid) {
            return Promise.resolve();
        }
        else {
            return Promise.reject('Signature not valid');
        }
    }
    alg2kty(alg) {
        switch (alg.charAt(0)) {
            case 'R':
                return 'RSA';
            case 'E':
                return 'EC';
            default:
                throw new Error('Cannot infer kty from alg: ' + alg);
        }
    }
    calcHash(valueToHash, algorithm) {
        let hashAlg = new rs.KJUR.crypto.MessageDigest({ alg: algorithm });
        let result = hashAlg.digestString(valueToHash);
        let byteArrayAsString = this.toByteArrayAsString(result);
        return Promise.resolve(byteArrayAsString);
    }
    toByteArrayAsString(hexString) {
        let result = '';
        for (let i = 0; i < hexString.length; i += 2) {
            let hexDigit = hexString.charAt(i) + hexString.charAt(i + 1);
            let num = parseInt(hexDigit, 16);
            result += String.fromCharCode(num);
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiandrcy12YWxpZGF0aW9uLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLW9hdXRoMi1vaWRjLWp3a3Mvc3JjL2xpYi9qd2tzLXZhbGlkYXRpb24taGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQ0wseUJBQXlCLEdBRTFCLE1BQU0scUJBQXFCLENBQUM7QUFFN0I7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8scUJBQXNCLFNBQVEseUJBQXlCO0lBQXBFOztRQUNFOztXQUVHO1FBQ0gsc0JBQWlCLEdBQWE7WUFDNUIsT0FBTztZQUNQLE9BQU87WUFDUCxPQUFPO1lBQ1AsT0FBTztZQUNQLE9BQU87WUFDUCxPQUFPO1lBQ1AsT0FBTztZQUNQLE9BQU87WUFDUCxPQUFPO1lBQ1AsT0FBTztZQUNQLE9BQU87U0FDUixDQUFDO1FBRUY7OztXQUdHO1FBQ0gscUJBQWdCLEdBQUcsR0FBRyxDQUFDO0lBc0h6QixDQUFDO0lBcEhDLGlCQUFpQixDQUFDLE1BQXdCLEVBQUUsS0FBSyxHQUFHLEtBQUs7UUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYTtZQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRTlELElBQ0UsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNwQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNu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Q0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0QsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqQyxNQUFNLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJzIGZyb20gJ2pzcnNhc2lnbic7XG5pbXBvcnQge1xuICBBYnN0cmFjdFZhbGlkYXRpb25IYW5kbGVyLFxuICBWYWxpZGF0aW9uUGFyYW1zLFxufSBmcm9tICdhbmd1bGFyLW9hdXRoMi1vaWRjJztcblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhlIHNpZ25hdHVyZSBvZiBhbiBpZF90b2tlbiBhZ2FpbnN0IG9uZVxuICogb2YgdGhlIGtleXMgb2YgYW4gSlNPTiBXZWIgS2V5IFNldCAoandrcykuXG4gKlxuICogVGhpcyBqd2tzIGNhbiBiZSBwcm92aWRlZCBieSB0aGUgZGlzY292ZXJ5IGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgSndrc1ZhbGlkYXRpb25IYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RWYWxpZGF0aW9uSGFuZGxlciB7XG4gIC8qKlxuICAgKiBBbGxvd2VkIGFsZ29yaXRobXNcbiAgICovXG4gIGFsbG93ZWRBbGdvcml0aG1zOiBzdHJpbmdbXSA9IFtcbiAgICAnSFMyNTYnLFxuICAgICdIUzM4NCcsXG4gICAgJ0hTNTEyJyxcbiAgICAnUlMyNTYnLFxuICAgICdSUzM4NCcsXG4gICAgJ1JTNTEyJyxcbiAgICAnRVMyNTYnLFxuICAgICdFUzM4NCcsXG4gICAgJ1BTMjU2JyxcbiAgICAnUFMzODQnLFxuICAgICdQUzUxMicsXG4gIF07XG5cbiAgLyoqXG4gICAqIFRpbWUgcGVyaW9kIGluIHNlY29uZHMgdGhlIHRpbWVzdGFtcCBpbiB0aGUgc2lnbmF0dXJlIGNhblxuICAgKiBkaWZmZXIgZnJvbSB0aGUgY3VycmVudCB0aW1lLlxuICAgKi9cbiAgZ3JhY2VQZXJpb2RJblNlYyA9IDYwMDtcblxuICB2YWxpZGF0ZVNpZ25hdHVyZShwYXJhbXM6IFZhbGlkYXRpb25QYXJhbXMsIHJldHJ5ID0gZmFsc2UpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghcGFyYW1zLmlkVG9rZW4pIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIGlkVG9rZW4gZXhwZWN0ZWQhJyk7XG4gICAgaWYgKCFwYXJhbXMuaWRUb2tlbkhlYWRlcilcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIGlkVG9rZW5IYW5kbGVyIGV4cGVjdGVkLicpO1xuICAgIGlmICghcGFyYW1zLmp3a3MpIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIGp3a3MgZXhwZWN0ZWQhJyk7XG5cbiAgICBpZiAoXG4gICAgICAhcGFyYW1zLmp3a3NbJ2tleXMnXSB8fFxuICAgICAgIUFycmF5LmlzQXJyYXkocGFyYW1zLmp3a3NbJ2tleXMnXSkgfHxcbiAgICAgIHBhcmFtcy5qd2tzWydrZXlzJ10ubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FycmF5IGtleXMgaW4gandrcyBtaXNzaW5nIScpO1xuICAgIH1cblxuICAgIC8vIGNvbnNvbGUuZGVidWcoJ3ZhbGlkYXRlU2lnbmF0dXJlOiByZXRyeScsIHJldHJ5KTtcblxuICAgIGxldCBraWQ6IHN0cmluZyA9IHBhcmFtcy5pZFRva2VuSGVhZGVyWydraWQnXTtcbiAgICBsZXQga2V5czogb2JqZWN0W10gPSBwYXJhbXMuandrc1sna2V5cyddO1xuICAgIGxldCBrZXk6IG9iamVjdDtcblxuICAgIGxldCBhbGcgPSBwYXJhbXMuaWRUb2tlbkhlYWRlclsnYWxnJ107XG5cbiAgICBpZiAoa2lkKSB7XG4gICAgICBrZXkgPSBrZXlzLmZpbmQoKGspID0+IGtbJ2tpZCddID09PSBraWQgLyogJiYga1sndXNlJ10gPT09ICdzaWcnICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGt0eSA9IHRoaXMuYWxnMmt0eShhbGcpO1xuICAgICAgbGV0IG1hdGNoaW5nS2V5cyA9IGtleXMuZmlsdGVyKFxuICAgICAgICAoaykgPT4ga1sna3R5J10gPT09IGt0eSAmJiBrWyd1c2UnXSA9PT0gJ3NpZydcbiAgICAgICk7XG5cbiAgICAgIC8qXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdLZXlzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9yID0gJ05vIG1hdGNoaW5nIGtleSBmb3VuZC4nO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9Ki9cbiAgICAgIGlmIChtYXRjaGluZ0tleXMubGVuZ3RoID4gMSkge1xuICAgICAgICBsZXQgZXJyb3IgPVxuICAgICAgICAgICdNb3JlIHRoYW4gb25lIG1hdGNoaW5nIGtleSBmb3VuZC4gUGxlYXNlIHNwZWNpZnkgYSBraWQgaW4gdGhlIGlkX3Rva2VuIGhlYWRlci4nO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2hpbmdLZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBrZXkgPSBtYXRjaGluZ0tleXNbMF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFrZXkgJiYgIXJldHJ5ICYmIHBhcmFtcy5sb2FkS2V5cykge1xuICAgICAgcmV0dXJuIHBhcmFtc1xuICAgICAgICAubG9hZEtleXMoKVxuICAgICAgICAudGhlbigobG9hZGVkS2V5cykgPT4gKHBhcmFtcy5qd2tzID0gbG9hZGVkS2V5cykpXG4gICAgICAgIC50aGVuKChfKSA9PiB0aGlzLnZhbGlkYXRlU2lnbmF0dXJlKHBhcmFtcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGlmICgha2V5ICYmIHJldHJ5ICYmICFraWQpIHtcbiAgICAgIGxldCBlcnJvciA9ICdObyBtYXRjaGluZyBrZXkgZm91bmQuJztcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpZiAoIWtleSAmJiByZXRyeSAmJiBraWQpIHtcbiAgICAgIGxldCBlcnJvciA9XG4gICAgICAgICdleHBlY3RlZCBrZXkgbm90IGZvdW5kIGluIHByb3BlcnR5IGp3a3MuICcgK1xuICAgICAgICAnVGhpcyBwcm9wZXJ0eSBpcyBtb3N0IGxpa2VseSBsb2FkZWQgd2l0aCB0aGUgJyArXG4gICAgICAgICdkaXNjb3ZlcnkgZG9jdW1lbnQuICcgK1xuICAgICAgICAnRXhwZWN0ZWQga2V5IGlkIChraWQpOiAnICtcbiAgICAgICAga2lkO1xuXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgbGV0IGtleU9iaiA9IHJzLktFWVVUSUwuZ2V0S2V5KGtleSk7XG4gICAgbGV0IHZhbGlkYXRpb25PcHRpb25zID0ge1xuICAgICAgYWxnOiB0aGlzLmFsbG93ZWRBbGdvcml0aG1zLFxuICAgICAgZ3JhY2VQZXJpb2Q6IHRoaXMuZ3JhY2VQZXJpb2RJblNlYyxcbiAgICB9O1xuICAgIGxldCBpc1ZhbGlkID0gcnMuS0pVUi5qd3MuSldTLnZlcmlmeUpXVChcbiAgICAgIHBhcmFtcy5pZFRva2VuLFxuICAgICAga2V5T2JqLFxuICAgICAgdmFsaWRhdGlvbk9wdGlvbnNcbiAgICApO1xuXG4gICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdTaWduYXR1cmUgbm90IHZhbGlkJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhbGcya3R5KGFsZzogc3RyaW5nKSB7XG4gICAgc3dpdGNoIChhbGcuY2hhckF0KDApKSB7XG4gICAgICBjYXNlICdSJzpcbiAgICAgICAgcmV0dXJuICdSU0EnO1xuICAgICAgY2FzZSAnRSc6XG4gICAgICAgIHJldHVybiAnRUMnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaW5mZXIga3R5IGZyb20gYWxnOiAnICsgYWxnKTtcbiAgICB9XG4gIH1cblxuICBjYWxjSGFzaCh2YWx1ZVRvSGFzaDogc3RyaW5nLCBhbGdvcml0aG06IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgbGV0IGhhc2hBbGcgPSBuZXcgcnMuS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7IGFsZzogYWxnb3JpdGhtIH0pO1xuICAgIGxldCByZXN1bHQgPSBoYXNoQWxnLmRpZ2VzdFN0cmluZyh2YWx1ZVRvSGFzaCk7XG4gICAgbGV0IGJ5dGVBcnJheUFzU3RyaW5nID0gdGhpcy50b0J5dGVBcnJheUFzU3RyaW5nKHJlc3VsdCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShieXRlQXJyYXlBc1N0cmluZyk7XG4gIH1cblxuICB0b0J5dGVBcnJheUFzU3RyaW5nKGhleFN0cmluZzogc3RyaW5nKSB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4U3RyaW5nLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBsZXQgaGV4RGlnaXQgPSBoZXhTdHJpbmcuY2hhckF0KGkpICsgaGV4U3RyaW5nLmNoYXJBdChpICsgMSk7XG4gICAgICBsZXQgbnVtID0gcGFyc2VJbnQoaGV4RGlnaXQsIDE2KTtcbiAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG51bSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==